{
  "tutorial/mapping/static/property/sql_expr.html": {
    "href": "tutorial/mapping/static/property/sql_expr.html",
    "title": "SQL expression property | XData website",
    "keywords": "SQL expression property Readonly property can be mapped to SQL expression. Static mapping of SQL expression is defined by PropertyExpressionAttribute with parameters: ExprText - depends of ExprType value (see below) it can be: subquery alias / SQL expression / private static field name define SQL expression in LINQ style, ExprType - optional, SQL expression type , default is DataExpressionType . PlainSql , DbType - ADO ,Net provider data type (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). Possible to use SQL expressions of three types: subquery, [PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] LINQ expression, [PropertyExpression(\"AllowedDiscount\", DataExpressionType.LinqExpression, DbType.Decimal, ExprSize = 17, ExprScale = 5)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)); plain text SQL expression. [PropertyExpression(\"case P.is_vip when 1 then 10 else 0 end\", DataExpressionType.PlainSql, DbType.Decimal, ExprSize = 17, ExprScale = 5)] Tip Attribute PropertyExpressionAttribute is not replaced PropertyAttribute but extend it. Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Tip It's recomended to use virtual table as SQL expression source omiting data source alias in PropertyAttribute ."
  },
  "tutorial/mapping/static/property/reference.html": {
    "href": "tutorial/mapping/static/property/reference.html",
    "title": "Inner view reference | XData website",
    "keywords": "Inner view reference To map property to field from inner view a ReferenceAttribute is used with parameters: Source - inner view alias, PropertyName - optional, DB field name (may be omited when property name is equals with inner view mapped class property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Reference(\"H\" /* inner view alias */, \"HistoryDate\" /* property name inside inner view */)]"
  },
  "tutorial/mapping/static/property/property.html": {
    "href": "tutorial/mapping/static/property/property.html",
    "title": "Properties | XData website",
    "keywords": "Properties Static mapping is performed as each property with specific attributes mark. Main attribute to statically map property is PropertyAttribute with parameters: Source - data source alias (may be omited for virtual table ), FieldName - DB field name mapped to property (may be omited when field and property correspond naming rule, for example DB field named as some_field_name and mapped to SomeFieldName property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Property(\"S\" /* table alias */, \"code\" /* field name */)] SQL expression property Readonly property can be mapped to SQL expression. Static mapping of SQL expression is defined by PropertyExpressionAttribute with parameters: ExprText - depends of ExprType value (see below) it can be: subquery alias / SQL expression / private static field name define SQL expression in LINQ style, ExprType - optional, SQL expression type , default is DataExpressionType . PlainSql , DbType - ADO ,Net provider data type (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). Possible to use SQL expressions of three types: subquery, [PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] LINQ expression, [PropertyExpression(\"AllowedDiscount\", DataExpressionType.LinqExpression, DbType.Decimal, ExprSize = 17, ExprScale = 5)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)); plain text SQL expression. [PropertyExpression(\"case P.is_vip when 1 then 10 else 0 end\", DataExpressionType.PlainSql, DbType.Decimal, ExprSize = 17, ExprScale = 5)] Tip Attribute PropertyExpressionAttribute is not replaced PropertyAttribute but extend it. Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Tip It's recomended to use virtual table as SQL expression source omiting data source alias in PropertyAttribute . Property default value To set default value of property with static mapping, use PropertyDefaultAttribute with parameters: DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , DefaultFeature - optional, default is DefaultFeature.UseOnInsert , default value assignment will be applied with some extended features . [PropertyDefault(DefaultType.UserName, AlwaysUseDefault = true)] Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. PropertyGroupingAttribute has properties: Grouping - optional, property aggregation type , default is None , GroupOrder - optional, property grouping order when Grouping = DataGrouping . None . [PropertyGrouping(DataGrouping.Sum)] Hidden properties Hidden properties statically defined using couple of specific attributes: ColumnAttribute , ColumnExpressionAttribute and ColumnDefaultAttribute as analog with similar attributes of properties . ColumnAttribute has parameters: PropertyName - name of hidden property, PropertyType - type of hidden property, Source - data source alias, FieldName - optional, DB field name (can be omited when correspond default mapping rule (exampple: some_field_name is mapped to SomeFieldName )), Flags - optional, bitmask of property flags , Grouping - optional, defined aggreagation type , default is None , GroupOrder - optional, group order when Grouping = DataGrouping . None , Hidden - optional, mapped field omited in SELECT expression of result query (when grouping limitations demand this), default is false , NativeSqlType - optional, native SQL type name. NativeSqlType is used when default datatype mapping is conflicted with resultset data type. ColumnExpressionAttribute has parameters: PropertyName - name of hidden property (same as defined by ColumnAttribute ), ExprText - depends on ExprType (see below): subquery alias / SQL expression text / field name with LINQ style expression definition, ExprType - optional, SQL expression type default is DataExpressionType . PlainSql , DbType - data type on ADO .Net provider level (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). ColumnDefaultAttribute has parameters: PropertyName - hidden property name (same as defined by ColumnAttribute ), DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , DefaultFeature - optional, default is DefaultFeature.UseOnInsert , default value assignment will be applied with some extended features . [Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)] Inner view reference To map property to field from inner view a ReferenceAttribute is used with parameters: Source - inner view alias, PropertyName - optional, DB field name (may be omited when property name is equals with inner view mapped class property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Reference(\"H\" /* inner view alias */, \"HistoryDate\" /* property name inside inner view */)] Links To statically define link property pairs used LinkPropertyAttribute with parameters: DictSource - optional, source object property name, Property - optional, property name. When one or both of parameters is omited, folowed rules are used: When omit both propeties - used property name of link property as target and equal named property from source object When DictSource is omited - used Property as target property name and equal named property from source object When Property is omited - used property name of link property as target and property with name equals DictSource from source object [Property(\"S\", \"name\"), LinkProperty(\"Name\") /* DocState.Name -> this.DocState */, LinkProperty(Property = \"DocStateId\") /* column DocState.DocStateId -> column this.DocStateId */, LinkProperty(\"Code\", \"DocStateCode\") /* DocState.Code -> this.DocStateCode */] public Link<string, DocState> DocState { get; set; }"
  },
  "tutorial/mapping/static/property/link.html": {
    "href": "tutorial/mapping/static/property/link.html",
    "title": "Links | XData website",
    "keywords": "Links To statically define link property pairs used LinkPropertyAttribute with parameters: DictSource - optional, source object property name, Property - optional, property name. When one or both of parameters is omited, folowed rules are used: When omit both propeties - used property name of link property as target and equal named property from source object When DictSource is omited - used Property as target property name and equal named property from source object When Property is omited - used property name of link property as target and property with name equals DictSource from source object [Property(\"S\", \"name\"), LinkProperty(\"Name\") /* DocState.Name -> this.DocState */, LinkProperty(Property = \"DocStateId\") /* column DocState.DocStateId -> column this.DocStateId */, LinkProperty(\"Code\", \"DocStateCode\") /* DocState.Code -> this.DocStateCode */] public Link<string, DocState> DocState { get; set; }"
  },
  "tutorial/mapping/static/property/grouping.html": {
    "href": "tutorial/mapping/static/property/grouping.html",
    "title": "Property grouping parameters | XData website",
    "keywords": "Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. PropertyGroupingAttribute has properties: Grouping - optional, property aggregation type , default is None , GroupOrder - optional, property grouping order when Grouping = DataGrouping . None . [PropertyGrouping(DataGrouping.Sum)]"
  },
  "tutorial/mapping/static/property/default.html": {
    "href": "tutorial/mapping/static/property/default.html",
    "title": "Property default value | XData website",
    "keywords": "Property default value To set default value of property with static mapping, use PropertyDefaultAttribute with parameters: DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , DefaultFeature - optional, default is DefaultFeature.UseOnInsert , default value assignment will be applied with some extended features . [PropertyDefault(DefaultType.UserName, AlwaysUseDefault = true)]"
  },
  "tutorial/mapping/static/property/column.html": {
    "href": "tutorial/mapping/static/property/column.html",
    "title": "Hidden properties | XData website",
    "keywords": "Hidden properties Hidden properties statically defined using couple of specific attributes: ColumnAttribute , ColumnExpressionAttribute and ColumnDefaultAttribute as analog with similar attributes of properties . ColumnAttribute has parameters: PropertyName - name of hidden property, PropertyType - type of hidden property, Source - data source alias, FieldName - optional, DB field name (can be omited when correspond default mapping rule (exampple: some_field_name is mapped to SomeFieldName )), Flags - optional, bitmask of property flags , Grouping - optional, defined aggreagation type , default is None , GroupOrder - optional, group order when Grouping = DataGrouping . None , Hidden - optional, mapped field omited in SELECT expression of result query (when grouping limitations demand this), default is false , NativeSqlType - optional, native SQL type name. NativeSqlType is used when default datatype mapping is conflicted with resultset data type. ColumnExpressionAttribute has parameters: PropertyName - name of hidden property (same as defined by ColumnAttribute ), ExprText - depends on ExprType (see below): subquery alias / SQL expression text / field name with LINQ style expression definition, ExprType - optional, SQL expression type default is DataExpressionType . PlainSql , DbType - data type on ADO .Net provider level (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). ColumnDefaultAttribute has parameters: PropertyName - hidden property name (same as defined by ColumnAttribute ), DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , DefaultFeature - optional, default is DefaultFeature.UseOnInsert , default value assignment will be applied with some extended features . [Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)]"
  },
  "tutorial/mapping/static/procedure/source.html": {
    "href": "tutorial/mapping/static/procedure/source.html",
    "title": "SQL procedure as query | XData website",
    "keywords": "SQL procedure as query To define procedure as data source of mapping used ProcedureAttribute with parameters: Alias - procedure alias, Name - procedure or function name, ProcedureType - ProcedureType : ProcedureType . Procedure or ProcedureType . Function ."
  },
  "tutorial/mapping/static/procedure/sample_udt_array.html": {
    "href": "tutorial/mapping/static/procedure/sample_udt_array.html",
    "title": "SQL procedure with UDT array parameter sample | XData website",
    "keywords": "SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure7\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(Classifier[]) /* Parameter type must be an array of mapped type */, DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), ResultSet(\"T\", \"Result\")] public class TestProcedure7 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } }"
  },
  "tutorial/mapping/static/procedure/sample_udt.html": {
    "href": "tutorial/mapping/static/procedure/sample_udt.html",
    "title": "SQL procedure with UDT parameter sample | XData website",
    "keywords": "SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"TestFunction5\", ProcedureType.Function), Parameter(\"T\", 1, \"p_obj\", typeof(Classifier), DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), Parameter(\"T\", 2, \"Result\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.ReturnValue)] public class PostgreSqlTestFunction5 : IDataObject { public string Result { get { return this.GetParameter(x => x.Result); } } }"
  },
  "tutorial/mapping/static/procedure/sample_table_func.html": {
    "href": "tutorial/mapping/static/procedure/sample_table_func.html",
    "title": "SQL table valued function as query sample | XData website",
    "keywords": "SQL table valued function as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestFunction3 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } }"
  },
  "tutorial/mapping/static/procedure/sample_scalar_func.html": {
    "href": "tutorial/mapping/static/procedure/sample_scalar_func.html",
    "title": "SQL scalar function as property data source sample | XData website",
    "keywords": "SQL scalar function as property data source sample [DataObject(\"T\"), DataTable(\"T_DOC_TYPE\", \"T\"), Column(\"DocTypeId\", typeof(long), Flags = DataPropertyFlag.Id)] public class TestFunction4 : IDataObject { [Property(\"T\")] public string Code { get; set; } [Property(\"T\")] public string Name { get; set; } [Property, // Property expression attribute \"name\" is the name of private static field // with type Calculate<string> and attributed by SqlExpressionAttribute PropertyExpression(\"test\", DataExpressionType.LinqExpression, ExprSize = 20)] public string Test { get { return this.GetProperty(x => x.Test); } } // Private static field with type Calculate<string> and attributed by // SqlExpressionAttribute [SqlExpression] private static Calculate<string> test z => z.SqlFn<string>(\"dbo.TestFunction2\", y => y.Field<long>(\"T\", \"doc_type_id\"), y => y.Field<string>(\"T\", \"name\")) }"
  },
  "tutorial/mapping/static/procedure/sample_retval_cursor.html": {
    "href": "tutorial/mapping/static/procedure/sample_retval_cursor.html",
    "title": "SQL procedure with return value and resultset sample | XData website",
    "keywords": "SQL procedure with return value and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"ResultParameter\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue), ResultSet(\"T\", \"Result\")] public class TestProcedure6 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public int ResultParameter { get { return this.GetParameter(x => x.ResultParameter); } } }"
  },
  "tutorial/mapping/static/procedure/sample_retval.html": {
    "href": "tutorial/mapping/static/procedure/sample_retval.html",
    "title": "SQL procedure with return value sample | XData website",
    "keywords": "SQL procedure with return value sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure5 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } }"
  },
  "tutorial/mapping/static/procedure/sample_out_param.html": {
    "href": "tutorial/mapping/static/procedure/sample_out_param.html",
    "title": "SQL procedure with out parameter sample | XData website",
    "keywords": "SQL procedure with out parameter sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure3 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } }"
  },
  "tutorial/mapping/static/procedure/sample_out_cursor.html": {
    "href": "tutorial/mapping/static/procedure/sample_out_cursor.html",
    "title": "SQL procedure with out parameter and resultset sample | XData website",
    "keywords": "SQL procedure with out parameter and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\"), ResultSet(\"T\", \"Result\")] public class TestProcedure4 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } }"
  },
  "tutorial/mapping/static/procedure/sample_multiple_cursor.html": {
    "href": "tutorial/mapping/static/procedure/sample_multiple_cursor.html",
    "title": "SQL procedure with multiple resultsets sample | XData website",
    "keywords": "SQL procedure with multiple resultsets sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"param3\", typeof(int), DbType.Int32), Parameter(\"T\", 4, \"param4\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\", IsDefault = true), ResultSet(\"T\", \"SecondResult\", ResultType = typeof(TestResult), Order = 2)] public class TestProcedure2 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public IEnumerable<TestResult> SecondResult { get { return this.GetResultSet(x => x.SecondResult); } } }"
  },
  "tutorial/mapping/static/procedure/sample_cursor.html": {
    "href": "tutorial/mapping/static/procedure/sample_cursor.html",
    "title": "SQL procedure resultset as query sample | XData website",
    "keywords": "SQL procedure resultset as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestProcedure : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } }"
  },
  "tutorial/mapping/static/procedure/sample_array.html": {
    "href": "tutorial/mapping/static/procedure/sample_array.html",
    "title": "SQL procedure with simple array parameter sample | XData website",
    "keywords": "SQL procedure with simple array parameter sample [DataObject(\"T\"), Procedure(\"T\", \"TestFunction\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int[]), DbType.Int32, IsArray = true), Parameter(\"T\", 2, \"Result\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue)] public class TestFunction : IDataObject { public int Result { get { return this.GetParameter(x => x.Result); } } }"
  },
  "tutorial/mapping/static/procedure/result.html": {
    "href": "tutorial/mapping/static/procedure/result.html",
    "title": "SQL procedure resultset | XData website",
    "keywords": "SQL procedure resultset To describe resultset of SQL procedure used ResultSetAttribute with parameters: Alias - procedure alias, Name - resultset name used inside application code, Order - optional, order number of resultset (required to procedures returns multiple resultsets), ResultType - optional, mapped type of resultset, default is attributed class itself, IsDefault - optional, resultset is default - mapped to attributed class (used when procedure returns multiple resultsets), default is false ."
  },
  "tutorial/mapping/static/procedure/procedure.html": {
    "href": "tutorial/mapping/static/procedure/procedure.html",
    "title": "SQL procedures & functions | XData website",
    "keywords": "SQL procedures & functions Common information about mapping to SQL procedures and functions has described in common mapping rules description and here we just reprensent static mapping rules for various procedure types. SQL procedure as query To define procedure as data source of mapping used ProcedureAttribute with parameters: Alias - procedure alias, Name - procedure or function name, ProcedureType - ProcedureType : ProcedureType . Procedure or ProcedureType . Function . SQL procedure parameter To define SQL procedure parameter used ParameterAttribute with parameters: Alias - procedure alias, Order - order number of parameter, Binding - name used inside application code (it's handy to use parameter with another name, not the name defined inside DB), Type - data type used inside application code, DbType - data type on ADO .Net provider level, Direction - optional, parameter direction, default is ParameterDirection . Input , Size - optional, parameter size(if applicable), Scale - optional, parameter presision (if applicable), Name - optional, parameter name, default is equal with Binding , DefaultType - default value type , DefaultValue optional, depends on DefaultType , NativeSqlType - optional, SQL type name ( NativeSqlType is used when type default mapping is conflicted with real SQL type), UdtTypeName - optional, user defined type (UDT), UdtElementTypeName - optional, user defined type (UDT) of UdtTypeName element (in case where UdtTypeName - array or table), IsArray - optional, parameter is array of UdtElementTypeName (when UdtElementTypeName is omited, array of DbType ), default is false . SQL procedure resultset To describe resultset of SQL procedure used ResultSetAttribute with parameters: Alias - procedure alias, Name - resultset name used inside application code, Order - optional, order number of resultset (required to procedures returns multiple resultsets), ResultType - optional, mapped type of resultset, default is attributed class itself, IsDefault - optional, resultset is default - mapped to attributed class (used when procedure returns multiple resultsets), default is false . SQL procedure resultset as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestProcedure : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL procedure with multiple resultsets sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"param3\", typeof(int), DbType.Int32), Parameter(\"T\", 4, \"param4\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\", IsDefault = true), ResultSet(\"T\", \"SecondResult\", ResultType = typeof(TestResult), Order = 2)] public class TestProcedure2 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public IEnumerable<TestResult> SecondResult { get { return this.GetResultSet(x => x.SecondResult); } } } SQL procedure with out parameter sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure3 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with out parameter and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\"), ResultSet(\"T\", \"Result\")] public class TestProcedure4 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with return value sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure5 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with return value and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"ResultParameter\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue), ResultSet(\"T\", \"Result\")] public class TestProcedure6 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public int ResultParameter { get { return this.GetParameter(x => x.ResultParameter); } } } SQL procedure with simple array parameter sample [DataObject(\"T\"), Procedure(\"T\", \"TestFunction\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int[]), DbType.Int32, IsArray = true), Parameter(\"T\", 2, \"Result\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue)] public class TestFunction : IDataObject { public int Result { get { return this.GetParameter(x => x.Result); } } } SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"TestFunction5\", ProcedureType.Function), Parameter(\"T\", 1, \"p_obj\", typeof(Classifier), DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), Parameter(\"T\", 2, \"Result\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.ReturnValue)] public class PostgreSqlTestFunction5 : IDataObject { public string Result { get { return this.GetParameter(x => x.Result); } } } SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure7\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(Classifier[]) /* Parameter type must be an array of mapped type */, DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), ResultSet(\"T\", \"Result\")] public class TestProcedure7 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL table valued function as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestFunction3 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL scalar function as property data source sample [DataObject(\"T\"), DataTable(\"T_DOC_TYPE\", \"T\"), Column(\"DocTypeId\", typeof(long), Flags = DataPropertyFlag.Id)] public class TestFunction4 : IDataObject { [Property(\"T\")] public string Code { get; set; } [Property(\"T\")] public string Name { get; set; } [Property, // Property expression attribute \"name\" is the name of private static field // with type Calculate<string> and attributed by SqlExpressionAttribute PropertyExpression(\"test\", DataExpressionType.LinqExpression, ExprSize = 20)] public string Test { get { return this.GetProperty(x => x.Test); } } // Private static field with type Calculate<string> and attributed by // SqlExpressionAttribute [SqlExpression] private static Calculate<string> test z => z.SqlFn<string>(\"dbo.TestFunction2\", y => y.Field<long>(\"T\", \"doc_type_id\"), y => y.Field<string>(\"T\", \"name\")) }"
  },
  "tutorial/mapping/static/procedure/parameter.html": {
    "href": "tutorial/mapping/static/procedure/parameter.html",
    "title": "SQL procedure parameter | XData website",
    "keywords": "SQL procedure parameter To define SQL procedure parameter used ParameterAttribute with parameters: Alias - procedure alias, Order - order number of parameter, Binding - name used inside application code (it's handy to use parameter with another name, not the name defined inside DB), Type - data type used inside application code, DbType - data type on ADO .Net provider level, Direction - optional, parameter direction, default is ParameterDirection . Input , Size - optional, parameter size(if applicable), Scale - optional, parameter presision (if applicable), Name - optional, parameter name, default is equal with Binding , DefaultType - default value type , DefaultValue optional, depends on DefaultType , NativeSqlType - optional, SQL type name ( NativeSqlType is used when type default mapping is conflicted with real SQL type), UdtTypeName - optional, user defined type (UDT), UdtElementTypeName - optional, user defined type (UDT) of UdtTypeName element (in case where UdtTypeName - array or table), IsArray - optional, parameter is array of UdtElementTypeName (when UdtElementTypeName is omited, array of DbType ), default is false ."
  },
  "tutorial/mapping/static/filter/subquery_links.html": {
    "href": "tutorial/mapping/static/filter/subquery_links.html",
    "title": "Subquery links | XData website",
    "keywords": "Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used SubqueryLinkAttribute with parameters: Subquery - subquery alias, SubqueryProperty - linked property from subquery, PropertyName - optional, linked property from base class (when omit, base class property name is equal SubqueryProperty ), also optional properties: Operation , Combination и PrimaryFilter is supported. They was described above in topics Filters and Inner links . [SubqueryLink(\"H\" /* subquery alias */, \"DocId\" /* subquery property to link */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when subquery is skipped, then data source linked to subquery by this filter will be skipped too, and skip data sources analisys will continue inside base class (see Inner links )."
  },
  "tutorial/mapping/static/filter/subquery.html": {
    "href": "tutorial/mapping/static/filter/subquery.html",
    "title": "Subquery filters | XData website",
    "keywords": "Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilterAttribute with specific (over defined above ) parameter: Subquery - subquery alias (see Subqueries ). Inner view can not be used with subquery filters. [SubqueryFilter(\"D\" /* table alias */, \"doc_state_id\" /* field name */, \"A\" /* subquery alias */, Operation: FilterOperation.In /* filter operation */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when one of linked data sources is skiped then other one will skipped too. When base table of subquery is skipped then subquery is skipped completely."
  },
  "tutorial/mapping/static/filter/sql_expr.html": {
    "href": "tutorial/mapping/static/filter/sql_expr.html",
    "title": "SQL expression filters | XData website",
    "keywords": "SQL expression filters To define filter over SQL expression used ExpressionFilterAttribute with specific (over described above ) parameter: ExpressionText - depends on value can be: subquery alias, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */, Operation: FilterOperation.In /* filter operation */)] private static field name contains dynamic definition of SQL expression, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"AllowedDiscount\" /* ExpressionText: SQL expression description field name */, Operation: FilterOperation.NotEqual /* filter operation */)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)); plain SQL expression text. [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"case P.is_vip when 1 then 10 else 0 end\" /* ExpressionText: plain SQL expression */, Operation: FilterOperation.NotEqual /* filter operation */)] Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers."
  },
  "tutorial/mapping/static/filter/range.html": {
    "href": "tutorial/mapping/static/filter/range.html",
    "title": "Range filters | XData website",
    "keywords": "Range filters To define filter checks field value over array of values used RangeFilterAttribute with specific (over described above ) parameter: Range - array of values to filter on. [RangeFilter(\"P\" /* table ealias */, \"discount\" /* field name */, new[] {0,5,10} /* range of values */, Operation: FilterOperation.In /* filter operation */)]"
  },
  "tutorial/mapping/static/filter/inner_links.html": {
    "href": "tutorial/mapping/static/filter/inner_links.html",
    "title": "Inner links | XData website",
    "keywords": "Inner links To define links between data sources inside query used LinkAttribute with specific parameters: LinkedSourceAlias - linked table alias, LinkedFieldName - linked table field name (optional, can be omited when equals with FieldName ). Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to set parameter PrimaryFilter to true . [Link(\"D\" /* table alias */, \"doc_id\" /* field name */, \"DD\" /* linked table alias */)]"
  },
  "tutorial/mapping/static/filter/group.html": {
    "href": "tutorial/mapping/static/filter/group.html",
    "title": "Filter group | XData website",
    "keywords": "Filter group Filter group can be defined by FilterCombinationAttribute with parameters: Name - filter group unique name, Combination - logical operation between filters and subgroups inside group (optional, default is FilterCombination . And ), Parent - parent filter group name (optional, can be omited for filter groups with parent - root filter group). Logic operation inside filter group is defined by enum Combination : And - and Or - or [FilterCombination(\"OrGroup\" /* group filter name */, Combination: Combination.OR /* logical operation */)]"
  },
  "tutorial/mapping/static/filter/filter.html": {
    "href": "tutorial/mapping/static/filter/filter.html",
    "title": "Filters | XData website",
    "keywords": "Filters Filters can be defined as: Constant filters SQL expression filters Dictionary filters Range filters Subquery filters Inner links Each of filter type is defined by own special attribute of data object class. Each of attributes has parameters: Source - data source alias of filtered field, FieldName - filtered field name, Operation - filter operation (optional, default is FilterOperation . Equal ), Combination - filter group name (optional, default is root filter group). Above this every filter attribute has their own specific parameters described below. Filter operation is defined by enum FilterOperation : Equal - equal NotEqual - not equal LessThan - less then GreaterThan - greater then LessThanOrEqual - less or equal GreaterThanOrEqual - greater or equal In - field value in range or subquery NotIn - field value is not in range or subquery Exists - subquery returns one or more rows NotExists - subquery returns no rows Like - field value correlated with find expression NotLike - field value not correlated with find expression OuterJoin - left outer join link between query sources (tables or inner views) Contains - field value correlated with fulltext search NotContains - field value not correlated with fulltext search Filter group Filter group can be defined by FilterCombinationAttribute with parameters: Name - filter group unique name, Combination - logical operation between filters and subgroups inside group (optional, default is FilterCombination . And ), Parent - parent filter group name (optional, can be omited for filter groups with parent - root filter group). Logic operation inside filter group is defined by enum Combination : And - and Or - or [FilterCombination(\"OrGroup\" /* group filter name */, Combination: Combination.OR /* logical operation */)] Constant filters Constant filters can restrict query by constant value. This filter is defined by ConstantFilterAttribute , with specific (over described above ) parameters: Name - filter name (will be transformed to query parameter name), ConstantType - constant type (see below) and ConstantValue - constant value depends on ConstantType . Constant types is defined by enum FilterConstantType : Const - value of ConstantValue . Variable - value of variable with name equals ConstantValue . CurrentDate - current date. CurrentDateTime - current date/time. CurrentDateTimeUTC - current date/time (UTC). [ConstantFilter(\"FilterByZero\" /* filter name */, \"P\" /* table alias */, \"discount\" /* DB field name */, 0m /* decimal constant value */, Operation: FilterOperation.Equal /* filter operation */, ConstantType: FilterConstantType.Const /* constant type */)] SQL expression filters To define filter over SQL expression used ExpressionFilterAttribute with specific (over described above ) parameter: ExpressionText - depends on value can be: subquery alias, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */, Operation: FilterOperation.In /* filter operation */)] private static field name contains dynamic definition of SQL expression, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"AllowedDiscount\" /* ExpressionText: SQL expression description field name */, Operation: FilterOperation.NotEqual /* filter operation */)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)); plain SQL expression text. [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"case P.is_vip when 1 then 10 else 0 end\" /* ExpressionText: plain SQL expression */, Operation: FilterOperation.NotEqual /* filter operation */)] Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Range filters To define filter checks field value over array of values used RangeFilterAttribute with specific (over described above ) parameter: Range - array of values to filter on. [RangeFilter(\"P\" /* table ealias */, \"discount\" /* field name */, new[] {0,5,10} /* range of values */, Operation: FilterOperation.In /* filter operation */)] Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by DictionaryFilterAttribute with specific (over described above ) parameters: DictionaryTable - dictionary table name, DictionaryId - dictionary id field name, DictionaryCode - dictionary mnemonic code field name, DictionaryValue - mnemonic code value to filter query on, ValueIsVariable - flag DictionaryValue contains not a value but name of variable with value. Tip In case filter field name is equals dictionary id field name, parameter FieldName can be omited. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. [DictionaryFilter(\"t_doc_state\" /* dictionary table name */, \"doc_state_id\" /* dictionary id field name */, \"code\" /* dictionary mnemonic code field name */, \"CREATED\" /* mnemonic code value */, \"D\" /* filtered table alias */)] Inner links To define links between data sources inside query used LinkAttribute with specific parameters: LinkedSourceAlias - linked table alias, LinkedFieldName - linked table field name (optional, can be omited when equals with FieldName ). Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to set parameter PrimaryFilter to true . [Link(\"D\" /* table alias */, \"doc_id\" /* field name */, \"DD\" /* linked table alias */)] Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilterAttribute with specific (over defined above ) parameter: Subquery - subquery alias (see Subqueries ). Inner view can not be used with subquery filters. [SubqueryFilter(\"D\" /* table alias */, \"doc_state_id\" /* field name */, \"A\" /* subquery alias */, Operation: FilterOperation.In /* filter operation */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when one of linked data sources is skiped then other one will skipped too. When base table of subquery is skipped then subquery is skipped completely. Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used SubqueryLinkAttribute with parameters: Subquery - subquery alias, SubqueryProperty - linked property from subquery, PropertyName - optional, linked property from base class (when omit, base class property name is equal SubqueryProperty ), also optional properties: Operation , Combination и PrimaryFilter is supported. They was described above in topics Filters and Inner links . [SubqueryLink(\"H\" /* subquery alias */, \"DocId\" /* subquery property to link */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when subquery is skipped, then data source linked to subquery by this filter will be skipped too, and skip data sources analisys will continue inside base class (see Inner links )."
  },
  "tutorial/mapping/static/filter/dictionary.html": {
    "href": "tutorial/mapping/static/filter/dictionary.html",
    "title": "Dictionary filters | XData website",
    "keywords": "Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by DictionaryFilterAttribute with specific (over described above ) parameters: DictionaryTable - dictionary table name, DictionaryId - dictionary id field name, DictionaryCode - dictionary mnemonic code field name, DictionaryValue - mnemonic code value to filter query on, ValueIsVariable - flag DictionaryValue contains not a value but name of variable with value. Tip In case filter field name is equals dictionary id field name, parameter FieldName can be omited. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. [DictionaryFilter(\"t_doc_state\" /* dictionary table name */, \"doc_state_id\" /* dictionary id field name */, \"code\" /* dictionary mnemonic code field name */, \"CREATED\" /* mnemonic code value */, \"D\" /* filtered table alias */)]"
  },
  "tutorial/mapping/static/filter/constant.html": {
    "href": "tutorial/mapping/static/filter/constant.html",
    "title": "Constant filters | XData website",
    "keywords": "Constant filters Constant filters can restrict query by constant value. This filter is defined by ConstantFilterAttribute , with specific (over described above ) parameters: Name - filter name (will be transformed to query parameter name), ConstantType - constant type (see below) and ConstantValue - constant value depends on ConstantType . Constant types is defined by enum FilterConstantType : Const - value of ConstantValue . Variable - value of variable with name equals ConstantValue . CurrentDate - current date. CurrentDateTime - current date/time. CurrentDateTimeUTC - current date/time (UTC). [ConstantFilter(\"FilterByZero\" /* filter name */, \"P\" /* table alias */, \"discount\" /* DB field name */, 0m /* decimal constant value */, Operation: FilterOperation.Equal /* filter operation */, ConstantType: FilterConstantType.Const /* constant type */)]"
  },
  "tutorial/mapping/static/tree.html": {
    "href": "tutorial/mapping/static/tree.html",
    "title": "Tree | XData website",
    "keywords": "Tree To statically map tree organized data structure used special data source attributes With to describe tree root query and WithRecursive to describe tree childs. Both of them use subquery mappings (see example below) to set subquery structure for tree query construction. Important Data source flags of tree organized data sources must contain DataStructureFlag.ReadOnly and DataStructureFlag.Tree! With attribute has properties: Alias - alias of tree data source, SubqueryType - type of root subquery mapping, Type - data source combination within tree query, Properties - tree properties order. WithRecursive attribute has properties: Alias - alias of recursive data source, SubqueryType - type of root subquery mapping, InitialAlias - alias of tree data source. [DataObject(\"CAT\", Flags = DataStructureFlag.ReadOnly | DataStructureFlag.Tree), With(\"CAT\", typeof(CatalogueTreeRoot), WithRecursiveType.RecursiveUnion, \"CatalogueId\", \"Name\", \"Code\", \"ParentId\"), WithRecursive(\"S\", typeof(CatalogueTreeFolders), \"CAT\"), SubqueryLink(\"S\", \"ParentId\", \"CatalogueId\")] public class CatalogueTree : IDataObject { public static readonly RuntimeFilter FilterByRoot = new RuntimeFilter(null, \"FilterByRoot\"); public static readonly RuntimeFilter FilterByCathalogue = new RuntimeFilter(null, \"FilterByCathalogue\"); [Property(\"T\", Flags = DataPropertyFlag.Id)] public long CatalogueId { get { return this.GetProperty(x => x.CatalogueId); } } [Property(\"T\")] public string Code { get { return this.GetProperty(x => x.Code); } } [Property(\"T\")] public string Name { get { return this.GetProperty(x => x.Name); } } [Property(\"T\")] public long? ParentId { get { return this.GetProperty(x => x.ParentId); } } } [DataObject(\"R\"), DataTable(\"T_CATALOGUE\", \"R\"), Column(\"CatalogueId\", typeof(long), \"R\"), Column(\"Code\", typeof(string), \"R\"), Column(\"Name\", typeof(string), \"R\"), Column(\"ParentId\", typeof(long?), \"R\"), FilterCombination(\"root\", Combination = Combination.Or), ConstantFilter(\"FilterByCathalogue\", \"R\", \"catalogue_id\", null, Combination = \"root\", Nullable = FilterNullable.NullsNotAllowed), ConstantFilter(\"FilterByRoot\", \"R\", \"parent_id\", null, Combination = \"root\", Nullable = FilterNullable.NullsCompared)] public class CatalogueTreeRoot : ISqlObject {} [DataObject(\"S\"), DataTable(\"T_CATALOGUE\", \"S\"), Column(\"CatalogueId\", typeof(long), \"S\"), Column(\"Code\", typeof(string), \"S\"), Column(\"Name\", typeof(string), \"S\"), Column(\"ParentId\", typeof(long?), \"S\")] public class CatalogueTreeFolders : ISqlObject {}"
  },
  "tutorial/mapping/static/subquery.html": {
    "href": "tutorial/mapping/static/subquery.html",
    "title": "Subqueries | XData website",
    "keywords": "Subqueries XData alowes use subqueries as part of mapping. This feature can be used for get property values from subquery, for subquery filters , and inner view definitions. Subquery recursive deep is not limited. Class used subquery in mapping definition must to marked with attribute SubqueryAttribute or InnerViewAttribute (when it used as inner view definition). Both of them has a parameter Alias - subquery alias in resulting query. InnerViewAttribute additionally has parameter InnerViewType - type mapped to subquery. SubqueryAttribute additionally has parameters: SubqueryType - type mapped to subquery, PropertyName - subquery returned property and Grouping - aggregation type of resulting property. [Subquery(\"A\" /* subquery alias */, typeof(DocSpecAmounts) /* subquery mapped type */, \"Amount\" /* subquery result property name */, Grouping = DataGrouping.Sum /* result property aggregation type */)] ... [InnerView(\"H\" /* inner view alias */, typeof(DocLastChange) /* inner view mapped type */)]"
  },
  "tutorial/mapping/static/static.html": {
    "href": "tutorial/mapping/static/static.html",
    "title": "Static mapping | XData website",
    "keywords": "XData tutorial Mapping common rules Static mapping Tip Before read this topic be sure to already readed Glosary and Common mapping rules containg base infomation to better understanding this. Static mapping is defined using attributes of mapped class and it properties. Static mapping sample <!--class t_catalogue--> t_catalogue catalogue_id code name parent_id <!--class t_customer--> t_customer customer_id code name <!--class t_doc_cust_type--> t_doc_cust_type doc_cust_type_id code name <!--class t_doc_type--> t_doc_type doc_type_id code name <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_catalogue_doc--> t_catalogue_doc catalogue_id doc_id <!--class t_doc_cust--> t_doc_cust doc_cust_id doc_id customer_id doc_cust_type_id <!--class t_doc_delivery--> t_doc_delivery doc_id delivery_type delivery date <!--class t_doc_number--> t_doc_number doc_id numb <!--class t_doc_scan--> t_doc_scan doc_id scan <!--class t_doc_source--> t_doc_source doc_id source <!--class t_doc_state--> t_doc_state doc_state_id code name <!--class t_doc_doc_state--> t_doc_doc_state doc_id doc_state_id <!--class t_doc_history--> t_doc_history doc_history_id doc_id doc_state_id history_date <!--link t_catalogue to t_catalogue--> parent_id <!--link t_doc_type to t_doc--> doc_type_id <!--link t_catalogue to t_catalogue_doc--> catalogue_id <!--link t_catalogue_doc to t_doc--> doc_id <!--link t_doc to t_doc_cust--> doc_id <!--link t_doc_cust to t_customer--> customer_id <!--link t_doc_cust to t_doc_cust_type--> doc_cust_type_id <!--link t_doc_delivery to t_doc--> doc_id <!--link t_doc_number to t_doc--> doc_id <!--link t_doc_scan to t_doc--> doc_id <!--link t_doc_source to t_doc--> doc_id <!--link t_doc_doc_state to t_doc--> doc_id <!--link t_doc_state to t_doc_doc_state--> doc_state_id <!--link t_doc to t_doc_history--> doc_id <!--link t_doc_history to t_doc_state--> doc_state_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_catalogue { <&key> catalogue_id - - <&code> code name <&arrow-circle-right> //parent_id// } t_catalogue - -{ t_catalogue : parent_id entity t_customer { <&key> customer_id - - <&code> code name } entity t_doc_cust_type { <&key> doc_cust_type_id - - <&code> code name } entity t_doc_type { <&key> doc_type_id - - <&code> code name } entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } t_doc_type -right-{ t_doc : doc_type_id entity t_catalogue_doc { <&key> <&arrow-circle-right> catalogue_id <&key> <&arrow-circle-right> doc_id } t_catalogue_doc -up-{ t_catalogue : catalogue_id t_catalogue_doc - -{ t_doc : doc_id entity t_doc_cust { <&key> doc_cust_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> customer_id <&arrow-circle-right> doc_cust_type_id } t_doc_cust }-up- t_doc : doc_id t_doc_cust }- - t_customer : customer_id t_doc_cust }- - t_doc_cust_type : doc_cust_type_id entity t_doc_delivery { <&key> <&arrow-circle-right> doc_id - - delivery_type delivery date } t_doc_delivery }o- - t_doc : doc_id entity t_doc_number { <&key> <&arrow-circle-right> doc_id - - numb } t_doc_number }o- - t_doc : doc_id entity t_doc_scan { <&key> <&arrow-circle-right> doc_id - - <&map> scan } t_doc_scan }o- - t_doc : doc_id entity t_doc_source { <&key> <&arrow-circle-right> doc_id - - <&document> source } t_doc_source }o- - t_doc : doc_id entity t_doc_state { <&key> doc_state_id - - <&code> code name } entity t_doc_doc_state { <&key> <&arrow-circle-right> doc_id - - <&arrow-circle-right> doc_state_id } t_doc_doc_state }o-right- t_doc : doc_id t_doc_doc_state }-left- t_doc_state : doc_state_id entity t_doc_history { <&key> doc_history_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_state_id <&clock> history_date } t_doc_history }-up- t_doc : doc_id t_doc_history }- - t_doc_state : doc_state_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US --> <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_doc_spec_type--> t_doc_spec_type doc_spec_type_id code name <!--class t_doc_spec--> t_doc_spec doc_spec_id doc_id doc_spec_type_id <!--class t_doc_spec_amount--> t_doc_spec_amount doc_spec_id amount <!--link t_doc to t_doc_spec--> doc_id <!--link t_doc_spec to t_doc_spec_type--> doc_spec_type_id <!--link t_doc_spec to t_doc_spec_amount--> doc_spec_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } entity t_doc_spec_type { <&key> doc_spec_type_id - - <&code> code name } entity t_doc_spec { <&key> doc_spec_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_spec_type_id } t_doc_spec }-left- t_doc : doc_id t_doc_spec }- - t_doc_spec_type : doc_spec_type_id entity t_doc_spec_amount { <&key> <&arrow-circle-right> doc_spec_id - - <&dollar> amount } t_doc_spec_amount }o-left- t_doc_spec : doc_spec_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US --> Here is example of data object static mapping. Of course, real mapping is much simpler then this, but as example of XData capabilities it's realy representative... [DataObject(\"D\", LogicAssemblyName = \"XDataObjectTest\"), DataTable(\"T_DOC\", \"D\"), DictionaryFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\", \"D\"), DataTable(\"T_DOC_DOC_STATE\", \"DS\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DS\"), DataTable(\"T_DOC_STATE\", \"S\"), Link(\"DS\", \"doc_state_id\", \"S\"), DataTable(\"T_DOC_NUMBER\", \"N\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"N\"), DataTable(\"T_DOC_CUST\", \"CF\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"CF\"), DataTable(\"T_CUSTOMER\", \"F\"), Link(\"CF\", \"customer_id\", \"F\"), DictionaryFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"FROM\", \"CF\"), DataTable(\"T_DOC_CUST\", \"CT\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"CT\"), DataTable(\"T_CUSTOMER\", \"T\"), Link(\"CT\", \"customer_id\", \"T\"), DictionaryFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\", \"CT\"), DataTable(\"T_DOC_SCAN\", \"SC\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"SC\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_SOURCE\", \"SR\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"SR\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_DELIVERY\", \"DD\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DD\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_CATALOGUE\", \"DC\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DC\"), DataTable(\"T_CATALOGUE\", \"U\"), Link(\"U\", \"catalogue_id\", \"DC\"), Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", Grouping = DataGrouping.Sum), SubqueryLink(\"A\", \"DocId\"), InnerView(\"H\", typeof(DocLastChange)), SubqueryLink(\"H\", \"DocId\", Operation = FilterOperation.OuterJoin), ExternalLink(typeof(InvoiceSpec), \"DocId\"), InnerView(\"ST\", typeof(DocBySpecType)), SubqueryLink(\"ST\", \"DocId\"), Subquery(\"UT\", typeof(CatalogueTree), \"CatalogueId\"), SubqueryFilter(\"UT\", \"DC\", \"catalogue_id\", Operation = FilterOperation.In), Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), Column(\"DocStateId\", typeof(long), \"S\"), Column(\"FromCustomerId\", typeof(long), \"F\"), Column(\"ToCustomerId\", typeof(long), \"T\"), Column(\"CatalogueId\", typeof(long), \"U\"), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)] public class Invoice: IDataObject { [Property(\"S\", \"code\")] public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } [Property(\"S\", \"name\"), LinkProperty(\"Name\"), LinkProperty(Property = \"DocStateId\"), LinkProperty(\"Code\", \"DocStateCode\")] public Link<string, DocState> DocState { get; set; } [Property(\"U\", \"name\"), LinkProperty(Property = \"CatalogueId\"), LinkProperty(\"Name\")] public Link<string, Catalogue> DocCatalog { get; set; } [Property(\"N\", \"numb\")] public string DocNumb { get; set; } [Property(\"D\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DocDate { get; set; } [Property(\"D\", Flags = DataPropertyFlag.ConcurrencyToken), PropertyDefault(DefaultType.AutoIncrement)] public long Generation { get { return this.GetProperty(x => x.Generation); } } [Property(\"D\"), PropertyDefault(DefaultType.CurrentDateTime, DefaultFeature = DefaultFeature.UseOnUpdate)] public DateTime Changed { get { return this.GetProperty(x => x.Changed); } } [Property(\"D\"), PropertyDefault(DefaultType.UserName, DefaultFeature = DefaultFeature.UseOnUpdate)] public string Author { get { return this.GetProperty(x => x.Author); } } [Property, PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] public decimal? DocAmount { get { return this.GetProperty(x => x.DocAmount); } } [Reference(\"H\", \"HistoryDate\")] public DateTime? DocLastChange { get { return this.GetProperty(x => x.DocLastChange); } } [Property(\"SC\", Flags = DataPropertyFlag.OuterFlag)] public Lob Scan { get; set; } [Property(\"SR\", Flags = DataPropertyFlag.OuterFlag)] public Xml Source { get; set; } [Property(\"F\", \"name\"), LinkProperty(\"CustomerId\", \"FromCustomerId\"), LinkProperty(\"Name\")] public Link<string, Customer> CustomerFrom { get; set; } [Property(\"T\", \"name\"), LinkProperty(\"CustomerId\", \"ToCustomerId\"), LinkProperty(\"Name\")] public Link<string, Customer> CustomerTo { get; set; } [Property(\"DD\")] public DeliveryTypeEnum DeliveryType { get; set; } [Property(\"DD\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DeliveryDate { get; set; } public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } } Mapping parameters All statically mapped classes must be marked with DataObjectAttribute . Parameters of DataObjectAttribute : BaseTable - alias of base table (optional, default is virtual table with empty alias), Context - database context (optional, context will be specified at runtime), and Flags - data source flags (optional, default is None ). Example: [DataObject(\"D\" /* base table alias */, Context: \"Main\", Flags: DataObjectFlags.ReadOnly)] All tables in repository query must to be specified using DataTableAttribute . Parameters of DataTableAttribute : Name - name of table and Alias - table alias in query. Tables in updatable tables hierarchy , but not base table must to specify Parent parameter of this attribute - alias of parent table in updatable tables hierarchy. [DataTable(\"P\" /* table alias */, \"patient\" /* table name */, \"D\" /* parent table alias */)] Same way we can define mapping to view, but all fields of view must to be explicitly defined as readonly properties or columns . Subqueries XData alowes use subqueries as part of mapping. This feature can be used for get property values from subquery, for subquery filters , and inner view definitions. Subquery recursive deep is not limited. Class used subquery in mapping definition must to marked with attribute SubqueryAttribute or InnerViewAttribute (when it used as inner view definition). Both of them has a parameter Alias - subquery alias in resulting query. InnerViewAttribute additionally has parameter InnerViewType - type mapped to subquery. SubqueryAttribute additionally has parameters: SubqueryType - type mapped to subquery, PropertyName - subquery returned property and Grouping - aggregation type of resulting property. [Subquery(\"A\" /* subquery alias */, typeof(DocSpecAmounts) /* subquery mapped type */, \"Amount\" /* subquery result property name */, Grouping = DataGrouping.Sum /* result property aggregation type */)] ... [InnerView(\"H\" /* inner view alias */, typeof(DocLastChange) /* inner view mapped type */)] Filters Filters can be defined as: Constant filters SQL expression filters Dictionary filters Range filters Subquery filters Inner links Each of filter type is defined by own special attribute of data object class. Each of attributes has parameters: Source - data source alias of filtered field, FieldName - filtered field name, Operation - filter operation (optional, default is FilterOperation . Equal ), Combination - filter group name (optional, default is root filter group). Above this every filter attribute has their own specific parameters described below. Filter operation is defined by enum FilterOperation : Equal - equal NotEqual - not equal LessThan - less then GreaterThan - greater then LessThanOrEqual - less or equal GreaterThanOrEqual - greater or equal In - field value in range or subquery NotIn - field value is not in range or subquery Exists - subquery returns one or more rows NotExists - subquery returns no rows Like - field value correlated with find expression NotLike - field value not correlated with find expression OuterJoin - left outer join link between query sources (tables or inner views) Contains - field value correlated with fulltext search NotContains - field value not correlated with fulltext search Filter group Filter group can be defined by FilterCombinationAttribute with parameters: Name - filter group unique name, Combination - logical operation between filters and subgroups inside group (optional, default is FilterCombination . And ), Parent - parent filter group name (optional, can be omited for filter groups with parent - root filter group). Logic operation inside filter group is defined by enum Combination : And - and Or - or [FilterCombination(\"OrGroup\" /* group filter name */, Combination: Combination.OR /* logical operation */)] Constant filters Constant filters can restrict query by constant value. This filter is defined by ConstantFilterAttribute , with specific (over described above ) parameters: Name - filter name (will be transformed to query parameter name), ConstantType - constant type (see below) and ConstantValue - constant value depends on ConstantType . Constant types is defined by enum FilterConstantType : Const - value of ConstantValue . Variable - value of variable with name equals ConstantValue . CurrentDate - current date. CurrentDateTime - current date/time. CurrentDateTimeUTC - current date/time (UTC). [ConstantFilter(\"FilterByZero\" /* filter name */, \"P\" /* table alias */, \"discount\" /* DB field name */, 0m /* decimal constant value */, Operation: FilterOperation.Equal /* filter operation */, ConstantType: FilterConstantType.Const /* constant type */)] SQL expression filters To define filter over SQL expression used ExpressionFilterAttribute with specific (over described above ) parameter: ExpressionText - depends on value can be: subquery alias, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */, Operation: FilterOperation.In /* filter operation */)] private static field name contains dynamic definition of SQL expression, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"AllowedDiscount\" /* ExpressionText: SQL expression description field name */, Operation: FilterOperation.NotEqual /* filter operation */)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)); plain SQL expression text. [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"case P.is_vip when 1 then 10 else 0 end\" /* ExpressionText: plain SQL expression */, Operation: FilterOperation.NotEqual /* filter operation */)] Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Range filters To define filter checks field value over array of values used RangeFilterAttribute with specific (over described above ) parameter: Range - array of values to filter on. [RangeFilter(\"P\" /* table ealias */, \"discount\" /* field name */, new[] {0,5,10} /* range of values */, Operation: FilterOperation.In /* filter operation */)] Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by DictionaryFilterAttribute with specific (over described above ) parameters: DictionaryTable - dictionary table name, DictionaryId - dictionary id field name, DictionaryCode - dictionary mnemonic code field name, DictionaryValue - mnemonic code value to filter query on, ValueIsVariable - flag DictionaryValue contains not a value but name of variable with value. Tip In case filter field name is equals dictionary id field name, parameter FieldName can be omited. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. [DictionaryFilter(\"t_doc_state\" /* dictionary table name */, \"doc_state_id\" /* dictionary id field name */, \"code\" /* dictionary mnemonic code field name */, \"CREATED\" /* mnemonic code value */, \"D\" /* filtered table alias */)] Inner links To define links between data sources inside query used LinkAttribute with specific parameters: LinkedSourceAlias - linked table alias, LinkedFieldName - linked table field name (optional, can be omited when equals with FieldName ). Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to set parameter PrimaryFilter to true . [Link(\"D\" /* table alias */, \"doc_id\" /* field name */, \"DD\" /* linked table alias */)] Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilterAttribute with specific (over defined above ) parameter: Subquery - subquery alias (see Subqueries ). Inner view can not be used with subquery filters. [SubqueryFilter(\"D\" /* table alias */, \"doc_state_id\" /* field name */, \"A\" /* subquery alias */, Operation: FilterOperation.In /* filter operation */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when one of linked data sources is skiped then other one will skipped too. When base table of subquery is skipped then subquery is skipped completely. Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used SubqueryLinkAttribute with parameters: Subquery - subquery alias, SubqueryProperty - linked property from subquery, PropertyName - optional, linked property from base class (when omit, base class property name is equal SubqueryProperty ), also optional properties: Operation , Combination и PrimaryFilter is supported. They was described above in topics Filters and Inner links . [SubqueryLink(\"H\" /* subquery alias */, \"DocId\" /* subquery property to link */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when subquery is skipped, then data source linked to subquery by this filter will be skipped too, and skip data sources analisys will continue inside base class (see Inner links ). Properties Static mapping is performed as each property with specific attributes mark. Main attribute to statically map property is PropertyAttribute with parameters: Source - data source alias (may be omited for virtual table ), FieldName - DB field name mapped to property (may be omited when field and property correspond naming rule, for example DB field named as some_field_name and mapped to SomeFieldName property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Property(\"S\" /* table alias */, \"code\" /* field name */)] SQL expression property Readonly property can be mapped to SQL expression. Static mapping of SQL expression is defined by PropertyExpressionAttribute with parameters: ExprText - depends of ExprType value (see below) it can be: subquery alias / SQL expression / private static field name define SQL expression in LINQ style, ExprType - optional, SQL expression type , default is DataExpressionType . PlainSql , DbType - ADO ,Net provider data type (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). Possible to use SQL expressions of three types: subquery, [PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] LINQ expression, [PropertyExpression(\"AllowedDiscount\", DataExpressionType.LinqExpression, DbType.Decimal, ExprSize = 17, ExprScale = 5)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)); plain text SQL expression. [PropertyExpression(\"case P.is_vip when 1 then 10 else 0 end\", DataExpressionType.PlainSql, DbType.Decimal, ExprSize = 17, ExprScale = 5)] Tip Attribute PropertyExpressionAttribute is not replaced PropertyAttribute but extend it. Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Tip It's recomended to use virtual table as SQL expression source omiting data source alias in PropertyAttribute . Property default value To set default value of property with static mapping, use PropertyDefaultAttribute with parameters: DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , DefaultFeature - optional, default is DefaultFeature.UseOnInsert , default value assignment will be applied with some extended features . [PropertyDefault(DefaultType.UserName, AlwaysUseDefault = true)] Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. PropertyGroupingAttribute has properties: Grouping - optional, property aggregation type , default is None , GroupOrder - optional, property grouping order when Grouping = DataGrouping . None . [PropertyGrouping(DataGrouping.Sum)] Hidden properties Hidden properties statically defined using couple of specific attributes: ColumnAttribute , ColumnExpressionAttribute and ColumnDefaultAttribute as analog with similar attributes of properties . ColumnAttribute has parameters: PropertyName - name of hidden property, PropertyType - type of hidden property, Source - data source alias, FieldName - optional, DB field name (can be omited when correspond default mapping rule (exampple: some_field_name is mapped to SomeFieldName )), Flags - optional, bitmask of property flags , Grouping - optional, defined aggreagation type , default is None , GroupOrder - optional, group order when Grouping = DataGrouping . None , Hidden - optional, mapped field omited in SELECT expression of result query (when grouping limitations demand this), default is false , NativeSqlType - optional, native SQL type name. NativeSqlType is used when default datatype mapping is conflicted with resultset data type. ColumnExpressionAttribute has parameters: PropertyName - name of hidden property (same as defined by ColumnAttribute ), ExprText - depends on ExprType (see below): subquery alias / SQL expression text / field name with LINQ style expression definition, ExprType - optional, SQL expression type default is DataExpressionType . PlainSql , DbType - data type on ADO .Net provider level (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). ColumnDefaultAttribute has parameters: PropertyName - hidden property name (same as defined by ColumnAttribute ), DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , DefaultFeature - optional, default is DefaultFeature.UseOnInsert , default value assignment will be applied with some extended features . [Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)] Inner view reference To map property to field from inner view a ReferenceAttribute is used with parameters: Source - inner view alias, PropertyName - optional, DB field name (may be omited when property name is equals with inner view mapped class property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Reference(\"H\" /* inner view alias */, \"HistoryDate\" /* property name inside inner view */)] Links To statically define link property pairs used LinkPropertyAttribute with parameters: DictSource - optional, source object property name, Property - optional, property name. When one or both of parameters is omited, folowed rules are used: When omit both propeties - used property name of link property as target and equal named property from source object When DictSource is omited - used Property as target property name and equal named property from source object When Property is omited - used property name of link property as target and property with name equals DictSource from source object [Property(\"S\", \"name\"), LinkProperty(\"Name\") /* DocState.Name -> this.DocState */, LinkProperty(Property = \"DocStateId\") /* column DocState.DocStateId -> column this.DocStateId */, LinkProperty(\"Code\", \"DocStateCode\") /* DocState.Code -> this.DocStateCode */] public Link<string, DocState> DocState { get; set; } Tree To statically map tree organized data structure used special data source attributes With to describe tree root query and WithRecursive to describe tree childs. Both of them use subquery mappings (see example below) to set subquery structure for tree query construction. Important Data source flags of tree organized data sources must contain DataStructureFlag.ReadOnly and DataStructureFlag.Tree! With attribute has properties: Alias - alias of tree data source, SubqueryType - type of root subquery mapping, Type - data source combination within tree query, Properties - tree properties order. WithRecursive attribute has properties: Alias - alias of recursive data source, SubqueryType - type of root subquery mapping, InitialAlias - alias of tree data source. [DataObject(\"CAT\", Flags = DataStructureFlag.ReadOnly | DataStructureFlag.Tree), With(\"CAT\", typeof(CatalogueTreeRoot), WithRecursiveType.RecursiveUnion, \"CatalogueId\", \"Name\", \"Code\", \"ParentId\"), WithRecursive(\"S\", typeof(CatalogueTreeFolders), \"CAT\"), SubqueryLink(\"S\", \"ParentId\", \"CatalogueId\")] public class CatalogueTree : IDataObject { public static readonly RuntimeFilter FilterByRoot = new RuntimeFilter(null, \"FilterByRoot\"); public static readonly RuntimeFilter FilterByCathalogue = new RuntimeFilter(null, \"FilterByCathalogue\"); [Property(\"T\", Flags = DataPropertyFlag.Id)] public long CatalogueId { get { return this.GetProperty(x => x.CatalogueId); } } [Property(\"T\")] public string Code { get { return this.GetProperty(x => x.Code); } } [Property(\"T\")] public string Name { get { return this.GetProperty(x => x.Name); } } [Property(\"T\")] public long? ParentId { get { return this.GetProperty(x => x.ParentId); } } } [DataObject(\"R\"), DataTable(\"T_CATALOGUE\", \"R\"), Column(\"CatalogueId\", typeof(long), \"R\"), Column(\"Code\", typeof(string), \"R\"), Column(\"Name\", typeof(string), \"R\"), Column(\"ParentId\", typeof(long?), \"R\"), FilterCombination(\"root\", Combination = Combination.Or), ConstantFilter(\"FilterByCathalogue\", \"R\", \"catalogue_id\", null, Combination = \"root\", Nullable = FilterNullable.NullsNotAllowed), ConstantFilter(\"FilterByRoot\", \"R\", \"parent_id\", null, Combination = \"root\", Nullable = FilterNullable.NullsCompared)] public class CatalogueTreeRoot : ISqlObject {} [DataObject(\"S\"), DataTable(\"T_CATALOGUE\", \"S\"), Column(\"CatalogueId\", typeof(long), \"S\"), Column(\"Code\", typeof(string), \"S\"), Column(\"Name\", typeof(string), \"S\"), Column(\"ParentId\", typeof(long?), \"S\")] public class CatalogueTreeFolders : ISqlObject {} External link External link can be statically defined using ExternalLinkAttribute with parameters: ChildType - slave repository mapped type, ChildProperty - link property in slave repository, Property - optional, link property in master repository, default used same name as ChildProperty , FilterName - optional, slave repository filter name, default used \"FilterBy\" + ChildProperty , MasterRefresh - optional, refresh master repository current row data on submit slave changes flag (usefull when master has calculated properties over slave repository data), default is false , DirectLink - optional, see tree master-slave specifics for details, default is false Operation - optional, link filter operation (see Filters ), default FilterOperation . Equal , Nullable - optional, filter null processing behaviour , default is FilterNullable . Nullable , Combination - optional, filter group name in slave repository. External links can be used in optional filters description (see Optional filters and optional subqueries ). To specify external link is optional filter part You can set primary filter flag PrimaryFilter . [ExternalLink(typeof(InvoiceSpec), \"DocId\")] SQL procedures & functions Common information about mapping to SQL procedures and functions has described in common mapping rules description and here we just reprensent static mapping rules for various procedure types. SQL procedure as query To define procedure as data source of mapping used ProcedureAttribute with parameters: Alias - procedure alias, Name - procedure or function name, ProcedureType - ProcedureType : ProcedureType . Procedure or ProcedureType . Function . SQL procedure parameter To define SQL procedure parameter used ParameterAttribute with parameters: Alias - procedure alias, Order - order number of parameter, Binding - name used inside application code (it's handy to use parameter with another name, not the name defined inside DB), Type - data type used inside application code, DbType - data type on ADO .Net provider level, Direction - optional, parameter direction, default is ParameterDirection . Input , Size - optional, parameter size(if applicable), Scale - optional, parameter presision (if applicable), Name - optional, parameter name, default is equal with Binding , DefaultType - default value type , DefaultValue optional, depends on DefaultType , NativeSqlType - optional, SQL type name ( NativeSqlType is used when type default mapping is conflicted with real SQL type), UdtTypeName - optional, user defined type (UDT), UdtElementTypeName - optional, user defined type (UDT) of UdtTypeName element (in case where UdtTypeName - array or table), IsArray - optional, parameter is array of UdtElementTypeName (when UdtElementTypeName is omited, array of DbType ), default is false . SQL procedure resultset To describe resultset of SQL procedure used ResultSetAttribute with parameters: Alias - procedure alias, Name - resultset name used inside application code, Order - optional, order number of resultset (required to procedures returns multiple resultsets), ResultType - optional, mapped type of resultset, default is attributed class itself, IsDefault - optional, resultset is default - mapped to attributed class (used when procedure returns multiple resultsets), default is false . SQL procedure resultset as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestProcedure : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL procedure with multiple resultsets sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"param3\", typeof(int), DbType.Int32), Parameter(\"T\", 4, \"param4\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\", IsDefault = true), ResultSet(\"T\", \"SecondResult\", ResultType = typeof(TestResult), Order = 2)] public class TestProcedure2 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public IEnumerable<TestResult> SecondResult { get { return this.GetResultSet(x => x.SecondResult); } } } SQL procedure with out parameter sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure3 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with out parameter and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\"), ResultSet(\"T\", \"Result\")] public class TestProcedure4 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with return value sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure5 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with return value and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"ResultParameter\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue), ResultSet(\"T\", \"Result\")] public class TestProcedure6 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public int ResultParameter { get { return this.GetParameter(x => x.ResultParameter); } } } SQL procedure with simple array parameter sample [DataObject(\"T\"), Procedure(\"T\", \"TestFunction\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int[]), DbType.Int32, IsArray = true), Parameter(\"T\", 2, \"Result\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue)] public class TestFunction : IDataObject { public int Result { get { return this.GetParameter(x => x.Result); } } } SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"TestFunction5\", ProcedureType.Function), Parameter(\"T\", 1, \"p_obj\", typeof(Classifier), DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), Parameter(\"T\", 2, \"Result\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.ReturnValue)] public class PostgreSqlTestFunction5 : IDataObject { public string Result { get { return this.GetParameter(x => x.Result); } } } SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure7\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(Classifier[]) /* Parameter type must be an array of mapped type */, DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), ResultSet(\"T\", \"Result\")] public class TestProcedure7 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL table valued function as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestFunction3 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL scalar function as property data source sample [DataObject(\"T\"), DataTable(\"T_DOC_TYPE\", \"T\"), Column(\"DocTypeId\", typeof(long), Flags = DataPropertyFlag.Id)] public class TestFunction4 : IDataObject { [Property(\"T\")] public string Code { get; set; } [Property(\"T\")] public string Name { get; set; } [Property, // Property expression attribute \"name\" is the name of private static field // with type Calculate<string> and attributed by SqlExpressionAttribute PropertyExpression(\"test\", DataExpressionType.LinqExpression, ExprSize = 20)] public string Test { get { return this.GetProperty(x => x.Test); } } // Private static field with type Calculate<string> and attributed by // SqlExpressionAttribute [SqlExpression] private static Calculate<string> test z => z.SqlFn<string>(\"dbo.TestFunction2\", y => y.Field<long>(\"T\", \"doc_type_id\"), y => y.Field<string>(\"T\", \"name\")) }"
  },
  "tutorial/mapping/static/sample.html": {
    "href": "tutorial/mapping/static/sample.html",
    "title": "Static mapping sample | XData website",
    "keywords": "Static mapping sample <!--class t_catalogue--> t_catalogue catalogue_id code name parent_id <!--class t_customer--> t_customer customer_id code name <!--class t_doc_cust_type--> t_doc_cust_type doc_cust_type_id code name <!--class t_doc_type--> t_doc_type doc_type_id code name <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_catalogue_doc--> t_catalogue_doc catalogue_id doc_id <!--class t_doc_cust--> t_doc_cust doc_cust_id doc_id customer_id doc_cust_type_id <!--class t_doc_delivery--> t_doc_delivery doc_id delivery_type delivery date <!--class t_doc_number--> t_doc_number doc_id numb <!--class t_doc_scan--> t_doc_scan doc_id scan <!--class t_doc_source--> t_doc_source doc_id source <!--class t_doc_state--> t_doc_state doc_state_id code name <!--class t_doc_doc_state--> t_doc_doc_state doc_id doc_state_id <!--class t_doc_history--> t_doc_history doc_history_id doc_id doc_state_id history_date <!--link t_catalogue to t_catalogue--> parent_id <!--link t_doc_type to t_doc--> doc_type_id <!--link t_catalogue to t_catalogue_doc--> catalogue_id <!--link t_catalogue_doc to t_doc--> doc_id <!--link t_doc to t_doc_cust--> doc_id <!--link t_doc_cust to t_customer--> customer_id <!--link t_doc_cust to t_doc_cust_type--> doc_cust_type_id <!--link t_doc_delivery to t_doc--> doc_id <!--link t_doc_number to t_doc--> doc_id <!--link t_doc_scan to t_doc--> doc_id <!--link t_doc_source to t_doc--> doc_id <!--link t_doc_doc_state to t_doc--> doc_id <!--link t_doc_state to t_doc_doc_state--> doc_state_id <!--link t_doc to t_doc_history--> doc_id <!--link t_doc_history to t_doc_state--> doc_state_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_catalogue { <&key> catalogue_id - - <&code> code name <&arrow-circle-right> //parent_id// } t_catalogue - -{ t_catalogue : parent_id entity t_customer { <&key> customer_id - - <&code> code name } entity t_doc_cust_type { <&key> doc_cust_type_id - - <&code> code name } entity t_doc_type { <&key> doc_type_id - - <&code> code name } entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } t_doc_type -right-{ t_doc : doc_type_id entity t_catalogue_doc { <&key> <&arrow-circle-right> catalogue_id <&key> <&arrow-circle-right> doc_id } t_catalogue_doc -up-{ t_catalogue : catalogue_id t_catalogue_doc - -{ t_doc : doc_id entity t_doc_cust { <&key> doc_cust_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> customer_id <&arrow-circle-right> doc_cust_type_id } t_doc_cust }-up- t_doc : doc_id t_doc_cust }- - t_customer : customer_id t_doc_cust }- - t_doc_cust_type : doc_cust_type_id entity t_doc_delivery { <&key> <&arrow-circle-right> doc_id - - delivery_type delivery date } t_doc_delivery }o- - t_doc : doc_id entity t_doc_number { <&key> <&arrow-circle-right> doc_id - - numb } t_doc_number }o- - t_doc : doc_id entity t_doc_scan { <&key> <&arrow-circle-right> doc_id - - <&map> scan } t_doc_scan }o- - t_doc : doc_id entity t_doc_source { <&key> <&arrow-circle-right> doc_id - - <&document> source } t_doc_source }o- - t_doc : doc_id entity t_doc_state { <&key> doc_state_id - - <&code> code name } entity t_doc_doc_state { <&key> <&arrow-circle-right> doc_id - - <&arrow-circle-right> doc_state_id } t_doc_doc_state }o-right- t_doc : doc_id t_doc_doc_state }-left- t_doc_state : doc_state_id entity t_doc_history { <&key> doc_history_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_state_id <&clock> history_date } t_doc_history }-up- t_doc : doc_id t_doc_history }- - t_doc_state : doc_state_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US --> <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_doc_spec_type--> t_doc_spec_type doc_spec_type_id code name <!--class t_doc_spec--> t_doc_spec doc_spec_id doc_id doc_spec_type_id <!--class t_doc_spec_amount--> t_doc_spec_amount doc_spec_id amount <!--link t_doc to t_doc_spec--> doc_id <!--link t_doc_spec to t_doc_spec_type--> doc_spec_type_id <!--link t_doc_spec to t_doc_spec_amount--> doc_spec_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } entity t_doc_spec_type { <&key> doc_spec_type_id - - <&code> code name } entity t_doc_spec { <&key> doc_spec_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_spec_type_id } t_doc_spec }-left- t_doc : doc_id t_doc_spec }- - t_doc_spec_type : doc_spec_type_id entity t_doc_spec_amount { <&key> <&arrow-circle-right> doc_spec_id - - <&dollar> amount } t_doc_spec_amount }o-left- t_doc_spec : doc_spec_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US --> Here is example of data object static mapping. Of course, real mapping is much simpler then this, but as example of XData capabilities it's realy representative... [DataObject(\"D\", LogicAssemblyName = \"XDataObjectTest\"), DataTable(\"T_DOC\", \"D\"), DictionaryFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\", \"D\"), DataTable(\"T_DOC_DOC_STATE\", \"DS\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DS\"), DataTable(\"T_DOC_STATE\", \"S\"), Link(\"DS\", \"doc_state_id\", \"S\"), DataTable(\"T_DOC_NUMBER\", \"N\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"N\"), DataTable(\"T_DOC_CUST\", \"CF\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"CF\"), DataTable(\"T_CUSTOMER\", \"F\"), Link(\"CF\", \"customer_id\", \"F\"), DictionaryFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"FROM\", \"CF\"), DataTable(\"T_DOC_CUST\", \"CT\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"CT\"), DataTable(\"T_CUSTOMER\", \"T\"), Link(\"CT\", \"customer_id\", \"T\"), DictionaryFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\", \"CT\"), DataTable(\"T_DOC_SCAN\", \"SC\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"SC\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_SOURCE\", \"SR\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"SR\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_DELIVERY\", \"DD\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DD\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_CATALOGUE\", \"DC\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DC\"), DataTable(\"T_CATALOGUE\", \"U\"), Link(\"U\", \"catalogue_id\", \"DC\"), Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", Grouping = DataGrouping.Sum), SubqueryLink(\"A\", \"DocId\"), InnerView(\"H\", typeof(DocLastChange)), SubqueryLink(\"H\", \"DocId\", Operation = FilterOperation.OuterJoin), ExternalLink(typeof(InvoiceSpec), \"DocId\"), InnerView(\"ST\", typeof(DocBySpecType)), SubqueryLink(\"ST\", \"DocId\"), Subquery(\"UT\", typeof(CatalogueTree), \"CatalogueId\"), SubqueryFilter(\"UT\", \"DC\", \"catalogue_id\", Operation = FilterOperation.In), Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), Column(\"DocStateId\", typeof(long), \"S\"), Column(\"FromCustomerId\", typeof(long), \"F\"), Column(\"ToCustomerId\", typeof(long), \"T\"), Column(\"CatalogueId\", typeof(long), \"U\"), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)] public class Invoice: IDataObject { [Property(\"S\", \"code\")] public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } [Property(\"S\", \"name\"), LinkProperty(\"Name\"), LinkProperty(Property = \"DocStateId\"), LinkProperty(\"Code\", \"DocStateCode\")] public Link<string, DocState> DocState { get; set; } [Property(\"U\", \"name\"), LinkProperty(Property = \"CatalogueId\"), LinkProperty(\"Name\")] public Link<string, Catalogue> DocCatalog { get; set; } [Property(\"N\", \"numb\")] public string DocNumb { get; set; } [Property(\"D\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DocDate { get; set; } [Property(\"D\", Flags = DataPropertyFlag.ConcurrencyToken), PropertyDefault(DefaultType.AutoIncrement)] public long Generation { get { return this.GetProperty(x => x.Generation); } } [Property(\"D\"), PropertyDefault(DefaultType.CurrentDateTime, DefaultFeature = DefaultFeature.UseOnUpdate)] public DateTime Changed { get { return this.GetProperty(x => x.Changed); } } [Property(\"D\"), PropertyDefault(DefaultType.UserName, DefaultFeature = DefaultFeature.UseOnUpdate)] public string Author { get { return this.GetProperty(x => x.Author); } } [Property, PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] public decimal? DocAmount { get { return this.GetProperty(x => x.DocAmount); } } [Reference(\"H\", \"HistoryDate\")] public DateTime? DocLastChange { get { return this.GetProperty(x => x.DocLastChange); } } [Property(\"SC\", Flags = DataPropertyFlag.OuterFlag)] public Lob Scan { get; set; } [Property(\"SR\", Flags = DataPropertyFlag.OuterFlag)] public Xml Source { get; set; } [Property(\"F\", \"name\"), LinkProperty(\"CustomerId\", \"FromCustomerId\"), LinkProperty(\"Name\")] public Link<string, Customer> CustomerFrom { get; set; } [Property(\"T\", \"name\"), LinkProperty(\"CustomerId\", \"ToCustomerId\"), LinkProperty(\"Name\")] public Link<string, Customer> CustomerTo { get; set; } [Property(\"DD\")] public DeliveryTypeEnum DeliveryType { get; set; } [Property(\"DD\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DeliveryDate { get; set; } public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } }"
  },
  "tutorial/mapping/static/parameters.html": {
    "href": "tutorial/mapping/static/parameters.html",
    "title": "Mapping parameters | XData website",
    "keywords": "Mapping parameters All statically mapped classes must be marked with DataObjectAttribute . Parameters of DataObjectAttribute : BaseTable - alias of base table (optional, default is virtual table with empty alias), Context - database context (optional, context will be specified at runtime), and Flags - data source flags (optional, default is None ). Example: [DataObject(\"D\" /* base table alias */, Context: \"Main\", Flags: DataObjectFlags.ReadOnly)] All tables in repository query must to be specified using DataTableAttribute . Parameters of DataTableAttribute : Name - name of table and Alias - table alias in query. Tables in updatable tables hierarchy , but not base table must to specify Parent parameter of this attribute - alias of parent table in updatable tables hierarchy. [DataTable(\"P\" /* table alias */, \"patient\" /* table name */, \"D\" /* parent table alias */)] Same way we can define mapping to view, but all fields of view must to be explicitly defined as readonly properties or columns ."
  },
  "tutorial/mapping/static/external_link.html": {
    "href": "tutorial/mapping/static/external_link.html",
    "title": "External link | XData website",
    "keywords": "External link External link can be statically defined using ExternalLinkAttribute with parameters: ChildType - slave repository mapped type, ChildProperty - link property in slave repository, Property - optional, link property in master repository, default used same name as ChildProperty , FilterName - optional, slave repository filter name, default used \"FilterBy\" + ChildProperty , MasterRefresh - optional, refresh master repository current row data on submit slave changes flag (usefull when master has calculated properties over slave repository data), default is false , DirectLink - optional, see tree master-slave specifics for details, default is false Operation - optional, link filter operation (see Filters ), default FilterOperation . Equal , Nullable - optional, filter null processing behaviour , default is FilterNullable . Nullable , Combination - optional, filter group name in slave repository. External links can be used in optional filters description (see Optional filters and optional subqueries ). To specify external link is optional filter part You can set primary filter flag PrimaryFilter . [ExternalLink(typeof(InvoiceSpec), \"DocId\")]"
  },
  "tutorial/mapping/dynamic/property/sql_expr.html": {
    "href": "tutorial/mapping/dynamic/property/sql_expr.html",
    "title": "SQL expression property | XData website",
    "keywords": "SQL expression property Readonly property can be mapped to SQL expression. Dynamic mapping of SQL expression is defined by one of IRepositoryStructureAdapter interface Expr method overload: Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) - used to define sql expression DataExpressionType.SubQuery or DataExpressionType.PlainSql When first overload used, SQL expression is defined by expr parameter value as lambda function with IQueryStructureAdapter interface extension methods inside: Case<T, TResult>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, TResult>> elseValue, params TaggedExpression<T, TResult>[] switchValues) - case when ... then ... else ... end SQL construction DateDiff<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, DateTime>> finalDate, Expression<Func<IQueryStructureAdapter, DateTime>> startDate, DateDiffKind kind) - date difference Exists(this IQueryStructureAdapter adapter, string subQueryAlias) - exists(select ...) SQL construction HasFlag<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, T>> flagValue, Expression<Func<IQueryStructureAdapter, T>> trueValue, Expression<Func<IQueryStructureAdapter, T>> falseValue) - bitwise mask checking for value SqlExpr<TResult>(this IQueryStructureAdapter adapter, string format, params Expression<Func<IQueryStructureAdapter, TResult>>[] expressions) - mixing plain SQL expressions with LINQ style defined expression subparts, parameter format is the string.Format mask SqlFn<TResult>(this IQueryStructureAdapter adapter, string name, params Expression<Func<IQueryStructureAdapter, object>>[] parameters) - SQL function call expression SqlParam<TResult>(this IQueryStructureAdapter adapter, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) - SQL function parameter value expression Mapping parameters of SQL expressions is defined by IRepositoryExpressionMappingAdapter interface methods: NativeSqlType(string nativeSqlType) - set native SQL type name of expression result, used when expression result type has specific SQL type Size(int size) - set number or varchar length of SQL expression result type Size(int size, int scale) - set length and scale for floating point SQL data types subquery, ... .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) ... LINQ expression, ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, y => y.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)), DbType.Decimal, z => z.Size(17, 5))) ... plain text SQL expression. ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, DataExpressionType.PlainSql, \"case P.is_vip when 1 then 10 else 0 end\", DbType.Decimal, z => z.Size(17, 5))) ... Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers."
  },
  "tutorial/mapping/dynamic/property/reference.html": {
    "href": "tutorial/mapping/dynamic/property/reference.html",
    "title": "Inner view reference | XData website",
    "keywords": "Inner view reference To map property to field from inner view used one of IRepositoryStructureAdapter interface Ref method overload: Ref<TValue>(string sourceAlias, string property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) - used when referenced property is a hidden property Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\"))"
  },
  "tutorial/mapping/dynamic/property/property.html": {
    "href": "tutorial/mapping/dynamic/property/property.html",
    "title": "Properties | XData website",
    "keywords": "Properties Properties dynamic mapping is performed as method call of IRepositoryStructure<T> interface: Column method call for each of hidden properties mapping ReadOnlyProperty method call for each of readonly properties mapping Map method call for declare all of read/write properties mapping ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, DefaultFeature.UseOnUpdate))) ... Parameter mapper of Map method alowes to define mapping rule for multiple read/write properties using lambda expression with IQueryStructureAdapter interface as parameter. ... .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode), z => z.LinkProperty<DocState>( (Invoice y) => y.GetProperty<long>(\"DocStateId\"))), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty<Catalogue>(y => y.Name), z => z.LinkProperty<Catalogue>( (Invoice y) => y.GetProperty<long>(\"CatalogueId\"))), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty<Customer>(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"FromCustomerId\"))), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty<Customer>(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"ToCustomerId\"))), DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink<InvoiceSpec>(\"DocId\")) ... Interfaces IRepositoryStructureAdapter<T> and IQueryStructureAdapter as successor has some overloads of methods to define mapping: Field<TVal> - for mapping property to data source field Expr<TVal> - for mapping property to SQL expression (see detailed description below ) Ref<TVal> - for mapping property to inner view property (see detailed description below ) IRepositoryStructureAdapter<T> also has a special methods to map Lob , Xml and Link<TVal,TSource> Lob - for mapping Lob property Xml - for mapping Xml property Link<TVal,TSource> - for mapping link property (see detailed description below ) These methods of single property mapping has parameter attributes to define additional mapping properties using interface IPropertyMappingAdapter : Key - primary unique key property flag, possible to mark multiple properties or hidden properties as key properties Hidden - flag, the field should not be included in the SELECT expression, but can be used in filters and/or links between data sources (tables, subqueries...) Group - property grouping parameters (see detailed description below ) And using interface IRepositoryPropertyMappingAdapter<T, TValue> : ConcurrencyToken - concurrency token flag for property Default - default value assign rules for property OuterFlag - outer join mandatory flag, values of properties marked this flag is analyzed during making decision of operations over tables in optional references Important Required to set at least one property of mapped class as primary unique key. Subqueries and inner views can has no key properties. Interface IQueryStructureAdapter<T> is used in dynamic queries only. Interfaces IRepositoryStructureAdapter and IRepositoryStructureAdapter<T> is used in dynamic repository mapping only. Interface IPropertyMappingAdapter is used as in dynamic queries as in dynamic repository mapping. Interface IRepositoryPropertyMappingAdapter is inherited from [IPropertyMappingAdapter] and used in dynamic repository mapping only. SQL expression property Readonly property can be mapped to SQL expression. Dynamic mapping of SQL expression is defined by one of IRepositoryStructureAdapter interface Expr method overload: Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) - used to define sql expression DataExpressionType.SubQuery or DataExpressionType.PlainSql When first overload used, SQL expression is defined by expr parameter value as lambda function with IQueryStructureAdapter interface extension methods inside: Case<T, TResult>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, TResult>> elseValue, params TaggedExpression<T, TResult>[] switchValues) - case when ... then ... else ... end SQL construction DateDiff<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, DateTime>> finalDate, Expression<Func<IQueryStructureAdapter, DateTime>> startDate, DateDiffKind kind) - date difference Exists(this IQueryStructureAdapter adapter, string subQueryAlias) - exists(select ...) SQL construction HasFlag<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, T>> flagValue, Expression<Func<IQueryStructureAdapter, T>> trueValue, Expression<Func<IQueryStructureAdapter, T>> falseValue) - bitwise mask checking for value SqlExpr<TResult>(this IQueryStructureAdapter adapter, string format, params Expression<Func<IQueryStructureAdapter, TResult>>[] expressions) - mixing plain SQL expressions with LINQ style defined expression subparts, parameter format is the string.Format mask SqlFn<TResult>(this IQueryStructureAdapter adapter, string name, params Expression<Func<IQueryStructureAdapter, object>>[] parameters) - SQL function call expression SqlParam<TResult>(this IQueryStructureAdapter adapter, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) - SQL function parameter value expression Mapping parameters of SQL expressions is defined by IRepositoryExpressionMappingAdapter interface methods: NativeSqlType(string nativeSqlType) - set native SQL type name of expression result, used when expression result type has specific SQL type Size(int size) - set number or varchar length of SQL expression result type Size(int size, int scale) - set length and scale for floating point SQL data types subquery, ... .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) ... LINQ expression, ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, y => y.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)), DbType.Decimal, z => z.Size(17, 5))) ... plain text SQL expression. ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, DataExpressionType.PlainSql, \"case P.is_vip when 1 then 10 else 0 end\", DbType.Decimal, z => z.Size(17, 5))) ... Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Property default value To set default value of property with dynamic mapping, use one of IRepositoryPropertyMappingAdapter<T, TValue> interface Default method overload: Default(DefaultType source) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert only Default(DefaultType source, DefaultFeature features) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert or update Default(DefaultType source, TValue value) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert only Default(DefaultType source, TValue value, DefaultFeature features) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert or update ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, DefaultFeature.UseOnUpdate))) ... Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. Use one of IPropertyMappingAdapter interface Group method overload: Group(int groupOrder) - when property mapped to field query grouped by with N-th order Group(DataGrouping grouping) - when property mapped to aggregation function over field ... HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) ... Hidden properties Hidden properties dynamically defined using Column method call of IRepositoryStructure<T> interface. Hidden property can be mapped to: data source field - Field<TVal> SQL expression (see detailed description above ) - Expr<TVal> inner view property (see detailed description below ) - Ref<TVal> ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ... Inner view reference To map property to field from inner view used one of IRepositoryStructureAdapter interface Ref method overload: Ref<TValue>(string sourceAlias, string property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) - used when referenced property is a hidden property Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\")) Links To dynamically define link property used one of IRepositoryStructureAdapter<T> interface Link method overload: Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) - used when source property is correlated with property name with default name mapping rule ( hungarian_notation in DB and CamelCaseNotation property name in code) Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, string fieldName, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) Parameter attributes of method Link value used to define link properties pairs with one of ILinkPropertyMappingAdapter<T> interface LinkProperties method overload call: LinkProperty() - used property of source object to assiciate with link property defined by Link method LinkProperty<TSource>(Expression<Func<TSource, object>> source) - used source as source property and equal named property from target object LinkProperty<TSource>(Expression<Func<TSource, object>> source, Expression<Func<T, object>> property) - specifing both properties ... DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode) z => z.LinkProperty<DocState>( (Invoice y) => y.GetProperty<long>(\"DocStateId\"))), ..."
  },
  "tutorial/mapping/dynamic/property/link.html": {
    "href": "tutorial/mapping/dynamic/property/link.html",
    "title": "Links | XData website",
    "keywords": "Links To dynamically define link property used one of IRepositoryStructureAdapter<T> interface Link method overload: Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) - used when source property is correlated with property name with default name mapping rule ( hungarian_notation in DB and CamelCaseNotation property name in code) Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, string fieldName, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) Parameter attributes of method Link value used to define link properties pairs with one of ILinkPropertyMappingAdapter<T> interface LinkProperties method overload call: LinkProperty() - used property of source object to assiciate with link property defined by Link method LinkProperty<TSource>(Expression<Func<TSource, object>> source) - used source as source property and equal named property from target object LinkProperty<TSource>(Expression<Func<TSource, object>> source, Expression<Func<T, object>> property) - specifing both properties ... DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode) z => z.LinkProperty<DocState>( (Invoice y) => y.GetProperty<long>(\"DocStateId\"))), ..."
  },
  "tutorial/mapping/dynamic/property/grouping.html": {
    "href": "tutorial/mapping/dynamic/property/grouping.html",
    "title": "Property grouping parameters | XData website",
    "keywords": "Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. Use one of IPropertyMappingAdapter interface Group method overload: Group(int groupOrder) - when property mapped to field query grouped by with N-th order Group(DataGrouping grouping) - when property mapped to aggregation function over field ... HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) ..."
  },
  "tutorial/mapping/dynamic/property/default.html": {
    "href": "tutorial/mapping/dynamic/property/default.html",
    "title": "Property default value | XData website",
    "keywords": "Property default value To set default value of property with dynamic mapping, use one of IRepositoryPropertyMappingAdapter<T, TValue> interface Default method overload: Default(DefaultType source) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert only Default(DefaultType source, DefaultFeature features) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert or update Default(DefaultType source, TValue value) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert only Default(DefaultType source, TValue value, DefaultFeature features) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert or update ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, DefaultFeature.UseOnUpdate))) ..."
  },
  "tutorial/mapping/dynamic/property/column.html": {
    "href": "tutorial/mapping/dynamic/property/column.html",
    "title": "Hidden properties | XData website",
    "keywords": "Hidden properties Hidden properties dynamically defined using Column method call of IRepositoryStructure<T> interface. Hidden property can be mapped to: data source field - Field<TVal> SQL expression (see detailed description above ) - Expr<TVal> inner view property (see detailed description below ) - Ref<TVal> ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ..."
  },
  "tutorial/mapping/dynamic/procedure/source.html": {
    "href": "tutorial/mapping/dynamic/procedure/source.html",
    "title": "SQL procedure as query | XData website",
    "keywords": "SQL procedure as query To define procedure as data source of mapping used Procedure method call of IRepositoryStructure<T> interface."
  },
  "tutorial/mapping/dynamic/procedure/sample_udt_array.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_udt_array.html",
    "title": "SQL procedure with UDT array parameter sample | XData website",
    "keywords": "SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var param = new[] { new Classifier { Id = 1, Name = \"Test\" }, new Classifier { Id = 2, Name = \"Some\" } }; var f4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction4\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"param1\".SetVar(param)); Console.WriteLine(f4.GetParameter<int>(\"result\"));"
  },
  "tutorial/mapping/dynamic/procedure/sample_udt.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_udt.html",
    "title": "SQL procedure with UDT parameter sample | XData website",
    "keywords": "SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var f5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction5\", ProcedureType.Function) .Parameter<Classifier>(\"T\", 1, \"p_obj\", DbType.Object, z => z.UdtDataType(\"classifier_rec\")) .Parameter<string>(\"T\", 3, \"result\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.ReturnValue), z => z.NativeSqlType(\"VARCHAR\")) .Call(DataScope.Layer, \"p_obj\".SetVar( new Classifier { Id = 1, Name = \"Test\" })); Console.WriteLine(f5.GetParameter<string>(\"result\"));"
  },
  "tutorial/mapping/dynamic/procedure/sample_table_func.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_table_func.html",
    "title": "SQL table valued function as query sample | XData website",
    "keywords": "SQL table valued function as query sample var f3 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(\"dbo.Classifier\")) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetVar(param)); foreach (var classifier in f3) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_scalar_func.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_scalar_func.html",
    "title": "SQL scalar function as property data source sample | XData website",
    "keywords": "SQL scalar function as property data source sample var f1 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction\", ProcedureType.Function) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); foreach (var classifier in f1) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_retval_cursor.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_retval_cursor.html",
    "title": "SQL procedure with return value and resultset sample | XData website",
    "keywords": "SQL procedure with return value and resultset sample var res6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(param)); foreach (var classifier in res6) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_retval.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_retval.html",
    "title": "SQL procedure with return value sample | XData website",
    "keywords": "SQL procedure with return value sample var res5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); Console.WriteLine(res5.GetParameter<int>(\"result\"));"
  },
  "tutorial/mapping/dynamic/procedure/sample_out_param.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_out_param.html",
    "title": "SQL procedure with out parameter sample | XData website",
    "keywords": "SQL procedure with out parameter sample var res3 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<string>(\"T\", 3, \"param3\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.Output)) .Call(DataScope.Layer, \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); Console.WriteLine(res3.GetParameter<string>(\"param3\"));"
  },
  "tutorial/mapping/dynamic/procedure/sample_out_cursor.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_out_cursor.html",
    "title": "SQL procedure with out parameter and resultset sample | XData website",
    "keywords": "SQL procedure with out parameter and resultset sample var res4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); Console.WriteLine(res4.GetParameter<int>(\"result\")); foreach (var classifier in res4) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_multiple_cursor.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_multiple_cursor.html",
    "title": "SQL procedure with multiple resultsets sample | XData website",
    "keywords": "SQL procedure with multiple resultsets sample var res2 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"param3\", DbType.Int32) .Parameter<string>(\"T\", 4, \"param4\", DbType.String) .Return(\"T\", \"Result1\", 1, convertor) .Return(\"T\", \"Result2\", 2, convertor) .Call<Classifier>(DataScope.Layer, \"Result1\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\"), \"param3\".SetVar(2), \"param4\".SetVar(\"Some\")); foreach (var classifier in res2) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); foreach (var classifier in res2.GetResultSet<Classifier>(\"Result2\")) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_cursor.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_cursor.html",
    "title": "SQL procedure resultset as query sample | XData website",
    "keywords": "SQL procedure resultset as query sample var res = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Return(\"T\", \"Result\", 1, convertor) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); foreach (var classifier in res) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_array.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_array.html",
    "title": "SQL procedure with simple array parameter sample | XData website",
    "keywords": "SQL procedure with simple array parameter sample var arr = new[] { 1, 2, 3 }; var f6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction6\", ProcedureType.Function) .Parameter<int[]>(\"T\", 1, \"p_arr\", DbType.Int32, z => z.Array()) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"p_arr\".SetVar(arr)); Console.WriteLine(f6.GetParameter<int>(\"result\"));"
  },
  "tutorial/mapping/dynamic/procedure/result.html": {
    "href": "tutorial/mapping/dynamic/procedure/result.html",
    "title": "SQL procedure resultset | XData website",
    "keywords": "SQL procedure resultset To describe resultset of SQL procedure used Return method call of IRepositoryStructure<T> interface."
  },
  "tutorial/mapping/dynamic/procedure/procedure.html": {
    "href": "tutorial/mapping/dynamic/procedure/procedure.html",
    "title": "SQL procedures & functions | XData website",
    "keywords": "SQL procedures & functions Common information about mapping to SQL procedures and functions described in common mapping rules description and here we just reprensent dynamic mapping rules for various procedure types. SQL procedure as query To define procedure as data source of mapping used Procedure method call of IRepositoryStructure<T> interface. SQL procedure parameter To define SQL procedure parameter used Parameter method call of IRepositoryStructure<T> interface. SQL procedure resultset To describe resultset of SQL procedure used Return method call of IRepositoryStructure<T> interface. SQL procedure resultset as query sample var res = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Return(\"T\", \"Result\", 1, convertor) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); foreach (var classifier in res) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with multiple resultsets sample var res2 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"param3\", DbType.Int32) .Parameter<string>(\"T\", 4, \"param4\", DbType.String) .Return(\"T\", \"Result1\", 1, convertor) .Return(\"T\", \"Result2\", 2, convertor) .Call<Classifier>(DataScope.Layer, \"Result1\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\"), \"param3\".SetVar(2), \"param4\".SetVar(\"Some\")); foreach (var classifier in res2) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); foreach (var classifier in res2.GetResultSet<Classifier>(\"Result2\")) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with out parameter sample var res3 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<string>(\"T\", 3, \"param3\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.Output)) .Call(DataScope.Layer, \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); Console.WriteLine(res3.GetParameter<string>(\"param3\")); SQL procedure with out parameter and resultset sample var res4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); Console.WriteLine(res4.GetParameter<int>(\"result\")); foreach (var classifier in res4) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with return value sample var res5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); Console.WriteLine(res5.GetParameter<int>(\"result\")); SQL procedure with return value and resultset sample var res6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(param)); foreach (var classifier in res6) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with simple array parameter sample var arr = new[] { 1, 2, 3 }; var f6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction6\", ProcedureType.Function) .Parameter<int[]>(\"T\", 1, \"p_arr\", DbType.Int32, z => z.Array()) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"p_arr\".SetVar(arr)); Console.WriteLine(f6.GetParameter<int>(\"result\")); SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var f5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction5\", ProcedureType.Function) .Parameter<Classifier>(\"T\", 1, \"p_obj\", DbType.Object, z => z.UdtDataType(\"classifier_rec\")) .Parameter<string>(\"T\", 3, \"result\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.ReturnValue), z => z.NativeSqlType(\"VARCHAR\")) .Call(DataScope.Layer, \"p_obj\".SetVar( new Classifier { Id = 1, Name = \"Test\" })); Console.WriteLine(f5.GetParameter<string>(\"result\")); SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var param = new[] { new Classifier { Id = 1, Name = \"Test\" }, new Classifier { Id = 2, Name = \"Some\" } }; var f4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction4\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"param1\".SetVar(param)); Console.WriteLine(f4.GetParameter<int>(\"result\")); SQL table valued function as query sample var f3 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(\"dbo.Classifier\")) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetVar(param)); foreach (var classifier in f3) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL scalar function as property data source sample var f1 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction\", ProcedureType.Function) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); foreach (var classifier in f1) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/parameter.html": {
    "href": "tutorial/mapping/dynamic/procedure/parameter.html",
    "title": "SQL procedure parameter | XData website",
    "keywords": "SQL procedure parameter To define SQL procedure parameter used Parameter method call of IRepositoryStructure<T> interface."
  },
  "tutorial/mapping/dynamic/filter/subquery_links.html": {
    "href": "tutorial/mapping/dynamic/filter/subquery_links.html",
    "title": "Subquery links | XData website",
    "keywords": "Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used one of SubqueryLink method overload of ISubqueryLinkAdapter , ISubqueryLinkAdapter<TDObj> or ISubqueryLinkAdapter<T,TDObj> depending by outer method signature and subquery declaration specific. ... .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ... Tip Subquery links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call."
  },
  "tutorial/mapping/dynamic/filter/subquery.html": {
    "href": "tutorial/mapping/dynamic/filter/subquery.html",
    "title": "Subquery filters | XData website",
    "keywords": "Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilter method of IInnerFilterAdapter . ... .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\") .SetOperation(FilterOperation.In)) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) ... Tip Subquery filters can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call."
  },
  "tutorial/mapping/dynamic/filter/sql_expr.html": {
    "href": "tutorial/mapping/dynamic/filter/sql_expr.html",
    "title": "SQL expression filters | XData website",
    "keywords": "SQL expression filters To define filter over SQL expression used one of ExprFilter method overloads of IInnerFilterAdapter interface. There are two overloads of ExprFilter method: IFilterDescription ExprFilter(string field, string exprText) - to use with plain SQL expressions or subquery alias IFilterDescription ExprFilter<T>(string field, Expression<Func<IQueryStructureAdapter, T>> expression) - to use with SQL expressions as LINQ style expressions Depending style of SQL expression description that overloads can be used with: subquery alias, , ExprFilter(\"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */) .SetOperation(FilterOperation.In) dynamic definition of SQL expression, , ExprFilter(\"discount\" /* field name */, /* expression: SQL expression LINQ style definition */ x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)), Operation: FilterOperation.NotEqual /* filter operation */)] plain SQL expression text. , ExprFilter(\"discount\" /* field name */, /* ExpressionText: plain SQL expression */ \"case P.is_vip when 1 then 10 else 0 end\") .SetOperation(FilterOperation.NotEqual) Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers."
  },
  "tutorial/mapping/dynamic/filter/range.html": {
    "href": "tutorial/mapping/dynamic/filter/range.html",
    "title": "Range filters | XData website",
    "keywords": "Range filters To define filter checks field value over array of values used RangeFilter methods of IInnerFilterAdapter interface. ... , RangeFilter(\"discount\", new[] {0,5,10}) .SetOperation(FilterOperation.In) ..."
  },
  "tutorial/mapping/dynamic/filter/inner_links.html": {
    "href": "tutorial/mapping/dynamic/filter/inner_links.html",
    "title": "Inner links | XData website",
    "keywords": "Inner links To define links between data sources inside query used Link overloads of IInnerFilterAdapter interface. ... , x => x.Link(\"DS\", \"doc_state_id\") ... Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call."
  },
  "tutorial/mapping/dynamic/filter/group.html": {
    "href": "tutorial/mapping/dynamic/filter/group.html",
    "title": "Filter group | XData website",
    "keywords": "Filter group Filter group of filter can be assigned to it declaration by SetCombination extension of IFilterDescription interface. ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ..."
  },
  "tutorial/mapping/dynamic/filter/filter.html": {
    "href": "tutorial/mapping/dynamic/filter/filter.html",
    "title": "Filters | XData website",
    "keywords": "Filters Filters can be defined as: Constant filters SQL expression filters Dictionary filters Range filters Subquery filters Inner links Each of them described by corresponding LINQ expression define their parameters depending on the context of their use and the type of the filter itself (see below). Filter descriptions are provided to filters paramter value of DataTable , Subquery , InnerView and Procedure methods of IRepositoryStructure<T> interface, or WithRecursive method of IQueryWithAdapter<TRoot> . Each of expression has described one filter. Type of filter is declared by one of fabric method of interface inside lambda expression with one of followed filter adapter: IInnerFilterAdapter - filter adapter to define filters and links inside plain query (see DataTable , Procedure ), ISubqueryLinkAdapter , ISubqueryLinkAdapter<TDObj> and ISubqueryLinkAdapter<T,TDObj> - used in various overloads of subquery definition (see Subquery , InnerView and WithRecursive ) to declare links with subqueries. Specific parameters for each type of filter is described in filter fabric methods described below in specific topics. And some optional modificators can be defined using continue LINQ calls with extension methods: SetOperation - to set filter operation AsPrimary - to set optional filter flag SetCombination - to set filter combination Each of filter type is defined by own special method of corresponding filter adapter. Filter operation is defined by enum FilterOperation : Equal - equal NotEqual - not equal LessThan - less then GreaterThan - greater then LessThanOrEqual - less or equal GreaterThanOrEqual - greater or equal In - field value in range or subquery NotIn - field value is not in range or subquery Exists - subquery returns one or more rows NotExists - subquery returns no rows Like - field value correlated with find expression NotLike - field value not correlated with find expression OuterJoin - left outer join link between query sources (tables or inner views) Contains - field value correlated with fulltext search NotContains - field value not correlated with fulltext search Filter group Filter group of filter can be assigned to it declaration by SetCombination extension of IFilterDescription interface. ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ... Constant filters Constant filters alowes to restict selection of data by some constant value. This filter defined by one of ConstFilter method overloads of IInnerFilterAdapter interface. Constant type list restricted by enum FilterConstantType : Const - constant with value setted by ConstantValue . Variable - value of variable with name setted by ConstantValue . CurrentDate - current date. CurrentDateTime - current date and time. CurrentDateTimeUTC - current date and time (UTC). ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ... SQL expression filters To define filter over SQL expression used one of ExprFilter method overloads of IInnerFilterAdapter interface. There are two overloads of ExprFilter method: IFilterDescription ExprFilter(string field, string exprText) - to use with plain SQL expressions or subquery alias IFilterDescription ExprFilter<T>(string field, Expression<Func<IQueryStructureAdapter, T>> expression) - to use with SQL expressions as LINQ style expressions Depending style of SQL expression description that overloads can be used with: subquery alias, , ExprFilter(\"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */) .SetOperation(FilterOperation.In) dynamic definition of SQL expression, , ExprFilter(\"discount\" /* field name */, /* expression: SQL expression LINQ style definition */ x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)), Operation: FilterOperation.NotEqual /* filter operation */)] plain SQL expression text. , ExprFilter(\"discount\" /* field name */, /* ExpressionText: plain SQL expression */ \"case P.is_vip when 1 then 10 else 0 end\") .SetOperation(FilterOperation.NotEqual) Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Range filters To define filter checks field value over array of values used RangeFilter methods of IInnerFilterAdapter interface. ... , RangeFilter(\"discount\", new[] {0,5,10}) .SetOperation(FilterOperation.In) ... Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by one of DictFilter overloads of IInnerFilterAdapter interface. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. ... , x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\") ... Inner links To define links between data sources inside query used Link overloads of IInnerFilterAdapter interface. ... , x => x.Link(\"DS\", \"doc_state_id\") ... Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilter method of IInnerFilterAdapter . ... .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\") .SetOperation(FilterOperation.In)) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) ... Tip Subquery filters can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used one of SubqueryLink method overload of ISubqueryLinkAdapter , ISubqueryLinkAdapter<TDObj> or ISubqueryLinkAdapter<T,TDObj> depending by outer method signature and subquery declaration specific. ... .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ... Tip Subquery links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call."
  },
  "tutorial/mapping/dynamic/filter/dictionary.html": {
    "href": "tutorial/mapping/dynamic/filter/dictionary.html",
    "title": "Dictionary filters | XData website",
    "keywords": "Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by one of DictFilter overloads of IInnerFilterAdapter interface. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. ... , x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\") ..."
  },
  "tutorial/mapping/dynamic/filter/constant.html": {
    "href": "tutorial/mapping/dynamic/filter/constant.html",
    "title": "Constant filters | XData website",
    "keywords": "Constant filters Constant filters alowes to restict selection of data by some constant value. This filter defined by one of ConstFilter method overloads of IInnerFilterAdapter interface. Constant type list restricted by enum FilterConstantType : Const - constant with value setted by ConstantValue . Variable - value of variable with name setted by ConstantValue . CurrentDate - current date. CurrentDateTime - current date and time. CurrentDateTimeUTC - current date and time (UTC). ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ..."
  },
  "tutorial/mapping/dynamic/tree.html": {
    "href": "tutorial/mapping/dynamic/tree.html",
    "title": "Tree | XData website",
    "keywords": "Tree To dynamically map tree organized data structure used special method With of RepositoryStructure<T> interface to describe tree root query and tree childs. Both of them use subquery mappings (see example below) to set subquery structure for tree query construction. Important Data source flags of tree organized data sources must contain DataStructureFlag.ReadOnly and DataStructureFlag.Tree! private static Expression<CustomMapping<CatalogueTree>> _unused = ( () => XDataMapping.CustomMapping<CatalogueTree>() .With(\"CAT\", XDataMapping.GetStructure(\"R\", null, DataStructureFlag.ReadOnly) .DataTable(\"T_CATALOGUE\", \"R\", x => x.Combination(\"root\", Combination.Or), x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed).SetCombination(\"root\"), x => x.ConstFilter(\"FilterByRoot\", \"parent_id\", FilterConstantType.Const, null, FilterNullable.NullsCompared) .SetCombination(\"root\")) .Select(x => new { CatalogueId = x.Field<long>(\"R\", string.Empty, z => z.Key()), Code = x.Field<string>(\"R\", string.Empty), Name = x.Field<string>(\"R\", string.Empty), ParentId = x.Field<long?>(\"R\", string.Empty), }), x => x.Properties(z => z.CatalogueId, z => z.Code, z => z.Name, z => z.ParentId), x => x.WithRecursive(\"S\", XDataMapping .GetStructure(\"S\", null, DataStructureFlag.ReadOnly) .DataTable(\"T_CATALOGUE\", \"S\") .Select(y => new { CatalogueId = y.Field<long>(\"S\", string.Empty, z => z.Key()), Code = y.Field<string>(\"S\", string.Empty), Name = y.Field<string>(\"S\", string.Empty), ParentId = y.Field<long?>(\"S\", string.Empty) }), z => z.SubqueryLink(y => y.ParentId, y => y.CatalogueId))) .ReadOnlyProperty(x => x.CatalogueId, x => x.Field<long>(\"CAT\", string.Empty, z => z.Key())) .ReadOnlyProperty(x => x.Code, x => x.Field<string>(\"CAT\", string.Empty)) .ReadOnlyProperty(x => x.Name, x => x.Field<string>(\"CAT\", string.Empty)) .ReadOnlyProperty(x => x.ParentId, x => x.Field<long?>(\"CAT\", string.Empty)) .Map(x => new CatalogueTree()) .SetFlags(DataStructureFlag.ReadOnly | DataStructureFlag.Tree) );"
  },
  "tutorial/mapping/dynamic/subquery.html": {
    "href": "tutorial/mapping/dynamic/subquery.html",
    "title": "Subqueries | XData website",
    "keywords": "Subqueries Subqueries can be used for a: filtration using [not] exists() , [not] in (select) ( see below ) inner view subquery expression as single property source ( see below ) Subquery deep level not reglamented. In dynamic mapping of data object subqueries can be defined using one of Subquery or InnerView methods overload of IRepositoryStructure<T> interface to define subqueries or inner views respectively. While using generic overloads of Subquery or InnerView , parameter IQueryDescription<TDobj> sub can be used with in place dynamic query notation. Non generic overloads of Subquery or InnerView must provide ISqlType or IDataObject marked class type as parameter Type dobjType to reuse of existing mapping. This class can be mapped using static or dynamic style, no matter. ... .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", null, DataStructureFlag.Grouping, new Variable[0]) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<long?>(\"H\", string.Empty, z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(\"DocId\").SetOperation(FilterOperation.OuterJoin)) .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ..."
  },
  "tutorial/mapping/dynamic/sample.html": {
    "href": "tutorial/mapping/dynamic/sample.html",
    "title": "Dynamic mapping sample | XData website",
    "keywords": "Dynamic mapping sample <!--class t_catalogue--> t_catalogue catalogue_id code name parent_id <!--class t_customer--> t_customer customer_id code name <!--class t_doc_cust_type--> t_doc_cust_type doc_cust_type_id code name <!--class t_doc_type--> t_doc_type doc_type_id code name <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_catalogue_doc--> t_catalogue_doc catalogue_id doc_id <!--class t_doc_cust--> t_doc_cust doc_cust_id doc_id customer_id doc_cust_type_id <!--class t_doc_delivery--> t_doc_delivery doc_id delivery_type delivery date <!--class t_doc_number--> t_doc_number doc_id numb <!--class t_doc_scan--> t_doc_scan doc_id scan <!--class t_doc_source--> t_doc_source doc_id source <!--class t_doc_state--> t_doc_state doc_state_id code name <!--class t_doc_doc_state--> t_doc_doc_state doc_id doc_state_id <!--class t_doc_history--> t_doc_history doc_history_id doc_id doc_state_id history_date <!--link t_catalogue to t_catalogue--> parent_id <!--link t_doc_type to t_doc--> doc_type_id <!--link t_catalogue to t_catalogue_doc--> catalogue_id <!--link t_catalogue_doc to t_doc--> doc_id <!--link t_doc to t_doc_cust--> doc_id <!--link t_doc_cust to t_customer--> customer_id <!--link t_doc_cust to t_doc_cust_type--> doc_cust_type_id <!--link t_doc_delivery to t_doc--> doc_id <!--link t_doc_number to t_doc--> doc_id <!--link t_doc_scan to t_doc--> doc_id <!--link t_doc_source to t_doc--> doc_id <!--link t_doc_doc_state to t_doc--> doc_id <!--link t_doc_state to t_doc_doc_state--> doc_state_id <!--link t_doc to t_doc_history--> doc_id <!--link t_doc_history to t_doc_state--> doc_state_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_catalogue { <&key> catalogue_id - - <&code> code name <&arrow-circle-right> //parent_id// } t_catalogue - -{ t_catalogue : parent_id entity t_customer { <&key> customer_id - - <&code> code name } entity t_doc_cust_type { <&key> doc_cust_type_id - - <&code> code name } entity t_doc_type { <&key> doc_type_id - - <&code> code name } entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } t_doc_type -right-{ t_doc : doc_type_id entity t_catalogue_doc { <&key> <&arrow-circle-right> catalogue_id <&key> <&arrow-circle-right> doc_id } t_catalogue_doc -up-{ t_catalogue : catalogue_id t_catalogue_doc - -{ t_doc : doc_id entity t_doc_cust { <&key> doc_cust_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> customer_id <&arrow-circle-right> doc_cust_type_id } t_doc_cust }-up- t_doc : doc_id t_doc_cust }- - t_customer : customer_id t_doc_cust }- - t_doc_cust_type : doc_cust_type_id entity t_doc_delivery { <&key> <&arrow-circle-right> doc_id - - delivery_type delivery date } t_doc_delivery }o- - t_doc : doc_id entity t_doc_number { <&key> <&arrow-circle-right> doc_id - - numb } t_doc_number }o- - t_doc : doc_id entity t_doc_scan { <&key> <&arrow-circle-right> doc_id - - <&map> scan } t_doc_scan }o- - t_doc : doc_id entity t_doc_source { <&key> <&arrow-circle-right> doc_id - - <&document> source } t_doc_source }o- - t_doc : doc_id entity t_doc_state { <&key> doc_state_id - - <&code> code name } entity t_doc_doc_state { <&key> <&arrow-circle-right> doc_id - - <&arrow-circle-right> doc_state_id } t_doc_doc_state }o-right- t_doc : doc_id t_doc_doc_state }-left- t_doc_state : doc_state_id entity t_doc_history { <&key> doc_history_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_state_id <&clock> history_date } t_doc_history }-up- t_doc : doc_id t_doc_history }- - t_doc_state : doc_state_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US --> <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_doc_spec_type--> t_doc_spec_type doc_spec_type_id code name <!--class t_doc_spec--> t_doc_spec doc_spec_id doc_id doc_spec_type_id <!--class t_doc_spec_amount--> t_doc_spec_amount doc_spec_id amount <!--link t_doc to t_doc_spec--> doc_id <!--link t_doc_spec to t_doc_spec_type--> doc_spec_type_id <!--link t_doc_spec to t_doc_spec_amount--> doc_spec_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } entity t_doc_spec_type { <&key> doc_spec_type_id - - <&code> code name } entity t_doc_spec { <&key> doc_spec_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_spec_type_id } t_doc_spec }-left- t_doc : doc_id t_doc_spec }- - t_doc_spec_type : doc_spec_type_id entity t_doc_spec_amount { <&key> <&arrow-circle-right> doc_spec_id - - <&dollar> amount } t_doc_spec_amount }o-left- t_doc_spec : doc_spec_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US --> Dynamic mapping example for same data object as represented in static mapping description: public partial class Invoice: IDataObject { public static CustomLogic<Invoice> TestCustomLogic; private static Expression<CustomMapping<Invoice>> _mapping = ( () => XDataMapping.CustomMapping<Invoice>() .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_DOC_STATE\", \"DS\", \"D\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_STATE\", \"S\", x => x.Link(\"DS\", \"doc_state_id\")) .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\").SetOperation(FilterOperation.In)) .DataTable(\"T_CATALOGUE\", \"U\", x => x.Link(\"DC\", \"catalogue_id\")) .DataTable(\"T_DOC_NUMBER\", \"N\", \"D\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_CUST\", \"CF\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"FROM\")) .DataTable(\"T_CUSTOMER\", \"F\", x => x.Link(\"CF\", \"customer_id\")) .DataTable(\"T_DOC_CUST\", \"CT\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\")) .DataTable(\"T_CUSTOMER\", \"T\", x => x.Link(\"CT\", \"customer_id\")) .DataTable(\"T_DOC_SCAN\", \"SC\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .DataTable(\"T_DOC_SOURCE\", \"SR\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .DataTable(\"T_DOC_DELIVERY\", \"DD\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", null, DataStructureFlag.Grouping, new Variable[0]) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<long?>(\"H\", string.Empty, z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(\"DocId\").SetOperation(FilterOperation.OuterJoin)) .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) .Column(\"DocStateId\", x => x.Field<long>(\"S\", string.Empty)) .Column(\"FromCustomerId\", x => x.Field<long>(\"F\", \"customer_id\")) .Column(\"ToCustomerId\", x => x.Field<long>(\"T\", \"customer_id\")) .Column(\"CatalogueId\", x => x.Field<long?>(\"U\", string.Empty)) .ReadOnlyProperty(x => x.DocStateCode, x => x.Field<string>(\"S\", \"code\")) .ReadOnlyProperty(x => x.Generation, x => x.Field<long>(\"D\", string.Empty, z => z.ConcurrencyToken(), z => z.Default(DefaultType.AutoIncrement))) .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, DefaultFeature.UseOnUpdate))) .ReadOnlyProperty(x => x.Author, x => x.Field<string>(\"D\", string.Empty, z => z.Default(DefaultType.UserName, DefaultFeature.UseOnUpdate))) .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\")) .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode), z => z.LinkProperty<DocState>((Invoice y) => y.GetProperty<long>(\"DocStateId\"))), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty<Catalogue>(y => y.Name), z => z.LinkProperty<Catalogue>((Invoice y) => y.GetProperty<long>(\"CatalogueId\"))), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty<Customer>(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"FromCustomerId\"))), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty<Customer>(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"ToCustomerId\"))), DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink<InvoiceSpec>(\"DocId\")) .SetBaseTable(\"D\").SetLogicAssembly(\"XDataObjectTest\") ); } ... public partial class Invoice { public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } public Link<string, DocState> DocState { get; set; } public Link<string, Catalogue> DocCatalog { get; set; } public string DocNumb { get; set; } public DateTime? DocDate { get; set; } public long Generation { get { return this.GetProperty(x => x.Generation); } } public DateTime Changed { get { return this.GetProperty(x => x.Changed); } } public string Author { get { return this.GetProperty(x => x.Author); } } public decimal? DocAmount { get { return this.GetProperty(x => x.DocAmount); } } public DateTime? DocLastChange { get { return this.GetProperty(x => x.DocLastChange); } } public Lob Scan { get; set; } public Xml Source { get; set; } public Link<string, Customer> CustomerFrom { get; set; } public Link<string, Customer> CustomerTo { get; set; } public DeliveryTypeEnum DeliveryType { get; set; } public DateTime? DeliveryDate { get; set; } public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } } Dynamic mapping provide more representable mechanics to define mapping because of no attribute parameters limitation. Subqueries and inner views can be described in place using dynamic query mechanics. SQL expressions can be described in LINQ style in place. This abilities enreach representability of dynamic mapping. Dynamic mapping alowes split data object to partial class definitions with basic class definition and mapping. Dynamic mapping is described as private static field of type Expression<CustomMapping<T>> where T - data object type. The value of this property is assigned by call of XDataMapping.CustomMapping<T> method returning IRepositoryStructure<T> . Interface IRepositoryStructure<T> has a number of methods to describe all of mapping entities analog to static mapping attributes."
  },
  "tutorial/mapping/dynamic/parameters.html": {
    "href": "tutorial/mapping/dynamic/parameters.html",
    "title": "Mapping parameters | XData website",
    "keywords": "Mapping parameters To set parameters of dynamically mapped classes used IRepositoryDescription<T> interface methods: SetBaseTable - to set base table , (optional, by default used virtual table with the empty alias) SetContext - database context (optional, by default context will by assigned in runtime) SetFlags - data source flags (optional, by default None ) SetLogicAssembly - to set data processing logic class assembly FullName for this repository (see Using three tier architecture и IDataLogic<T> ) To get reference to IRepositoryDescription<T> interface is required to define maping of repository read/write properties using IRepositoryStructure<T> interface method Map Example: ... .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode), z => z.LinkProperty<DocState>( (Invoice y) => y.GetProperty<long>(\"DocStateId\"))), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty(y => y.Name), z => z.LinkProperty<Catalogue>( (Invoice y) => y.GetProperty<long>(\"CatalogueId\"))), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"FromCustomerId\"))), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"ToCustomerId\"))), DeliveryType = x.Field(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink(\"DocId\")) .SetBaseTable(\"D\").SetLogicAssembly(\"XDataObjectTest\") ... More detailed repository properties map description see below . All tables of data object mapping decribed by IRepositoryStructure<T>. DataTable method. Tables included into updatable tables hierarchy excluding base table must be defined using special overload alowes to set parent table alias. ... .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_DOC_STATE\", \"DS\", \"D\", x => x.Link(\"D\", \"doc_id\")) ... Same way is possible to define mapping to view , but all properties must to mapped as read only properties or hidden fields . Important Filters and links between tables is defined using filters parameter of IRepositoryStructure<T>. DataTable method or it's overload . Detailed filter definition described below ."
  },
  "tutorial/mapping/dynamic/external_link.html": {
    "href": "tutorial/mapping/dynamic/external_link.html",
    "title": "External link | XData website",
    "keywords": "External link External link can be dynamically defined using expression of type Expression as part of call Map method of IRepositoryStructure interface. Expression<IExternalLinkDefinition> can be obtained using multiple overloads of ExternalLink method of ExternalLinkDefinitionAdapter<T> : IExternalLinkDefinition ExternalLink<TChild>(params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkDefinition ExternalLink<TChild>(Expression<Func<IRepositoryStructureAdapter<TChild>, object>> property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkDefinition ExternalLink<TChild>(string property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkAdapter<T, TChild> used to specify properties of external link: Filter - used to specify external link runtime filter, FilterCombination - used to set filter group of filter, DirectLink - used to set direct link flag, see tree master-slave specifics for details, MasterRefresh - used to set refresh master repository current row data on submit slave changes flag (usefull when master has calculated properties over slave repository data), Nullable - filter null processing behaviour , Operation - link filter operation (see Filters ), PrimaryFilter - used to specify external link is optional filter, Property - link property in master repository (used when property is hidden peroperty ), Property<TChildLink> - link property in master repository (used when property is actual property), TreeFilter - used to set external link filter's tree filter flag // when external link used hidden property ..., x => x.ExternalLink<InvoiceSpec>(\"DocId\")) // when external link used readonly or regular property ..., x => x.ExternalLink<InvoiceSpec>(z => z.DocId))"
  },
  "tutorial/mapping/dynamic/dynamic.html": {
    "href": "tutorial/mapping/dynamic/dynamic.html",
    "title": "Dynamic mapping | XData website",
    "keywords": "XData tutorial Mapping common rules Dynamic mapping Tip Before read this topic be sure to already readed Glosary and Common mapping rules containg base infomation to better understanding this. Dynamic mapping is defined using specific LINQ style expression as private static field of mapped class and it properties. Dynamic mapping sample <!--class t_catalogue--> t_catalogue catalogue_id code name parent_id <!--class t_customer--> t_customer customer_id code name <!--class t_doc_cust_type--> t_doc_cust_type doc_cust_type_id code name <!--class t_doc_type--> t_doc_type doc_type_id code name <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_catalogue_doc--> t_catalogue_doc catalogue_id doc_id <!--class t_doc_cust--> t_doc_cust doc_cust_id doc_id customer_id doc_cust_type_id <!--class t_doc_delivery--> t_doc_delivery doc_id delivery_type delivery date <!--class t_doc_number--> t_doc_number doc_id numb <!--class t_doc_scan--> t_doc_scan doc_id scan <!--class t_doc_source--> t_doc_source doc_id source <!--class t_doc_state--> t_doc_state doc_state_id code name <!--class t_doc_doc_state--> t_doc_doc_state doc_id doc_state_id <!--class t_doc_history--> t_doc_history doc_history_id doc_id doc_state_id history_date <!--link t_catalogue to t_catalogue--> parent_id <!--link t_doc_type to t_doc--> doc_type_id <!--link t_catalogue to t_catalogue_doc--> catalogue_id <!--link t_catalogue_doc to t_doc--> doc_id <!--link t_doc to t_doc_cust--> doc_id <!--link t_doc_cust to t_customer--> customer_id <!--link t_doc_cust to t_doc_cust_type--> doc_cust_type_id <!--link t_doc_delivery to t_doc--> doc_id <!--link t_doc_number to t_doc--> doc_id <!--link t_doc_scan to t_doc--> doc_id <!--link t_doc_source to t_doc--> doc_id <!--link t_doc_doc_state to t_doc--> doc_id <!--link t_doc_state to t_doc_doc_state--> doc_state_id <!--link t_doc to t_doc_history--> doc_id <!--link t_doc_history to t_doc_state--> doc_state_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_catalogue { <&key> catalogue_id - - <&code> code name <&arrow-circle-right> //parent_id// } t_catalogue - -{ t_catalogue : parent_id entity t_customer { <&key> customer_id - - <&code> code name } entity t_doc_cust_type { <&key> doc_cust_type_id - - <&code> code name } entity t_doc_type { <&key> doc_type_id - - <&code> code name } entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } t_doc_type -right-{ t_doc : doc_type_id entity t_catalogue_doc { <&key> <&arrow-circle-right> catalogue_id <&key> <&arrow-circle-right> doc_id } t_catalogue_doc -up-{ t_catalogue : catalogue_id t_catalogue_doc - -{ t_doc : doc_id entity t_doc_cust { <&key> doc_cust_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> customer_id <&arrow-circle-right> doc_cust_type_id } t_doc_cust }-up- t_doc : doc_id t_doc_cust }- - t_customer : customer_id t_doc_cust }- - t_doc_cust_type : doc_cust_type_id entity t_doc_delivery { <&key> <&arrow-circle-right> doc_id - - delivery_type delivery date } t_doc_delivery }o- - t_doc : doc_id entity t_doc_number { <&key> <&arrow-circle-right> doc_id - - numb } t_doc_number }o- - t_doc : doc_id entity t_doc_scan { <&key> <&arrow-circle-right> doc_id - - <&map> scan } t_doc_scan }o- - t_doc : doc_id entity t_doc_source { <&key> <&arrow-circle-right> doc_id - - <&document> source } t_doc_source }o- - t_doc : doc_id entity t_doc_state { <&key> doc_state_id - - <&code> code name } entity t_doc_doc_state { <&key> <&arrow-circle-right> doc_id - - <&arrow-circle-right> doc_state_id } t_doc_doc_state }o-right- t_doc : doc_id t_doc_doc_state }-left- t_doc_state : doc_state_id entity t_doc_history { <&key> doc_history_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_state_id <&clock> history_date } t_doc_history }-up- t_doc : doc_id t_doc_history }- - t_doc_state : doc_state_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US --> <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_doc_spec_type--> t_doc_spec_type doc_spec_type_id code name <!--class t_doc_spec--> t_doc_spec doc_spec_id doc_id doc_spec_type_id <!--class t_doc_spec_amount--> t_doc_spec_amount doc_spec_id amount <!--link t_doc to t_doc_spec--> doc_id <!--link t_doc_spec to t_doc_spec_type--> doc_spec_type_id <!--link t_doc_spec to t_doc_spec_amount--> doc_spec_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } entity t_doc_spec_type { <&key> doc_spec_type_id - - <&code> code name } entity t_doc_spec { <&key> doc_spec_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_spec_type_id } t_doc_spec }-left- t_doc : doc_id t_doc_spec }- - t_doc_spec_type : doc_spec_type_id entity t_doc_spec_amount { <&key> <&arrow-circle-right> doc_spec_id - - <&dollar> amount } t_doc_spec_amount }o-left- t_doc_spec : doc_spec_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US --> Dynamic mapping example for same data object as represented in static mapping description: public partial class Invoice: IDataObject { public static CustomLogic<Invoice> TestCustomLogic; private static Expression<CustomMapping<Invoice>> _mapping = ( () => XDataMapping.CustomMapping<Invoice>() .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_DOC_STATE\", \"DS\", \"D\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_STATE\", \"S\", x => x.Link(\"DS\", \"doc_state_id\")) .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\").SetOperation(FilterOperation.In)) .DataTable(\"T_CATALOGUE\", \"U\", x => x.Link(\"DC\", \"catalogue_id\")) .DataTable(\"T_DOC_NUMBER\", \"N\", \"D\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_CUST\", \"CF\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"FROM\")) .DataTable(\"T_CUSTOMER\", \"F\", x => x.Link(\"CF\", \"customer_id\")) .DataTable(\"T_DOC_CUST\", \"CT\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\")) .DataTable(\"T_CUSTOMER\", \"T\", x => x.Link(\"CT\", \"customer_id\")) .DataTable(\"T_DOC_SCAN\", \"SC\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .DataTable(\"T_DOC_SOURCE\", \"SR\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .DataTable(\"T_DOC_DELIVERY\", \"DD\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", null, DataStructureFlag.Grouping, new Variable[0]) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<long?>(\"H\", string.Empty, z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(\"DocId\").SetOperation(FilterOperation.OuterJoin)) .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) .Column(\"DocStateId\", x => x.Field<long>(\"S\", string.Empty)) .Column(\"FromCustomerId\", x => x.Field<long>(\"F\", \"customer_id\")) .Column(\"ToCustomerId\", x => x.Field<long>(\"T\", \"customer_id\")) .Column(\"CatalogueId\", x => x.Field<long?>(\"U\", string.Empty)) .ReadOnlyProperty(x => x.DocStateCode, x => x.Field<string>(\"S\", \"code\")) .ReadOnlyProperty(x => x.Generation, x => x.Field<long>(\"D\", string.Empty, z => z.ConcurrencyToken(), z => z.Default(DefaultType.AutoIncrement))) .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, DefaultFeature.UseOnUpdate))) .ReadOnlyProperty(x => x.Author, x => x.Field<string>(\"D\", string.Empty, z => z.Default(DefaultType.UserName, DefaultFeature.UseOnUpdate))) .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\")) .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode), z => z.LinkProperty<DocState>((Invoice y) => y.GetProperty<long>(\"DocStateId\"))), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty<Catalogue>(y => y.Name), z => z.LinkProperty<Catalogue>((Invoice y) => y.GetProperty<long>(\"CatalogueId\"))), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty<Customer>(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"FromCustomerId\"))), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty<Customer>(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"ToCustomerId\"))), DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink<InvoiceSpec>(\"DocId\")) .SetBaseTable(\"D\").SetLogicAssembly(\"XDataObjectTest\") ); } ... public partial class Invoice { public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } public Link<string, DocState> DocState { get; set; } public Link<string, Catalogue> DocCatalog { get; set; } public string DocNumb { get; set; } public DateTime? DocDate { get; set; } public long Generation { get { return this.GetProperty(x => x.Generation); } } public DateTime Changed { get { return this.GetProperty(x => x.Changed); } } public string Author { get { return this.GetProperty(x => x.Author); } } public decimal? DocAmount { get { return this.GetProperty(x => x.DocAmount); } } public DateTime? DocLastChange { get { return this.GetProperty(x => x.DocLastChange); } } public Lob Scan { get; set; } public Xml Source { get; set; } public Link<string, Customer> CustomerFrom { get; set; } public Link<string, Customer> CustomerTo { get; set; } public DeliveryTypeEnum DeliveryType { get; set; } public DateTime? DeliveryDate { get; set; } public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } } Dynamic mapping provide more representable mechanics to define mapping because of no attribute parameters limitation. Subqueries and inner views can be described in place using dynamic query mechanics. SQL expressions can be described in LINQ style in place. This abilities enreach representability of dynamic mapping. Dynamic mapping alowes split data object to partial class definitions with basic class definition and mapping. Dynamic mapping is described as private static field of type Expression<CustomMapping<T>> where T - data object type. The value of this property is assigned by call of XDataMapping.CustomMapping<T> method returning IRepositoryStructure<T> . Interface IRepositoryStructure<T> has a number of methods to describe all of mapping entities analog to static mapping attributes. Mapping parameters To set parameters of dynamically mapped classes used IRepositoryDescription<T> interface methods: SetBaseTable - to set base table , (optional, by default used virtual table with the empty alias) SetContext - database context (optional, by default context will by assigned in runtime) SetFlags - data source flags (optional, by default None ) SetLogicAssembly - to set data processing logic class assembly FullName for this repository (see Using three tier architecture и IDataLogic<T> ) To get reference to IRepositoryDescription<T> interface is required to define maping of repository read/write properties using IRepositoryStructure<T> interface method Map Example: ... .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode), z => z.LinkProperty<DocState>( (Invoice y) => y.GetProperty<long>(\"DocStateId\"))), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty(y => y.Name), z => z.LinkProperty<Catalogue>( (Invoice y) => y.GetProperty<long>(\"CatalogueId\"))), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"FromCustomerId\"))), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"ToCustomerId\"))), DeliveryType = x.Field(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink(\"DocId\")) .SetBaseTable(\"D\").SetLogicAssembly(\"XDataObjectTest\") ... More detailed repository properties map description see below . All tables of data object mapping decribed by IRepositoryStructure<T>. DataTable method. Tables included into updatable tables hierarchy excluding base table must be defined using special overload alowes to set parent table alias. ... .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_DOC_STATE\", \"DS\", \"D\", x => x.Link(\"D\", \"doc_id\")) ... Same way is possible to define mapping to view , but all properties must to mapped as read only properties or hidden fields . Important Filters and links between tables is defined using filters parameter of IRepositoryStructure<T>. DataTable method or it's overload . Detailed filter definition described below . Subqueries Subqueries can be used for a: filtration using [not] exists() , [not] in (select) ( see below ) inner view subquery expression as single property source ( see below ) Subquery deep level not reglamented. In dynamic mapping of data object subqueries can be defined using one of Subquery or InnerView methods overload of IRepositoryStructure<T> interface to define subqueries or inner views respectively. While using generic overloads of Subquery or InnerView , parameter IQueryDescription<TDobj> sub can be used with in place dynamic query notation. Non generic overloads of Subquery or InnerView must provide ISqlType or IDataObject marked class type as parameter Type dobjType to reuse of existing mapping. This class can be mapped using static or dynamic style, no matter. ... .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", null, DataStructureFlag.Grouping, new Variable[0]) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<long?>(\"H\", string.Empty, z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(\"DocId\").SetOperation(FilterOperation.OuterJoin)) .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ... Filters Filters can be defined as: Constant filters SQL expression filters Dictionary filters Range filters Subquery filters Inner links Each of them described by corresponding LINQ expression define their parameters depending on the context of their use and the type of the filter itself (see below). Filter descriptions are provided to filters paramter value of DataTable , Subquery , InnerView and Procedure methods of IRepositoryStructure<T> interface, or WithRecursive method of IQueryWithAdapter<TRoot> . Each of expression has described one filter. Type of filter is declared by one of fabric method of interface inside lambda expression with one of followed filter adapter: IInnerFilterAdapter - filter adapter to define filters and links inside plain query (see DataTable , Procedure ), ISubqueryLinkAdapter , ISubqueryLinkAdapter<TDObj> and ISubqueryLinkAdapter<T,TDObj> - used in various overloads of subquery definition (see Subquery , InnerView and WithRecursive ) to declare links with subqueries. Specific parameters for each type of filter is described in filter fabric methods described below in specific topics. And some optional modificators can be defined using continue LINQ calls with extension methods: SetOperation - to set filter operation AsPrimary - to set optional filter flag SetCombination - to set filter combination Each of filter type is defined by own special method of corresponding filter adapter. Filter operation is defined by enum FilterOperation : Equal - equal NotEqual - not equal LessThan - less then GreaterThan - greater then LessThanOrEqual - less or equal GreaterThanOrEqual - greater or equal In - field value in range or subquery NotIn - field value is not in range or subquery Exists - subquery returns one or more rows NotExists - subquery returns no rows Like - field value correlated with find expression NotLike - field value not correlated with find expression OuterJoin - left outer join link between query sources (tables or inner views) Contains - field value correlated with fulltext search NotContains - field value not correlated with fulltext search Filter group Filter group of filter can be assigned to it declaration by SetCombination extension of IFilterDescription interface. ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ... Constant filters Constant filters alowes to restict selection of data by some constant value. This filter defined by one of ConstFilter method overloads of IInnerFilterAdapter interface. Constant type list restricted by enum FilterConstantType : Const - constant with value setted by ConstantValue . Variable - value of variable with name setted by ConstantValue . CurrentDate - current date. CurrentDateTime - current date and time. CurrentDateTimeUTC - current date and time (UTC). ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ... SQL expression filters To define filter over SQL expression used one of ExprFilter method overloads of IInnerFilterAdapter interface. There are two overloads of ExprFilter method: IFilterDescription ExprFilter(string field, string exprText) - to use with plain SQL expressions or subquery alias IFilterDescription ExprFilter<T>(string field, Expression<Func<IQueryStructureAdapter, T>> expression) - to use with SQL expressions as LINQ style expressions Depending style of SQL expression description that overloads can be used with: subquery alias, , ExprFilter(\"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */) .SetOperation(FilterOperation.In) dynamic definition of SQL expression, , ExprFilter(\"discount\" /* field name */, /* expression: SQL expression LINQ style definition */ x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)), Operation: FilterOperation.NotEqual /* filter operation */)] plain SQL expression text. , ExprFilter(\"discount\" /* field name */, /* ExpressionText: plain SQL expression */ \"case P.is_vip when 1 then 10 else 0 end\") .SetOperation(FilterOperation.NotEqual) Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Range filters To define filter checks field value over array of values used RangeFilter methods of IInnerFilterAdapter interface. ... , RangeFilter(\"discount\", new[] {0,5,10}) .SetOperation(FilterOperation.In) ... Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by one of DictFilter overloads of IInnerFilterAdapter interface. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. ... , x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\") ... Inner links To define links between data sources inside query used Link overloads of IInnerFilterAdapter interface. ... , x => x.Link(\"DS\", \"doc_state_id\") ... Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilter method of IInnerFilterAdapter . ... .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\") .SetOperation(FilterOperation.In)) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) ... Tip Subquery filters can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used one of SubqueryLink method overload of ISubqueryLinkAdapter , ISubqueryLinkAdapter<TDObj> or ISubqueryLinkAdapter<T,TDObj> depending by outer method signature and subquery declaration specific. ... .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ... Tip Subquery links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Properties Properties dynamic mapping is performed as method call of IRepositoryStructure<T> interface: Column method call for each of hidden properties mapping ReadOnlyProperty method call for each of readonly properties mapping Map method call for declare all of read/write properties mapping ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, DefaultFeature.UseOnUpdate))) ... Parameter mapper of Map method alowes to define mapping rule for multiple read/write properties using lambda expression with IQueryStructureAdapter interface as parameter. ... .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode), z => z.LinkProperty<DocState>( (Invoice y) => y.GetProperty<long>(\"DocStateId\"))), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty<Catalogue>(y => y.Name), z => z.LinkProperty<Catalogue>( (Invoice y) => y.GetProperty<long>(\"CatalogueId\"))), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty<Customer>(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"FromCustomerId\"))), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty<Customer>(y => y.Name), z => z.LinkProperty<Customer>(y => y.GetProperty<long>(\"CustomerId\"), y => y.GetProperty<long>(\"ToCustomerId\"))), DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink<InvoiceSpec>(\"DocId\")) ... Interfaces IRepositoryStructureAdapter<T> and IQueryStructureAdapter as successor has some overloads of methods to define mapping: Field<TVal> - for mapping property to data source field Expr<TVal> - for mapping property to SQL expression (see detailed description below ) Ref<TVal> - for mapping property to inner view property (see detailed description below ) IRepositoryStructureAdapter<T> also has a special methods to map Lob , Xml and Link<TVal,TSource> Lob - for mapping Lob property Xml - for mapping Xml property Link<TVal,TSource> - for mapping link property (see detailed description below ) These methods of single property mapping has parameter attributes to define additional mapping properties using interface IPropertyMappingAdapter : Key - primary unique key property flag, possible to mark multiple properties or hidden properties as key properties Hidden - flag, the field should not be included in the SELECT expression, but can be used in filters and/or links between data sources (tables, subqueries...) Group - property grouping parameters (see detailed description below ) And using interface IRepositoryPropertyMappingAdapter<T, TValue> : ConcurrencyToken - concurrency token flag for property Default - default value assign rules for property OuterFlag - outer join mandatory flag, values of properties marked this flag is analyzed during making decision of operations over tables in optional references Important Required to set at least one property of mapped class as primary unique key. Subqueries and inner views can has no key properties. Interface IQueryStructureAdapter<T> is used in dynamic queries only. Interfaces IRepositoryStructureAdapter and IRepositoryStructureAdapter<T> is used in dynamic repository mapping only. Interface IPropertyMappingAdapter is used as in dynamic queries as in dynamic repository mapping. Interface IRepositoryPropertyMappingAdapter is inherited from [IPropertyMappingAdapter] and used in dynamic repository mapping only. SQL expression property Readonly property can be mapped to SQL expression. Dynamic mapping of SQL expression is defined by one of IRepositoryStructureAdapter interface Expr method overload: Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) - used to define sql expression DataExpressionType.SubQuery or DataExpressionType.PlainSql When first overload used, SQL expression is defined by expr parameter value as lambda function with IQueryStructureAdapter interface extension methods inside: Case<T, TResult>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, TResult>> elseValue, params TaggedExpression<T, TResult>[] switchValues) - case when ... then ... else ... end SQL construction DateDiff<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, DateTime>> finalDate, Expression<Func<IQueryStructureAdapter, DateTime>> startDate, DateDiffKind kind) - date difference Exists(this IQueryStructureAdapter adapter, string subQueryAlias) - exists(select ...) SQL construction HasFlag<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, T>> flagValue, Expression<Func<IQueryStructureAdapter, T>> trueValue, Expression<Func<IQueryStructureAdapter, T>> falseValue) - bitwise mask checking for value SqlExpr<TResult>(this IQueryStructureAdapter adapter, string format, params Expression<Func<IQueryStructureAdapter, TResult>>[] expressions) - mixing plain SQL expressions with LINQ style defined expression subparts, parameter format is the string.Format mask SqlFn<TResult>(this IQueryStructureAdapter adapter, string name, params Expression<Func<IQueryStructureAdapter, object>>[] parameters) - SQL function call expression SqlParam<TResult>(this IQueryStructureAdapter adapter, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) - SQL function parameter value expression Mapping parameters of SQL expressions is defined by IRepositoryExpressionMappingAdapter interface methods: NativeSqlType(string nativeSqlType) - set native SQL type name of expression result, used when expression result type has specific SQL type Size(int size) - set number or varchar length of SQL expression result type Size(int size, int scale) - set length and scale for floating point SQL data types subquery, ... .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) ... LINQ expression, ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, y => y.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)), DbType.Decimal, z => z.Size(17, 5))) ... plain text SQL expression. ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, DataExpressionType.PlainSql, \"case P.is_vip when 1 then 10 else 0 end\", DbType.Decimal, z => z.Size(17, 5))) ... Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Property default value To set default value of property with dynamic mapping, use one of IRepositoryPropertyMappingAdapter<T, TValue> interface Default method overload: Default(DefaultType source) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert only Default(DefaultType source, DefaultFeature features) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert or update Default(DefaultType source, TValue value) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert only Default(DefaultType source, TValue value, DefaultFeature features) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert or update ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, DefaultFeature.UseOnUpdate))) ... Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. Use one of IPropertyMappingAdapter interface Group method overload: Group(int groupOrder) - when property mapped to field query grouped by with N-th order Group(DataGrouping grouping) - when property mapped to aggregation function over field ... HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) ... Hidden properties Hidden properties dynamically defined using Column method call of IRepositoryStructure<T> interface. Hidden property can be mapped to: data source field - Field<TVal> SQL expression (see detailed description above ) - Expr<TVal> inner view property (see detailed description below ) - Ref<TVal> ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ... Inner view reference To map property to field from inner view used one of IRepositoryStructureAdapter interface Ref method overload: Ref<TValue>(string sourceAlias, string property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) - used when referenced property is a hidden property Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\")) Links To dynamically define link property used one of IRepositoryStructureAdapter<T> interface Link method overload: Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) - used when source property is correlated with property name with default name mapping rule ( hungarian_notation in DB and CamelCaseNotation property name in code) Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, string fieldName, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) Parameter attributes of method Link value used to define link properties pairs with one of ILinkPropertyMappingAdapter<T> interface LinkProperties method overload call: LinkProperty() - used property of source object to assiciate with link property defined by Link method LinkProperty<TSource>(Expression<Func<TSource, object>> source) - used source as source property and equal named property from target object LinkProperty<TSource>(Expression<Func<TSource, object>> source, Expression<Func<T, object>> property) - specifing both properties ... DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode) z => z.LinkProperty<DocState>( (Invoice y) => y.GetProperty<long>(\"DocStateId\"))), ... Tree To dynamically map tree organized data structure used special method With of RepositoryStructure<T> interface to describe tree root query and tree childs. Both of them use subquery mappings (see example below) to set subquery structure for tree query construction. Important Data source flags of tree organized data sources must contain DataStructureFlag.ReadOnly and DataStructureFlag.Tree! private static Expression<CustomMapping<CatalogueTree>> _unused = ( () => XDataMapping.CustomMapping<CatalogueTree>() .With(\"CAT\", XDataMapping.GetStructure(\"R\", null, DataStructureFlag.ReadOnly) .DataTable(\"T_CATALOGUE\", \"R\", x => x.Combination(\"root\", Combination.Or), x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed).SetCombination(\"root\"), x => x.ConstFilter(\"FilterByRoot\", \"parent_id\", FilterConstantType.Const, null, FilterNullable.NullsCompared) .SetCombination(\"root\")) .Select(x => new { CatalogueId = x.Field<long>(\"R\", string.Empty, z => z.Key()), Code = x.Field<string>(\"R\", string.Empty), Name = x.Field<string>(\"R\", string.Empty), ParentId = x.Field<long?>(\"R\", string.Empty), }), x => x.Properties(z => z.CatalogueId, z => z.Code, z => z.Name, z => z.ParentId), x => x.WithRecursive(\"S\", XDataMapping .GetStructure(\"S\", null, DataStructureFlag.ReadOnly) .DataTable(\"T_CATALOGUE\", \"S\") .Select(y => new { CatalogueId = y.Field<long>(\"S\", string.Empty, z => z.Key()), Code = y.Field<string>(\"S\", string.Empty), Name = y.Field<string>(\"S\", string.Empty), ParentId = y.Field<long?>(\"S\", string.Empty) }), z => z.SubqueryLink(y => y.ParentId, y => y.CatalogueId))) .ReadOnlyProperty(x => x.CatalogueId, x => x.Field<long>(\"CAT\", string.Empty, z => z.Key())) .ReadOnlyProperty(x => x.Code, x => x.Field<string>(\"CAT\", string.Empty)) .ReadOnlyProperty(x => x.Name, x => x.Field<string>(\"CAT\", string.Empty)) .ReadOnlyProperty(x => x.ParentId, x => x.Field<long?>(\"CAT\", string.Empty)) .Map(x => new CatalogueTree()) .SetFlags(DataStructureFlag.ReadOnly | DataStructureFlag.Tree) ); External link External link can be dynamically defined using expression of type Expression as part of call Map method of IRepositoryStructure interface. Expression<IExternalLinkDefinition> can be obtained using multiple overloads of ExternalLink method of ExternalLinkDefinitionAdapter<T> : IExternalLinkDefinition ExternalLink<TChild>(params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkDefinition ExternalLink<TChild>(Expression<Func<IRepositoryStructureAdapter<TChild>, object>> property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkDefinition ExternalLink<TChild>(string property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkAdapter<T, TChild> used to specify properties of external link: Filter - used to specify external link runtime filter, FilterCombination - used to set filter group of filter, DirectLink - used to set direct link flag, see tree master-slave specifics for details, MasterRefresh - used to set refresh master repository current row data on submit slave changes flag (usefull when master has calculated properties over slave repository data), Nullable - filter null processing behaviour , Operation - link filter operation (see Filters ), PrimaryFilter - used to specify external link is optional filter, Property - link property in master repository (used when property is hidden peroperty ), Property<TChildLink> - link property in master repository (used when property is actual property), TreeFilter - used to set external link filter's tree filter flag // when external link used hidden property ..., x => x.ExternalLink<InvoiceSpec>(\"DocId\")) // when external link used readonly or regular property ..., x => x.ExternalLink<InvoiceSpec>(z => z.DocId)) SQL procedures & functions Common information about mapping to SQL procedures and functions described in common mapping rules description and here we just reprensent dynamic mapping rules for various procedure types. SQL procedure as query To define procedure as data source of mapping used Procedure method call of IRepositoryStructure<T> interface. SQL procedure parameter To define SQL procedure parameter used Parameter method call of IRepositoryStructure<T> interface. SQL procedure resultset To describe resultset of SQL procedure used Return method call of IRepositoryStructure<T> interface. SQL procedure resultset as query sample var res = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Return(\"T\", \"Result\", 1, convertor) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); foreach (var classifier in res) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with multiple resultsets sample var res2 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"param3\", DbType.Int32) .Parameter<string>(\"T\", 4, \"param4\", DbType.String) .Return(\"T\", \"Result1\", 1, convertor) .Return(\"T\", \"Result2\", 2, convertor) .Call<Classifier>(DataScope.Layer, \"Result1\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\"), \"param3\".SetVar(2), \"param4\".SetVar(\"Some\")); foreach (var classifier in res2) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); foreach (var classifier in res2.GetResultSet<Classifier>(\"Result2\")) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with out parameter sample var res3 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<string>(\"T\", 3, \"param3\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.Output)) .Call(DataScope.Layer, \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); Console.WriteLine(res3.GetParameter<string>(\"param3\")); SQL procedure with out parameter and resultset sample var res4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); Console.WriteLine(res4.GetParameter<int>(\"result\")); foreach (var classifier in res4) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with return value sample var res5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); Console.WriteLine(res5.GetParameter<int>(\"result\")); SQL procedure with return value and resultset sample var res6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetVar(param)); foreach (var classifier in res6) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with simple array parameter sample var arr = new[] { 1, 2, 3 }; var f6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction6\", ProcedureType.Function) .Parameter<int[]>(\"T\", 1, \"p_arr\", DbType.Int32, z => z.Array()) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"p_arr\".SetVar(arr)); Console.WriteLine(f6.GetParameter<int>(\"result\")); SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var f5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction5\", ProcedureType.Function) .Parameter<Classifier>(\"T\", 1, \"p_obj\", DbType.Object, z => z.UdtDataType(\"classifier_rec\")) .Parameter<string>(\"T\", 3, \"result\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.ReturnValue), z => z.NativeSqlType(\"VARCHAR\")) .Call(DataScope.Layer, \"p_obj\".SetVar( new Classifier { Id = 1, Name = \"Test\" })); Console.WriteLine(f5.GetParameter<string>(\"result\")); SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var param = new[] { new Classifier { Id = 1, Name = \"Test\" }, new Classifier { Id = 2, Name = \"Some\" } }; var f4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction4\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"param1\".SetVar(param)); Console.WriteLine(f4.GetParameter<int>(\"result\")); SQL table valued function as query sample var f3 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(\"dbo.Classifier\")) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetVar(param)); foreach (var classifier in f3) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL scalar function as property data source sample var f1 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction\", ProcedureType.Function) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetVar(1), \"param2\".SetVar(\"Test\")); foreach (var classifier in f1) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/xml_type.html": {
    "href": "tutorial/mapping/xml_type.html",
    "title": "Xml properties | XData website",
    "keywords": "Xml properties To work with Xml using lazy coupling XData represent property type Xml . This type has followed... properties: XDocument Document - get or set Xml value (readonly) bool Assigned - check Xml field for NULL value methods: Extract (string path, params KeyValuePair<string, string>[] namespaces) - returning result of XPath expression path using namespaces (pair: namespace - URL) (extension) Modify (Action action) - helper method to change Xml value operations: += - \"syntax sugar\", _data.SomeXml += _someVariable identical with _data.SomeXml.Document = _someVariable. Example: newInvoice.Source += new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", newInvoice.DocStateCode))); ... dataScope.GetRepository<Invoice>(Owner, context: Context) .First(x => x.Source.Extract(\"(/invoice/@state)[1]\") == \"ACTIVE\").DocNumb ... invoice.Source.Modify(x => x = new XDocument());"
  },
  "tutorial/mapping/tree.html": {
    "href": "tutorial/mapping/tree.html",
    "title": "Tree | XData website",
    "keywords": "Tree XData can use CTE (common table expression) as part of repository data source definition. Supported as plain (WITH), as recursive (WITH RECURSIVE) expressions. CTE is defined in mapping diferently for static and dynamic mapping paradigm, but it can be used with similar way: defined one or more tables with unique aliases and name equals CTE name. Recursive CTE can be used as independent data source too. In this case CTE name must to be declared as base table of repository."
  },
  "tutorial/mapping/reference.html": {
    "href": "tutorial/mapping/reference.html",
    "title": "Child repositories referencies | XData website",
    "keywords": "Child repositories referencies Slave related repositories XData require to perform as: public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } No additional mapping description are needed. Only external reference is required. Tip To use XData Unit of Work realization ( WorkSet ), child repositories referencies are required."
  },
  "tutorial/mapping/readonly.html": {
    "href": "tutorial/mapping/readonly.html",
    "title": "Readonly properties | XData website",
    "keywords": "Readonly properties Read only properties XData require to perform as in example below: public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } Data access is provided through extension method GetProperty , but property is read only."
  },
  "tutorial/mapping/procedures.html": {
    "href": "tutorial/mapping/procedures.html",
    "title": "SQL functions & procedures | XData website",
    "keywords": "SQL functions & procedures Stored procedures and functions can be used as data source of mapping (if used DBMS and ADO .Net provider is support this). Important At this moment we has various limitations of using SQL procedures as on DBMS SQL dialect level, as on ADO .Net provider realization level. Please, choose DBMS and ADO .Net provider with keep in mind limitations they have. XData support many procedure mapping styles and call conventions, but can not garant all of them is supported by DBMS and ADO .Net provider You choose. XData has support followed SQL procedure mapping styles and call conventions and it combinations: Using procedure resultset as data source Using procedure with multiple resultsets Using out parameters Using return value of stored procedure Using symple type array as parameter Using cursor as parameter Using UTD (user defined type) as parameter Using table valued function as data source Using scalar function as single property source Warning Class mapped to UDT must support native XML serialization! All this mapping features described as for static as for dynamic mapping paradigm."
  },
  "tutorial/mapping/master_slave.html": {
    "href": "tutorial/mapping/master_slave.html",
    "title": "Master slave relations | XData website",
    "keywords": "Master slave relations External referencies is the base element of master-slave references definition in XData. It describes link rules between related slave entities from master entities. XData support multi master and multi slave relation (many-to-many). And it's possible to define multiple relations between every two data objects. External referencies is the declarations of possible master-detail relations between data objects . Each of external reference is describe master property (or column ) to slave filter relation, used to filter slave collections data when master current object is set. Tip External referencies applied to manualy attached slave data sources only. External references definition is differs for static and dynamic methods of mapping. Reference rules is defined at mapping level, and when slave object will be attached using GetChild method, that rules will be applyed. To break master-slave reference call DetachChild method. When data scope or one of referenced repositories will be disposed - reference is breaked automatically. Slave object reference filter value is set when SetCurrent extension method is called for master object. if (newInvoice.Submit()) { newInvoice.SetCurrent(); return true; } Master-slave linked repositories can be used for cascade delete operation over multiple related data objects: newInvoice.SetDeleted(true); newInvoice.Submit(DataSubmitFlag.Cascade); or cascade delete applyed for filtered subset of repository objects and their slave objects: invoices.Clear(x => x.DocStateCode == \"REJECTED\", DataSubmitFlag.Cascade);"
  },
  "tutorial/mapping/mapping.html": {
    "href": "tutorial/mapping/mapping.html",
    "title": "Mapping common rules | XData website",
    "keywords": "XData tutorial Mapping common rules All data objects must to be signed with marker interface (empty interface) IDataObject . All objects describes subqueries must to be signed with marker interface ISqlObject . Tip Ability of defining maping to marker interface is key feature of XData alowed get flexible and natural objects deriving hierarchy with full featured and handy methods to work with it (using extension methods). Mapping rules can be declared statically with attributes of class and its properties (see static mapping ), and dynamically using LINQ style expression (see dynamic mapping ). Common types properties Common types properties (string, bool, int...) including nullable (int?, bool?...), and enum properties is declared as common class properties. Data access to this properties is usual. Only mapping description is depends on static or dynamic method of declaration. Bynary properties To work with large binary object (BLOB) using lazy coupling XData represent property type Lob . This type has followed... properties: byte[] Value - binary object value (readonly) bool Assigned - check object has value (including empty value) or NULL methods: GetSize () - returns size of binary object (extension) Modify(Action<byte[]> action) - helper method to simplify changing of binary object value operation: += - \"syntax sugar\", _data.SomeBlob += _someVariable identic with _data.SomeBlob.Value = _someVariable. Examples: newInvoice.Scan += _image; ... if(newInvoice.Scan.Assigned) _size = newInvoice.Scan.GetSize(); ... invoice.Scan.Modify(x => x = new byte[0]); Xml properties To work with Xml using lazy coupling XData represent property type Xml . This type has followed... properties: XDocument Document - get or set Xml value (readonly) bool Assigned - check Xml field for NULL value methods: Extract (string path, params KeyValuePair<string, string>[] namespaces) - returning result of XPath expression path using namespaces (pair: namespace - URL) (extension) Modify (Action action) - helper method to change Xml value operations: += - \"syntax sugar\", _data.SomeXml += _someVariable identical with _data.SomeXml.Document = _someVariable. Example: newInvoice.Source += new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", newInvoice.DocStateCode))); ... dataScope.GetRepository<Invoice>(Owner, context: Context) .First(x => x.Source.Extract(\"(/invoice/@state)[1]\") == \"ACTIVE\").DocNumb ... invoice.Source.Modify(x => x = new XDocument()); Link properties To work with external links to data objects outside current object without operating surogate keys, XData represent special property type - Link<TVal,TSrc> , where TVal - type of property for preview, TSrc - type of external object. For type Link is defined... properties: TVal Value - this property to get preview of linked object TSrc Source - this property can be used to set linked object (readonly) bool Assigned - check link value for NULL value operations: += - \"syntax sugar\", _data.SomeLink += _someDictionaryObject identic with _data.SomeLink.Source = _someDictionaryObject. newInvoice.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == \"CREATED\"); To make link properties work correct, at mapping level need to be defined pairs of properties source and current objects, that values will be copied from source object to current when link is applied. Link description is deferent for static and dynamic methods of mapping. Readonly properties Read only properties XData require to perform as in example below: public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } Data access is provided through extension method GetProperty , but property is read only. Child repositories referencies Slave related repositories XData require to perform as: public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } No additional mapping description are needed. Only external reference is required. Tip To use XData Unit of Work realization ( WorkSet ), child repositories referencies are required. Hidden properties Some columns in database is needed to full description of mapping, but not required to business logic. This columns is declared as part of mapping named Column is selected from database, but not mapped on data object properties. For example - XData can operate primary (PK) and foreign (FK) keys of business objects and work with master-slave references between them, but mapping to property of external references is not required to operate with key. Second case - optimistic concurrency resolving (see concurrency resolving ) required concurrency token field, but this field is not required to busines logic. Third example - when data is grouped, needed to declare some field to link with external reference , but in this case possibly we can`t include this field in SELECT expression because of GROUP BY syntax. This case is resolved by Hidden property of column declaration. When Hidden is true - column will be not included into SELECT expression of resulted SQL query. Hidden properties description is various to static and dynamic mapping declaration methods. Master slave relations External referencies is the base element of master-slave references definition in XData. It describes link rules between related slave entities from master entities. XData support multi master and multi slave relation (many-to-many). And it's possible to define multiple relations between every two data objects. External referencies is the declarations of possible master-detail relations between data objects . Each of external reference is describe master property (or column ) to slave filter relation, used to filter slave collections data when master current object is set. Tip External referencies applied to manualy attached slave data sources only. External references definition is differs for static and dynamic methods of mapping. Reference rules is defined at mapping level, and when slave object will be attached using GetChild method, that rules will be applyed. To break master-slave reference call DetachChild method. When data scope or one of referenced repositories will be disposed - reference is breaked automatically. Slave object reference filter value is set when SetCurrent extension method is called for master object. if (newInvoice.Submit()) { newInvoice.SetCurrent(); return true; } Master-slave linked repositories can be used for cascade delete operation over multiple related data objects: newInvoice.SetDeleted(true); newInvoice.Submit(DataSubmitFlag.Cascade); or cascade delete applyed for filtered subset of repository objects and their slave objects: invoices.Clear(x => x.DocStateCode == \"REJECTED\", DataSubmitFlag.Cascade); Tree XData can use CTE (common table expression) as part of repository data source definition. Supported as plain (WITH), as recursive (WITH RECURSIVE) expressions. CTE is defined in mapping diferently for static and dynamic mapping paradigm, but it can be used with similar way: defined one or more tables with unique aliases and name equals CTE name. Recursive CTE can be used as independent data source too. In this case CTE name must to be declared as base table of repository. SQL functions & procedures Stored procedures and functions can be used as data source of mapping (if used DBMS and ADO .Net provider is support this). Important At this moment we has various limitations of using SQL procedures as on DBMS SQL dialect level, as on ADO .Net provider realization level. Please, choose DBMS and ADO .Net provider with keep in mind limitations they have. XData support many procedure mapping styles and call conventions, but can not garant all of them is supported by DBMS and ADO .Net provider You choose. XData has support followed SQL procedure mapping styles and call conventions and it combinations: Using procedure resultset as data source Using procedure with multiple resultsets Using out parameters Using return value of stored procedure Using symple type array as parameter Using cursor as parameter Using UTD (user defined type) as parameter Using table valued function as data source Using scalar function as single property source Warning Class mapped to UDT must support native XML serialization! All this mapping features described as for static as for dynamic mapping paradigm."
  },
  "tutorial/mapping/link.html": {
    "href": "tutorial/mapping/link.html",
    "title": "Link properties | XData website",
    "keywords": "Link properties To work with external links to data objects outside current object without operating surogate keys, XData represent special property type - Link<TVal,TSrc> , where TVal - type of property for preview, TSrc - type of external object. For type Link is defined... properties: TVal Value - this property to get preview of linked object TSrc Source - this property can be used to set linked object (readonly) bool Assigned - check link value for NULL value operations: += - \"syntax sugar\", _data.SomeLink += _someDictionaryObject identic with _data.SomeLink.Source = _someDictionaryObject. newInvoice.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == \"CREATED\"); To make link properties work correct, at mapping level need to be defined pairs of properties source and current objects, that values will be copied from source object to current when link is applied. Link description is deferent for static and dynamic methods of mapping."
  },
  "tutorial/mapping/db_diagram.html": {
    "href": "tutorial/mapping/db_diagram.html",
    "title": "Sample database structure | XData website",
    "keywords": "<!--class t_catalogue--> t_catalogue catalogue_id code name parent_id <!--class t_customer--> t_customer customer_id code name <!--class t_doc_cust_type--> t_doc_cust_type doc_cust_type_id code name <!--class t_doc_type--> t_doc_type doc_type_id code name <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_catalogue_doc--> t_catalogue_doc catalogue_id doc_id <!--class t_doc_cust--> t_doc_cust doc_cust_id doc_id customer_id doc_cust_type_id <!--class t_doc_delivery--> t_doc_delivery doc_id delivery_type delivery date <!--class t_doc_number--> t_doc_number doc_id numb <!--class t_doc_scan--> t_doc_scan doc_id scan <!--class t_doc_source--> t_doc_source doc_id source <!--class t_doc_state--> t_doc_state doc_state_id code name <!--class t_doc_doc_state--> t_doc_doc_state doc_id doc_state_id <!--class t_doc_history--> t_doc_history doc_history_id doc_id doc_state_id history_date <!--link t_catalogue to t_catalogue--> parent_id <!--link t_doc_type to t_doc--> doc_type_id <!--link t_catalogue to t_catalogue_doc--> catalogue_id <!--link t_catalogue_doc to t_doc--> doc_id <!--link t_doc to t_doc_cust--> doc_id <!--link t_doc_cust to t_customer--> customer_id <!--link t_doc_cust to t_doc_cust_type--> doc_cust_type_id <!--link t_doc_delivery to t_doc--> doc_id <!--link t_doc_number to t_doc--> doc_id <!--link t_doc_scan to t_doc--> doc_id <!--link t_doc_source to t_doc--> doc_id <!--link t_doc_doc_state to t_doc--> doc_id <!--link t_doc_state to t_doc_doc_state--> doc_state_id <!--link t_doc to t_doc_history--> doc_id <!--link t_doc_history to t_doc_state--> doc_state_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_catalogue { <&key> catalogue_id - - <&code> code name <&arrow-circle-right> //parent_id// } t_catalogue - -{ t_catalogue : parent_id entity t_customer { <&key> customer_id - - <&code> code name } entity t_doc_cust_type { <&key> doc_cust_type_id - - <&code> code name } entity t_doc_type { <&key> doc_type_id - - <&code> code name } entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } t_doc_type -right-{ t_doc : doc_type_id entity t_catalogue_doc { <&key> <&arrow-circle-right> catalogue_id <&key> <&arrow-circle-right> doc_id } t_catalogue_doc -up-{ t_catalogue : catalogue_id t_catalogue_doc - -{ t_doc : doc_id entity t_doc_cust { <&key> doc_cust_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> customer_id <&arrow-circle-right> doc_cust_type_id } t_doc_cust }-up- t_doc : doc_id t_doc_cust }- - t_customer : customer_id t_doc_cust }- - t_doc_cust_type : doc_cust_type_id entity t_doc_delivery { <&key> <&arrow-circle-right> doc_id - - delivery_type delivery date } t_doc_delivery }o- - t_doc : doc_id entity t_doc_number { <&key> <&arrow-circle-right> doc_id - - numb } t_doc_number }o- - t_doc : doc_id entity t_doc_scan { <&key> <&arrow-circle-right> doc_id - - <&map> scan } t_doc_scan }o- - t_doc : doc_id entity t_doc_source { <&key> <&arrow-circle-right> doc_id - - <&document> source } t_doc_source }o- - t_doc : doc_id entity t_doc_state { <&key> doc_state_id - - <&code> code name } entity t_doc_doc_state { <&key> <&arrow-circle-right> doc_id - - <&arrow-circle-right> doc_state_id } t_doc_doc_state }o-right- t_doc : doc_id t_doc_doc_state }-left- t_doc_state : doc_state_id entity t_doc_history { <&key> doc_history_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_state_id <&clock> history_date } t_doc_history }-up- t_doc : doc_id t_doc_history }- - t_doc_state : doc_state_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US --> <!--class t_doc--> t_doc doc_id doc_type_id doc_date generation changed author <!--class t_doc_spec_type--> t_doc_spec_type doc_spec_type_id code name <!--class t_doc_spec--> t_doc_spec doc_spec_id doc_id doc_spec_type_id <!--class t_doc_spec_amount--> t_doc_spec_amount doc_spec_id amount <!--link t_doc to t_doc_spec--> doc_id <!--link t_doc_spec to t_doc_spec_type--> doc_spec_type_id <!--link t_doc_spec to t_doc_spec_amount--> doc_spec_id <!-- @startuml hide circle skinparam ClassHeaderBackgroundColor lightgray skinparam ClassBorderColor black skinparam ClassBorderThickness 1 skinparam ClassBackgroundColor transparrent skinparam ArrowFontSize 8 skinparam ArrowColor black entity t_doc { <&key> doc_id - - <&arrow-circle-right> doc_type_id doc_date - - <&tag> generation <&clock> changed <&person> author } entity t_doc_spec_type { <&key> doc_spec_type_id - - <&code> code name } entity t_doc_spec { <&key> doc_spec_id - - <&arrow-circle-right> doc_id <&arrow-circle-right> doc_spec_type_id } t_doc_spec }-left- t_doc : doc_id t_doc_spec }- - t_doc_spec_type : doc_spec_type_id entity t_doc_spec_amount { <&key> <&arrow-circle-right> doc_spec_id - - <&dollar> amount } t_doc_spec_amount }o-left- t_doc_spec : doc_spec_id @enduml PlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019) (GPL source distribution) Java Runtime: Java(TM) SE Runtime Environment JVM: Java HotSpot(TM) 64-Bit Server VM Java Version: 1.7.0_25-b15 Operating System: Linux Default Encoding: UTF-8 Language: en Country: US -->"
  },
  "tutorial/mapping/common_type.html": {
    "href": "tutorial/mapping/common_type.html",
    "title": "Common types properties | XData website",
    "keywords": "Common types properties Common types properties (string, bool, int...) including nullable (int?, bool?...), and enum properties is declared as common class properties. Data access to this properties is usual. Only mapping description is depends on static or dynamic method of declaration."
  },
  "tutorial/mapping/column.html": {
    "href": "tutorial/mapping/column.html",
    "title": "Hidden properties | XData website",
    "keywords": "Hidden properties Some columns in database is needed to full description of mapping, but not required to business logic. This columns is declared as part of mapping named Column is selected from database, but not mapped on data object properties. For example - XData can operate primary (PK) and foreign (FK) keys of business objects and work with master-slave references between them, but mapping to property of external references is not required to operate with key. Second case - optimistic concurrency resolving (see concurrency resolving ) required concurrency token field, but this field is not required to busines logic. Third example - when data is grouped, needed to declare some field to link with external reference , but in this case possibly we can`t include this field in SELECT expression because of GROUP BY syntax. This case is resolved by Hidden property of column declaration. When Hidden is true - column will be not included into SELECT expression of resulted SQL query. Hidden properties description is various to static and dynamic mapping declaration methods."
  },
  "tutorial/mapping/binary_type.html": {
    "href": "tutorial/mapping/binary_type.html",
    "title": "Bynary properties | XData website",
    "keywords": "Bynary properties To work with large binary object (BLOB) using lazy coupling XData represent property type Lob . This type has followed... properties: byte[] Value - binary object value (readonly) bool Assigned - check object has value (including empty value) or NULL methods: GetSize () - returns size of binary object (extension) Modify(Action<byte[]> action) - helper method to simplify changing of binary object value operation: += - \"syntax sugar\", _data.SomeBlob += _someVariable identic with _data.SomeBlob.Value = _someVariable. Examples: newInvoice.Scan += _image; ... if(newInvoice.Scan.Assigned) _size = newInvoice.Scan.GetSize(); ... invoice.Scan.Modify(x => x = new byte[0]);"
  },
  "tutorial/versions.html": {
    "href": "tutorial/versions.html",
    "title": "Versions of XData | XData website",
    "keywords": "Versions of XData XData delivered as two specific versions: .Net 4.0 package to use with full featured Windows .Net framework version 4.0 or later, and cross platformed .Net Standard 2.0 package. The versions has similar API but some diferent implementations of certain features: 1) Different initialization of XData: Net 4.0: using (var dataEngine = XDataManager.InitXData(x => x.UseConfiguration(ConfigurationManager .OpenExeConfiguration(ConfigurationUserLevel.None)))) { using (var dataScope = dataEngine.NewDataScope()) { foreach(var data in dataScope.GetRepository<SomeObject>()) Console.WriteLine(string.Format(\"{0}, {1}\", data.SomeId, data.Name)); } } NetStandard 2.0: //Set configuration file var builder = new ConfigurationBuilder(); builder.AddXmlFile(\"MyConsoleApp.config\"); var configFile = builder.Build(); //Set services using(var serviceProvider = new ServiceCollection() .AddLogging() // Localization only for ASP.NET Core .AddSingleton(typeof(IStringLocalizerFactory), x => null) .AddSingleton(typeof(IConfigurationRoot), x => configFile) .AddXData() .BuildServiceProvider()) { //Configure logging serviceProvider.GetRequiredService<ILoggerFactory>() .AddConsole(LogLevel.Warning).AddDebug(); var dataEngine = serviceProvider.GetRequiredService<IDataEngine>(); using (var dataScope = dataEngine.NewDataScope()) { foreach(var data in dataScope.GetRepository<SomeObject>()) Console.WriteLine($\"{data.SomeId}, {data.Name}\"); } } 2) Logging in .Net 4.0 version is realized with log plugins implements ILogWriter interface. Logging in .Net Standard 2.0 version is realized using Microsoft.Extensions.Logging service. 3) Configuration of .Net 4.0 version is limited by using app.config/web.config files. Configuration in .Net Standard 2.0 version is realized using Microsoft.Extensions.Configuration service. Configuration structure for both versions described here . 4) Localization of .Net 4.0 version use sattelite localization assemblies. Localization in .Net Standard 2.0 version is realized using Microsoft.Extensions.Localization service. Localization procedures for both versions described here . 5) Some database adapters not implemented for .Net Standard 2.0 version because no applicable implementation of .Net data providers for .Net Standard 2.0 found now. We are hope they will be implemented in short time future, and XData can be use that databases too. 6) Three tier architecture is not implemented for .Net Standard 2.0 version for now. Some limitations of current .Net Core realization makes not possible to implement this feature on same technologies now. And no specific requests to implement it quick as possible. 7) Three tier client plugin required full .Net 4.0 framework only (base functionality is available on .Net 4.0 Client version). Life time limited cache (for IDataScope and WorkSet ) is required full .Net 4.0 framework. Same caching functionality is implemented in .Net Standard 2.0 version."
  },
  "tutorial/using.html": {
    "href": "tutorial/using.html",
    "title": "Basic operations with data | XData website",
    "keywords": "Basic operations with data Data engine, data scope and repository To start using XData You need get IDataEngine interface reference (see examples below). It will be used to create new data scopes using NewDataScope method. XData use data scope isolation when same typed repositories used by multiple logic at the same time. Data scope is represented by IDataScope interface. Data scope identified by Layer (GUID). Important IDataScope is IDisposable . When disposing IDataScope all repositories, opened at this scope are disposed and XData free all memory used by this data scope. To get data object instances of type T it's recuired to get typed repository interface IRepository<T> using method GetRepository<T> of IDataScope . Tip IRepository is also IDisposable . When disposing IRepository it's data cache cleared. You can dispose repositories manualy, but if not, disposing data scope will free that repository resources. Recommended to dispose large data repositories manualy to reduce memory utilized by application. While repository is not disposed inside data scope it can be requested many times without recreating and database access and GetRepository<T> method of same IDataScope returns the same instance of repository. Net 4.0: using (var dataEngine = XDataManager.InitXData(x => x.UseConfiguration(ConfigurationManager .OpenExeConfiguration(ConfigurationUserLevel.None)))) { using (var dataScope = dataEngine.NewDataScope()) { foreach(var data in dataScope.GetRepository<SomeObject>()) Console.WriteLine(string.Format(\"{0}, {1}\", data.SomeId, data.Name)); } } NetStandard 2.0: //Set configuration file var builder = new ConfigurationBuilder(); builder.AddXmlFile(\"MyConsoleApp.config\"); var configFile = builder.Build(); //Set services using(var serviceProvider = new ServiceCollection() .AddLogging() // Localization only for ASP.NET Core .AddSingleton(typeof(IStringLocalizerFactory), x => null) .AddSingleton(typeof(IConfigurationRoot), x => configFile) .AddXData() .BuildServiceProvider()) { //Configure logging (logger messages minimal allowed levels can be set using config file) serviceProvider.GetRequiredService<ILoggerFactory>() .AddConsole(LogLevel.Warning).AddDebug(LogLevel.Debug); var dataEngine = serviceProvider.GetRequiredService<IDataEngine>(); using (var dataScope = dataEngine.NewDataScope()) { foreach(var data in dataScope.GetRepository<SomeObject>()) Console.WriteLine($\"{data.SomeId}, {data.Name}\"); } } Data object properties access Read/write properties using has no specifics: var invoice = dataScope.GetRepository<Invoice>().First(); invoice.DocNumb = \"12345\"; Except Link , Lob and Xml discussed below . Changing data It's possible to change data object properties with assignment operator (except Link , Lob and Xml discussed below ): var newInvoice = dataScope.GetRepository<Invoice>().New(); newInvoice.DocNumb = String.Format(\"Inv-{0}\", number.ToString(CultureInfo.InvariantCulture).PadLeft(6, '0')); newInvoice.Submit(); To edit data of new object You can also use New method overload with initialization logic wrapper: return dataScope.GetRepository<Invoice>().New( //property DocNumb is a sting assigned as usual z => z.DocNumb = String.Format(\"Inv-{0}\", number.ToString(CultureInfo.InvariantCulture).PadLeft(6, '0')), //property DocCatalog - link to data object typed Catalog //assignment using += operator is the same as DocCatalog.Source = ... z => z.DocCatalog += dataScope.GetDictionaryValue<Catalog>(x => x.Code == catalogCode), //property DeliveryType is enum DeliveryTypeEnum z => z.DeliveryType = DeliveryTypeEnum.PickUp, //property DeliveryDate is DateTime z => z.DeliveryDate = DateTime.Today.AddDays(1), //property Source is Xml, assignment using += operator is the same as //Source.Document = ... z => z.Source += new XDocument( new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", z.DocStateCode))), //property Source - is a large binary object (Lob) and assignment using += operator //is the same as Scan.Value = ... z => z.Scan += Encoding.UTF8.GetBytes(z.Source.Document.ToString ).Submit(out _); Or Modify method extension to change object data: var invoice = dataScope.GetRepository<Invoice>() .SingleOrDefault(x => x.DocNumb.Like($\"%0{number}\") && x.DocStateCode == oldStateCode); if (invoice == null) return true; return invoice.Modify( z => z.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == newStateCode), z => z.Source.Modify(doc => doc.Element(\"invoice\").Attribute(\"state\").Value = newStateCode)) .Submit(out _); Delete XData has ability to mark data object as deleted. Before submit changes this flag can be undone. Marking and rejecting the mark can be done with extension method of interface IDataObject.SetDeleted invoice.SetDeleted(true); // mark data object for delete ... invoice.SetDeleted(false); // undone delete mark ... //... and little more complex example: // set the delete flag and submit changes with submit success flag returning return invoice.SetDeleted(true).Submit(out _); Tip To delete a number of objects at once, it's a handy to use ICollection<T>.SetDeleted extension method. Submit changes To submit changes can be used extension method of interface IDataObject Submit newInvoice.Submit(out var invoice); var docTypeCode = invoice.DocTypeCode; To submit changes apllied to multiple data objects of the same type can be used IRepository<T>.Submit method accepted ( IEnumerable<T> ) as one of parameters. When object is not changed this method will skip it while updating database."
  },
  "tutorial/unit_of_work.html": {
    "href": "tutorial/unit_of_work.html",
    "title": "Processing of related objects (Unit of Work) | XData website",
    "keywords": "Processing of related objects (Unit of Work) XData has supported processing data object mapped to number of tricky related tables. Transactional support is required to apply changes over various but related data objects. For example we have a business object having one ore more related objects collections. Every one of thouse can have related collections of other objects and so on. And some business logic works with this related conglomerate as single complicated entity required submitted into DB using one transaction. XData is support using transaction , but some non terminal data objects can be inserted inside the same transaction and writing code that can support this case is a non trivial thing. Common but elegant way to make it simple and clear is a realizing \"Unit of Work\" pattern. Most of ORM has own realization of this pattern, but XData using this mechanic on right level of business logic - to operate with related conglomerate of business objects. Using of Unit of Work pattern with XData is pure declarative: no custom business logic classes is needed to use it. Lets describe this by example: Initialization of new UoW container for new root object is described using static Add method of the Work class: var rep = dataScope.GetRepository<Model.Patient>(Instance); var instance = rep.New(); /* Using static class Work we init UoW container with new root object and describe collections of related objects. Because of new root object we use Work.Empty method to initialize that collections. */ using (var work = Work.Add(instance, Work.Empty<Model.Patient, Model.PatientDiagnosis>(x => x.PatientDiagnosisList), Work.Empty<Model.Patient, Model.PatientOper>(x => x.PatientOperList))) { if (new PatientWindow { DataContext = new Patient(work), Owner = window } .ShowDialog() == true) work.Submit(); // submiting UoW container changes } Initialization of UoW container for existing object (update): /* Using static class Work we init UoW container over existed root object and decribe collections of related objects. Because of root object is exists collections will be filled from DB using Work.Fill method. */ using (var work = Work.Add(patient, Work.Fill<Model.Patient, Model.PatientDiagnosis>(x => x.PatientDiagnosisList), Work.Fill<Model.Patient, Model.PatientOper>(x => x.PatientOperList))) { if (new PatientWindow { DataContext = new Patient(work), Owner = window } .ShowDialog() != true) return; work.Submit(); // submiting UoW container changes } Initialization of single related object inside of UoW container (one-to-one relationship) is described by Get method, that analog to Empty and Fill methods we use before. UoW container can be initialized with a not only single root object, but using collection of root objects with overloaded Add method that accept an collection ( ICollection ) of root objects. To select a single object form UoW container use Get method. This method can accept predicate as parameter to specify unique condition of object selection. After acquiring a single object we can change it (or delete it as explained in followed examle): _patient = work.Get(); _patient.SetDeleted(True); To select multiple objects from UoW container can be made using Select method: var newOperations = work.Find(x => x.PatientOperList).Select(x => x.Date > startDate); To acquire slave UoW container we can use Find method. This method can accept predicate to select root object when root container has initialized by collection of objects. New related object can be added to slave UoW container using Add method we discussed above: work.Find(x => x.PatientOperList).Add(() => n.Data); To exchange object in UoW container use Assign method. When object is exchanged all his slave UoW containers will be dismissed and all changes in it will be lost! work.Assign(x => true, repository.New()); Warning Do not use Assign method to change object property values! Updating properties of object inside UoW container can be produed by acquiring object using Get method and changing it properties. Method Assign is used to exchange object incuding his slave containers by another object! Important Uint of Work realization is not internal part of XData. It can be attached to Your project when this functionality is realy needed using separate NuGet package XData UnitOfWork package ."
  },
  "tutorial/three_tier.html": {
    "href": "tutorial/three_tier.html",
    "title": "Using three tier architecture | XData website",
    "keywords": "Using three tier architecture Important This is feature of .Net 4.0 version only. One of unique features of XData is using same application logic modules as in two-tier-architecture (client-db), as in three-tier-architecture (client-application server-db). And You can switch three-tier application in two-tier mode to simplify debugging changing configuration file only!!! Tip In three-tier mode no database client software needed on client workstation. And no database credential stored in configuration file. To extract part of data aware application logic on application server level You will need: extract mapped classes in separated assembly (or assemblies) called \"data modules\" extract server data logic in separated assembly (or assemblies) called \"server modules\" in server modules create logic classes for some data objects extend abstract class XDataLogic<T> , where T - data object class type that uses server logic including trigger logic and call server logic from client code. public abstract class InvoiceLogic : XDataLogic<Invoice> { [Action(DataActionType.AfterInsert), Action(DataActionType.AfterUpdate)] public readonly static Trigger<Invoice> UpdateHistory = ((ref Invoice invoice, ref DataTriggerFlag flag) => { if (!invoice.CheckState(DataObjectState.New) && !invoice.IsChanged(x => x.DocState)) return true; var rep = invoice.GetRepository(); var hist = GetRepository<DocHistory>(rep.Layer, context: rep.Context) .Reset() .SetFilterValue(DocHistory.FilterByDocId, invoice.GetProperty<long>(\"DocId\")) .SetFilterValue(DocHistory.FilterByDocStateId, invoice.DocState.Key); var newHist = hist.New(); newHist.HistoryDate = DateTime.UtcNow; return hist.Submit(ref newHist); }); [Action(DataActionType.BeforeDelete)] public readonly static Trigger<Invoice> ClearHistory = ((ref Invoice invoice, ref DataTriggerFlag flag) => { var i = invoice; return GetRepository<DocHistory>(i.GetLayer(), context: i.GetContext()) .Reset() .Clear(x => x.GetProperty<long>(\"DocId\") == i.GetProperty<long>(\"DocId\")); }); [Action(DataActionType.BeforeClear)] public readonly static RepositoryTrigger<Invoice> ClearHistoryBatch = ((IRepository<Invoice> invoiceRepository, ref DataTriggerFlag flag) => GetRepository<DocHistory>(invoiceRepository.Layer, context: invoiceRepository.Context) .Reset() .Clear(x => invoiceRepository .Any(z => x.GetProperty<long>(\"DocId\") == z.GetProperty<long>(\"DocId\")))); public static readonly CustomLogic<Invoice> TestCustomLogic = (objects => { Log.Write(MessageType.Information, () => String.Format(\"TestCustomLogic called with {0} objects\", objects.Length)); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => String.Format(\"Call for \\\"{0}\\\" returned \\\"{1}\\\" with data \\\"{2}\\\"\", i.DocNumb, r, p == null ? null : Encoding.UTF8.GetString(p))); } return true; }); } set server module assembly name in data object mapping in data modules [DataObject(\"D\", LogicAssemblyName = \"InvoiceServerLogic\")] //for static mapping //или ... .SetLogicAssembly(\"InvoiceServerLogic\") //for dynamic mapping register custom logic handlers inside mapped types in data modules public static CustomLogic<Invoice> TestCustomLogic; write custom logic calls from client modules var random = new Random(); return dataScope.GetRepository<Invoice>().ToArray().Execute( () => Invoice.TestCustomLogic, \"testPost\".SetValue((Action<byte[]>)(data => Console.WriteLine(\"Post message received (data=\\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)))).AsEnum().ToDictionary(), \"testCall\".SetValue((Func<byte[], byte[]>)(data => { Console.WriteLine(\"Call received \\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)); return random.NextDouble() >= 0.5 ? null : Encoding.UTF8.GetBytes( string.Format(\"reply for \\\"{0}\\\"\", data == null ? null : Encoding.UTF8.GetString(data))); })).AsEnum().ToDictionary()); Tip Custom logic handlers can use synchronic and asynchronic calbacks to client code and perform analysys of synchronic callbacks result. This functionality alowes to realize very complex and interactive disributed business processes."
  },
  "tutorial/security.html": {
    "href": "tutorial/security.html",
    "title": "Security issues | XData website",
    "keywords": "Security issues XData is able the application to take a full control over data access rights and rights to execute any data aware business logic. Inside the XData has designed a complete data security solution for control access to some proprties of data objects , access to data objects corresponds some rules, access to standard (CRUD), or custom data aware business logic. For using this ability is required to implement interface ISecuritySession and use it as parameter of GetRepository method of data scope interface to get security sensible repository . XData is not specify the way to authentication and authorization. Your application can use any existing technologies or products on the market. Here the synthetic but simple and demonstrative example of ISecuritySession implementation: public class MySecuritySession : SecuritySession { private const string Manager = \"Manager\"; private const string Guest = \"Guest\"; private const string Chief = \"Chief\"; private const string Clerk = \"Clerk\"; public static MySecuritySession CreateSecuritySession (string userName, string password) { if (userName == \"Admin\" && password == \"123\") return new MySecuritySession(userName, new string[0], true); if (userName == \"Manager\" && password == \"111\") return new MySecuritySession(userName, new[] { Manager, Clerk }); if (userName == \"Guest\" && password == \"222\") return new MySecuritySession(userName, new[] { Guest }); if (userName == \"Chief\" && password == \"333\") return new MySecuritySession(userName, new[] { Chief, Manager, Clerk }); if (userName == \"Clerk\" && password == \"444\") return new MySecuritySession(userName, new[] { Clerk }); RiseUnauthorizedAccessException(); return null; } /// <exception cref=\"XDataSecurityException\"></exception> [DebuggerStepThrough] [DebuggerNonUserCode] private static void RiseUnauthorizedAccessException() { throw new XDataSecurityException(\"XDataObjectTest system\"); } public MySecuritySession (string userName, string[] roles, bool isSupervisor = false) : base(userName, roles, isSupervisor) { } protected override void InitializeSession() { //Hide some columns from Guests RegisterRestrictedProperties(\"\", typeof(Invoice), new[] { Guest.SetValue(new[] { Property<Invoice>(x => x.DocAmount), Property<Invoice>(x => x.DocLastChange), Property<Invoice>(x => x.Scan), Property<Invoice>(x => x.Source), Property<Invoice>(x => x.CustomerTo), Property<Invoice>(x => x.DeliveryType) }) }); RegisterGrantedActions(\"\", typeof(Invoice), new[] { //Grant all actions to Chief Chief.SetValue(new [] { Actions.All }), //Grant all CRUD but TestCustomLogic is denied for Manager Manager.SetValue(new [] { Actions.CRUD }), //Grant update only for Clerk Clerk.SetValue(new [] { Actions.Update }), //Grant execute TestCustomLogic only for Guest Guest.SetValue(new[] { Action(() => Invoice.TestCustomLogic) }) }); //Hide non ACTIVE invoices from Guests RegisterSecurityFilters(\"\", typeof(Invoice), new[] { Guest.SetValue<string, Expression>( (Expression<Func<Invoice, bool>>)(x => x.DocStateCode == \"ACTIVE\")) }); } } To simplify the ISecuritySession interface implementation use the NuGet package XData Security package . This package provide an abstract class SecuritySession implemented base functionality and usefull helpers. This functionality is shipped separatly becauose of security session using is optional. Important Required to override the constructor SecuritySession(string userName, string[] roles, bool isSupervisor = false) used in three-tier architecture on server side, and override method InitializeSession . Method InitializeSession is used to cache access rues profile. Tip Caching of all users security rules (as exposed in sample above) is not effective. This for simplify demonstration only. Security session is current user security describer. Recommended to cache rules for current user only using initialized before calling of InitializeSession properties: UserName , Roles and IsSupervisor . In sample above take a look on using caching methods: RegisterRestrictedProperties , RegisterGrantedActions and RegisterSecurityFilters , and a helper methos: Property and Action . When describing access rules to actions (standard and custom) use constatnts defined in Actions static class: All - all actions over data object, including standard (CRUD) and custom named actions CRUD - all standard actions: Create , Update , Delete Create - create new data object action Update - update data object properties Delete - delete data object"
  },
  "tutorial/runtime_filter.html": {
    "href": "tutorial/runtime_filter.html",
    "title": "Runtime filters | XData website",
    "keywords": "Runtime filters Runtime filters used for filtering data by field (or SQL expression) where filter value will be accessable during runtime only. Similar results can be reached using LINQ, but may be field to filter on is not selected. Or the result we need is not a readonly dynamic dataset (see LINQ support and Dynamic queries ), but feature rich repository , only filtered. Runtime filters in XData are defined as static fields of data object typed as RuntimeFilter . Name of runtime filter is mast to be unique over data object mapping structure (with subqueries). When value of runtime filter is set and filter with same name is not found in mapping, it will be dynamicaly added to mapping structure. To set value of runtime filter, use SetFilterValue method of repository . To clear one runtime filter value, set null value. To reset all runtime filters, use Reset method of repository. Tip When rintime filter value is set to null check filter null processing behaviour assigned to this filter! var rep = invoice.GetRepository(); var hist = dataScope.GetRepository<DocHistory>(rep.Layer, context: rep.Context) .Reset() .SetFilterValue(DocHistory.FilterByDocId, invoice.GetProperty<long>(\"DocId\")) .SetFilterValue(DocHistory.FilterByDocStateId, invoice.DocState.Key); var newHist = hist.New(); newHist.HistoryDate = DateTime.UtcNow; return hist.Submit(ref newHist); Runtime filters can be described on place: //Using column name .SetFilterValue(\"DocId\", doc_id) //Using property expression .SetFilterValue(x => DocNumber, docNumber) //Using FilterName helper .SetFilterValue(new FilterName(\"FilterByDocId\"), doc_id)"
  },
  "tutorial/query.html": {
    "href": "tutorial/query.html",
    "title": "Readonly dynamic query building | XData website",
    "keywords": "Readonly dynamic query building XData have a feature alowes programmer to build readonly data query in dynamic LINQ like style: var query = XDataMapping.GetStructure(\"D\", dataScope.DefaultContext) .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_NUMBER\", \"N\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_SCAN\", \"SC\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_DELIVERY\", \"DD\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_SOURCE\", \"SR\", x => x.Link(\"D\", \"doc_id\")) .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", flags: DataStructureFlag.Grouping) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<int?>(\"H\", string.Empty, z => z.Key(), z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(z => z.DocId) .SetOperation(FilterOperation.OuterJoin)) .Column(\"DocId\", x => x.Field<int?>(\"D\", \"doc_id\", z => z.Key())) .Select(x => new { Number = x.Field<string>(\"N\", \"numb\"), Date = x.Field<DateTime>(\"D\", \"doc_date\"), Amount = x.Expr<decimal?>(\"doc_amount\", DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5)), //SUBQUERY LastChange = x.Ref<object>(\"H\", \"HistoryDate\"), //INNER VIEW Scan = x.Field<byte[]>(\"SC\", string.Empty), //BLOB DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), //ENUM Source = x.Field<string>(\"SR\", string.Empty) //XML }).AsQuery(dataScope.Layer); foreach (var x in query) Console.WriteLine( \"Number:{0}, Date:{1}, Amount:{2}, Scan:{3}, LastChange:{4}, DeliveryType:{5}, Source:{6}\", x.Number, x.Date, x.Amount, Encoding.UTF8.GetString(x.Scan), x.LastChange, x.DeliveryType, x.Source); Static class XDataMapping has method GetStructure to obtain IQueryStructure<T> interface having various methods to describe very complicated query structure dynamically. Rules of building queries dynamically is similar as dynamic mapping but query more lightweight, safe and can be extended in runtime. Method GetStructure has overloaded version to get structure of existing repository to extend it with adding data sources as data tables , subqueries and inner views , appling filters including filters by subqueries. Query mapping logic can be declared by Select method returning IQueryDescription<T> interface. No matter statically or dynamically is mapped repository we use as source structure, it can be extended. To access query data get IQueriable implementation IDataQuery<T> from IQueryDescription<T> use AsQuery method. With dynamic query You can query and map data to any object incliding realtime typed object as showed in example. Dynamic mapping has no method to add filters in runtime. To add new filter to QueryStructure used method AddFilters ."
  },
  "tutorial/logging.html": {
    "href": "tutorial/logging.html",
    "title": "Logging and debug info | XData website",
    "keywords": "Logging and debug info During process of developing and debuging Your application the XData can provide You information to find error or understand context of any data processing activity. XData does not enforce developer with using some logging system. Instead of that XData (version .Net 4.0) provide simple interface ILogWriter to implement. Implementation of this interface (if not implemented yet) alowes to integrate XData log output into any You choose logging subsystem of Your application. As example You can use any log writer plugin from XData sources. Configuration of log writer plugin is described configuration file section xdata using attribute log providing value with assembly qualified type name, where type is implements ILogWriter interface. XData (version .Net Standard 2.0) use Microsoft.Extensions.Logging subsystem. In the case when the default level (usually the logging level “Information”) is not sufficient to diagnose the problem, it can be lowered by means of the basic logging technology (including by setting the logging parameters in the configuration file). The configuration rules of the basic logging subsystem can be found on their websites: Microsoft.Extensions.Logging , System.Diagnostics.Trace , log4net . * (version .Net Standard 2.0) Microsoft.Extensions.Logging cathegory name of XData loger is \"XData\". Sample loging configuration for debug: { \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\", \"XData\": \"Debug\", \"System\": \"Information\", \"Microsoft\": \"Information\" }, \"Debug\": { \"LogLevel\": { \"Default\": \"Debug\" } }, \"Console\": { \"LogLevel\": { \"Default\": \"Information\" } } } } * (version .Net 4.0) System.Diagnostics.Trace switch name for XData log messages is \"logLevelSwitch\". See System.Diagnostics.Trace documentation for details. log4net requires no specific constants to configure log messages severity level. See log4net documentation to obtain configuration details. Important Configuration of logging subsystem to debug mode can reduse application productivity. It's recomended to switch off debug mode when not required. But it's a very powerfull tool to help developer with repository mapping correctness check. I'ts a highly recommended to use it on debug stage! SQL query logging can be also used as source for checking query plan effectiveness. Always check query plans - it's help You to develop high quality products."
  },
  "tutorial/localization.html": {
    "href": "tutorial/localization.html",
    "title": "Localization | XData website",
    "keywords": "Localization By default all errors and information messages from XData modules use neutral (en-US) locale, but it's possible to translate this using satellite assembly (for .Net 4.0 version) or prepare resx files to Microsoft.Extension.Localization (for ASP.Net Core 2.0 projects used XData .Net Standard 2.0 version). To help developers make localization fast and simple as possible, XData sources complects with some \"bat\" files. All settings within files is made for russian locale (ru-RU), but there are no problem to patch files for any locale. Prepare text files to translation Patch file add_locale.bat with setting path to RESGEN utility (\"C:\\Program Files\\Microsoft SDKs\\Windows\\v8.0A\\bin\\NETFX 4.0 Tools\"), path to XData.dll and locale code. Run add_locale.bat and be sure with no errors during making translation file (.restext). Translate localization strings inside .restext file to target locale language. Take care, some string are multiline, and some strings has format templates structure (see string.Format). Satellite assembli compilation (for .Net 4.0 version) Patch file compile.bat with setting path to AL utility (\"C:\\Program Files\\Microsoft SDKs\\Windows\\v8.0A\\bin\\NETFX 4.0 Tools\"), path to XData.dll and locale code. Run compile.bat and be sure and be sure with no errors during making satellite assembly (.dll). Resource file generation (for ASP.Net Core 2.0 projects used XData .Net Standard 2.0 version) Patch file createres.bat with setting path to RESGEN utility (\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\"), path to XData.dll and locale code. Run createres.bat and be sure and be sure with no errors during making resource file (.resx). Install sattelite assembly (for .Net 4.0 version) Copy localization foolder named as target locale code to bin folder of Your application (where XData.dll is located) or (for ASP.Net Core 2.0 projects used XData .Net Standard 2.0 version) copy .resx file for target locale to resources folder of Your ASP.Net Core 2.0 site. Restart Your application or site. Tip Recomended materials: https://msdn.microsoft.com/en-us/library/f45fce5x(v=vs.100).aspx https://msdn.microsoft.com/en-us/library/ccec7sz1(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/sb6a8618(v=vs.100).aspx http://www.codeproject.com/Articles/5447/NET-Localization-using-Resource-file"
  },
  "tutorial/linq.html": {
    "href": "tutorial/linq.html",
    "title": "Linq support | XData website",
    "keywords": "Linq support XData repositories и dynamic queries implements interface IOrderedQueryable<T> and granted full support for IQueriable methods. Important Methods SkipWhile , TakeWhile , Join , Select и SelectMany is supported, but results with fullfecth of source data and executed over IEnumerable sources on Linq2Object level. This limitations is related to unexpected complexity of translation handlers to SQL for first two methods, and dynamic changes of result type in others. To effective access to joined or restricted by fields data sources with single database query use dynamic queries For example: // full data object has many fields but we want to select only two of them var query = XDataMapping.GetStructure<SomeObject>() // we can use anonymous objects with dynamic query .Select(x => new { One = x.Field<long>(\"R\", \"one\"), Two = x.Field<long>(\"R\", \"two\") }).AsQuery(dataScope.Layer); Instead of multiple data object joining or subselecting You can define various mappings and/or dynamic queries over same data as many as You need. This specific mappings or dynamic queries can be fine tuned for high speed and effective data access according any specialized requirements. Some of them can be reused, some not. But all of them will be as effective and low cost as You can write."
  },
  "tutorial/intro.html": {
    "href": "tutorial/intro.html",
    "title": "Introduction | XData website",
    "keywords": "Introduction Why and when You need XData? Independence: Business object hierarchy of Your application not depend XData object hierarchy. Database structure not dictate program object structure and vice versa. Database specific terms (primary key, foreign key, surrogate key value, concurrency token and so on) can be hidden from program object model due object mapping. XData base mapping concept based on one business object mapping with any number of data sources (tables, xml sources, subqueries, recursive trees and procedures) with not restricted recursion deep. Each of mapped business object can operate with hierarchically organized \"updatable tree\" of tables so business object changes can be stored in multiple linked tables at once. Complicated business objects can be created, updated and deleted with no aditional code more then mapping. Same mapping can be used over multiple RDBMS (with some restrictions). SQL dialect modules can be developed independedly from adapter modules developed over various ADO.Net providers used to access the same RDBMS. With ability to use XML data sources, temporary tables and procedure support, system can work using proprietary application database schemas where schema changes are not allowed. All technologically required tools (for example DI) can be integrated with XData, but You can choose Your favorite one independently without any dictate or double using it inside XData. Functionality: Full IQuariable and LINQ support. XData alowed to use SQL expressions as field data source. Calculated properties can be evaluated on .Net side. Active record model of data access is supported. Fully declarative using of optimistic locking of data is provided. Pessimistic locking is allowed when it supported by RDBMS functionality. Your application over XData can be deployed in three-tier mode with data aware logic can be took out to the application server layer (only in full .Net Framework 4.0 or above for now). XData introduce data aware business object actions which can be used as in two-tier mode as in three-tier mode. .Net trigger like logic can be programmed over mapped business objects (not over single table!). This feature also can be deployed on application server layer in three-tier mode. Usability Human readable mapping structure with unambiguous correlation with resulting SQL query. Programmer can get query text to check query execution plan for optimization. Feature rich security subsystem over business object level can be simply implemented using separate NuGet package. Declarative realization of Unit of Work over business object level available when using separate NuGet package. Lazy loading of large objects (XML, BLOB...) is available from the box. Two modes of mapping (using attributes and LINQ style expressions) or their mixing can be used. Dynamic inplace read only queries it's a powerful tool to access data in complicated cases. Virtual data support. You can use database mocking ability for testing. You can debug three-tier XData application in two-tier mode. Attachable localization based on satellite assemblies ability can be used to localize XData internal messages to any languages You interested (only in full .Net Framework 4.0 or above for now). Speed: SQL optimization granted by human controlled mapping results. Code of XData is extremely optimized to speed with using profiler until no one internal code block is still marked \"hot\" over business logic and database access. Mapping structure caching. Cache can be reset by programmer. Data caching. Cache can be reset by programmer. SQL hints are supported to improve productivity in most complicated cases. Is any restrictions of using XData exists? XData not supported Code First approach: Programmer or database administrator can write SQL script. This code is prodused by human, real (not artifical) intellect of professional... But still XData has ability to run this script over database using Custom SQL executing festure. XData not supported DDL: By the same logic as above, and with the same receipt of using. XData not supported Database First approach: Now I've no idea to provide the same independence level as announced above using this approach (may be in the future...). Powerfull, but complicated: Try it, simple things still are simple, more complecated is not as scary as they appear at first sight. But the power is never be useless. RDBMS SQL specific stataments: So many RDBMS specific statements. So many features realized in one only database system, or restricted by version... May be some of them will be implemented, may be not... (planned to support in next versions) SQL blocks: One of planned features is supporting unnamed SQL code blocks. But not supported now. (planned to support in next versions) More dialects and adapters: Now supported MS SQL Server, Oracle, PostgreSQL, MySql and SQLite. It's a most used RBDMS, but Your favirite database can be out of the list. There are two ways - write me a letter and wait for my code realization, or develop it by Youself. It's not a \"pice of cake\", but also not a huge amount megabytes of highly complecated code."
  },
  "tutorial/glossary.html": {
    "href": "tutorial/glossary.html",
    "title": "Glossary | XData website",
    "keywords": "Glossary Data object Application domain objects mapped (statically or dynamically) to database representation. Data object instances can be obtained through generic repository typed by data object type. Data objects non readonly proprties can be changed and that changes may be submitted to database. Updatable tables hierarchy Hierarchically related tables can be updated on submit of data object changes. Real update of one or subtree of a tables in that hierarchy depends on changes of properties that mapped to concrete tables. When optional referencies is declared between tables inside updatable tables hierarchy, update of data objects can be automatically translated to insert or delete SQL statement applied to concrete table. Updatable tables hierarchy has only one root node - base table . Base table Root table of updatable tables hierarchy . In case of using readonly repository mapping, base table role can be assigned to any table (or virtual table) that contains data object unique key. Optional referencies The outer join referencies between tables within updatable tables hierarchy . Referenced (slave) table must contain one or more properties marked as mandatory . At least one mandatory property are required and it can not be mapped on primary key (or part of primary key). In most cases that properties is natural key of the table. The values assigned to that properties will be used to make a decision over operation applied to table. Data scope Data scope termin is required to describe an independent evironment of operating the same data inside the application. Each data scope has an GUID identifier - layer. In each data scope application logic can set independent filters values over the same repository . Same repositories can be linked over diferent data scopes using different ways and rules. Repository Repository grant access to acquire data objects and apply their changes to database. Repository is represented by XData internal structures and available using interface IRepository<T> extend IQueryable<T> , where T is data object type. Context String alias associated to one of application database instance and all configuration options to use it inside XData environment. Configuration options can be obtained from configuration file or registred dynamically during runtime (see Installation & configuration ). Repository alias Optional repository alias string. Required to unique identification repository used multiple times within one data scope . Sometimes the same repository (but arranged by different runtime filters and variables ) can be useful as multiple slave data sources in master-slave relations inside single data scope (master-slave relations is limited to use single data scope). Filters Filters statically (by mapping) or dynamicaly applied to repository . To define complex filtration rules filters can be grouped in filter groups characterized by name and logical filter combination operation ( AND or OR ). Filter groups can combine filters and/or depended filter groups. Root filter group of repository with filters combined using AND logical operation, can be omited and will be automatically created in runtime. Default filter group name is empty string. By default all filters are linked to default filter group. To specify other filter group to certain filter set filter property Combination to name of this filter group. The master-slave relations is realized on slave repository filters values set up also. In other cases, repository can be filtered by apply LINQ expressions on it. Runtime filters Filters, that allow set the value during runtime. Runtime filter value set can be automated using describing master-slave relation between repositories , or manualy, using SetFilterValue method of repository. Data source flags DataStructureFlags enumeration contains set of flags that defines structure of data source. Data source can be marked with combination of values: None - default data source structure, plain object structire, can be edited, data grouping not applyed. ReadOnly - data source marked as readonly. In optimization goals is recommended to use this flag for all data sources readonly by application logic. Tree - data source is marked as hierarchically organized. Allow to use multiple ways to filter slave data sources (when master is marked as Tree ) - using plain links to active tree node, or to active tree node and subtree. Grouping - data source is marked as grouped. Required to describe grouped data source. Property flags DataPropertyFlag enumeration contains set flags that defines specific role of property: None - default value, property marked with no specific roles Id - property is part of data object primary key OuterFlag - property is marked as mapped to mandatory field of optional referenced table. The value of this property is used to make a decisign over operation applyed to optional referenced table. ConcurrencyToken - concurrency token used within optimistic locking . SQL expression type DataExpressionType enumeration contans types of SQL expression description: PlainSql - SQL expression is plain SQL code, SubQuery - SQL expression is subquery with specified alias, LinqExpression - SQL expression defined as a static private field typed as Calculate<T> , where T is a SQL expression result type, and the field value is LINQ style expression reflects SQL expression logic. Default value type DefaultType enumeration contains types of values used to set default values of properties: CurrentDate - current date (database time settings used) CurrentDateTime - current date and time (database time settings used) CurrentDateTimeUTC - current date and time UTC (database time settings used) Variable - variable value with name stored in DefaultValue Const - constant value stored in DefaultValue AutoIncrement - value generated by database by autoincrement fields or sequence. In case of using sequence is required to match the rules described here . NewGuid - new GUID value is generated UserName - current user name. Security provider subsystem using is required to fill this type of default value. Default value features DefaultFeature enumeration contains extension features used with default values of properties is assigned: UseOnInsert - use default value on insert (by default, always applied) UseOnUpdate - use default value on update SkipWhenAssigned - skip insert into table when PK value assigned explicitly (see here for details) UpdateWhenAssigned - change insert operation over table to update when PK value assigned explicitly (see here for details) Default features can be combined. For example: DefaultFeature.UseOnUpdate | DefaultFeature.SkipWhenAssigned Aggregation type DataGrouping enumeration contains data aggregation functions used inside grouped data source: None - mapped field or SQL expression is one of data source grouped by. Count, Sum, Min Max, Avg - corresponded function is applied to mapped field or SQL expression. Property data source Table field, view field, SQL procedure (or function) parameter or SQL expression mapped to data object property value. Virtual table Various RDBMS has mechanics to select the data without specifying real source (\"dual\" table in ORACLE, omit \"from\" section in MsSqlServer and so on). Virtual data table is recommended for use as source of calclated fields , SQL expressions , when virtual data processing is required. Virtual table is not described in mapping. To set virtual data source as source of property set data source alias as empty string. Filter group Named group of filters (or submittal filter groups) linked with the same logical operator ( AND or OR ). Root filter group named as empty string and have an AND logical operator. Root filter group can be omited in mapping description. All filters without explicit group specification is assigned to root filter group. Filter group names must to be unique named within dataobject mapping description. Filter null processing behaviour FilterNullable enumeration contains behaviours applied to null value processing while comparing data to filter value: Nullable - (default) filter null value is omits the filter (no filter limitation applied) NullsAllowed - null and not null values of filter and data is compared separatly (filter within SQL query will looks like ((field is null and :param is null) or field = :param) ) NullsNotAllowed - filter null value is translated as non valid and querybwill return no records (filter within SQL query will looks like (:param is not null and field = :param) ) NullsCompared - only null values of filter and data is translated as valid (filter within SQL query will looks like (:param is null and field is null) )"
  },
  "tutorial/config.html": {
    "href": "tutorial/config.html",
    "title": "Install & configuration | XData website",
    "keywords": "Installation and configuration Installation To start use XData basic functionality is required to setup NuGet XData package . XData plugins or additional modules can be downloaded and used separately. To work with related objects ( Unit of Work implementation) is required to setup NuGet XData UnitOfWork package . To implement security session and use application data access with XData is required to setup NuGet XData Security package . To use one or more SQL dialect, SQL adapter, specific log writer XData plugins it can be downloaded and unzipped to application binary folder (same as XData.dll located). Read this topic to the end for configuration rules to any plugin. Read provided readme.txt file to get specific knowledge about choosen plugin. To deploy application in three-tier architecture read here Acquiring XData configuration during runtime .Net Standard 2.0: XData can be dynamically configured when defining XData service (see AddXData ) in ServiceCollection using optional parameter options in LINQ style. .AddSingleton(typeof(IConfigurationRoot), x => null) .AddXData(x => x.AddDialect(\"postgresql\", XDataAdapter.PostgreSql.Dialect) .AddAdapter(\"postgresql\", XDataAdapter.PostgreSql.Adapter) .AddContext(\"test\", \"postgresql\", \"postgresql\", \"Server=localhost;Database=XDataTest;User Id=postgres;Password=123456\", true)) Configuration file in .Net Standard 2.0 version is readed by Microsoft.Extensions.Configuration service registered during application startup. Tip XDataAdapter.PostgreSql.Dialect, XDataAdapter.PostgreSql.Adapter and similar constants for other databases is defined in adapter NuGet packages. .Net 4.0: XData can be dynamically configured when acquiring XData engine XDataManager.InitXData using optional parameter options in LINQ style. Warning Signature of XDataManager.InitXData method is slightly different for .Net 4.0 version! See versions comparision for details. var dataEngine = XDataManager.InitXData(x => x.AddDialect(\"postgresql\", XData.PostgreSql.Dialect) .AddAdapter(\"postgresql\", XData.PostgreSql.Adapters) .AddContext(\"test\", \"postgresql\", \"postgresql\", \"Server=localhost;Database=XDataTest;User Id=postgres;Password=123456\", true)); //or using configuration file var dataEngine = XDataManager.InitXData(x => x.UseConfiguration( System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(\"~\"))) Tip When using both versions You can use IDataOptions methods to store partial non secure connection string only and fill credentials during runtime. Security related information can be obtained separatly from some secure source. Configuration XData using config file Tip When using .Net Standard 2.0 version config file can be formatted in any notation but structure of config file need to be correspond XML structure described here Important When using XML formatted config file required to add specific descriptor for XData specific section \"xdata\" <configuration> <configSections> <section name=\"xdata\" type=\"System.Configuration.IgnoreSectionHandler\"/> </configSections> ... Important Check configSections section is first section inside XML configuration file! Connection strings for each of context must to be declared in standard section connectionStrings and name attribute should equal to context name. Connection strings is required on client side only when two-tier (client-server) architecture used. <connectionStrings> <add name=\"TEST\" connectionString=\"Data Source=(local);Initial Catalog=XDataTest;User Id=test;Password=test\"/> </connectionStrings> There are three possible ways to secure connection string in configuration file: Chipher config file section connectionStrings section Using partial connection strings during runtime Deploy application in three tier mode . In this case connection string is not required to be configured on client side. XData specific section xdata has a structure: <xdata default=\"TEST_ORACLE_ODP\" log=\"XDataTraceLog.TraceLog, XDataTraceLog\"> <adapter name=\"ORACLE_ODP\" assembly=\"XOracleODPAdapter\"/> <dialect name=\"ORACLE\" assembly=\"XOracleDialect\"/> <context name=\"TEST_ORACLE_ODP\" adapter=\"ORACLE_ODP\" dialect=\"ORACLE\" sequence=\"XDataObjectTest.MySequenceRule, XDataObjectTest\" concurrencyError=\"-20001\"/> </xdata> The xdata section required to contain attribute default with context name used by default. Attribute log optional, used for .Net 4.0 version only (.Net Standard 2.0 version used Microsoft.Extensions.Logging service). Log attribute value is assembly qualified type name for ILogWriter realization (see available log plugins or implement any You want log system adapter). Log messages minimal severity level filters can be configured using native tools and abilities provided with chosen log subsystem. Inside xdata section for each of context required elements: dialect (required always, can be shared between multiple contexts) - register an unique alias to specific RDBMS SQL dialect support. Attribute name contains an alias of dialect. Attribute assembly - assembly name of specific dialect plugin. When plugin implementation support additional configuration settings, element dialect may have an specifically organized internal structure described in plugin readme file. adapter (required when two-tier architecture is used only, can be shared between multiple contexts) - register unique alias to adapter for specific ADO.Net provider. Attribute name contains an alias of adapter. Attribute assembly - assembly name of specific adapter plugin. When plugin implementation support additional configuration settings, element adapter may have an specifically organized internal structure described in plugin readme file. context (required always) - contains context settings. Attribute name contains context name. Attribute adapter (required when two-tier architecture is used only) contains adapter alias. Attribute dialect - dialect alias. In case of using sequences required to specify attribute sequence contains assembly qualified type name of ISequenceNameRule implementation. When optimistic concurrention error code need to have a special value for some reason (see specific adapter readme file) set concurrencyError attribute to specific error code value. proxy (required when three-tier architecture is used only) - declare WCF client endpoint name for context named same as proxy attribute name value. WCF client endpoint name is stored in endpoint attribute value. Same WCF endpoint can be used for multiple contexts. Contexts names on client and server must to have same names. Deploing and configuration process for three tier architecture is described here . Deploing application in three three-tier architecture Project organization rules and assembly deployment principles to deploy application using three-tier architecture described here . Note Three-tier architecture can be apllied over .Net 4.0 version only! See next versions to use three-tier feature on .Net Standard 2.0 version. Install and configure server Server is implemented as WCF service XData.Server.dll . Base engine XData.dll library is required to server functionality. As well as log plugins, dialects and adapters to connect database directly. To run Your application business logic on server side server logic and data mapping modules are required on server side two. Limits to choose protocol can be used as transport between client and server: Duplex support Reenterability inside one session support It's recomended to host XData.Server on IIS. By default IIS is not configured to activate service over net.tcp, and if You whant to use this protocol, see here to configure it. Changes on client side When three-tier architecture is used, required to obtain special module XData.Remote . Application folder must contain client logic and data mapping modules, as well as used by Your application log modules, SQL dialect modules BUT now adapters not required to contexts used in three-tier mode. In configuration file, is required to configure WCF client according Your server settings. Section xdata must to be configured as described above with defining of proxy elements for every context that used three-tier architecture. Remote contexts must to have same names on client and server. Sample three-tier configuration can be obtained from XData test project. Tip You able to combine local connections to some databases with one or more three-tier servers. In the same time You can use multiple dedicated servers, each for one or more contexts. Tip You can fast and simple switch from three-tier mode to client server mode and then back to three-tier by commenting/uncommenting proxy descriptions. It's a very usefull feature to debug server logic code ;)"
  },
  "tutorial/concurrency.html": {
    "href": "tutorial/concurrency.html",
    "title": "Concurrency resolving | XData website",
    "keywords": "Concurrency resolving Concurrency can be resolved by pessimistic or optimistic locking on transaction management level. XData is supported an automatic (or manual) transaction management with both locking types support (when locking is supported on RDBMS level). Pessimistic locking is RDBMS ability to define lock over one record for one thread of application until transaction is commited. In case of concurrent rase first thread acquired and lock data and other threads will get an exception. XData pessimistic locking is acquired by repository Lock method call, or an extension method Lock of IDataObject interface. In case of reject of locking the exception is catched, but method returns false. To acquire the pessimistic lock the transaction is required. When no transaction is defined then runtime XDataRuntimeException is raised. Optimistic locking require a special field inside datatable table - the concurrency token. Concurrency token is always updated on insert or update of the table using some algorithm. When data changes submitted (update or delete) the value is checked for not changed until request data. If value is changes the XDataConcurrencyException is rised. To mark property as concurrency token then define mapping use property flag - ConcurrencyToken and set one of default value type to choose one of concurrency value generation algorithm. Concurrency token value checking is provided automatically. There is possible to set IgnoreConcurrency flag to ignore concurrency when submitting changes using repository Submit method, or an extension method Submit of IDataObject interface. When concurrency is ignored no checks are provided and concurrency is resolved with \"last change is applied\" rule. Tip Concurrency token field can be hidden, but recured to be selected from data source table (see Hidden property ). Important Concurrency token property mapping required to define default value behaviour with extention feature DefaultFeature.UseOnUpdate . Ways to define concurrency token property mapping is various to static and dynamic notation and described in corresponding topics."
  },
  "tutorial/adapter.html": {
    "href": "tutorial/adapter.html",
    "title": "Making new XData adapter | XData website",
    "keywords": "Making new XData adapter Note Oops... not ready yet... but we've working on it"
  },
  "tips/yaml_config.html": {
    "href": "tips/yaml_config.html",
    "title": "YAML configuration file | XData website",
    "keywords": "YAML configuration file (for .Net Standard 2.0 only!) Since .Net Core and .Net Standard 2.0 supported various configuration file formats it's possible to configure XData with, as a sample, YAML file. connectionStrings: add: - name: \"DICT\" connectionString: \"Server=server;Database=test;User Id=postgres;Password=123456;Search Path=dictionaries\" - name: \"CONTACTS\" connectionString: \"Server=server;Database=test;User Id=postgres;Password=123456;Search Path=contacts\" xdata: adapter: - name: \"DICT_POSTGRESQL\" assembly: \"XData.PostgreSql.NpgSql.Adapter\" schema: dictionaries: - name: \"CONTACTS_POSTGRESQL\" assembly: \"XData.PostgreSql.NpgSql.Adapter\" schema: contacts: dialect: - name: \"POSTGRESQL\" assembly: \"XData.PostgreSql.Dialect\" context: - name: \"DICT\" adapter: \"DICT_POSTGRESQL\" dialect: \"POSTGRESQL\" - name: \"CONTACTS\" adapter: \"CONTACTS_POSTGRESQL\" dialect: \"POSTGRESQL\" default: \"CONTACTS\" debug: true Tip Note, the PostgreSQL connection strings can specify schema name in a Search Path key! That is required to work with tables from different then public schema without specify schema name in table name definitions. Tip Names of adapters, that use various connection strings must to be unique! Names of contexts must correspond connection strings names. Tip Be aware with PostgreSQL specific adapter configuration section schema required to specify home shema name for an adapter. Adapter and dialect specific configuration sections has described here ."
  },
  "tips/view.html": {
    "href": "tips/view.html",
    "title": "Mapping view | XData website",
    "keywords": "Mapping view To map data objects to SQL views used same technics and commands as data table, but then mapping non readonly repository to table some fields of updatable table can be mapped automatically by XData engine using metadata information from source database. When mapping is described over view, all fields must to be described explicitly. Same rule is worked when source of data is text represented SQL expression or virtual recordset defined as union of records (see ToDataSet as example, similar result can be reached using string SQL expression as table name). All fields must to be described explicitly. Important Repositiory mapping is required to marked as ReadOnly when view is a base table!"
  },
  "tips/update_source.html": {
    "href": "tips/update_source.html",
    "title": "Property update source | XData website",
    "keywords": "Property update source Data object properties (or hidden properties ) values can depend on other properties values or calculated with some expression. XData allow to describe this expression or dependency as part of mapping, to skip that property initialization when inserting or updating data object. Property value update source is used when data object is inserted or updated. When property default value and update source are defined, default value is used on insert and update source on update. Property value update source expression when using static mapping is defined by PropertyUpdateWithAttribute (or ColumnUpdateWithAttribute ) with same rules as PlainSQL or LinqExpression SQL expression properties : // for PlainSQL [PropertyUpdateWith(\"case P.is_vip when 1 then 10 else 0 end\")] // or for LinqExpression [PropertyUpdateWith(\"AllowedDiscount\", DataExpressionType.LinqExpression)] ... [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)); When using dynamic mapping it is defined by Field's mapping attribute UpdateWith overloads: UpdateWith(DataExpressionType type, string exprText) UpdateWith(Expression<Func<IQueryStructureAdapter, TValue>> expr) DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.UpdateWith(y => DateTime.Today.AddDays(1))) Property value update source dependancy when using static mapping is defined by PropertyUpdateWithAttribute (or ColumnUpdateWithAttribute ) with same rules as Subquery SQL expression properties : [Subquery(\"A\" /* subquery alias */, typeof(DocSpecAmounts) /* subquery mapped type */, \"Amount\" /* subquery result property name */, Grouping = DataGrouping.Sum /* result property aggregation type */)] ... [PropertyUpdateWith(\"A\", DataExpressionType.SubQuery)] When using dynamic mapping it is defined by Field's mapping attribute UpdateWith overloads: UpdateWith(string alias, Type dobjType, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter, IStructureFlag>>[] attributes) UpdateWith(string alias, IQueryDescription<TDObj> sub, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter, IStructureFlag>>[] attributes) UpdateWith(string alias, IQueryDescription<TDObj> sub, Expression<Func<TDObj, TValue>> property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter, IStructureFlag>>[] attributes) DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty, z => z.UpdateWith(\"DT\", XDataMapping.GetStructure(\"\", null, DataStructureFlag.None) .Select(y => new { DeliveryType = y.Expr(\"delivery_type\", a => DeliveryTypeEnum.Courier, DbType.Int32)}), y => y.DeliveryType, DataGrouping.None)),"
  },
  "tips/udt.html": {
    "href": "tips/udt.html",
    "title": "Using UDT | XData website",
    "keywords": "Using UDT SQL User Defined Type (UDT) - Complex data type definition. Some databases support it, some does not. XData supported UDT when it supported by database engine and ADO .Net provider too. And range of operations over UDT is depends on abilities of database engine and provider. UDT can be mapped as SQL procedure (or function) In or Out parameter statically or dynamically ."
  },
  "tips/trigger_logic.html": {
    "href": "tips/trigger_logic.html",
    "title": "Trigger business logic | XData website",
    "keywords": "Trigger business logic Custom logic called over data object explicitly. But XData can call trigger logic over business valuable data object (not a single table!) on middleware level (no matter extracted this logic to dedicated application server or not). This logic will be called automatically when corresponded changes are applied: InitRepository - middleware trigger executed when Repository has been initialized (trigger delegate type - InitRepository<T> ) InvalidateRepository - middleware trigger executed when Repository data need to be reseted (trigger delegate type - InvalidateRepository<T> ) InvalidateObject - middleware trigger executed when Repository object need to be reloaded (trigger delegate type - InvalidateObject<T> ) InitObject - middleware trigger executed when Repository object has been initialized (trigger delegate type - InitObject<T> ) BeforeInsert - middleware trigger executed before object inserted into Repository (trigger delegate type - Trigger<T> ) BeforeUpdate - middleware trigger executed before Repository object has been updated (trigger delegate type - Trigger<T> ) BeforeDelete - middleware trigger executed before object has been deleted from Repository (trigger delegate type - Trigger<T> ) AfterInsert - middleware trigger executed after object inserted into Repository (trigger delegate type - Trigger<T> ). Skip flag is not applicable! AfterUpdate - middleware trigger executed after Repository object has been updated (trigger delegate type - Trigger<T> ). Skip flag is not applicable! AfterDelete - middleware trigger executed after object has been deleted from Repository (trigger delegate type - Trigger<T> ). Skip flag is not applicable! BeforeClear - middleware trigger executed before Repository has been cleared (trigger delegate type - RepositoryTrigger<T> ) AfterClear - middleware trigger executed after Repository has been cleared (trigger delegate type - RepositoryTrigger<T> ). Skip flag is not applicable! Trigger delegate type - it's a method signature for middleware trigger handler. public class InvoiceLogic : XDataLogic<Invoice> { [Action(DataActionType.AfterInsert), Action(DataActionType.AfterUpdate)] public Trigger<Invoice> UpdateHistory => ((ref Invoice invoice, ref DataTriggerFlag flag) => { if (!invoice.CheckState(DataObjectState.New) && !invoice.IsChanged(x => x.DocState)) return true; var rep = invoice.GetRepository(); using (var hist = GetRepository<DocHistory>(rep.Layer, context: rep.Context)) { hist.Reset() .SetFilterValue(DocHistory.FilterByDocId, invoice.GetProperty<long>(\"DocId\")) .SetFilterValue(DocHistory.FilterByDocStateId, invoice.DocState.Key); var newHist = hist.New(); newHist.HistoryDate = DateTime.UtcNow; return hist.Submit(ref newHist); } }); [Action(DataActionType.BeforeDelete)] public Trigger<Invoice> ClearHistory => ((ref Invoice invoice, ref DataTriggerFlag flag) => { var i = invoice; using (var hist = GetRepository<DocHistory>(i.GetLayer(), context: i.GetContext())) { return hist.Reset() .Clear(x => x.GetProperty<long>(\"DocId\") == i.GetProperty<long>(\"DocId\")); } }); [Action(DataActionType.BeforeClear)] public RepositoryTrigger<Invoice> ClearHistoryBatch => ((IRepository<Invoice> invoiceRepository, ref DataTriggerFlag flag) => { using (var hist = GetRepository<DocHistory>(invoiceRepository.Layer, context: invoiceRepository.Context)) { return hist.Reset().Clear(x => invoiceRepository .Any(z => x.GetProperty<long>(\"DocId\") == z.GetProperty<long>(\"DocId\"))); } }); } Trigger and RepositoryTrigger delegates has a reference parameter of type DataTriggerFlag to specify behaviour of data processing after trigger executed. There are three possible behaviours defined: None - Submit using default algorithm, representation layer is already refreshed Skip - Data submitting have completed in trigger logic or not applicable. No standard updates will called. It's a kind of \"instead of\" trigger logic flag. Refresh - Default value. Representation layer manual data refreshing is needed. Trigger logic defined as attributed by Action attribute read only property of XDataLogic<T> class descendant. One property can be attributed as a handler for multiple triggers. Property type must to be Trigger<T> except repository based triggers ( BeforeClear , AfterCLear , InitRepository or InvalidateRepository ) - RepositoryTrigger<T> ."
  },
  "tips/tree_childs.html": {
    "href": "tips/tree_childs.html",
    "title": "Tree organized repository child specifics | XData website",
    "keywords": "Tree organized repository child specifics When master repository has hierarchy structure, than slave objects can be filtered by two methods to choose slave repository data: filter data linked with selected tree node only ( direct links ), and linked to subtree from selected node and below by hierarchy. XData has functional to choose one of this methods in runtime. To provide this ability mapping of master objects must describe external links marked as direct links . Than master repository flag ShowSubtree can be used as a switch between this two methods."
  },
  "tips/transactions.html": {
    "href": "tips/transactions.html",
    "title": "Transactions | XData website",
    "keywords": "Transactions XData use automatic transactions handling by default. But allows to manage transacions manually using IDataScope interface method BeginTransaction returned transaction state interface ITransaction . Transaction state is a IDisposable object. Transaction is commited when method Commit is called. When transaction state is disposed without call Commit method, transaction is rolled back. Transaction can be started as readonly or read/write. This depends on parameter read of BeginTransaction method. XData can symulationaly wrap transactions one over another. First non read only transaction is related to real database tranaction, and all wrapped transactions is related to transaction labels. When wrapped transaction is rolled back real transaction is rolled back to label only. Only rolling back the \"main\" transaction calls ROLLBACK statement over database."
  },
  "tips/tips.html": {
    "href": "tips/tips.html",
    "title": "Tips & Trics | XData website",
    "keywords": "Tips & Trics There are some special themes related with using XData in uncommon scenarios, or more detetailed information about not trivial internal XData mechanics. YAML configuration file (for .Net Standard 2.0 only!) Since .Net Core and .Net Standard 2.0 supported various configuration file formats it's possible to configure XData with, as a sample, YAML file. connectionStrings: add: - name: \"DICT\" connectionString: \"Server=server;Database=test;User Id=postgres;Password=123456;Search Path=dictionaries\" - name: \"CONTACTS\" connectionString: \"Server=server;Database=test;User Id=postgres;Password=123456;Search Path=contacts\" xdata: adapter: - name: \"DICT_POSTGRESQL\" assembly: \"XData.PostgreSql.NpgSql.Adapter\" schema: dictionaries: - name: \"CONTACTS_POSTGRESQL\" assembly: \"XData.PostgreSql.NpgSql.Adapter\" schema: contacts: dialect: - name: \"POSTGRESQL\" assembly: \"XData.PostgreSql.Dialect\" context: - name: \"DICT\" adapter: \"DICT_POSTGRESQL\" dialect: \"POSTGRESQL\" - name: \"CONTACTS\" adapter: \"CONTACTS_POSTGRESQL\" dialect: \"POSTGRESQL\" default: \"CONTACTS\" debug: true Tip Note, the PostgreSQL connection strings can specify schema name in a Search Path key! That is required to work with tables from different then public schema without specify schema name in table name definitions. Tip Names of adapters, that use various connection strings must to be unique! Names of contexts must correspond connection strings names. Tip Be aware with PostgreSQL specific adapter configuration section schema required to specify home shema name for an adapter. Adapter and dialect specific configuration sections has described here . Adapter and dialect specific configuration Some of adapters and dialects has their own specific configuration settings to setup unique features and behaviors. That specific settings can be defined in configuration file or dynamically with AddAdapter or AddDialect methods options parameter. Tip Function signatures is slightly different for .Net 4.0 version. XData.PostgreSql.NpgSql.Adapter: ... when XML configuration file is used: <adapter name=\"POSTGRESQL_NPG\" assembly=\"XData.PostgreSql.NpgSql.Adapter\"> <schema name=\"public\"/> </adapter ... when YAML configuration file is used: adapter: - name: \"DICT_POSTGRESQL\" assembly: \"XData.PostgreSql.NpgSql.Adapter\" schema: dictionaries: ... when configuration is provided in runtime: // replace someschemaname to real schema name var source = new MemoryConfigurationSource { InitialData = new[] { new KeyValuePair<string, string>(\"schema:someschemaname\", null) }}; var conf = new ConfigurationBuilder().Add(source).Build(); ... .AddAdapter(\"postgresql\", XData.PostgreSql.Adapter, conf) Using DI container XData can be effecively used with any DI containers You prefer. Net 4.0 version not used DI containers inside, but IDataEngine , IDataScope and IRepository<T> interfaces can be obtained from container. IDataEngine must to be registered as singleton with XDataManager.InitXData method call. IDataScope can be registered as lifetime service over data logic module (for example: Controller module in MVC pattern) using fabric method with obtaining IDataEngine service and creating ( IDataEngine.NewDataScope ) or request from internal XData cache ( IDataEngine.GetDataScope ) IDataScope instance when Layer is provided. IRepository<T> can be registered as transistent service using fabric method with obtaining IDataScope service and call IDataScope.GetRepository<T> method. Using container to obtain IRepository<T> service seems to be a kind of a joke, but sometimes it's usefull. Net Standard 2.0 version used Net Core Dependency Abstraction inside and this asbtraction can be implemented by any You like DI container. In this version IDataEngine is registered by calling AddXData method. Other interfaces can be registered manually (if required) with described above or any You like logic. Large object loading Large objects specific properties Lob and Xml specialy used to lazy access to potetialy big sized data stored in database. When data object accessed using XData, large objects data not queried, but replaced with null values to create full structure of object. To get or set value of Lob or Xml Lob.Value and Xml.Document properties are used. Size of Lob can be checked using GetSize method. To simplify value assigning overrided operation += can be used as described in example below: obj.Source += new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", z.DocStateCode))); obj.Scan += Encoding.UTF8.GetBytes(z.Source.Document.ToString()); To modify value of large objects in LINQ styled sequence of command helper methods Modify(Xml, Action<XDocument>) and Modify(Lob, Action<Byte[]>) can be used like in example below: invoice.Modify( z => z.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == newStateCode), z => z.Source.Modify(doc => doc.Element(\"invoice\").Attribute(\"state\").Value = newStateCode)) .Submit(); Warning When object is serialized large objects properties are serialized with null values by default! When actual value of large object is required it must to be requested separatly. To fill object large properties before serialization can be used one of LoadLob or LoadLobAsync helper method overloads. JSON serialization When used Json.NET XData data objects are serialized and deserialized automaticaly. There are some serialization specifics of data objects: By default Readonly properties and Hidden properties are serialized and deserialized as well as writable properties, but have a some restrictions when copyed to object to apply into database (see Apply method description below). Large objects ) are serialized to null value by default. They are designed for lazy data loading. To serialize data with actual values one of LoadLob helper method overloads can be used. By default Links are serialized as limited representation of link source object. Only properties listed as LinkProperties are included in serialized object. Additinaly an \"linkPropertyName.Value\" JSON property is serialized with the value of Link.Value property. Default serialization rules can be overrided with ICollection<T> and T WithJsonSettings extension methods. JsonSettings<T> has followed methods to specify serializing options: Hide - alow to specify properties to skip on serialization LoadLob - alow to specify large object properties to load data before serialize ( LoadLob method alternative) LinkMode - alow to specify serialization rules for multiple (or all) link properties: Default - default rules will be applied (see above) Value - only value will be serialized Source - only source will be serialized return dataScope.GetRepository<Some>().ToArray() .WithJsonSettings(s => s.Hide(JsonHideFlags.Columns) //hide all columns .Hide(x => x.SomeReadOnlyProperty) //hide SomeReadOnlyProperty .LoadLob() //load all large data properties .LinkMode(LinkMode.Deafult, x => SomeLinkProperty, x => AnotherLinkProperty) //set default rules to 2 properties .LinkMode(LinkMode.Value)); //set other link properties serialize Value property only Warning Deserialized objects are detached from repository and had limited ways of using! Deserialized object can be used as a filter to find data object in database (for example to delete) with Find method: var found = dataScope.GetRepository<Some>().Find(detachedObj); if(found == null) throw DbConcurrencyException(); return found.SetDeleted(true).Submit(); Deserialized object can be used as a source to copy some data to new object with Copy method: return dataScope.GetRepository<Some>().New().Copy(detachedObj).Submit(); Deserialized object can be used as to apply changes to database with Apply method: dataScope.GetRepository<Some>().Apply(detachedObj).Submit(); Apply is a combination of Find and Copy methods with followed algorithm: 1) if detached object has all keys assigned, corresponded object will be searched in database using keys and correlation token (if described in mapping) values (*) 2) if no data found XDataConcurrencyException will be throwed (**) 3) when some key properties are not assigned new entity has been created 4) detached object's data will be copyed to found (or new) object (***) (*) Using of correlation token value with Find method can be escaped with optional ignoreConcurrency parameter. Same result can be reached with ApplyFlag.IgnoreConcurrency flag has been passed in Apply method call. (**) ApplyFlag.AddWhenNotFound flag can be passed in Apply method call to add new entity when not found in database. (***) Copy and Apply has parameter properties to specify wich property values will be copied. ApplyFlag.ExceptProperties or CopyFlag.ExceptProperties flag can be used to SKIP listed properties on copy. ApplyFlag.CopyReadOnlyProperties or CopyFlag.CopyReadOnlyProperties flag can be used to allow copy Readonly properties and Hidden properties disabled by default. Asynchronious wrapped operations To access data with XData inside async methods it's handy to use asynchronous wrappers declared inside XData.Async etxtension methods as illustrated in followed example: internal async Task<DocType[]> TestArrayAsync(IDataEngine dataEngine) { using (var dataScope = dataEngine.NewDataScope(\"TEST_POSTGRE_NPG\")) { return await dataScope.GetRepository<DocType>().ToArrayAsync(); } } Mapping view To map data objects to SQL views used same technics and commands as data table, but then mapping non readonly repository to table some fields of updatable table can be mapped automatically by XData engine using metadata information from source database. When mapping is described over view, all fields must to be described explicitly. Same rule is worked when source of data is text represented SQL expression or virtual recordset defined as union of records (see ToDataSet as example, similar result can be reached using string SQL expression as table name). All fields must to be described explicitly. Important Repositiory mapping is required to marked as ReadOnly when view is a base table! Get connection settings in runtime Connection settings can be obtained from initialized context using code below: var ctx = dataScope.GetContext(s); Console.WriteLine(\"*** Testing context: {0} (DB type: {1})\", ctx.Name, ctx.DatabaseAdapter.ConnectType); Console.WriteLine(\"*** Server: {0}, Schema: {1}\", ctx.ConnectionInfo.Server, ctx.ConnectionInfo.Schema); Optional filters Optional filters is the mechanic to simplify query structure when some filters are not set. For example, we can map data structure to some class and to alow filter objects over some property of dictionary linked to main data structure. When filter applied this link to dictionary table is used, but when not we ineffectively rize query complexity. To avoid unplanned query complexity XData has optional filter feature. Some filters marked as primary - when this filter has value, query has full form. When filter value has cleared or set to null, data source of filtered field (table or view) will be skiped when SQL query composed. When data source has been skipped then links between already skipped and other data sources are analized. And when found link marked as primary linked data source will also skipped. When base table of subquery has been skipped - all subquery will be skipped and subquery links analizis for primary links will be provided over outer query. Until no primary filters found. This alowes to compose complex query relations over multiple tables and subqueries that reflect on real query only when it realy necessary. Conditional filters XData realization of LINQ \"Where\" method has provide ability to use runtime condition evaluation during predicate compilation into SQL statements to analyze runtime data and conditionaly omit non valued data (0, empty or null) filters. // string author, int rating, decimal? lowerPrice and decimal? higherPrice is an optional filter values return dataScope.GetRepository<Book>() .Where(x => (string.IsNullOrEmpty(author) || x.Author == author) && (rating <= 0 || x.Rating >= rating) && (lowerPrice.HasValue || x.Price >= lowerPrice) && (higherPrice.HasValue || x.Price <= higherPrice)) .ToArray(); When runtime condition is true and LINQ expression is OrElse whole expression is omitted while predicate compilation into SQL statements. Outer joined table filtration specifics XDataMapping.CustomMapping<UserList>() .DataTable(\"t_user\", \"U\") // *t_user_claim* has inner joined to *t_user* by *user_id* field .DataTable(\"t_user_claim\", \"UC\", z => z.Link(\"U\", \"user_id\"), // constant filter use defaut equal operation (see SQL result below) z => z.ConstFilter(\"ClaimNickName\", \"claim_type\", \"nickname\")) // *t_user_app* has outer joined to *t_user* by *user_id* field .DataTable(\"t_user_app\", \"A\", x => x.Link(\"U\", \"user_id\").SetOperation(FilterOperation.OuterJoin), // IMOPRTANT! all filters for outer joined table must use *OuterJoin* operation to apply correct filtration x => x.ConstFilter(\"FilterByAsubs\", \"app_type\", (int) AppType.Asubs).SetOperation(FilterOperation.OuterJoin), x => x.ConstFilter(\"FilterByAsubsEnabled\", \"enabled\", 1).SetOperation(FilterOperation.OuterJoin)) select ... from t_user U join t_user_claim UC on UC.user_id = U.user_id outer join t_user_app A on A.user_id = U.user_id and A.app_type = 1 and A.enabled = 1 Constant filters are moved to outer join condition not in where statement conditions and query will return correct results. Similar rules is applied to static mapping and dynamic query. Tree organized repository child specifics When master repository has hierarchy structure, than slave objects can be filtered by two methods to choose slave repository data: filter data linked with selected tree node only ( direct links ), and linked to subtree from selected node and below by hierarchy. XData has functional to choose one of this methods in runtime. To provide this ability mapping of master objects must describe external links marked as direct links . Than master repository flag ShowSubtree can be used as a switch between this two methods. Reuse mapping in dynamic query Already declared mappings can be reused in dynamic query construction with generic GetStructure method overload. See the example below to understand how it works: using (var dataScope = DataEngine.NewDataScope()) { var user = dataScope.GetRepository<User>().SingleOrDefault(x => x.UserId.ToString() == userId); if (user == null) throw new Exception(\"User not found!\"); // prepare enum values expression array to *Case* expression based on AppType enum var enumValues = typeof(AppType).GetEnumKeyValuePairs() .Select(i => i.Key.SetExpression(x => i.Value)) .ToArray(); // reuse *UserRole* mapping adding filter by *user_id* column and redefine select output var roleClaims = XDataMapping.GetStructure<UserRole>().AddFilters(\"UR\", x => x.ConstFilter(\"FilterByUserId\", \"user_id\", userId.ToString())) .Column(\"UserId\", x => x.Field<Guid>(\"UR\", string.Empty)) .Select(x => new UserClaim { // set negative id to preserve key uniqueness after appling *Union* operation using expression field Id = x.Expr(\"id\", z => -1 * z.Field<long>(\"R\", \"role_id\"), DbType.Int64), Type = x.Expr(\"role\", z => \"role\", DbType.String), // construct role name based by *app_type* enum field and role name using SQL *Case* expression Value = x.Expr(\"val\", z => z.Case(y => y.Field<long>(\"R\", \"app_type\"), y => \"\", enumValues) + \".\" + x.Field<string>(\"R\", \"role\"), DbType.String) }).AsQuery(dataScope.Layer); user.Applications = apps.SetFilterValue(x => UserId, userId).ToArray(); user.Roles = dataScope.GetRepository<UserRole>().SetFilterValue(x => UserId, userId).ToArray(); // Combine simple claims and synthetic role claims user.Claims = dataScope.GetRepository<UserClaim>() .SetFilterValue(x => UserId, userId) .Union(roleClaims).ToArray(); return user; } Dynamic query external data sources XData dynamic query can use external data sources to operate with runtime tabular or xml data together with data stored inside database. Warning This feature is not supported by all of databases! XML data sources can be used with Ms SQL Server and PostgreSQL only. Local temporary tables is not supported by Oracle database. As You can see, Oracle not supported both of features. Use PL/SQL functions, packages or predefined global temporary tables instead. XML data source // prepare XML document var doc = new XDocument(new XElement(\"root\", new XElement(\"test\", new XAttribute(\"doc_state_id\", 1), new XAttribute(\"test\", \"one\")), new XElement(\"test\", new XAttribute(\"doc_state_id\", 2), new XAttribute(\"test\", \"two\")) )).ToString(); var query = XDataMapping.GetStructure(\"S\", dataScope.DefaultContext) .DataTable(\"T_DOC_STATE\", \"S\") // use XmlSource definition providing XPath expression for data source .XmlSource(\"Test\", \"T\", \"root/test\", x => x.Link(\"S\", \"doc_state_id\")) .Select(x => new { // use XmlField definition with XPath expression as a field source DocStateId = x.XmlField<int>(\"T\", string.Empty, \"@doc_state_id\", DbType.Int32, z => z.Key()), Code = x.Field<string>(\"S\", string.Empty), // note, string and number (decimal) xml fields need size defined, like an expression fields Test = x.XmlField<string>(\"T\", string.Empty, \"@test\", DbType.String, z => z.Size(20)) // set XML string to variable with the same name as XmlSource }).AsQuery(dataScope.Layer, \"Test\".SetVar(doc)); Temporary table // prepare tabular data var table = new DataTable(); table.Columns.AddRange(new [] { new DataColumn(\"doc_state_id\", typeof(long)), new DataColumn(\"test\", typeof(string)) }); table.Rows.Add(1, \"one\"); table.Rows.Add(2, \"two\"); table.AcceptChanges(); var query = XDataMapping.GetStructure(\"S\", dataScope.DefaultContext) .DataTable(\"T_DOC_STATE\", \"S\") // use temporary table definition .TempTable(\"Test\", \"T\", x => x.Link(\"S\", \"doc_state_id\")) .Select(x => new { // use Field method overload with dbType parameter to define temporary table field DocStateId = x.Field<long>(\"T\", string.Empty, DbType.Int64, z => z.Key()), Code = x.Field<string>(\"S\", string.Empty), // note, string and number (decimal) xml fields need size defined, like an expression fields Test = x.Field<string>(\"T\", string.Empty, DbType.String, z => z.Size(20)) // set DataTable to variable with the same name as TempTable }).AsQuery(dataScope.Layer, \"Test\".SetVar(table)); Using dictionaries Dictionaries can be used to reduse data requery count when rarely changed data of dictionary will linked multiple times through Link<T,TSource> data type properties over small amount of time (one business process). Dictionaries is cached as single mapped objects (not a data cahe as described in Caching repository data topic). Property update source Data object properties (or hidden properties ) values can depend on other properties values or calculated with some expression. XData allow to describe this expression or dependency as part of mapping, to skip that property initialization when inserting or updating data object. Property value update source is used when data object is inserted or updated. When property default value and update source are defined, default value is used on insert and update source on update. Property value update source expression when using static mapping is defined by PropertyUpdateWithAttribute (or ColumnUpdateWithAttribute ) with same rules as PlainSQL or LinqExpression SQL expression properties : // for PlainSQL [PropertyUpdateWith(\"case P.is_vip when 1 then 10 else 0 end\")] // or for LinqExpression [PropertyUpdateWith(\"AllowedDiscount\", DataExpressionType.LinqExpression)] ... [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetExpression(z => 10)); When using dynamic mapping it is defined by Field's mapping attribute UpdateWith overloads: UpdateWith(DataExpressionType type, string exprText) UpdateWith(Expression<Func<IQueryStructureAdapter, TValue>> expr) DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.UpdateWith(y => DateTime.Today.AddDays(1))) Property value update source dependancy when using static mapping is defined by PropertyUpdateWithAttribute (or ColumnUpdateWithAttribute ) with same rules as Subquery SQL expression properties : [Subquery(\"A\" /* subquery alias */, typeof(DocSpecAmounts) /* subquery mapped type */, \"Amount\" /* subquery result property name */, Grouping = DataGrouping.Sum /* result property aggregation type */)] ... [PropertyUpdateWith(\"A\", DataExpressionType.SubQuery)] When using dynamic mapping it is defined by Field's mapping attribute UpdateWith overloads: UpdateWith(string alias, Type dobjType, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter, IStructureFlag>>[] attributes) UpdateWith(string alias, IQueryDescription<TDObj> sub, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter, IStructureFlag>>[] attributes) UpdateWith(string alias, IQueryDescription<TDObj> sub, Expression<Func<TDObj, TValue>> property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter, IStructureFlag>>[] attributes) DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty, z => z.UpdateWith(\"DT\", XDataMapping.GetStructure(\"\", null, DataStructureFlag.None) .Select(y => new { DeliveryType = y.Expr(\"delivery_type\", a => DeliveryTypeEnum.Courier, DbType.Int32)}), y => y.DeliveryType, DataGrouping.None)), Default value features Data object properties (or hidden properties ) can be assigned by default values described by mapping. Using DefaultFeature enumeration it's possible to extend basic functionality of default value assignment with... UseOnUpdate - use default value not only on insert, but on update also. SkipWhenAssigned - skip insert into table when PK value assigned explicitly. UpdateWhenAssigned - change insert operation over table to update when PK value assigned explicitly. Last two of features is usable when data object 's primary table is linked with another table in data object mapping as one-to-one, and insert into base table can be skipped (or replaced with update statement) when it's primary key is assigned explicitly in application code. This features helps logicaly combine mappings to hide technological entities, which don't reflect buseness object model of application. Default features can be combined. For example: DefaultFeature.UseOnUpdate | DefaultFeature.SkipWhenAssigned Caching repository data Some data is changed often, some is rarely, but some data will never changed untill application has upgraded. To reduse requery of this static data, XData has mechanism to cache requested data (not a mapped objects) in XData. Repository property FixedQuery can be assigned to true when caching is required. All LINQ queries will be translated to this cache without requery data from database. When this property resets to false, the cache will erased and repository returns to common algorithms of database requests. Similar feature is used to access rarely changed dictionary data over multiple related operative data canges. Copy data Data can be copied from one repository to another using IRepository<T>.Add<TFrom> method as illustrated in followed example: // Query source data (statically, or dynamically) into sourceQuery variable var rep = dataScope.GetRepository<Target>(); using(var tr = dataScope.BeginTransaction()) { rep.Add<Source>(sourceQuery, x => new Target{ TargetSome = x.Some, TargetAnother = x.Another }); tr.Commit(); } Trigger business logic Custom logic called over data object explicitly. But XData can call trigger logic over business valuable data object (not a single table!) on middleware level (no matter extracted this logic to dedicated application server or not). This logic will be called automatically when corresponded changes are applied: InitRepository - middleware trigger executed when Repository has been initialized (trigger delegate type - InitRepository<T> ) InvalidateRepository - middleware trigger executed when Repository data need to be reseted (trigger delegate type - InvalidateRepository<T> ) InvalidateObject - middleware trigger executed when Repository object need to be reloaded (trigger delegate type - InvalidateObject<T> ) InitObject - middleware trigger executed when Repository object has been initialized (trigger delegate type - InitObject<T> ) BeforeInsert - middleware trigger executed before object inserted into Repository (trigger delegate type - Trigger<T> ) BeforeUpdate - middleware trigger executed before Repository object has been updated (trigger delegate type - Trigger<T> ) BeforeDelete - middleware trigger executed before object has been deleted from Repository (trigger delegate type - Trigger<T> ) AfterInsert - middleware trigger executed after object inserted into Repository (trigger delegate type - Trigger<T> ). Skip flag is not applicable! AfterUpdate - middleware trigger executed after Repository object has been updated (trigger delegate type - Trigger<T> ). Skip flag is not applicable! AfterDelete - middleware trigger executed after object has been deleted from Repository (trigger delegate type - Trigger<T> ). Skip flag is not applicable! BeforeClear - middleware trigger executed before Repository has been cleared (trigger delegate type - RepositoryTrigger<T> ) AfterClear - middleware trigger executed after Repository has been cleared (trigger delegate type - RepositoryTrigger<T> ). Skip flag is not applicable! Trigger delegate type - it's a method signature for middleware trigger handler. public class InvoiceLogic : XDataLogic<Invoice> { [Action(DataActionType.AfterInsert), Action(DataActionType.AfterUpdate)] public Trigger<Invoice> UpdateHistory => ((ref Invoice invoice, ref DataTriggerFlag flag) => { if (!invoice.CheckState(DataObjectState.New) && !invoice.IsChanged(x => x.DocState)) return true; var rep = invoice.GetRepository(); using (var hist = GetRepository<DocHistory>(rep.Layer, context: rep.Context)) { hist.Reset() .SetFilterValue(DocHistory.FilterByDocId, invoice.GetProperty<long>(\"DocId\")) .SetFilterValue(DocHistory.FilterByDocStateId, invoice.DocState.Key); var newHist = hist.New(); newHist.HistoryDate = DateTime.UtcNow; return hist.Submit(ref newHist); } }); [Action(DataActionType.BeforeDelete)] public Trigger<Invoice> ClearHistory => ((ref Invoice invoice, ref DataTriggerFlag flag) => { var i = invoice; using (var hist = GetRepository<DocHistory>(i.GetLayer(), context: i.GetContext())) { return hist.Reset() .Clear(x => x.GetProperty<long>(\"DocId\") == i.GetProperty<long>(\"DocId\")); } }); [Action(DataActionType.BeforeClear)] public RepositoryTrigger<Invoice> ClearHistoryBatch => ((IRepository<Invoice> invoiceRepository, ref DataTriggerFlag flag) => { using (var hist = GetRepository<DocHistory>(invoiceRepository.Layer, context: invoiceRepository.Context)) { return hist.Reset().Clear(x => invoiceRepository .Any(z => x.GetProperty<long>(\"DocId\") == z.GetProperty<long>(\"DocId\"))); } }); } Trigger and RepositoryTrigger delegates has a reference parameter of type DataTriggerFlag to specify behaviour of data processing after trigger executed. There are three possible behaviours defined: None - Submit using default algorithm, representation layer is already refreshed Skip - Data submitting have completed in trigger logic or not applicable. No standard updates will called. It's a kind of \"instead of\" trigger logic flag. Refresh - Default value. Representation layer manual data refreshing is needed. Trigger logic defined as attributed by Action attribute read only property of XDataLogic<T> class descendant. One property can be attributed as a handler for multiple triggers. Property type must to be Trigger<T> except repository based triggers ( BeforeClear , AfterCLear , InitRepository or InvalidateRepository ) - RepositoryTrigger<T> . Execute custom business logic XData has many features targeting this technology as not only ORM, but a full featured Data Access Layer. This is one of this features. Custom logic defined as public property of XDataLogic<T> class descendant with type of CustomLogic<T> . public class InvoiceLogic : XDataLogic<Invoice> { public CustomLogic<Invoice> TestCustomLogic => (objects => { Log.Write(MessageType.Information, () => $\"TestCustomLogic called with {objects.Length} objects\"); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => @$\"Call for \\\"{i.DocNumb}\\\" returned \\\"{r}\\\" with data \\\"{(p == null ? null : Encoding.UTF8.GetString(p))}\\\"\"); } return true; }); } ... //Call example logic var random = new Random(); return dataScope.GetRepository<Invoice>().ToArray().Execute(() => \"TestCustomLogic\", \"testPost\".SetValue((Action<byte[]>)(data => Console.WriteLine(\"Post message received (data=\\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)))) .AsEnum().ToDictionary(), \"testCall\".SetValue((Func<byte[], byte[]>)(data => { Console.WriteLine(\"Call received \\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)); return random.NextDouble() >= 0.5 ? null : Encoding.UTF8.GetBytes( $\"reply for \\\"{(data == null ? null : Encoding.UTF8.GetString(data))}\\\"\"); })).AsEnum().ToDictionary()); Programmer can develope data centric logic over some of mapped objects with ability to execute this logic in the middleware layer of three-tier architecture on a dedicated server (or cluster). And this code can be simple and representable debuged in two-tier environment. Architecture can be switched by configuration! No code modification, no side effects... This feature is linked with Trigger logic and reached by Callbacks . When code is organized using data mapping modules, data logic modules and client (or Web site) it can help programmer to keep module relations clean and get ready to changes, with no matter of middleware layer existance. And this rules are not dictated, You can use it or not. You can write this logic anywhere You architect to do. Nothing will be breakes, exept of ability to use XData three-tier architecture. But if You realy don't need it, what is wrong? Using business logic callbacks XData alowes to use business logic callbacks to interact backend modules with frontend using synchronious Callback and asynchronious PostData models. Synchronious calls can return result value. Callbacks can be used with three-tier-architecture as well as with client-server model. Callbacks has provided business logic clear, complete view and alowes debug same code in two-tier environment as code will be executed in three-tier. public class InvoiceLogic : XDataLogic<Invoice> { public CustomLogic<Invoice> TestCustomLogic => (objects => { Log.Write(MessageType.Information, () => $\"TestCustomLogic called with {objects.Length} objects\"); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => @$\"Call for \\\"{i.DocNumb}\\\" returned \\\"{r}\\\" with data \\\"{(p == null ? null : Encoding.UTF8.GetString(p))}\\\"\"); } return true; }); } Business logic calculated fields XData alowed to calculate fields not only using SQL expressions . You can subscribe OnInvalidateObject event and calculate some fields on client side. More detailed events dicassed below . Using events Custom logic call and trigger logic is executed on the midleware layer, deployed on the application server or not. But some reaction on data change events may be required on client side. XData has followed events to subscribe changes of data: InitRepository<T> OnInit - event acquired when repository has been initialized InitObject<T> OnInitObject - event acquired when object has been initialized by database or default values InvalidateRepository<T> OnInvalidate - repository data has been requeried from database InvalidateObject<T> OnInvalidateObject - object has been changed and requeied from database CurrentObjectChanging<T> OnCurrentObjectChanging - current object is changing CurrentObjectChanged<T> OnCurrentObjectChanged - current object has been changed Virtual data and attached handlers You can use XData as database mock engine. XData has feature to replace database interactions with attached handlers call. Virtual objects is attached to repository using Attach method of IRepository<T> interface. To detach virtual objects used Detach method. Multiple virtual entities can be attached to repository as new objects using AttachNewObjects method. Tip This method ( AttachNewObjects ) can be used to add multiple dettached objects to real repository. Every virtual entity can override handlers attached to repository with their own realization using parameters of AttachNewObjects method or SetAttachedHandlers method call. To set repository level handlers use special overload of SetAttachedHandlers . To clear attached objects You can use ClearAttachedObjects method. To help wrap handlers to abstract AttachedHandler<T> class and unwrap it back to specialized handlers XData has a wrapper class RepositoryAttachedHandler . Attached hendlers can have followed types (see AttachedHandlerType ): OnClear - ( ClearAttachedHandler ) handler called instead of Clear OnExecute - ( ExecuteAttachedHandler<T> ) handler called instead of Execute OnGetLob - ( GetLobAttachedHandler ) handler called instead of requesting LOB data OnGetLobSize - ( GetLobSizeAttachedHandler ) handler called instead of requesting LOB size OnGetXml - ( GetXmlAttachedHandler ) handler called instead of requesting XML data OnLock - ( LockAttachedHandler<T> ) handler called instead of Lock OnRefresh - ( RefreshAttachedHandler<T> ) handler called instead of refreshing data OnSetLob - ( SetLobAttachedHandler ) handler called instead of saving LOB data OnSetXml - ( SetXmlAttachedHandler ) handler called instead of saving XML data OnSubmit - ( SubmitAttachedHandler<T> ) handler called instead of Submit multiple objects OnSubmitObject - ( SubmitObjectAttachedHandler<T> ) handler called instead of submitting single object OnSubmitQuery - ( SubmitQueryAttachedHandler<T> ) handler called instead of submitting query generation Transactions XData use automatic transactions handling by default. But allows to manage transacions manually using IDataScope interface method BeginTransaction returned transaction state interface ITransaction . Transaction state is a IDisposable object. Transaction is commited when method Commit is called. When transaction state is disposed without call Commit method, transaction is rolled back. Transaction can be started as readonly or read/write. This depends on parameter read of BeginTransaction method. XData can symulationaly wrap transactions one over another. First non read only transaction is related to real database tranaction, and all wrapped transactions is related to transaction labels. When wrapped transaction is rolled back real transaction is rolled back to label only. Only rolling back the \"main\" transaction calls ROLLBACK statement over database. SQL hints Warning Before using SQL hints, be sure to use all other query optimization features. This is a \"double-edged weapon.\" You need to understand very well why you are using what hints and how it will affect performance, and also make all the necessary tests confirming the effectiveness of the changes you made! XData supports using SQL hints to improve SQL query productivity. All databases supports this feature using vaious mechanics and can change various parameters of SQL execution... Types of hints supported by XData for RDBMS... MS SQL Server Query hints Table hints Oracle Query hints MySql Query hints PostgreSQL PostgreSQL does not support hints for queries, but procedures that returns setof record required declare columns definition on call (see example below). Of coase, this is not a SQL hint actually, but... create or replace function GetRows(text) returns setof record as $ declare r record; begin for r in EXECUTE ''select * from '' || $1 loop return next r; end loop; return; end $ language 'plpgsql'; select * from GetRows('Department') as dept(deptid int, deptname text); SQLite SQLite does not support hints. Using hints in static mapping Query hints: // hint for epmty string alias is applied to query // possible to apply different hints on // select, insert, update, delete statements or their combination [DataObject(\"T\"), Hint(\"\", \"SQL_NO_CACHE\", HintType.Select), Hint(\"\", \"HIGH_PRIORITY\", HintType.Select | HintType.Insert), ... Table hints (MS SQL Server only): [DataObject(\"T\"), DataTable(\"Test\", \"T\"), Hint(\"T\", \"nolock\"), ... Procedure hints (PostgreSQL only): [DataObject(\"T\"), Procedure(\"T\", \"TestFunction9\", ProcedureType.Function), Hint(\"T\", \"Id integer, Name varchar(20)\"), Parameter(\"T\", 1, \"p_id1\", typeof(int), DbType.Int32), Parameter(\"T\", 1, \"p_name1\", typeof(string), DbType.String), Parameter(\"T\", 1, \"p_id2\", typeof(int), DbType.Int32), Parameter(\"T\", 1, \"p_name2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class PostgreSqlTestFunction9 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get; set; } [Property(\"T\", \"Name\")] public string Name { get; set; } } Using hints in dynamic mapping and dynamic queries Query hints: // hint for epmty string alias is applied to query // possible to apply different hints on // select, insert, update, delete statements or their combination XDataMapping.GetStructure(\"T\", dataScope.DefaultContext) .Hint(\"\", \"SQL_NO_CACHE\", HintType.Select) .Hint(\"\", \"HIGH_PRIORITY\", HintType.Select | HintType.Insert)... Table hints (MS SQL Server only): XDataMapping.GetStructure(\"T\", dataScope.DefaultContext) .DataTable(\"Test\", \"T\") .Hint(\"T\", \"nolock\")... Procedure hints (PostgreSQL only): XDataMapping.GetStructure(context: dataScope.DefaultContext) .Procedure(\"T\", \"TestFunction8\", ProcedureType.Function) .Hint(\"T\", \"Id integer, Name varchar(20)\") .Parameter<Classifier[]>(\"T\", 1, \"p_tab\", DbType.Object, z => z.UdtDataType(null, \"classifier_rec\"), z => z.Array()) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"p_tab\".SetVar(param)); Call custom SQL code XData can help the programmer to obtain data and process it with many ways. But also we hold in mind XData is just a common tool with limited quantity of features, and some very specific (but handy and powerfull) SQL dialect constructions may be out of XData possibilities. To call dialect specific SQL statements used IDataScope interface with methods: FillTable , ExecuteScalar and ExecuteNonQuery . const string getCoordComResourceStateChangesForCaseCommand = @\" select x.ResourceCode, x.ReportedDateTime, x.UserName, x.MissionStatusCode, x.ResourceStatusCode from (select h.ResourceCode, h.ReportedDateTime, h.MissionStatusCode, h.ResourceStatusCode, isnull((select top(1) log.Creator from cse_CaseFolderLog_tab log with (nolock) where log.CallCenterId = h.CallCenterId and log.CaseFolderId = h.CaseFolderId and log.CaseId = h.CaseId and log.Created >= h.ReportedDateTime and datediff(s, h.ReportedDateTime, log.Created) <= 10 and (charindex(case h.MissionStatusCode when '---' then 'ready' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0 or charindex(case h.MissionStatusCode when '---' then 'disconnected' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0) and charindex(h.ResourceCode, log.LogText COLLATE Latin1_General_CS_AS) > 0 and charindex('|' + log.Creator + '|', @IntegrationUsers) = 0 order by log.Created ) , (select top(1) log.Creator from cse_CaseFolderLogFinished_tab log with (nolock) where log.CallCenterId = h.CallCenterId and log.CaseFolderId = h.CaseFolderId and log.CaseId = h.CaseId and log.Created >= h.ReportedDateTime and datediff(s,h.ReportedDateTime, log.Created) <= 10 and (charindex(case h.MissionStatusCode when '---' then 'ready' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0 or charindex(case h.MissionStatusCode when '---' then 'disconnected' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0) and charindex(h.ResourceCode, log.LogText COLLATE Latin1_General_CS_AS) > 0 and charindex('|' + log.Creator + '|', @IntegrationUsers) = 0 order by log.Created )) as UserName from res_ResourceHistory_tab h where h.CallCenterId = @CallCenterId and h.CaseFolderId = @CaseFolderId and h.CaseId = @CaseId and not exists(select 1 from sph_ResourceHistory_tab sh where sh.CallCenterId = h.CallCenterId and sh.CaseFolderId = h.CaseFolderId and sh.CaseId = h.CaseId and sh.ResourceCode = h.ResourceCode and (sh.MissionStatusCode = h.MissionStatusCode or (sh.MissionStatusCode = '---' and sh.ResourceStatusCode = @ClosedStatusCode)) and sh.ReportedDateTime = h.ReportedDateTime)) x where x.UserName is not null\"; using (var dataScope = DataEngine.Value.NewDataScope(CoordComDb)) { return dataScope.FillTable( new Query(getCoordComResourceStateChangesForCaseCommand, CommandType.Text, new QueryParam(\"@CaseFolderId\", caseIdentity.CaseFolderId, DbType.Int32), new QueryParam(\"@CallCenterId\", caseIdentity.CallCenterId, DbType.Int32), new QueryParam(\"@CaseId\", caseIdentity.CaseId, DbType.Int32), new QueryParam(\"@IntegrationUsers\", $\"|{string.Join(\"|\", integrationUsers)}|\"), new QueryParam(\"@ClosedStatusCode\", closedStatusCode) ), CommandBehavior.SingleResult).Rows.OfType<DataRow>() .Select(x => new Tuple<string, DateTime, string, string>( x.Field<string>(0), x.Field<DateTime>(1), x.Field<string>(2), x.Field<string>(3) == \"---\" ? x.Field<string>(4) : x.Field<string>(3))).ToList(); } Tip Use this mechanism with maximum care! This eliminates cross dialect approach of XData development, but we are in a real world with real programmers tasks... and we are never seen real tasks are correspond the rules of ideal programm system architecture ;) Anyway this bad feature is a backdoor we must provide while XData is not support all features of all specific SQL dialects. Is this realy possible?. We think that not, but we will try to provide most of nessesary features inside XData as soon as possible. We are need Your help to choose the order of features implementation and ideas to do it best! Important DDL instructions is not implemented by design. We believe DDL in big complicated real business application is not a thing we can delegate to \"dumb-metal-doll\". This is why XData has no mechanics to \"CodeFirst\"... If You're task can use CodeFirst approach - use EF. This way is historically reserved by EF, and no reason to fight for it. Calling custom SQL code is a legal way to apply DDL in XData context. Programmer or database administrator write this SQL script. This code is prodused by human, real (not artifical) intellect of professional... XData only has ability to run it over database."
  },
  "tips/outer_join.html": {
    "href": "tips/outer_join.html",
    "title": "Outer joined table filtration specifics | XData website",
    "keywords": "Outer joined table filtration specifics XDataMapping.CustomMapping<UserList>() .DataTable(\"t_user\", \"U\") // *t_user_claim* has inner joined to *t_user* by *user_id* field .DataTable(\"t_user_claim\", \"UC\", z => z.Link(\"U\", \"user_id\"), // constant filter use defaut equal operation (see SQL result below) z => z.ConstFilter(\"ClaimNickName\", \"claim_type\", \"nickname\")) // *t_user_app* has outer joined to *t_user* by *user_id* field .DataTable(\"t_user_app\", \"A\", x => x.Link(\"U\", \"user_id\").SetOperation(FilterOperation.OuterJoin), // IMOPRTANT! all filters for outer joined table must use *OuterJoin* operation to apply correct filtration x => x.ConstFilter(\"FilterByAsubs\", \"app_type\", (int) AppType.Asubs).SetOperation(FilterOperation.OuterJoin), x => x.ConstFilter(\"FilterByAsubsEnabled\", \"enabled\", 1).SetOperation(FilterOperation.OuterJoin)) select ... from t_user U join t_user_claim UC on UC.user_id = U.user_id outer join t_user_app A on A.user_id = U.user_id and A.app_type = 1 and A.enabled = 1 Constant filters are moved to outer join condition not in where statement conditions and query will return correct results. Similar rules is applied to static mapping and dynamic query."
  },
  "tips/optional.html": {
    "href": "tips/optional.html",
    "title": "Optional filters | XData website",
    "keywords": "Optional filters Optional filters is the mechanic to simplify query structure when some filters are not set. For example, we can map data structure to some class and to alow filter objects over some property of dictionary linked to main data structure. When filter applied this link to dictionary table is used, but when not we ineffectively rize query complexity. To avoid unplanned query complexity XData has optional filter feature. Some filters marked as primary - when this filter has value, query has full form. When filter value has cleared or set to null, data source of filtered field (table or view) will be skiped when SQL query composed. When data source has been skipped then links between already skipped and other data sources are analized. And when found link marked as primary linked data source will also skipped. When base table of subquery has been skipped - all subquery will be skipped and subquery links analizis for primary links will be provided over outer query. Until no primary filters found. This alowes to compose complex query relations over multiple tables and subqueries that reflect on real query only when it realy necessary."
  },
  "tips/lob.html": {
    "href": "tips/lob.html",
    "title": "Large object loading | XData website",
    "keywords": "Large object loading Large objects specific properties Lob and Xml specialy used to lazy access to potetialy big sized data stored in database. When data object accessed using XData, large objects data not queried, but replaced with null values to create full structure of object. To get or set value of Lob or Xml Lob.Value and Xml.Document properties are used. Size of Lob can be checked using GetSize method. To simplify value assigning overrided operation += can be used as described in example below: obj.Source += new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", z.DocStateCode))); obj.Scan += Encoding.UTF8.GetBytes(z.Source.Document.ToString()); To modify value of large objects in LINQ styled sequence of command helper methods Modify(Xml, Action<XDocument>) and Modify(Lob, Action<Byte[]>) can be used like in example below: invoice.Modify( z => z.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == newStateCode), z => z.Source.Modify(doc => doc.Element(\"invoice\").Attribute(\"state\").Value = newStateCode)) .Submit(); Warning When object is serialized large objects properties are serialized with null values by default! When actual value of large object is required it must to be requested separatly. To fill object large properties before serialization can be used one of LoadLob or LoadLobAsync helper method overloads."
  },
  "tips/json.html": {
    "href": "tips/json.html",
    "title": "JSON serialization | XData website",
    "keywords": "JSON serialization When used Json.NET XData data objects are serialized and deserialized automaticaly. There are some serialization specifics of data objects: By default Readonly properties and Hidden properties are serialized and deserialized as well as writable properties, but have a some restrictions when copyed to object to apply into database (see Apply method description below). Large objects ) are serialized to null value by default. They are designed for lazy data loading. To serialize data with actual values one of LoadLob helper method overloads can be used. By default Links are serialized as limited representation of link source object. Only properties listed as LinkProperties are included in serialized object. Additinaly an \"linkPropertyName.Value\" JSON property is serialized with the value of Link.Value property. Default serialization rules can be overrided with ICollection<T> and T WithJsonSettings extension methods. JsonSettings<T> has followed methods to specify serializing options: Hide - alow to specify properties to skip on serialization LoadLob - alow to specify large object properties to load data before serialize ( LoadLob method alternative) LinkMode - alow to specify serialization rules for multiple (or all) link properties: Default - default rules will be applied (see above) Value - only value will be serialized Source - only source will be serialized return dataScope.GetRepository<Some>().ToArray() .WithJsonSettings(s => s.Hide(JsonHideFlags.Columns) //hide all columns .Hide(x => x.SomeReadOnlyProperty) //hide SomeReadOnlyProperty .LoadLob() //load all large data properties .LinkMode(LinkMode.Deafult, x => SomeLinkProperty, x => AnotherLinkProperty) //set default rules to 2 properties .LinkMode(LinkMode.Value)); //set other link properties serialize Value property only Warning Deserialized objects are detached from repository and had limited ways of using! Deserialized object can be used as a filter to find data object in database (for example to delete) with Find method: var found = dataScope.GetRepository<Some>().Find(detachedObj); if(found == null) throw DbConcurrencyException(); return found.SetDeleted(true).Submit(); Deserialized object can be used as a source to copy some data to new object with Copy method: return dataScope.GetRepository<Some>().New().Copy(detachedObj).Submit(); Deserialized object can be used as to apply changes to database with Apply method: dataScope.GetRepository<Some>().Apply(detachedObj).Submit(); Apply is a combination of Find and Copy methods with followed algorithm: 1) if detached object has all keys assigned, corresponded object will be searched in database using keys and correlation token (if described in mapping) values (*) 2) if no data found XDataConcurrencyException will be throwed (**) 3) when some key properties are not assigned new entity has been created 4) detached object's data will be copyed to found (or new) object (***) (*) Using of correlation token value with Find method can be escaped with optional ignoreConcurrency parameter. Same result can be reached with ApplyFlag.IgnoreConcurrency flag has been passed in Apply method call. (**) ApplyFlag.AddWhenNotFound flag can be passed in Apply method call to add new entity when not found in database. (***) Copy and Apply has parameter properties to specify wich property values will be copied. ApplyFlag.ExceptProperties or CopyFlag.ExceptProperties flag can be used to SKIP listed properties on copy. ApplyFlag.CopyReadOnlyProperties or CopyFlag.CopyReadOnlyProperties flag can be used to allow copy Readonly properties and Hidden properties disabled by default."
  },
  "tips/hints.html": {
    "href": "tips/hints.html",
    "title": "SQL hints | XData website",
    "keywords": "SQL hints Warning Before using SQL hints, be sure to use all other query optimization features. This is a \"double-edged weapon.\" You need to understand very well why you are using what hints and how it will affect performance, and also make all the necessary tests confirming the effectiveness of the changes you made! XData supports using SQL hints to improve SQL query productivity. All databases supports this feature using vaious mechanics and can change various parameters of SQL execution... Types of hints supported by XData for RDBMS... MS SQL Server Query hints Table hints Oracle Query hints MySql Query hints PostgreSQL PostgreSQL does not support hints for queries, but procedures that returns setof record required declare columns definition on call (see example below). Of coase, this is not a SQL hint actually, but... create or replace function GetRows(text) returns setof record as $ declare r record; begin for r in EXECUTE ''select * from '' || $1 loop return next r; end loop; return; end $ language 'plpgsql'; select * from GetRows('Department') as dept(deptid int, deptname text); SQLite SQLite does not support hints. Using hints in static mapping Query hints: // hint for epmty string alias is applied to query // possible to apply different hints on // select, insert, update, delete statements or their combination [DataObject(\"T\"), Hint(\"\", \"SQL_NO_CACHE\", HintType.Select), Hint(\"\", \"HIGH_PRIORITY\", HintType.Select | HintType.Insert), ... Table hints (MS SQL Server only): [DataObject(\"T\"), DataTable(\"Test\", \"T\"), Hint(\"T\", \"nolock\"), ... Procedure hints (PostgreSQL only): [DataObject(\"T\"), Procedure(\"T\", \"TestFunction9\", ProcedureType.Function), Hint(\"T\", \"Id integer, Name varchar(20)\"), Parameter(\"T\", 1, \"p_id1\", typeof(int), DbType.Int32), Parameter(\"T\", 1, \"p_name1\", typeof(string), DbType.String), Parameter(\"T\", 1, \"p_id2\", typeof(int), DbType.Int32), Parameter(\"T\", 1, \"p_name2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class PostgreSqlTestFunction9 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get; set; } [Property(\"T\", \"Name\")] public string Name { get; set; } } Using hints in dynamic mapping and dynamic queries Query hints: // hint for epmty string alias is applied to query // possible to apply different hints on // select, insert, update, delete statements or their combination XDataMapping.GetStructure(\"T\", dataScope.DefaultContext) .Hint(\"\", \"SQL_NO_CACHE\", HintType.Select) .Hint(\"\", \"HIGH_PRIORITY\", HintType.Select | HintType.Insert)... Table hints (MS SQL Server only): XDataMapping.GetStructure(\"T\", dataScope.DefaultContext) .DataTable(\"Test\", \"T\") .Hint(\"T\", \"nolock\")... Procedure hints (PostgreSQL only): XDataMapping.GetStructure(context: dataScope.DefaultContext) .Procedure(\"T\", \"TestFunction8\", ProcedureType.Function) .Hint(\"T\", \"Id integer, Name varchar(20)\") .Parameter<Classifier[]>(\"T\", 1, \"p_tab\", DbType.Object, z => z.UdtDataType(null, \"classifier_rec\"), z => z.Array()) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"p_tab\".SetVar(param));"
  },
  "tips/get_credentials.html": {
    "href": "tips/get_credentials.html",
    "title": "Get connection settings in runtime | XData website",
    "keywords": "Get connection settings in runtime Connection settings can be obtained from initialized context using code below: var ctx = dataScope.GetContext(s); Console.WriteLine(\"*** Testing context: {0} (DB type: {1})\", ctx.Name, ctx.DatabaseAdapter.ConnectType); Console.WriteLine(\"*** Server: {0}, Schema: {1}\", ctx.ConnectionInfo.Server, ctx.ConnectionInfo.Schema);"
  },
  "tips/fixed.html": {
    "href": "tips/fixed.html",
    "title": "Caching repository data | XData website",
    "keywords": "Caching repository data Some data is changed often, some is rarely, but some data will never changed untill application has upgraded. To reduse requery of this static data, XData has mechanism to cache requested data (not a mapped objects) in XData. Repository property FixedQuery can be assigned to true when caching is required. All LINQ queries will be translated to this cache without requery data from database. When this property resets to false, the cache will erased and repository returns to common algorithms of database requests. Similar feature is used to access rarely changed dictionary data over multiple related operative data canges."
  },
  "tips/external.html": {
    "href": "tips/external.html",
    "title": "Dynamic query external data sources | XData website",
    "keywords": "Dynamic query external data sources XData dynamic query can use external data sources to operate with runtime tabular or xml data together with data stored inside database. Warning This feature is not supported by all of databases! XML data sources can be used with Ms SQL Server and PostgreSQL only. Local temporary tables is not supported by Oracle database. As You can see, Oracle not supported both of features. Use PL/SQL functions, packages or predefined global temporary tables instead. XML data source // prepare XML document var doc = new XDocument(new XElement(\"root\", new XElement(\"test\", new XAttribute(\"doc_state_id\", 1), new XAttribute(\"test\", \"one\")), new XElement(\"test\", new XAttribute(\"doc_state_id\", 2), new XAttribute(\"test\", \"two\")) )).ToString(); var query = XDataMapping.GetStructure(\"S\", dataScope.DefaultContext) .DataTable(\"T_DOC_STATE\", \"S\") // use XmlSource definition providing XPath expression for data source .XmlSource(\"Test\", \"T\", \"root/test\", x => x.Link(\"S\", \"doc_state_id\")) .Select(x => new { // use XmlField definition with XPath expression as a field source DocStateId = x.XmlField<int>(\"T\", string.Empty, \"@doc_state_id\", DbType.Int32, z => z.Key()), Code = x.Field<string>(\"S\", string.Empty), // note, string and number (decimal) xml fields need size defined, like an expression fields Test = x.XmlField<string>(\"T\", string.Empty, \"@test\", DbType.String, z => z.Size(20)) // set XML string to variable with the same name as XmlSource }).AsQuery(dataScope.Layer, \"Test\".SetVar(doc)); Temporary table // prepare tabular data var table = new DataTable(); table.Columns.AddRange(new [] { new DataColumn(\"doc_state_id\", typeof(long)), new DataColumn(\"test\", typeof(string)) }); table.Rows.Add(1, \"one\"); table.Rows.Add(2, \"two\"); table.AcceptChanges(); var query = XDataMapping.GetStructure(\"S\", dataScope.DefaultContext) .DataTable(\"T_DOC_STATE\", \"S\") // use temporary table definition .TempTable(\"Test\", \"T\", x => x.Link(\"S\", \"doc_state_id\")) .Select(x => new { // use Field method overload with dbType parameter to define temporary table field DocStateId = x.Field<long>(\"T\", string.Empty, DbType.Int64, z => z.Key()), Code = x.Field<string>(\"S\", string.Empty), // note, string and number (decimal) xml fields need size defined, like an expression fields Test = x.Field<string>(\"T\", string.Empty, DbType.String, z => z.Size(20)) // set DataTable to variable with the same name as TempTable }).AsQuery(dataScope.Layer, \"Test\".SetVar(table));"
  },
  "tips/events.html": {
    "href": "tips/events.html",
    "title": "Using events | XData website",
    "keywords": "Using events Custom logic call and trigger logic is executed on the midleware layer, deployed on the application server or not. But some reaction on data change events may be required on client side. XData has followed events to subscribe changes of data: InitRepository<T> OnInit - event acquired when repository has been initialized InitObject<T> OnInitObject - event acquired when object has been initialized by database or default values InvalidateRepository<T> OnInvalidate - repository data has been requeried from database InvalidateObject<T> OnInvalidateObject - object has been changed and requeied from database CurrentObjectChanging<T> OnCurrentObjectChanging - current object is changing CurrentObjectChanged<T> OnCurrentObjectChanged - current object has been changed"
  },
  "tips/dictionary.html": {
    "href": "tips/dictionary.html",
    "title": "Using dictionaries | XData website",
    "keywords": "Using dictionaries Dictionaries can be used to reduse data requery count when rarely changed data of dictionary will linked multiple times through Link<T,TSource> data type properties over small amount of time (one business process). Dictionaries is cached as single mapped objects (not a data cahe as described in Caching repository data topic)."
  },
  "tips/default_features.html": {
    "href": "tips/default_features.html",
    "title": "Default value features | XData website",
    "keywords": "Default value features Data object properties (or hidden properties ) can be assigned by default values described by mapping. Using DefaultFeature enumeration it's possible to extend basic functionality of default value assignment with... UseOnUpdate - use default value not only on insert, but on update also. SkipWhenAssigned - skip insert into table when PK value assigned explicitly. UpdateWhenAssigned - change insert operation over table to update when PK value assigned explicitly. Last two of features is usable when data object 's primary table is linked with another table in data object mapping as one-to-one, and insert into base table can be skipped (or replaced with update statement) when it's primary key is assigned explicitly in application code. This features helps logicaly combine mappings to hide technological entities, which don't reflect buseness object model of application. Default features can be combined. For example: DefaultFeature.UseOnUpdate | DefaultFeature.SkipWhenAssigned"
  },
  "tips/custom_sql.html": {
    "href": "tips/custom_sql.html",
    "title": "Call custom SQL code | XData website",
    "keywords": "Call custom SQL code XData can help the programmer to obtain data and process it with many ways. But also we hold in mind XData is just a common tool with limited quantity of features, and some very specific (but handy and powerfull) SQL dialect constructions may be out of XData possibilities. To call dialect specific SQL statements used IDataScope interface with methods: FillTable , ExecuteScalar and ExecuteNonQuery . const string getCoordComResourceStateChangesForCaseCommand = @\" select x.ResourceCode, x.ReportedDateTime, x.UserName, x.MissionStatusCode, x.ResourceStatusCode from (select h.ResourceCode, h.ReportedDateTime, h.MissionStatusCode, h.ResourceStatusCode, isnull((select top(1) log.Creator from cse_CaseFolderLog_tab log with (nolock) where log.CallCenterId = h.CallCenterId and log.CaseFolderId = h.CaseFolderId and log.CaseId = h.CaseId and log.Created >= h.ReportedDateTime and datediff(s, h.ReportedDateTime, log.Created) <= 10 and (charindex(case h.MissionStatusCode when '---' then 'ready' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0 or charindex(case h.MissionStatusCode when '---' then 'disconnected' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0) and charindex(h.ResourceCode, log.LogText COLLATE Latin1_General_CS_AS) > 0 and charindex('|' + log.Creator + '|', @IntegrationUsers) = 0 order by log.Created ) , (select top(1) log.Creator from cse_CaseFolderLogFinished_tab log with (nolock) where log.CallCenterId = h.CallCenterId and log.CaseFolderId = h.CaseFolderId and log.CaseId = h.CaseId and log.Created >= h.ReportedDateTime and datediff(s,h.ReportedDateTime, log.Created) <= 10 and (charindex(case h.MissionStatusCode when '---' then 'ready' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0 or charindex(case h.MissionStatusCode when '---' then 'disconnected' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0) and charindex(h.ResourceCode, log.LogText COLLATE Latin1_General_CS_AS) > 0 and charindex('|' + log.Creator + '|', @IntegrationUsers) = 0 order by log.Created )) as UserName from res_ResourceHistory_tab h where h.CallCenterId = @CallCenterId and h.CaseFolderId = @CaseFolderId and h.CaseId = @CaseId and not exists(select 1 from sph_ResourceHistory_tab sh where sh.CallCenterId = h.CallCenterId and sh.CaseFolderId = h.CaseFolderId and sh.CaseId = h.CaseId and sh.ResourceCode = h.ResourceCode and (sh.MissionStatusCode = h.MissionStatusCode or (sh.MissionStatusCode = '---' and sh.ResourceStatusCode = @ClosedStatusCode)) and sh.ReportedDateTime = h.ReportedDateTime)) x where x.UserName is not null\"; using (var dataScope = DataEngine.Value.NewDataScope(CoordComDb)) { return dataScope.FillTable( new Query(getCoordComResourceStateChangesForCaseCommand, CommandType.Text, new QueryParam(\"@CaseFolderId\", caseIdentity.CaseFolderId, DbType.Int32), new QueryParam(\"@CallCenterId\", caseIdentity.CallCenterId, DbType.Int32), new QueryParam(\"@CaseId\", caseIdentity.CaseId, DbType.Int32), new QueryParam(\"@IntegrationUsers\", $\"|{string.Join(\"|\", integrationUsers)}|\"), new QueryParam(\"@ClosedStatusCode\", closedStatusCode) ), CommandBehavior.SingleResult).Rows.OfType<DataRow>() .Select(x => new Tuple<string, DateTime, string, string>( x.Field<string>(0), x.Field<DateTime>(1), x.Field<string>(2), x.Field<string>(3) == \"---\" ? x.Field<string>(4) : x.Field<string>(3))).ToList(); } Tip Use this mechanism with maximum care! This eliminates cross dialect approach of XData development, but we are in a real world with real programmers tasks... and we are never seen real tasks are correspond the rules of ideal programm system architecture ;) Anyway this bad feature is a backdoor we must provide while XData is not support all features of all specific SQL dialects. Is this realy possible?. We think that not, but we will try to provide most of nessesary features inside XData as soon as possible. We are need Your help to choose the order of features implementation and ideas to do it best! Important DDL instructions is not implemented by design. We believe DDL in big complicated real business application is not a thing we can delegate to \"dumb-metal-doll\". This is why XData has no mechanics to \"CodeFirst\"... If You're task can use CodeFirst approach - use EF. This way is historically reserved by EF, and no reason to fight for it. Calling custom SQL code is a legal way to apply DDL in XData context. Programmer or database administrator write this SQL script. This code is prodused by human, real (not artifical) intellect of professional... XData only has ability to run it over database."
  },
  "tips/custom_logic.html": {
    "href": "tips/custom_logic.html",
    "title": "Execute custom business logic | XData website",
    "keywords": "Execute custom business logic XData has many features targeting this technology as not only ORM, but a full featured Data Access Layer. This is one of this features. Custom logic defined as public property of XDataLogic<T> class descendant with type of CustomLogic<T> . public class InvoiceLogic : XDataLogic<Invoice> { public CustomLogic<Invoice> TestCustomLogic => (objects => { Log.Write(MessageType.Information, () => $\"TestCustomLogic called with {objects.Length} objects\"); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => @$\"Call for \\\"{i.DocNumb}\\\" returned \\\"{r}\\\" with data \\\"{(p == null ? null : Encoding.UTF8.GetString(p))}\\\"\"); } return true; }); } ... //Call example logic var random = new Random(); return dataScope.GetRepository<Invoice>().ToArray().Execute(() => \"TestCustomLogic\", \"testPost\".SetValue((Action<byte[]>)(data => Console.WriteLine(\"Post message received (data=\\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)))) .AsEnum().ToDictionary(), \"testCall\".SetValue((Func<byte[], byte[]>)(data => { Console.WriteLine(\"Call received \\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)); return random.NextDouble() >= 0.5 ? null : Encoding.UTF8.GetBytes( $\"reply for \\\"{(data == null ? null : Encoding.UTF8.GetString(data))}\\\"\"); })).AsEnum().ToDictionary()); Programmer can develope data centric logic over some of mapped objects with ability to execute this logic in the middleware layer of three-tier architecture on a dedicated server (or cluster). And this code can be simple and representable debuged in two-tier environment. Architecture can be switched by configuration! No code modification, no side effects... This feature is linked with Trigger logic and reached by Callbacks . When code is organized using data mapping modules, data logic modules and client (or Web site) it can help programmer to keep module relations clean and get ready to changes, with no matter of middleware layer existance. And this rules are not dictated, You can use it or not. You can write this logic anywhere You architect to do. Nothing will be breakes, exept of ability to use XData three-tier architecture. But if You realy don't need it, what is wrong?"
  },
  "tips/copy_data.html": {
    "href": "tips/copy_data.html",
    "title": "Copy data | XData website",
    "keywords": "Copy data Data can be copied from one repository to another using IRepository<T>.Add<TFrom> method as illustrated in followed example: // Query source data (statically, or dynamically) into sourceQuery variable var rep = dataScope.GetRepository<Target>(); using(var tr = dataScope.BeginTransaction()) { rep.Add<Source>(sourceQuery, x => new Target{ TargetSome = x.Some, TargetAnother = x.Another }); tr.Commit(); }"
  },
  "tips/container.html": {
    "href": "tips/container.html",
    "title": "Using DI container | XData website",
    "keywords": "Using DI container XData can be effecively used with any DI containers You prefer. Net 4.0 version not used DI containers inside, but IDataEngine , IDataScope and IRepository<T> interfaces can be obtained from container. IDataEngine must to be registered as singleton with XDataManager.InitXData method call. IDataScope can be registered as lifetime service over data logic module (for example: Controller module in MVC pattern) using fabric method with obtaining IDataEngine service and creating ( IDataEngine.NewDataScope ) or request from internal XData cache ( IDataEngine.GetDataScope ) IDataScope instance when Layer is provided. IRepository<T> can be registered as transistent service using fabric method with obtaining IDataScope service and call IDataScope.GetRepository<T> method. Using container to obtain IRepository<T> service seems to be a kind of a joke, but sometimes it's usefull. Net Standard 2.0 version used Net Core Dependency Abstraction inside and this asbtraction can be implemented by any You like DI container. In this version IDataEngine is registered by calling AddXData method. Other interfaces can be registered manually (if required) with described above or any You like logic."
  },
  "tips/conditional.html": {
    "href": "tips/conditional.html",
    "title": "Conditional filters | XData website",
    "keywords": "Conditional filters XData realization of LINQ \"Where\" method has provide ability to use runtime condition evaluation during predicate compilation into SQL statements to analyze runtime data and conditionaly omit non valued data (0, empty or null) filters. // string author, int rating, decimal? lowerPrice and decimal? higherPrice is an optional filter values return dataScope.GetRepository<Book>() .Where(x => (string.IsNullOrEmpty(author) || x.Author == author) && (rating <= 0 || x.Rating >= rating) && (lowerPrice.HasValue || x.Price >= lowerPrice) && (higherPrice.HasValue || x.Price <= higherPrice)) .ToArray(); When runtime condition is true and LINQ expression is OrElse whole expression is omitted while predicate compilation into SQL statements."
  },
  "tips/callback.html": {
    "href": "tips/callback.html",
    "title": "Using business logic callbacks | XData website",
    "keywords": "Using business logic callbacks XData alowes to use business logic callbacks to interact backend modules with frontend using synchronious Callback and asynchronious PostData models. Synchronious calls can return result value. Callbacks can be used with three-tier-architecture as well as with client-server model. Callbacks has provided business logic clear, complete view and alowes debug same code in two-tier environment as code will be executed in three-tier. public class InvoiceLogic : XDataLogic<Invoice> { public CustomLogic<Invoice> TestCustomLogic => (objects => { Log.Write(MessageType.Information, () => $\"TestCustomLogic called with {objects.Length} objects\"); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => @$\"Call for \\\"{i.DocNumb}\\\" returned \\\"{r}\\\" with data \\\"{(p == null ? null : Encoding.UTF8.GetString(p))}\\\"\"); } return true; }); }"
  },
  "tips/calculated.html": {
    "href": "tips/calculated.html",
    "title": "Business logic calculated fields | XData website",
    "keywords": "Business logic calculated fields XData alowed to calculate fields not only using SQL expressions . You can subscribe OnInvalidateObject event and calculate some fields on client side. More detailed events dicassed below ."
  },
  "tips/attached.html": {
    "href": "tips/attached.html",
    "title": "Virtual data and attached handlers | XData website",
    "keywords": "Virtual data and attached handlers You can use XData as database mock engine. XData has feature to replace database interactions with attached handlers call. Virtual objects is attached to repository using Attach method of IRepository<T> interface. To detach virtual objects used Detach method. Multiple virtual entities can be attached to repository as new objects using AttachNewObjects method. Tip This method ( AttachNewObjects ) can be used to add multiple dettached objects to real repository. Every virtual entity can override handlers attached to repository with their own realization using parameters of AttachNewObjects method or SetAttachedHandlers method call. To set repository level handlers use special overload of SetAttachedHandlers . To clear attached objects You can use ClearAttachedObjects method. To help wrap handlers to abstract AttachedHandler<T> class and unwrap it back to specialized handlers XData has a wrapper class RepositoryAttachedHandler . Attached hendlers can have followed types (see AttachedHandlerType ): OnClear - ( ClearAttachedHandler ) handler called instead of Clear OnExecute - ( ExecuteAttachedHandler<T> ) handler called instead of Execute OnGetLob - ( GetLobAttachedHandler ) handler called instead of requesting LOB data OnGetLobSize - ( GetLobSizeAttachedHandler ) handler called instead of requesting LOB size OnGetXml - ( GetXmlAttachedHandler ) handler called instead of requesting XML data OnLock - ( LockAttachedHandler<T> ) handler called instead of Lock OnRefresh - ( RefreshAttachedHandler<T> ) handler called instead of refreshing data OnSetLob - ( SetLobAttachedHandler ) handler called instead of saving LOB data OnSetXml - ( SetXmlAttachedHandler ) handler called instead of saving XML data OnSubmit - ( SubmitAttachedHandler<T> ) handler called instead of Submit multiple objects OnSubmitObject - ( SubmitObjectAttachedHandler<T> ) handler called instead of submitting single object OnSubmitQuery - ( SubmitQueryAttachedHandler<T> ) handler called instead of submitting query generation"
  },
  "tips/async.html": {
    "href": "tips/async.html",
    "title": "Asynchronious wrapped operations | XData website",
    "keywords": "Asynchronious wrapped operations To access data with XData inside async methods it's handy to use asynchronous wrappers declared inside XData.Async etxtension methods as illustrated in followed example: internal async Task<DocType[]> TestArrayAsync(IDataEngine dataEngine) { using (var dataScope = dataEngine.NewDataScope(\"TEST_POSTGRE_NPG\")) { return await dataScope.GetRepository<DocType>().ToArrayAsync(); } }"
  },
  "tips/add_filters.html": {
    "href": "tips/add_filters.html",
    "title": "Reuse mapping in dynamic query | XData website",
    "keywords": "Reuse mapping in dynamic query Already declared mappings can be reused in dynamic query construction with generic GetStructure method overload. See the example below to understand how it works: using (var dataScope = DataEngine.NewDataScope()) { var user = dataScope.GetRepository<User>().SingleOrDefault(x => x.UserId.ToString() == userId); if (user == null) throw new Exception(\"User not found!\"); // prepare enum values expression array to *Case* expression based on AppType enum var enumValues = typeof(AppType).GetEnumKeyValuePairs() .Select(i => i.Key.SetExpression(x => i.Value)) .ToArray(); // reuse *UserRole* mapping adding filter by *user_id* column and redefine select output var roleClaims = XDataMapping.GetStructure<UserRole>().AddFilters(\"UR\", x => x.ConstFilter(\"FilterByUserId\", \"user_id\", userId.ToString())) .Column(\"UserId\", x => x.Field<Guid>(\"UR\", string.Empty)) .Select(x => new UserClaim { // set negative id to preserve key uniqueness after appling *Union* operation using expression field Id = x.Expr(\"id\", z => -1 * z.Field<long>(\"R\", \"role_id\"), DbType.Int64), Type = x.Expr(\"role\", z => \"role\", DbType.String), // construct role name based by *app_type* enum field and role name using SQL *Case* expression Value = x.Expr(\"val\", z => z.Case(y => y.Field<long>(\"R\", \"app_type\"), y => \"\", enumValues) + \".\" + x.Field<string>(\"R\", \"role\"), DbType.String) }).AsQuery(dataScope.Layer); user.Applications = apps.SetFilterValue(x => UserId, userId).ToArray(); user.Roles = dataScope.GetRepository<UserRole>().SetFilterValue(x => UserId, userId).ToArray(); // Combine simple claims and synthetic role claims user.Claims = dataScope.GetRepository<UserClaim>() .SetFilterValue(x => UserId, userId) .Union(roleClaims).ToArray(); return user; }"
  },
  "tips/adapter_config.html": {
    "href": "tips/adapter_config.html",
    "title": "Adapter and dialect specific configuration | XData website",
    "keywords": "Adapter and dialect specific configuration Some of adapters and dialects has their own specific configuration settings to setup unique features and behaviors. That specific settings can be defined in configuration file or dynamically with AddAdapter or AddDialect methods options parameter. Tip Function signatures is slightly different for .Net 4.0 version. XData.PostgreSql.NpgSql.Adapter: ... when XML configuration file is used: <adapter name=\"POSTGRESQL_NPG\" assembly=\"XData.PostgreSql.NpgSql.Adapter\"> <schema name=\"public\"/> </adapter ... when YAML configuration file is used: adapter: - name: \"DICT_POSTGRESQL\" assembly: \"XData.PostgreSql.NpgSql.Adapter\" schema: dictionaries: ... when configuration is provided in runtime: // replace someschemaname to real schema name var source = new MemoryConfigurationSource { InitialData = new[] { new KeyValuePair<string, string>(\"schema:someschemaname\", null) }}; var conf = new ConfigurationBuilder().Add(source).Build(); ... .AddAdapter(\"postgresql\", XData.PostgreSql.Adapter, conf)"
  },
  "index.html": {
    "href": "index.html",
    "title": "XData | XData website",
    "keywords": "XData XData is .Net domain object oriented data access layer component. It is not \"yet another ORM\", but а comlete feature rich data access layer for Your solutions. Basic idea to create this component was a suppling high quality tool to professional developers, having deep competences in data storage modeling and access. version 1.1.0 Nuget packages XData Data Access Layer package XData UnitOfWork package - required to use XData UnitOfWork implementation XData Security package - ISecuritySession interface implementation helper required to use XData security functionality XData Three-tier client proxy package - client proxy to use in three-tier envirounment (Net 4.0 only, required full Net 4.0 Framework version) XData Cache package - time limited object caching (Net 4.0 only, required full Net 4.0 Framework version) XData MsSqlSever adapter package - Ms SQL Server database dialect and adapter XData Oracle adapter package - Oracle database dialect and adapter based on Oracle ODP provider XData PostgreSql adapter package - Postgre SQL database dialect and adapter based on NpgSql provider XData SQLite adapter package - SQLite database dialect and adapter (Net 4.0 version has used System.Data.SQLite provider, Net Standard 2.0 version has used Microsoft.Data.Sqlite provider) XData MySql adapter package - MySQL database dialect and adapter based on MySql.Data provider Plugins Net 4.0 XData net 4.0 System.Diagnistics.Trace log writer XData net 4.0 log4net log writer XData net 4.0 Three-tier server Net Standard 2.0 XData Net Standard 2.0 has no plugins. Logging in Net Standard 2.0 implemented over Microsoft.Extensions.Logging.Abstractions. Three-tier architecture is currently not supported in Net Standard 2.0 version. Online documentation Online documentation PDF documentation PDF documentation Contacts Denis Dawydenko AKA Mick Fierte – d.dawydenko@gmail.com Thanx Special thank to my friends who help me to make it project possible with supporting me, great ideas, working problem solutions and laborious testing: Alex Lukinov Andrew Ustinov Stanislav Kovanovsky Pavel Kryukov Max Lapotkov"
  },
  "RELEASENOTE.html": {
    "href": "RELEASENOTE.html",
    "title": "Version Notes (Current Version: v1.1.0) | XData website",
    "keywords": "Version Notes (Current Version: v1.1.0) 1.1.0 .Net Standard 2.0 version released MySql is now supported XML data sources is now supported in dynamic queries Local temporary tables is now supported in dynamic queries Lot of bugs are fixed Documetation is available now 1.0.0 Initially published (deprecated now)"
  },
  "api/XData.html": {
    "href": "api/XData.html",
    "title": "Namespace XData | XData website",
    "keywords": "Namespace XData Classes Actions Standard actions used by security AttachedHandler<T> Data object level attached handler wrapper DataObjectExtensions IDataObject extension functions Log Log helper ParameterIndexer SQL procedure call out parameters indexer RepositoryAttachedHandler<T> Repository level attached handler wrapper RepositoryIndexer Data object links (parents and childs) indexer ResultSetIndexer SQL procedure call out result sets indexer RuntimeAssemblyLoader SerializationExtensions Serialization extensions SerializedData Serialized data SerializedValue Serialized data value Variable Data object repository variable VariableIndexer Data object variables indexer Work Work set helper class XDataLogic<T> XDataManager Data manager Defines user session context across (possible) multiple data sources XDataPureLinqMethodAttribute Attribute to mark XData pure LINQ methods with no realization Interfaces IDataEngine XData engine interface IDataLogic<T> Data logic interface IDataObject Data object interface IDataOptions XData options interface IDataQuery Read only data source basic interface IDataQuery<T> Specialized read only data source interface IDataScope XData operational scope IRepository Data repository (data object collection) basic interface IRepository<T> Data repository (data object collection) type specific interface ISqlObject SQL (sub)query part interface IWorkSet Basic work set interface IWorkSet<T> Work set interface Enums ApplyFlag Apply detached object properties flags AttachedHandlerType Attached event types Combination Filter combination logical composition CopyFlag DataActionType Action type DataCombination Data set combination modes DataExpressionType Expression type DataGrouping Data aggregation function DataObjectState Data object instance state DataPropertyFlag Data object property flags DataSourceType Data source type DataStructureFlag Data object structure flags DataSubmitFlag Data submit options DataTriggerFlag Data trigger result flags DataVersion Version of data DateDiffKind Date difference kind DefaultFeature Default value features DefaultType Default value type DialectOptions SQL dialect options SequenceRequired WithSupported ReturningInResult StoredProceduresSupported ScalarFunctionsSupported TableFunctionsSupported ObjectParametersSupported TableParametersSupported ScalarFunctionsOutParametersAllowed TableOutParametersAllowed MultipleRecordsetProceduresSupported FilterConstantType ConstantFilter value mode FilterNullable Filter null value assignment mode FilterOperation Filter operation FilterType Filter type MessageType Log message type ProcedureType SQL stored procedure type WithRecursiveType Common-Table-Expression (WITH) Subquery type WorkState Work set state Delegates Calculate<T> XData LINQ-styled SQL expression delegate type ClearAttachedHandler Clear attached handler delegate CurrentObjectChanged<T> Object assigned as current event delegate type CurrentObjectChanging<T> Assigning object as current event delegate type CustomLogic<T> Custom server logic delegate type CustomMapping<T> Custom mapping delegate type ExecuteAttachedHandler<T> Execute attached handler delegate GetLobAttachedHandler Get Lob attached handler delegate GetLobSizeAttachedHandler Get Lob size attached handler delegate GetXmlAttachedHandler Get Xml attached handler delegate InitObject<T> Object instance initialization delegate type InitRepository<T> Repository initialization delegate type InvalidateObject<T> Refresh one object event delegate type InvalidateRepository<T> Refresh repository event delegate type LockAttachedHandler<T> Lock object attached handler delegate Mapping<TFrom, T> Mapping logic delegate type RefreshAttachedHandler<T> Refresh attached handler delegate RepositoryTrigger<T> RepositoryTrigger logic delegate type SetLobAttachedHandler Set Lob attached handler delegate SetXmlAttachedHandler Set Xml attached handler delegate SubmitAttachedHandler<T> Submit attached handler delegate SubmitObjectAttachedHandler<T> Submit object attached handler delegate SubmitQueryAttachedHandler<T> Lock object attached handler delegate Trigger<T> Trigger logic delegate type"
  },
  "api/XData.XDataPureLinqMethodAttribute.html": {
    "href": "api/XData.XDataPureLinqMethodAttribute.html",
    "title": "Class XDataPureLinqMethodAttribute | XData website",
    "keywords": "Class XDataPureLinqMethodAttribute Attribute to mark XData pure LINQ methods with no realization Inheritance Object Attribute XDataPureLinqMethodAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class XDataPureLinqMethodAttribute : Attribute Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.XDataManager.GetConcurrencyErrorId.html": {
    "href": "api/XData.XDataManager.GetConcurrencyErrorId.html",
    "title": "Method GetConcurrencyErrorId | XData website",
    "keywords": "Method GetConcurrencyErrorId | Improve this Doc View Source GetConcurrencyErrorId(String) Returns concurrency error id for context Declaration public static int GetConcurrencyErrorId(string context) Parameters Type Name Description String context Context name Returns Type Description Int32 Concurrency error id"
  },
  "api/XData.XDataManager.Configuration.html": {
    "href": "api/XData.XDataManager.Configuration.html",
    "title": "Property Configuration | XData website",
    "keywords": "Property Configuration | Improve this Doc View Source Configuration Declaration public static IConfiguration Configuration { get; } Property Value Type Description IConfiguration"
  },
  "api/XData.XDataManager.Resources.html": {
    "href": "api/XData.XDataManager.Resources.html",
    "title": "Field Resources | XData website",
    "keywords": "Field Resources Namespace : XData Assembly : XData.docfx.dll Syntax public static dynamic Resources Returns Type Description Object"
  },
  "api/XData.XDataManager.AddXData.html": {
    "href": "api/XData.XDataManager.AddXData.html",
    "title": "Method AddXData | XData website",
    "keywords": "Method AddXData | Improve this Doc View Source AddXData(IServiceCollection, Func<IDataOptions, IDataOptions>) XData initialization Declaration public static IServiceCollection AddXData(this IServiceCollection services, Func<IDataOptions, IDataOptions> options = null) Parameters Type Name Description IServiceCollection services Services collection Func < IDataOptions , IDataOptions > options XData engine options Returns Type Description IServiceCollection XData engine interface"
  },
  "api/XData.XDataManager.html": {
    "href": "api/XData.XDataManager.html",
    "title": "Class XDataManager | XData website",
    "keywords": "Class XDataManager Data manager Defines user session context across (possible) multiple data sources Inheritance Object XDataManager Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public static class XDataManager Fields Name Description Resources Properties Name Description Configuration Methods Name Description AddXData(IServiceCollection, Func<IDataOptions, IDataOptions>) XData initialization GetConcurrencyErrorId(String) Returns concurrency error id for context"
  },
  "api/XData.XDataLogic-1.BeginTransaction.html": {
    "href": "api/XData.XDataLogic-1.BeginTransaction.html",
    "title": "Method BeginTransaction | XData website",
    "keywords": "Method BeginTransaction | Improve this Doc View Source BeginTransaction(Guid, String, Boolean, IsolationLevel) Declaration protected ITransaction BeginTransaction(Guid layer, string context = null, bool read = false, IsolationLevel isolation = null) Parameters Type Name Description Guid layer String context Boolean read IsolationLevel isolation Returns Type Description ITransaction"
  },
  "api/XData.XDataLogic-1.GetRepository.html": {
    "href": "api/XData.XDataLogic-1.GetRepository.html",
    "title": "Method GetRepository | XData website",
    "keywords": "Method GetRepository | Improve this Doc View Source GetRepository<TRep>(Guid, String, String, ISecuritySession, Variable[]) Declaration protected IRepository<TRep> GetRepository<TRep>(Guid layer, string alias = null, string context = null, ISecuritySession security = null, params Variable[] variables) where TRep : class, IDataObject, new() Parameters Type Name Description Guid layer String alias String context ISecuritySession security Variable [] variables Returns Type Description IRepository <TRep> Type Parameters Name Description TRep"
  },
  "api/XData.XDataLogic-1.GetDictionaryValue.html": {
    "href": "api/XData.XDataLogic-1.GetDictionaryValue.html",
    "title": "Method GetDictionaryValue | XData website",
    "keywords": "Method GetDictionaryValue | Improve this Doc View Source GetDictionaryValue<TDict>(Expression<Func<TDict, Boolean>>, Guid, String, String, ISecuritySession, Variable[]) Declaration protected TDict GetDictionaryValue<TDict>(Expression<Func<TDict, bool>> findExpression, Guid layer, string alias = null, string context = null, ISecuritySession security = null, params Variable[] variables) where TDict : class, IDataObject, new() Parameters Type Name Description Expression < Func <TDict, Boolean >> findExpression Guid layer String alias String context ISecuritySession security Variable [] variables Returns Type Description TDict Type Parameters Name Description TDict"
  },
  "api/XData.XDataLogic-1.html": {
    "href": "api/XData.XDataLogic-1.html",
    "title": "Class XDataLogic<T> | XData website",
    "keywords": "Class XDataLogic<T> Inheritance Object XDataLogic<T> Implements IDataLogic <T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public class XDataLogic<T> : IDataLogic<T> where T : class, IDataObject, new() Type Parameters Name Description T Methods Name Description BeginTransaction(Guid, String, Boolean, IsolationLevel) GetDictionaryValue<TDict>(Expression<Func<TDict, Boolean>>, Guid, String, String, ISecuritySession, Variable[]) GetRepository<TRep>(Guid, String, String, ISecuritySession, Variable[]) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.WorkState.html": {
    "href": "api/XData.WorkState.html",
    "title": "Enum WorkState | XData website",
    "keywords": "Enum WorkState Work set state Namespace : XData Assembly : XData.WorkSet.docfx.dll Syntax public enum WorkState Fields Name Description Active Active (not deleted) objects Changed Changed objects Deleted Deleted objects New New objects Original Original objects Extension Methods SerializationExtensions.ToXml<WorkState>() CollectionsExtensions.SetValue<WorkState, T>(T) CollectionsExtensions.AsEnum<WorkState>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<WorkState, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<WorkState, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Work.Get.html": {
    "href": "api/XData.Work.Get.html",
    "title": "Method Get | XData website",
    "keywords": "Method Get | Improve this Doc View Source Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Existed single depended object initializer Declaration public static Expression<Func<T, IWorkSet>> Get<T, TRet>(Expression<Func<T, TRet>> source, params Expression<Func<TRet, IWorkSet>>[] workSets) where T : class, IDataObject, new() where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, TRet>> source Expression returning parent object property contains depended data object Expression < Func <TRet, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description Expression < Func <T, IWorkSet >> Work set Type Parameters Name Description T Parent data object type TRet Depended data object type See Also Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[])"
  },
  "api/XData.Work.Empty.html": {
    "href": "api/XData.Work.Empty.html",
    "title": "Method Empty | XData website",
    "keywords": "Method Empty | Improve this Doc View Source Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty single depended object initializer Declaration public static Expression<Func<T, IWorkSet>> Empty<T, TRet>(Expression<Func<T, TRet>> source, params Expression<Func<TRet, IWorkSet>>[] workSets) where T : class, IDataObject, new() where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, TRet>> source Expression returning parent object property contains depended data object Expression < Func <TRet, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description Expression < Func <T, IWorkSet >> Work set Type Parameters Name Description T Parent data object type TRet Depended data object type See Also Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) | Improve this Doc View Source Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty depended collection initializer Declaration public static Expression<Func<T, IWorkSet>> Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>> source, params Expression<Func<TRet, IWorkSet>>[] workSets) where T : class, IDataObject, new() where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, IEnumerable <TRet>>> source Expression returning parent object property contains depended data object Expression < Func <TRet, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description Expression < Func <T, IWorkSet >> Work set Type Parameters Name Description T Parent data object type TRet Depended data object type See Also Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[])"
  },
  "api/XData.Work.Fill.html": {
    "href": "api/XData.Work.Fill.html",
    "title": "Method Fill | XData website",
    "keywords": "Method Fill | Improve this Doc View Source Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Existed depended collection initializer Declaration public static Expression<Func<T, IWorkSet>> Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>> source, params Expression<Func<TRet, IWorkSet>>[] workSets) where T : class, IDataObject, new() where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, IEnumerable <TRet>>> source Expression returning parent object property contains depended data object Expression < Func <TRet, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description Expression < Func <T, IWorkSet >> Work set Type Parameters Name Description T Parent data object type TRet Depended data object type See Also Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[])"
  },
  "api/XData.Work.GetWorkSet.html": {
    "href": "api/XData.Work.GetWorkSet.html",
    "title": "Method GetWorkSet | XData website",
    "keywords": "Method GetWorkSet | Improve this Doc View Source GetWorkSet<T>(Guid) Returns a cached work set Declaration public static IWorkSet<T> GetWorkSet<T>(Guid layer) where T : class, IDataObject, new() Parameters Type Name Description Guid layer Data scope layer Returns Type Description IWorkSet <T> Work set Type Parameters Name Description T Data object type"
  },
  "api/XData.Work.Add.html": {
    "href": "api/XData.Work.Add.html",
    "title": "Method Add | XData website",
    "keywords": "Method Add | Improve this Doc View Source Add<T>(T, Expression<Func<T, IWorkSet>>[]) Create work set based on single object Declaration public static IWorkSet<T> Add<T>(T data, params Expression<Func<T, IWorkSet>>[] workSets) where T : class, IDataObject, new() Parameters Type Name Description T data Data object Expression < Func <T, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description IWorkSet <T> Work set Type Parameters Name Description T Data object type See Also Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) | Improve this Doc View Source Add<T>(ICollection<T>, Expression<Func<T, IWorkSet>>[]) Create work set based on collection Declaration public static IWorkSet<T> Add<T>(ICollection<T> data, params Expression<Func<T, IWorkSet>>[] workSets) where T : class, IDataObject, new() Parameters Type Name Description ICollection <T> data Data object collection Expression < Func <T, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description IWorkSet <T> Work set Type Parameters Name Description T Data object type See Also Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[])"
  },
  "api/XData.Work.html": {
    "href": "api/XData.Work.html",
    "title": "Class Work | XData website",
    "keywords": "Class Work Work set helper class Inheritance Object Work Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.WorkSet.docfx.dll Syntax public static class Work Methods Name Description Add<T>(T, Expression<Func<T, IWorkSet>>[]) Create work set based on single object Add<T>(ICollection<T>, Expression<Func<T, IWorkSet>>[]) Create work set based on collection Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty single depended object initializer Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty depended collection initializer Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Existed depended collection initializer Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Existed single depended object initializer GetWorkSet<T>(Guid) Returns a cached work set See Also Add<T>(T, Expression<Func<T, IWorkSet>>[]) Add<T>(ICollection<T>, Expression<Func<T, IWorkSet>>[]) Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[])"
  },
  "api/XData.WithRecursiveType.html": {
    "href": "api/XData.WithRecursiveType.html",
    "title": "Enum WithRecursiveType | XData website",
    "keywords": "Enum WithRecursiveType Common-Table-Expression (WITH) Subquery type Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum WithRecursiveType Fields Name Description RecursiveUnion Recursive select with UNION combination RecursiveUnionAll Recursive select with ALL combination Extension Methods SerializationExtensions.ToXml<WithRecursiveType>() CollectionsExtensions.SetValue<WithRecursiveType, T>(T) CollectionsExtensions.AsEnum<WithRecursiveType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<WithRecursiveType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<WithRecursiveType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.VariableIndexer.Item.html": {
    "href": "api/XData.VariableIndexer.Item.html",
    "title": "Property Item | XData website",
    "keywords": "Property Item | Improve this Doc View Source Item[String] Variable indexer Declaration public object this[string name] { get; } Parameters Type Name Description String name Variable name Property Value Type Description Object Variable"
  },
  "api/XData.VariableIndexer.-ctor.html": {
    "href": "api/XData.VariableIndexer.-ctor.html",
    "title": "Constructor VariableIndexer | XData website",
    "keywords": "Constructor VariableIndexer | Improve this Doc View Source VariableIndexer(IEnumerable<Variable>) Variable indexer constructor Declaration public VariableIndexer(IEnumerable<Variable> variables) Parameters Type Name Description IEnumerable < Variable > variables Variables sequence"
  },
  "api/XData.VariableIndexer.Count.html": {
    "href": "api/XData.VariableIndexer.Count.html",
    "title": "Property Count | XData website",
    "keywords": "Property Count | Improve this Doc View Source Count Variables count Declaration public int Count { get; } Property Value Type Description Int32"
  },
  "api/XData.VariableIndexer.Contains.html": {
    "href": "api/XData.VariableIndexer.Contains.html",
    "title": "Method Contains | XData website",
    "keywords": "Method Contains | Improve this Doc View Source Contains(String) Variables contains name Declaration public bool Contains(string name) Parameters Type Name Description String name Variable name Returns Type Description Boolean Contains flag"
  },
  "api/XData.VariableIndexer.Set.html": {
    "href": "api/XData.VariableIndexer.Set.html",
    "title": "Method Set | XData website",
    "keywords": "Method Set | Improve this Doc View Source Set(VariableIndexer) Set variables values Declaration public VariableIndexer Set(VariableIndexer variables) Parameters Type Name Description VariableIndexer variables Variable indexer Returns Type Description VariableIndexer | Improve this Doc View Source Set(IEnumerable<Variable>) Set variables values Declaration public VariableIndexer Set(IEnumerable<Variable> variables) Parameters Type Name Description IEnumerable < Variable > variables Variables sequence Returns Type Description VariableIndexer | Improve this Doc View Source Set(Variable) Set variable value Declaration public VariableIndexer Set(Variable variable) Parameters Type Name Description Variable variable Variable Returns Type Description VariableIndexer | Improve this Doc View Source Set(String, String) Set variable value Declaration public VariableIndexer Set(string name, string value) Parameters Type Name Description String name Variable name String value Variable value Returns Type Description VariableIndexer"
  },
  "api/XData.VariableIndexer.html": {
    "href": "api/XData.VariableIndexer.html",
    "title": "Class VariableIndexer | XData website",
    "keywords": "Class VariableIndexer Data object variables indexer Inheritance Object VariableIndexer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public sealed class VariableIndexer Constructors Name Description VariableIndexer(IEnumerable<Variable>) Variable indexer constructor Properties Name Description Count Variables count Item[String] Variable indexer Methods Name Description Contains(String) Variables contains name Set(IEnumerable<Variable>) Set variables values Set(String, String) Set variable value Set(Variable) Set variable value Set(VariableIndexer) Set variables values Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Variable.Name.html": {
    "href": "api/XData.Variable.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Variable name Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.Variable.Value.html": {
    "href": "api/XData.Variable.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Variable value Declaration public object Value { get; } Property Value Type Description Object"
  },
  "api/XData.Variable.-ctor.html": {
    "href": "api/XData.Variable.-ctor.html",
    "title": "Constructor Variable | XData website",
    "keywords": "Constructor Variable | Improve this Doc View Source Variable(String, Object) Data object repository variable constructor Declaration public Variable(string name, object val) Parameters Type Name Description String name Variable name Object val Variable value"
  },
  "api/XData.Variable.ToString.html": {
    "href": "api/XData.Variable.ToString.html",
    "title": "Method ToString | XData website",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/XData.Variable.html": {
    "href": "api/XData.Variable.html",
    "title": "Class Variable | XData website",
    "keywords": "Class Variable Data object repository variable Inheritance Object Variable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData Assembly : XData.docfx.dll Syntax public sealed class Variable Constructors Name Description Variable(String, Object) Data object repository variable constructor Properties Name Description Name Variable name Value Variable value Methods Name Description ToString() Returns a string that represents the current object. Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Trigger-1.html": {
    "href": "api/XData.Trigger-1.html",
    "title": "Delegate Trigger<T> | XData website",
    "keywords": "Delegate Trigger<T> Trigger logic delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool Trigger<T>(ref T obj, ref DataTriggerFlag flag) where T : class, IDataObject; Parameters Type Name Description T obj Object instance DataTriggerFlag flag Trigger routing flag Returns Type Description Boolean Success flag Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also BeforeDelete BeforeInsert BeforeUpdate AfterDelete AfterInsert AfterUpdate"
  },
  "api/XData.SubmitQueryAttachedHandler-1.html": {
    "href": "api/XData.SubmitQueryAttachedHandler-1.html",
    "title": "Delegate SubmitQueryAttachedHandler<T> | XData website",
    "keywords": "Delegate SubmitQueryAttachedHandler<T> Lock object attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate QueryResult SubmitQueryAttachedHandler<in T>(T obj, Query query) where T : class, IDataObject; Parameters Type Name Description T obj Object instance Query query Query Returns Type Description QueryResult Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SubmitObjectAttachedHandler-1.html": {
    "href": "api/XData.SubmitObjectAttachedHandler-1.html",
    "title": "Delegate SubmitObjectAttachedHandler<T> | XData website",
    "keywords": "Delegate SubmitObjectAttachedHandler<T> Submit object attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool SubmitObjectAttachedHandler<T>(ref T obj, DataSubmitFlag flag) where T : class, IDataObject; Parameters Type Name Description T obj Object instance DataSubmitFlag flag Submit flag Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SubmitAttachedHandler-1.html": {
    "href": "api/XData.SubmitAttachedHandler-1.html",
    "title": "Delegate SubmitAttachedHandler<T> | XData website",
    "keywords": "Delegate SubmitAttachedHandler<T> Submit attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool SubmitAttachedHandler<in T>(IEnumerable<T> objects, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject; Parameters Type Name Description IEnumerable <T> objects Object sequence DataSubmitFlag flag Submit flag Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SetXmlAttachedHandler.html": {
    "href": "api/XData.SetXmlAttachedHandler.html",
    "title": "Delegate SetXmlAttachedHandler | XData website",
    "keywords": "Delegate SetXmlAttachedHandler Set Xml attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool SetXmlAttachedHandler(string property, IDataObject obj, string xml); Parameters Type Name Description String property Lob property name IDataObject obj Data object String xml Xml string Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SetLobAttachedHandler.html": {
    "href": "api/XData.SetLobAttachedHandler.html",
    "title": "Delegate SetLobAttachedHandler | XData website",
    "keywords": "Delegate SetLobAttachedHandler Set Lob attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate void SetLobAttachedHandler(string property, IDataObject obj, byte[] body); Parameters Type Name Description String property Lob property name IDataObject obj Data object Byte [] body Lob body Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SerializedValue.PropertyName.html": {
    "href": "api/XData.SerializedValue.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Property name Declaration [DataMember] public string PropertyName { get; set; } Property Value Type Description String"
  },
  "api/XData.SerializedValue.FieldName.html": {
    "href": "api/XData.SerializedValue.FieldName.html",
    "title": "Property FieldName | XData website",
    "keywords": "Property FieldName | Improve this Doc View Source FieldName Field name Declaration [DataMember] public string FieldName { get; set; } Property Value Type Description String"
  },
  "api/XData.SerializedValue.Original.html": {
    "href": "api/XData.SerializedValue.Original.html",
    "title": "Property Original | XData website",
    "keywords": "Property Original | Improve this Doc View Source Original Original value Declaration [DataMember] public string Original { get; set; } Property Value Type Description String"
  },
  "api/XData.SerializedValue.Value.html": {
    "href": "api/XData.SerializedValue.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Original value Declaration [DataMember] public string Value { get; set; } Property Value Type Description String"
  },
  "api/XData.SerializedValue.IsNotChanged.html": {
    "href": "api/XData.SerializedValue.IsNotChanged.html",
    "title": "Property IsNotChanged | XData website",
    "keywords": "Property IsNotChanged | Improve this Doc View Source IsNotChanged Not changed flag Declaration [DataMember] public bool IsNotChanged { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.SerializedValue.IsNull.html": {
    "href": "api/XData.SerializedValue.IsNull.html",
    "title": "Property IsNull | XData website",
    "keywords": "Property IsNull | Improve this Doc View Source IsNull Null value flag Declaration [DataMember] public bool IsNull { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.SerializedValue.TypeName.html": {
    "href": "api/XData.SerializedValue.TypeName.html",
    "title": "Property TypeName | XData website",
    "keywords": "Property TypeName | Improve this Doc View Source TypeName Value type name Declaration [DataMember] public string TypeName { get; set; } Property Value Type Description String"
  },
  "api/XData.SerializedValue.-ctor.html": {
    "href": "api/XData.SerializedValue.-ctor.html",
    "title": "Constructor SerializedValue | XData website",
    "keywords": "Constructor SerializedValue | Improve this Doc View Source SerializedValue(String, String, Object, Object) Serialized value constructor Declaration public SerializedValue(string propertyName, string fieldName, object original, object value) Parameters Type Name Description String propertyName Property name String fieldName Field name Object original Original value Object value Value"
  },
  "api/XData.SerializedValue.Serialize.html": {
    "href": "api/XData.SerializedValue.Serialize.html",
    "title": "Method Serialize | XData website",
    "keywords": "Method Serialize | Improve this Doc View Source Serialize(Object) Serialize value Declaration public static string Serialize(object value) Parameters Type Name Description Object value Value Returns Type Description String String value representation"
  },
  "api/XData.SerializedValue.Deserialize.html": {
    "href": "api/XData.SerializedValue.Deserialize.html",
    "title": "Method Deserialize | XData website",
    "keywords": "Method Deserialize | Improve this Doc View Source Deserialize(Type, String) Deserialize value Declaration public static object Deserialize(Type type, string value) Parameters Type Name Description Type type Data type String value String value representation Returns Type Description Object Value"
  },
  "api/XData.SerializedValue.GetValue.html": {
    "href": "api/XData.SerializedValue.GetValue.html",
    "title": "Method GetValue | XData website",
    "keywords": "Method GetValue | Improve this Doc View Source GetValue(Type) Returns serialized value Declaration public object GetValue(Type type) Parameters Type Name Description Type type Returns Type Description Object"
  },
  "api/XData.SerializedValue.html": {
    "href": "api/XData.SerializedValue.html",
    "title": "Class SerializedValue | XData website",
    "keywords": "Class SerializedValue Serialized data value Inheritance Object SerializedValue Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public class SerializedValue Constructors Name Description SerializedValue(String, String, Object, Object) Serialized value constructor Properties Name Description FieldName Field name IsNotChanged Not changed flag IsNull Null value flag Original Original value PropertyName Property name TypeName Value type name Value Original value Methods Name Description Deserialize(Type, String) Deserialize value GetValue(Type) Returns serialized value Serialize(Object) Serialize value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SerializedData.State.html": {
    "href": "api/XData.SerializedData.State.html",
    "title": "Property State | XData website",
    "keywords": "Property State | Improve this Doc View Source State DataObject state Declaration [DataMember] public DataObjectState State { get; set; } Property Value Type Description DataObjectState"
  },
  "api/XData.SerializedData.Data.html": {
    "href": "api/XData.SerializedData.Data.html",
    "title": "Property Data | XData website",
    "keywords": "Property Data | Improve this Doc View Source Data Serialized data Declaration [DataMember] public SerializedValue[] Data { get; set; } Property Value Type Description SerializedValue []"
  },
  "api/XData.SerializedData.ObjectType.html": {
    "href": "api/XData.SerializedData.ObjectType.html",
    "title": "Property ObjectType | XData website",
    "keywords": "Property ObjectType | Improve this Doc View Source ObjectType Object type Declaration [DataMember] public string ObjectType { get; } Property Value Type Description String"
  },
  "api/XData.SerializedData.-ctor.html": {
    "href": "api/XData.SerializedData.-ctor.html",
    "title": "Constructor SerializedData | XData website",
    "keywords": "Constructor SerializedData | Improve this Doc View Source SerializedData(IRepository, IDataObject) Serialized data constructor Declaration public SerializedData(IRepository repository, IDataObject obj) Parameters Type Name Description IRepository repository Repository IDataObject obj Data object to serialize"
  },
  "api/XData.SerializedData.IsFieldNull.html": {
    "href": "api/XData.SerializedData.IsFieldNull.html",
    "title": "Method IsFieldNull | XData website",
    "keywords": "Method IsFieldNull | Improve this Doc View Source IsFieldNull(String) Serialized data field value is null Declaration public bool IsFieldNull(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description Boolean Field value is null"
  },
  "api/XData.SerializedData.HasFieldValue.html": {
    "href": "api/XData.SerializedData.HasFieldValue.html",
    "title": "Method HasFieldValue | XData website",
    "keywords": "Method HasFieldValue | Improve this Doc View Source HasFieldValue(String) Serialized data has field value Declaration public bool HasFieldValue(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description Boolean Field value found"
  },
  "api/XData.SerializedData.GetFieldValue.html": {
    "href": "api/XData.SerializedData.GetFieldValue.html",
    "title": "Method GetFieldValue | XData website",
    "keywords": "Method GetFieldValue | Improve this Doc View Source GetFieldValue(Type, String) Returns field value Declaration public object GetFieldValue(Type type, string fieldName) Parameters Type Name Description Type type Field type String fieldName Field name Returns Type Description Object Field value Exceptions Type Condition XDataRuntimeException serialized data has not contains requested field."
  },
  "api/XData.SerializedData.ToString.html": {
    "href": "api/XData.SerializedData.ToString.html",
    "title": "Method ToString | XData website",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString()"
  },
  "api/XData.SerializedData.html": {
    "href": "api/XData.SerializedData.html",
    "title": "Class SerializedData | XData website",
    "keywords": "Class SerializedData Serialized data Inheritance Object SerializedData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public class SerializedData Constructors Name Description SerializedData(IRepository, IDataObject) Serialized data constructor Properties Name Description Data Serialized data ObjectType Object type State DataObject state Methods Name Description GetFieldValue(Type, String) Returns field value HasFieldValue(String) Serialized data has field value IsFieldNull(String) Serialized data field value is null ToString() Returns a String that represents the current Object . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SerializationExtensions.ToXml.html": {
    "href": "api/XData.SerializationExtensions.ToXml.html",
    "title": "Method ToXml | XData website",
    "keywords": "Method ToXml | Improve this Doc View Source ToXml<T>(T) Serialize helper Declaration public static string ToXml<T>(this T source) Parameters Type Name Description T source Object to serialize Returns Type Description String Serialized collection Type Parameters Name Description T Object type"
  },
  "api/XData.SerializationExtensions.ObjectToXml.html": {
    "href": "api/XData.SerializationExtensions.ObjectToXml.html",
    "title": "Method ObjectToXml | XData website",
    "keywords": "Method ObjectToXml | Improve this Doc View Source ObjectToXml(Object) Serialize object data to Xml Declaration public static string ObjectToXml(object source) Parameters Type Name Description Object source Object to serialize Returns Type Description String Xml string"
  },
  "api/XData.SerializationExtensions.ReadXml.html": {
    "href": "api/XData.SerializationExtensions.ReadXml.html",
    "title": "Method ReadXml | XData website",
    "keywords": "Method ReadXml | Improve this Doc View Source ReadXml<T>(String) Deserialize helper Declaration public static T ReadXml<T>(this string source) Parameters Type Name Description String source String contained serialized object Returns Type Description T De-serialized object Type Parameters Name Description T Object type"
  },
  "api/XData.SerializationExtensions.Serialize.html": {
    "href": "api/XData.SerializationExtensions.Serialize.html",
    "title": "Method Serialize | XData website",
    "keywords": "Method Serialize | Improve this Doc View Source Serialize<T>(IDataQuery<T>, TextWriter) Serialize data query helper Declaration public static void Serialize<T>(this IDataQuery<T> query, TextWriter writer) where T : class, IDataObject, new() Parameters Type Name Description IDataQuery <T> query Query TextWriter writer Writer to serialize Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Writer is null See Also GetRepository<T>(TextReader) | Improve this Doc View Source Serialize<T>(IRepository<T>, TextWriter) Serialize repository helper Declaration public static void Serialize<T>(this IRepository<T> repository, TextWriter writer) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> repository Repository TextWriter writer Writer to serialize Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Writer is null See Also GetRepository<T>(TextReader) | Improve this Doc View Source Serialize<T>(T) Get serialized data from object Declaration public static SerializedData Serialize<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Returns Type Description SerializedData Serialized data Type Parameters Name Description T Data object type See Also Restore<T> (T, SerializedData ) | Improve this Doc View Source Serialize<T>(IEnumerable<T>) Get serialized data from objects sequence Declaration public static SerializedData[] Serialize<T>(this IEnumerable<T> objects) where T : class, IDataObject, new() Parameters Type Name Description IEnumerable <T> objects Data objects sequence Returns Type Description SerializedData [] Serialized data Type Parameters Name Description T Data object type See Also Restore<T> (T, SerializedData )"
  },
  "api/XData.SerializationExtensions.Restore.html": {
    "href": "api/XData.SerializationExtensions.Restore.html",
    "title": "Method Restore | XData website",
    "keywords": "Method Restore | Improve this Doc View Source Restore<T>(T, SerializedData) Set serialized data to object Declaration public static void Restore<T>(this T obj, SerializedData data) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance SerializedData data Serialized data Type Parameters Name Description T Data object type Exceptions Type Condition XDataQueryStructureException serialized data contains not mapped properties. XDataRuntimeException serialized data is null. XDataRuntimeException serialized data have a wrong type. See Also Serialize<T> (T) Serialize<T>(IEnumerable<T>)"
  },
  "api/XData.SerializationExtensions.html": {
    "href": "api/XData.SerializationExtensions.html",
    "title": "Class SerializationExtensions | XData website",
    "keywords": "Class SerializationExtensions Serialization extensions Inheritance Object SerializationExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public static class SerializationExtensions Methods Name Description ObjectToXml(Object) Serialize object data to Xml ReadXml<T>(String) Deserialize helper Restore<T>(T, SerializedData) Set serialized data to object Serialize<T>(T) Get serialized data from object Serialize<T>(IEnumerable<T>) Get serialized data from objects sequence Serialize<T>(IDataQuery<T>, TextWriter) Serialize data query helper Serialize<T>(IRepository<T>, TextWriter) Serialize repository helper ToXml<T>(T) Serialize helper"
  },
  "api/XData.Security.html": {
    "href": "api/XData.Security.html",
    "title": "Namespace XData.Security | XData website",
    "keywords": "Namespace XData.Security Classes SecuritySession Security session base class"
  },
  "api/XData.Security.SecuritySession.Roles.html": {
    "href": "api/XData.Security.SecuritySession.Roles.html",
    "title": "Property Roles | XData website",
    "keywords": "Property Roles | Improve this Doc View Source Roles Current user roles list Declaration public string[] Roles { get; protected set; } Property Value Type Description String []"
  },
  "api/XData.Security.SecuritySession.IsSupervisor.html": {
    "href": "api/XData.Security.SecuritySession.IsSupervisor.html",
    "title": "Property IsSupervisor | XData website",
    "keywords": "Property IsSupervisor | Improve this Doc View Source IsSupervisor Current user is supervisor flag Declaration public bool IsSupervisor { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Security.SecuritySession.UserName.html": {
    "href": "api/XData.Security.SecuritySession.UserName.html",
    "title": "Property UserName | XData website",
    "keywords": "Property UserName | Improve this Doc View Source UserName Current user name Declaration public string UserName { get; protected set; } Property Value Type Description String"
  },
  "api/XData.Security.SecuritySession.-ctor.html": {
    "href": "api/XData.Security.SecuritySession.-ctor.html",
    "title": "Constructor SecuritySession | XData website",
    "keywords": "Constructor SecuritySession | Improve this Doc View Source SecuritySession(String, String[], Boolean) Security session constructor Declaration public SecuritySession(string userName, string[] roles, bool isSupervisor = false) Parameters Type Name Description String userName User name String [] roles User roles Boolean isSupervisor Supervisor flag"
  },
  "api/XData.Security.SecuritySession.InitializeSession.html": {
    "href": "api/XData.Security.SecuritySession.InitializeSession.html",
    "title": "Method InitializeSession | XData website",
    "keywords": "Method InitializeSession | Improve this Doc View Source InitializeSession() Session initialization Declaration protected abstract void InitializeSession() See Also RegisterGrantedActions(String, Type, IEnumerable<KeyValuePair<String, String[]>>) RegisterRestrictedProperties(String, Type, IEnumerable<KeyValuePair<String, String[]>>) RegisterSecurityFilters(String, Type, IEnumerable<KeyValuePair<String, Expression>>)"
  },
  "api/XData.Security.SecuritySession.RegisterRestrictedProperties.html": {
    "href": "api/XData.Security.SecuritySession.RegisterRestrictedProperties.html",
    "title": "Method RegisterRestrictedProperties | XData website",
    "keywords": "Method RegisterRestrictedProperties | Improve this Doc View Source RegisterRestrictedProperties(String, Type, IEnumerable<KeyValuePair<String, String[]>>) Restricted properties registration Declaration protected void RegisterRestrictedProperties(string context, Type type, IEnumerable<KeyValuePair<string, string[]>> restricted) Parameters Type Name Description String context Context name Type type Data type to restrict property access IEnumerable < KeyValuePair < String , String []>> restricted Restricted properties"
  },
  "api/XData.Security.SecuritySession.RegisterGrantedActions.html": {
    "href": "api/XData.Security.SecuritySession.RegisterGrantedActions.html",
    "title": "Method RegisterGrantedActions | XData website",
    "keywords": "Method RegisterGrantedActions | Improve this Doc View Source RegisterGrantedActions(String, Type, IEnumerable<KeyValuePair<String, String[]>>) Granted actions registration Declaration protected void RegisterGrantedActions(string context, Type type, IEnumerable<KeyValuePair<string, string[]>> actions) Parameters Type Name Description String context Context name Type type Data type to grant actions IEnumerable < KeyValuePair < String , String []>> actions Granted actions"
  },
  "api/XData.Security.SecuritySession.RegisterSecurityFilters.html": {
    "href": "api/XData.Security.SecuritySession.RegisterSecurityFilters.html",
    "title": "Method RegisterSecurityFilters | XData website",
    "keywords": "Method RegisterSecurityFilters | Improve this Doc View Source RegisterSecurityFilters(String, Type, IEnumerable<KeyValuePair<String, Expression>>) Security filters registration Declaration protected void RegisterSecurityFilters(string context, Type type, IEnumerable<KeyValuePair<string, Expression>> filters) Parameters Type Name Description String context Context name Type type Data type to filter data IEnumerable < KeyValuePair < String , Expression >> filters Security filters"
  },
  "api/XData.Security.SecuritySession.GetRestrictedProperties.html": {
    "href": "api/XData.Security.SecuritySession.GetRestrictedProperties.html",
    "title": "Method GetRestrictedProperties | XData website",
    "keywords": "Method GetRestrictedProperties | Improve this Doc View Source GetRestrictedProperties<T>(String) Returns list of restricted properties for current user Declaration public string[] GetRestrictedProperties<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description String [] Properties name list Type Parameters Name Description T Data object type"
  },
  "api/XData.Security.SecuritySession.FilterGrantedObjects.html": {
    "href": "api/XData.Security.SecuritySession.FilterGrantedObjects.html",
    "title": "Method FilterGrantedObjects | XData website",
    "keywords": "Method FilterGrantedObjects | Improve this Doc View Source FilterGrantedObjects<T>(String, Expression) Converts initial IQueryable expression filtering granted objects only Declaration public Expression FilterGrantedObjects<T>(string context, Expression allDataExpr) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Expression allDataExpr Initial IQueryable expression Returns Type Description Expression Modified IQueryable expression Type Parameters Name Description T Data object type"
  },
  "api/XData.Security.SecuritySession.GetGrantedActions.html": {
    "href": "api/XData.Security.SecuritySession.GetGrantedActions.html",
    "title": "Method GetGrantedActions | XData website",
    "keywords": "Method GetGrantedActions | Improve this Doc View Source GetGrantedActions<T>(String) Returns list of granted actions for current user Declaration public string[] GetGrantedActions<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description String [] Actions list Type Parameters Name Description T Data object type"
  },
  "api/XData.Security.SecuritySession.Action.html": {
    "href": "api/XData.Security.SecuritySession.Action.html",
    "title": "Method Action | XData website",
    "keywords": "Method Action | Improve this Doc View Source Action<T>(Expression<Func<CustomLogic<T>>>) Custom action name access helper Declaration protected static string Action<T>(Expression<Func<CustomLogic<T>>> expr) where T : class, IDataObject, new() Parameters Type Name Description Expression < Func < CustomLogic <T>>> expr Custom logic expression Returns Type Description String Custom action name Type Parameters Name Description T Data object type"
  },
  "api/XData.Security.SecuritySession.Property.html": {
    "href": "api/XData.Security.SecuritySession.Property.html",
    "title": "Method Property | XData website",
    "keywords": "Method Property | Improve this Doc View Source Property<T>(Expression<Func<T, Object>>) Property name access helper Declaration protected static string Property<T>(Expression<Func<T, object>> expr) where T : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, Object >> expr Property expression Returns Type Description String Property name Type Parameters Name Description T Data object type"
  },
  "api/XData.Security.SecuritySession.html": {
    "href": "api/XData.Security.SecuritySession.html",
    "title": "Class SecuritySession | XData website",
    "keywords": "Class SecuritySession Security session base class Inheritance Object SecuritySession Namespace : XData.Security Assembly : XData.Security.docfx.dll Syntax public abstract class SecuritySession : ISecuritySession Constructors Name Description SecuritySession(String, String[], Boolean) Security session constructor Properties Name Description IsSupervisor Current user is supervisor flag Roles Current user roles list UserName Current user name Methods Name Description Action<T>(Expression<Func<CustomLogic<T>>>) Custom action name access helper FilterGrantedObjects<T>(String, Expression) Converts initial IQueryable expression filtering granted objects only GetGrantedActions<T>(String) Returns list of granted actions for current user GetRestrictedProperties<T>(String) Returns list of restricted properties for current user InitializeSession() Session initialization Property<T>(Expression<Func<T, Object>>) Property name access helper RegisterGrantedActions(String, Type, IEnumerable<KeyValuePair<String, String[]>>) Granted actions registration RegisterRestrictedProperties(String, Type, IEnumerable<KeyValuePair<String, String[]>>) Restricted properties registration RegisterSecurityFilters(String, Type, IEnumerable<KeyValuePair<String, Expression>>) Security filters registration Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.RuntimeAssemblyLoader.-ctor.html": {
    "href": "api/XData.RuntimeAssemblyLoader.-ctor.html",
    "title": "Constructor RuntimeAssemblyLoader | XData website",
    "keywords": "Constructor RuntimeAssemblyLoader | Improve this Doc View Source RuntimeAssemblyLoader(String) Declaration public RuntimeAssemblyLoader(string folderPath) Parameters Type Name Description String folderPath"
  },
  "api/XData.RuntimeAssemblyLoader.Load.html": {
    "href": "api/XData.RuntimeAssemblyLoader.Load.html",
    "title": "Method Load | XData website",
    "keywords": "Method Load | Improve this Doc View Source Load(AssemblyName) Declaration protected override Assembly Load(AssemblyName assemblyName) Parameters Type Name Description AssemblyName assemblyName Returns Type Description Assembly Overrides AssemblyLoadContext.Load(AssemblyName)"
  },
  "api/XData.RuntimeAssemblyLoader.LoadUnmanagedDll.html": {
    "href": "api/XData.RuntimeAssemblyLoader.LoadUnmanagedDll.html",
    "title": "Method LoadUnmanagedDll | XData website",
    "keywords": "Method LoadUnmanagedDll | Improve this Doc View Source LoadUnmanagedDll(String) Declaration protected override IntPtr LoadUnmanagedDll(string unmanagedDllName) Parameters Type Name Description String unmanagedDllName Returns Type Description IntPtr Overrides AssemblyLoadContext.LoadUnmanagedDll(String)"
  },
  "api/XData.RuntimeAssemblyLoader.html": {
    "href": "api/XData.RuntimeAssemblyLoader.html",
    "title": "Class RuntimeAssemblyLoader | XData website",
    "keywords": "Class RuntimeAssemblyLoader Inheritance Object AssemblyLoadContext RuntimeAssemblyLoader Inherited Members AssemblyLoadContext.GetAssemblyName(String) AssemblyLoadContext.GetLoadContext(Assembly) AssemblyLoadContext.LoadFromAssemblyName(AssemblyName) AssemblyLoadContext.LoadFromAssemblyPath(String) AssemblyLoadContext.LoadFromNativeImagePath(String, String) AssemblyLoadContext.LoadFromStream(Stream) AssemblyLoadContext.LoadFromStream(Stream, Stream) AssemblyLoadContext.LoadUnmanagedDllFromPath(String) AssemblyLoadContext.SetProfileOptimizationRoot(String) AssemblyLoadContext.StartProfileOptimization(String) AssemblyLoadContext.Default AssemblyLoadContext.Resolving AssemblyLoadContext.Unloading Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public class RuntimeAssemblyLoader : AssemblyLoadContext Constructors Name Description RuntimeAssemblyLoader(String) Methods Name Description Load(AssemblyName) LoadUnmanagedDll(String) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.ResultSetIndexer.Item.html": {
    "href": "api/XData.ResultSetIndexer.Item.html",
    "title": "Property Item | XData website",
    "keywords": "Property Item | Improve this Doc View Source Item[String] Result set data rows Declaration public DataTable this[string name] { get; } Parameters Type Name Description String name Result set name Property Value Type Description DataTable"
  },
  "api/XData.ResultSetIndexer.Count.html": {
    "href": "api/XData.ResultSetIndexer.Count.html",
    "title": "Property Count | XData website",
    "keywords": "Property Count | Improve this Doc View Source Count Variables count Declaration public int Count { get; } Property Value Type Description Int32"
  },
  "api/XData.ResultSetIndexer.Contains.html": {
    "href": "api/XData.ResultSetIndexer.Contains.html",
    "title": "Method Contains | XData website",
    "keywords": "Method Contains | Improve this Doc View Source Contains(String) Variables contains name Declaration public bool Contains(string name) Parameters Type Name Description String name Variable name Returns Type Description Boolean Contains flag"
  },
  "api/XData.ResultSetIndexer.GetResultSet.html": {
    "href": "api/XData.ResultSetIndexer.GetResultSet.html",
    "title": "Method GetResultSet | XData website",
    "keywords": "Method GetResultSet | Improve this Doc View Source GetResultSet<T>(String) Returns typed result collection Declaration public IEnumerable<T> GetResultSet<T>(string name) where T : class Parameters Type Name Description String name Result set name Returns Type Description IEnumerable <T> Types result collection Type Parameters Name Description T Result set element mapped type"
  },
  "api/XData.ResultSetIndexer.html": {
    "href": "api/XData.ResultSetIndexer.html",
    "title": "Class ResultSetIndexer | XData website",
    "keywords": "Class ResultSetIndexer SQL procedure call out result sets indexer Inheritance Object ResultSetIndexer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public sealed class ResultSetIndexer Properties Name Description Count Variables count Item[String] Result set data rows Methods Name Description Contains(String) Variables contains name GetResultSet<T>(String) Returns typed result collection Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.RepositoryTrigger-1.html": {
    "href": "api/XData.RepositoryTrigger-1.html",
    "title": "Delegate RepositoryTrigger<T> | XData website",
    "keywords": "Delegate RepositoryTrigger<T> RepositoryTrigger logic delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool RepositoryTrigger<T>(IRepository<T> repository, ref DataTriggerFlag flag) where T : class, IDataObject; Parameters Type Name Description IRepository <T> repository Repository DataTriggerFlag flag Trigger routing flag Returns Type Description Boolean Success flag Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also BeforeClear AfterClear"
  },
  "api/XData.RepositoryIndexer.Item.html": {
    "href": "api/XData.RepositoryIndexer.Item.html",
    "title": "Property Item | XData website",
    "keywords": "Property Item | Improve this Doc View Source Item[String] Repository indexer Declaration public IRepository this[string alias] { get; } Parameters Type Name Description String alias Repository alias Property Value Type Description IRepository"
  },
  "api/XData.RepositoryIndexer.Count.html": {
    "href": "api/XData.RepositoryIndexer.Count.html",
    "title": "Property Count | XData website",
    "keywords": "Property Count | Improve this Doc View Source Count Indexer count Declaration public int Count { get; } Property Value Type Description Int32"
  },
  "api/XData.RepositoryIndexer.Contains.html": {
    "href": "api/XData.RepositoryIndexer.Contains.html",
    "title": "Method Contains | XData website",
    "keywords": "Method Contains | Improve this Doc View Source Contains(String) Indexer contains repository by alias Declaration public bool Contains(string alias) Parameters Type Name Description String alias Repository alias Returns Type Description Boolean Contains flag"
  },
  "api/XData.RepositoryIndexer.GetEnumerator.html": {
    "href": "api/XData.RepositoryIndexer.GetEnumerator.html",
    "title": "Method GetEnumerator | XData website",
    "keywords": "Method GetEnumerator | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IRepository> GetEnumerator() Returns Type Description IEnumerator < IRepository > A IEnumerator<T> that can be used to iterate through the collection. Implements IEnumerable<T>.GetEnumerator()"
  },
  "api/XData.RepositoryIndexer.System-Collections-IEnumerable-GetEnumerator.html": {
    "href": "api/XData.RepositoryIndexer.System-Collections-IEnumerable-GetEnumerator.html",
    "title": "Method IEnumerable.GetEnumerator | XData website",
    "keywords": "Method IEnumerable.GetEnumerator | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. Implements IEnumerable.GetEnumerator()"
  },
  "api/XData.RepositoryIndexer.html": {
    "href": "api/XData.RepositoryIndexer.html",
    "title": "Class RepositoryIndexer | XData website",
    "keywords": "Class RepositoryIndexer Data object links (parents and childs) indexer Inheritance Object RepositoryIndexer Implements IEnumerable < IRepository > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public sealed class RepositoryIndexer : IEnumerable<IRepository>, IEnumerable Properties Name Description Count Indexer count Item[String] Repository indexer Methods Name Description Contains(String) Indexer contains repository by alias GetEnumerator() Returns an enumerator that iterates through the collection. Explicit Interface Implementations Name Description IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.RepositoryAttachedHandler-1.op_Implicit.html": {
    "href": "api/XData.RepositoryAttachedHandler-1.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(SubmitAttachedHandler<T> to RepositoryAttachedHandler<T>) Implicitly wrap submit handler Declaration public static implicit operator RepositoryAttachedHandler<T>(SubmitAttachedHandler<T> handler) Parameters Type Name Description SubmitAttachedHandler <T> handler Submit handler Returns Type Description RepositoryAttachedHandler <T> Repository attached handler | Improve this Doc View Source Implicit(ClearAttachedHandler to RepositoryAttachedHandler<T>) Implicitly wrap clear handler Declaration public static implicit operator RepositoryAttachedHandler<T>(ClearAttachedHandler handler) Parameters Type Name Description ClearAttachedHandler handler Clear handler Returns Type Description RepositoryAttachedHandler <T> Repository attached handler | Improve this Doc View Source Implicit(ExecuteAttachedHandler<T> to RepositoryAttachedHandler<T>) Implicitly wrap execute handler Declaration public static implicit operator RepositoryAttachedHandler<T>(ExecuteAttachedHandler<T> handler) Parameters Type Name Description ExecuteAttachedHandler <T> handler Execute handler Returns Type Description RepositoryAttachedHandler <T> Repository attached handler"
  },
  "api/XData.RepositoryAttachedHandler-1.op_Explicit.html": {
    "href": "api/XData.RepositoryAttachedHandler-1.op_Explicit.html",
    "title": "Operator Explicit | XData website",
    "keywords": "Operator Explicit | Improve this Doc View Source Explicit(RepositoryAttachedHandler<T> to SubmitAttachedHandler<T>) Explicitly unwrap submit handler Declaration public static explicit operator SubmitAttachedHandler<T>(RepositoryAttachedHandler<T> handler) Parameters Type Name Description RepositoryAttachedHandler <T> handler Wrapped handler Returns Type Description SubmitAttachedHandler <T> Unwrapped attached handler | Improve this Doc View Source Explicit(RepositoryAttachedHandler<T> to ClearAttachedHandler) Explicitly unwrap clear handler Declaration public static explicit operator ClearAttachedHandler(RepositoryAttachedHandler<T> handler) Parameters Type Name Description RepositoryAttachedHandler <T> handler Wrapped handler Returns Type Description ClearAttachedHandler Unwrapped attached handler | Improve this Doc View Source Explicit(RepositoryAttachedHandler<T> to ExecuteAttachedHandler<T>) Explicitly unwrap execute handler Declaration public static explicit operator ExecuteAttachedHandler<T>(RepositoryAttachedHandler<T> handler) Parameters Type Name Description RepositoryAttachedHandler <T> handler Wrapped handler Returns Type Description ExecuteAttachedHandler <T> Unwrapped attached handler"
  },
  "api/XData.RepositoryAttachedHandler-1.html": {
    "href": "api/XData.RepositoryAttachedHandler-1.html",
    "title": "Class RepositoryAttachedHandler<T> | XData website",
    "keywords": "Class RepositoryAttachedHandler<T> Repository level attached handler wrapper Inheritance Object AttachedHandler <T> RepositoryAttachedHandler<T> Inherited Members AttachedHandler<T>.Type AttachedHandler<T>.Handler Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public sealed class RepositoryAttachedHandler<T> : AttachedHandler<T> where T : class, IDataObject Type Parameters Name Description T Operators Name Description Explicit(RepositoryAttachedHandler<T> to ClearAttachedHandler) Explicitly unwrap clear handler Explicit(RepositoryAttachedHandler<T> to ExecuteAttachedHandler<T>) Explicitly unwrap execute handler Explicit(RepositoryAttachedHandler<T> to SubmitAttachedHandler<T>) Explicitly unwrap submit handler Implicit(ClearAttachedHandler to RepositoryAttachedHandler<T>) Implicitly wrap clear handler Implicit(ExecuteAttachedHandler<T> to RepositoryAttachedHandler<T>) Implicitly wrap execute handler Implicit(SubmitAttachedHandler<T> to RepositoryAttachedHandler<T>) Implicitly wrap submit handler Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.RefreshAttachedHandler-1.html": {
    "href": "api/XData.RefreshAttachedHandler-1.html",
    "title": "Delegate RefreshAttachedHandler<T> | XData website",
    "keywords": "Delegate RefreshAttachedHandler<T> Refresh attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool RefreshAttachedHandler<T>(ref T obj) where T : class, IDataObject; Parameters Type Name Description T obj Object instance Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.ProcedureType.html": {
    "href": "api/XData.ProcedureType.html",
    "title": "Enum ProcedureType | XData website",
    "keywords": "Enum ProcedureType SQL stored procedure type Namespace : XData Assembly : XData.docfx.dll Syntax public enum ProcedureType Fields Name Description Function Function Procedure Stored procedure See Also Procedure Function Extension Methods SerializationExtensions.ToXml<ProcedureType>() CollectionsExtensions.SetValue<ProcedureType, T>(T) CollectionsExtensions.AsEnum<ProcedureType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<ProcedureType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<ProcedureType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.ParameterIndexer.Item.html": {
    "href": "api/XData.ParameterIndexer.Item.html",
    "title": "Property Item | XData website",
    "keywords": "Property Item | Improve this Doc View Source Item[String] Parameter indexer Declaration public IParameterDescription this[string name] { get; } Parameters Type Name Description String name Parameter name Property Value Type Description IParameterDescription Variable"
  },
  "api/XData.ParameterIndexer.-ctor.html": {
    "href": "api/XData.ParameterIndexer.-ctor.html",
    "title": "Constructor ParameterIndexer | XData website",
    "keywords": "Constructor ParameterIndexer | Improve this Doc View Source ParameterIndexer(IEnumerable<IParameterDescription>) Parameter indexer constructor Declaration public ParameterIndexer(IEnumerable<IParameterDescription> parameters) Parameters Type Name Description IEnumerable < IParameterDescription > parameters Parameter sequence"
  },
  "api/XData.ParameterIndexer.Count.html": {
    "href": "api/XData.ParameterIndexer.Count.html",
    "title": "Property Count | XData website",
    "keywords": "Property Count | Improve this Doc View Source Count Variables count Declaration public int Count { get; } Property Value Type Description Int32"
  },
  "api/XData.ParameterIndexer.Contains.html": {
    "href": "api/XData.ParameterIndexer.Contains.html",
    "title": "Method Contains | XData website",
    "keywords": "Method Contains | Improve this Doc View Source Contains(String) Variables contains name Declaration public bool Contains(string name) Parameters Type Name Description String name Variable name Returns Type Description Boolean Contains flag"
  },
  "api/XData.ParameterIndexer.Add.html": {
    "href": "api/XData.ParameterIndexer.Add.html",
    "title": "Method Add | XData website",
    "keywords": "Method Add | Improve this Doc View Source Add(ParameterIndexer) Add variables to collection Declaration public void Add(ParameterIndexer variables) Parameters Type Name Description ParameterIndexer variables Variable indexer | Improve this Doc View Source Add(IParameterDescription) Add parameter Declaration public void Add(IParameterDescription parameter) Parameters Type Name Description IParameterDescription parameter Variable"
  },
  "api/XData.ParameterIndexer.GetValue.html": {
    "href": "api/XData.ParameterIndexer.GetValue.html",
    "title": "Method GetValue | XData website",
    "keywords": "Method GetValue | Improve this Doc View Source GetValue<T>(String) Returns parameter value Declaration public T GetValue<T>(string name) Parameters Type Name Description String name Parameter name Returns Type Description T Parameter value Type Parameters Name Description T Parameter type | Improve this Doc View Source GetValue(String) Returns parameter value Declaration public object GetValue(string name) Parameters Type Name Description String name Parameter name Returns Type Description Object Parameter value"
  },
  "api/XData.ParameterIndexer.html": {
    "href": "api/XData.ParameterIndexer.html",
    "title": "Class ParameterIndexer | XData website",
    "keywords": "Class ParameterIndexer SQL procedure call out parameters indexer Inheritance Object ParameterIndexer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public sealed class ParameterIndexer Constructors Name Description ParameterIndexer(IEnumerable<IParameterDescription>) Parameter indexer constructor Properties Name Description Count Variables count Item[String] Parameter indexer Methods Name Description Add(IParameterDescription) Add parameter Add(ParameterIndexer) Add variables to collection Contains(String) Variables contains name GetValue(String) Returns parameter value GetValue<T>(String) Returns parameter value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.MessageType.html": {
    "href": "api/XData.MessageType.html",
    "title": "Enum MessageType | XData website",
    "keywords": "Enum MessageType Log message type Namespace : XData Assembly : XData.docfx.dll Syntax public enum MessageType Fields Name Description Debug Debug log entry Error Error log entry Information Information log entry Warning Warning log entry See Also Error Information Debug Extension Methods SerializationExtensions.ToXml<MessageType>() CollectionsExtensions.SetValue<MessageType, T>(T) CollectionsExtensions.AsEnum<MessageType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<MessageType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<MessageType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.html": {
    "href": "api/XData.Mapping.html",
    "title": "Namespace XData.Mapping | XData website",
    "keywords": "Namespace XData.Mapping Classes ActionAttribute Data action attribute ColumnAttribute Column mapping attribute ColumnDefaultAttribute Column default value attribute ColumnExpressionAttribute Column expression attribute ColumnUpdateWithAttribute Column update source expression attribute ConstantFilterAttribute Data object constant value filter attribute DataObjectAttribute Data object metadata attribute DataSourceAttribute Base data object source attribute DataTableAttribute Data object table attribute DictionaryFilterAttribute Data object dictionary filter attribute ExpressionFilterAttribute Data object plain SQL expression filter attribute ExternalLinkAttribute Data object external link to other (child) data objects attribute FilterAttribute Base inner filter attribute FilterBaseAttribute Base filter description attribute FilterCombinationAttribute Data object filter combination (filter group) attribute HierarchyAttribute Hierarchy attribute HintAttribute HintInfo Hint description InnerViewAttribute Data object inner view attribute Link<TVal, TSrc> Dictionary link wrapper LinkAttribute Base link attribute LinkPropertyAttribute Data object link property attribute Lob Blob field wrapper OptionalFilterAttribute Base optional filter attribute ParameterAttribute SQL stored procedure/function parameter ProcedureAttribute Data object SQL procedure / function attribute PropertyAttribute Data object property attribute PropertyBaseAttribute Data property base attribute PropertyDefaultAttribute Data object property default value attribute PropertyExpressionAttribute Data object property plain expression attribute PropertyGroupingAttribute Data object property grouping attribute PropertyUpdateWithAttribute Data object property update source expression attribute RangeFilterAttribute Data object range filter attribute ReferenceAttribute Data object referenced inner view property attribute ResultSetAttribute SQL stored procedure/function result set SqlExpressionAttribute Sql expression name SubqueryAttribute Data object subquery attribute SubqueryFilterAttribute Data object subquery filter attribute SubqueryLinkAttribute Data object link to subquery attribute WithAttribute Common-Table-Expression (WITH) Subquery data source WithRecursiveAttribute Common-Table-Expression (WITH) recursive subquery data source Xml Xml field wrapper Enums HintType Hint type"
  },
  "api/XData.Mapping.Xml.Document.html": {
    "href": "api/XData.Mapping.Xml.Document.html",
    "title": "Property Document | XData website",
    "keywords": "Property Document | Improve this Doc View Source Document Xml document Declaration public abstract XDocument Document { get; set; } Property Value Type Description XDocument"
  },
  "api/XData.Mapping.Xml.Assigned.html": {
    "href": "api/XData.Mapping.Xml.Assigned.html",
    "title": "Property Assigned | XData website",
    "keywords": "Property Assigned | Improve this Doc View Source Assigned Xml is value is changed from null value Declaration public abstract bool Assigned { get; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.Xml.Cleared.html": {
    "href": "api/XData.Mapping.Xml.Cleared.html",
    "title": "Property Cleared | XData website",
    "keywords": "Property Cleared | Improve this Doc View Source Cleared Xml is value is cleared Declaration public abstract bool Cleared { get; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.Xml.EmptyKeys.html": {
    "href": "api/XData.Mapping.Xml.EmptyKeys.html",
    "title": "Property EmptyKeys | XData website",
    "keywords": "Property EmptyKeys | Improve this Doc View Source EmptyKeys Xml table keys are empty Declaration public abstract bool EmptyKeys { get; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.Xml.Extract.html": {
    "href": "api/XData.Mapping.Xml.Extract.html",
    "title": "Method Extract | XData website",
    "keywords": "Method Extract | Improve this Doc View Source Extract(String, KeyValuePair<String, String>[]) Extract value by xpath expression Declaration public abstract string Extract(string path, params KeyValuePair<string, string>[] namespaces) Parameters Type Name Description String path XPath expression KeyValuePair < String , String >[] namespaces Xml namespaces Returns Type Description String Value"
  },
  "api/XData.Mapping.Xml.op_Addition.html": {
    "href": "api/XData.Mapping.Xml.op_Addition.html",
    "title": "Operator Addition | XData website",
    "keywords": "Operator Addition | Improve this Doc View Source Addition(Xml, XDocument) Set Xml document Declaration public static Xml operator +(Xml xml, XDocument document) Parameters Type Name Description Xml xml Xml property XDocument document Xml document Returns Type Description Xml Updated xml property"
  },
  "api/XData.Mapping.Xml.op_Implicit.html": {
    "href": "api/XData.Mapping.Xml.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(Xml to XDocument) Implicit Xml document conversion Declaration public static implicit operator XDocument(Xml xml) Parameters Type Name Description Xml xml Xml property Returns Type Description XDocument Xml document"
  },
  "api/XData.Mapping.Xml.html": {
    "href": "api/XData.Mapping.Xml.html",
    "title": "Class Xml | XData website",
    "keywords": "Class Xml Xml field wrapper Inheritance Object Xml Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax public abstract class Xml Examples // declaration [Property(\"source\", \"SR\", Flags = DataPropertyFlag.OuterFlag)] public Xml Source { get; set; } // using newInvoice.Source += new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", \"CREATED\"))); // is the same as newInvoice.Source.Document = new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", \"CREATED\"))); Properties Name Description Assigned Xml is value is changed from null value Cleared Xml is value is cleared Document Xml document EmptyKeys Xml table keys are empty Methods Name Description Extract(String, KeyValuePair<String, String>[]) Extract value by xpath expression Operators Name Description Addition(Xml, XDocument) Set Xml document Implicit(Xml to XDocument) Implicit Xml document conversion Extension Methods DataObjectExtensions.Modify(Xml, Action<XDocument>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also XData.Mapping.Xml.Value Addition(Xml, XDocument) Implicit(Xml to XDocument) Modify ( Xml , Action < XDocument >) Assigned Cleared EmptyKeys Extract(String, KeyValuePair<String, String>[])"
  },
  "api/XData.Mapping.WithRecursiveAttribute.TypeId.html": {
    "href": "api/XData.Mapping.WithRecursiveAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.WithRecursiveAttribute.Alias.html": {
    "href": "api/XData.Mapping.WithRecursiveAttribute.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Data source alias Declaration public string Alias { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.WithRecursiveAttribute.SubqueryType.html": {
    "href": "api/XData.Mapping.WithRecursiveAttribute.SubqueryType.html",
    "title": "Property SubqueryType | XData website",
    "keywords": "Property SubqueryType | Improve this Doc View Source SubqueryType Subquery type Declaration public Type SubqueryType { get; } Property Value Type Description Type"
  },
  "api/XData.Mapping.WithRecursiveAttribute.InitialAlias.html": {
    "href": "api/XData.Mapping.WithRecursiveAttribute.InitialAlias.html",
    "title": "Property InitialAlias | XData website",
    "keywords": "Property InitialAlias | Improve this Doc View Source InitialAlias Initial Common-Table-Expression (WITH) Subquery alias Declaration public string InitialAlias { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.WithRecursiveAttribute.-ctor.html": {
    "href": "api/XData.Mapping.WithRecursiveAttribute.-ctor.html",
    "title": "Constructor WithRecursiveAttribute | XData website",
    "keywords": "Constructor WithRecursiveAttribute | Improve this Doc View Source WithRecursiveAttribute(String, Type, String) Common-Table-Expression (WITH) Subquery recursive data source constructor Declaration public WithRecursiveAttribute(string alias, Type subqueryType, string initialAlas) Parameters Type Name Description String alias Subquery alias Type subqueryType Subquery type String initialAlas Common-Table-Expression alias"
  },
  "api/XData.Mapping.WithRecursiveAttribute.html": {
    "href": "api/XData.Mapping.WithRecursiveAttribute.html",
    "title": "Class WithRecursiveAttribute | XData website",
    "keywords": "Class WithRecursiveAttribute Common-Table-Expression (WITH) recursive subquery data source Inheritance Object Attribute WithRecursiveAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class WithRecursiveAttribute : Attribute Constructors Name Description WithRecursiveAttribute(String, Type, String) Common-Table-Expression (WITH) Subquery recursive data source constructor Properties Name Description Alias Data source alias InitialAlias Initial Common-Table-Expression (WITH) Subquery alias SubqueryType Subquery type TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.WithAttribute.TypeId.html": {
    "href": "api/XData.Mapping.WithAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.WithAttribute.Type.html": {
    "href": "api/XData.Mapping.WithAttribute.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Data source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType Overrides DataSourceAttribute.Type"
  },
  "api/XData.Mapping.WithAttribute.Alias.html": {
    "href": "api/XData.Mapping.WithAttribute.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Data source alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias"
  },
  "api/XData.Mapping.WithAttribute.WithType.html": {
    "href": "api/XData.Mapping.WithAttribute.WithType.html",
    "title": "Property WithType | XData website",
    "keywords": "Property WithType | Improve this Doc View Source WithType Common-Table-Expression (WITH) Subquery type Declaration public WithRecursiveType WithType { get; } Property Value Type Description WithRecursiveType"
  },
  "api/XData.Mapping.WithAttribute.Properties.html": {
    "href": "api/XData.Mapping.WithAttribute.Properties.html",
    "title": "Property Properties | XData website",
    "keywords": "Property Properties | Improve this Doc View Source Properties Common-Table-Expression (WITH) Subquery property order Declaration public string[] Properties { get; } Property Value Type Description String []"
  },
  "api/XData.Mapping.WithAttribute.SubqueryType.html": {
    "href": "api/XData.Mapping.WithAttribute.SubqueryType.html",
    "title": "Property SubqueryType | XData website",
    "keywords": "Property SubqueryType | Improve this Doc View Source SubqueryType Subquery type Declaration public Type SubqueryType { get; } Property Value Type Description Type"
  },
  "api/XData.Mapping.WithAttribute.-ctor.html": {
    "href": "api/XData.Mapping.WithAttribute.-ctor.html",
    "title": "Constructor WithAttribute | XData website",
    "keywords": "Constructor WithAttribute | Improve this Doc View Source WithAttribute(String, Type, WithRecursiveType, String[]) Common-Table-Expression (WITH) Subquery data source constructor Declaration public WithAttribute(string alias, Type subqueryType, WithRecursiveType withType = WithRecursiveType.RecursiveUnion, params string[] properties) Parameters Type Name Description String alias Common-Table-Expression alias Type subqueryType Subquery type WithRecursiveType withType Recursive connection type (if applicable) String [] properties Common-Table-Expression (WITH) Subquery property order"
  },
  "api/XData.Mapping.WithAttribute.html": {
    "href": "api/XData.Mapping.WithAttribute.html",
    "title": "Class WithAttribute | XData website",
    "keywords": "Class WithAttribute Common-Table-Expression (WITH) Subquery data source Inheritance Object Attribute DataSourceAttribute WithAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax public sealed class WithAttribute : DataSourceAttribute Constructors Name Description WithAttribute(String, Type, WithRecursiveType, String[]) Common-Table-Expression (WITH) Subquery data source constructor Properties Name Description Alias Data source alias Properties Common-Table-Expression (WITH) Subquery property order SubqueryType Subquery type Type Data source type TypeId When implemented in a derived class, gets a unique identifier for this Attribute . WithType Common-Table-Expression (WITH) Subquery type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.TypeId.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.SubqueryLinkAttribute.Subquery.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.Subquery.html",
    "title": "Property Subquery | XData website",
    "keywords": "Property Subquery | Improve this Doc View Source Subquery Child source alias Declaration public string Subquery { get; } Property Value Type Description String See Also Alias"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.SubqueryProperty.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.SubqueryProperty.html",
    "title": "Property SubqueryProperty | XData website",
    "keywords": "Property SubqueryProperty | Improve this Doc View Source SubqueryProperty Child property to link Declaration public string SubqueryProperty { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.PropertyName.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Parent property Declaration public string PropertyName { get; } Property Value Type Description String Remarks If not assigned used SubqueryProperty name"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.Operation.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.Operation.html",
    "title": "Property Operation | XData website",
    "keywords": "Property Operation | Improve this Doc View Source Operation Filter operation Declaration public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation See Also FilterOperation"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.Combination.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.Combination.html",
    "title": "Property Combination | XData website",
    "keywords": "Property Combination | Improve this Doc View Source Combination Filter combination (filter group) name Declaration public string Combination { get; set; } Property Value Type Description String See Also FilterCombinationAttribute"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.PrimaryFilter.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.PrimaryFilter.html",
    "title": "Property PrimaryFilter | XData website",
    "keywords": "Property PrimaryFilter | Improve this Doc View Source PrimaryFilter Primary filter flag Declaration public bool PrimaryFilter { get; set; } Property Value Type Description Boolean See Also OptionalFilterAttribute"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.-ctor.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.-ctor.html",
    "title": "Constructor SubqueryLinkAttribute | XData website",
    "keywords": "Constructor SubqueryLinkAttribute | Improve this Doc View Source SubqueryLinkAttribute(String, String, String) Subquery link attribute Declaration public SubqueryLinkAttribute(string subquery, string subqueryProperty, string property = \"\") Parameters Type Name Description String subquery Child source alias String subqueryProperty Child property to link String property Parent property contains value to link Exceptions Type Condition XDataRuntimeException Child source alias cannot be null or empty string XDataRuntimeException Child property to link cannot be null or empty string"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.FilterType.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Overrides FilterBaseAttribute.FilterType See Also FilterType"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.html",
    "title": "Class SubqueryLinkAttribute | XData website",
    "keywords": "Class SubqueryLinkAttribute Data object link to subquery attribute Inheritance Object Attribute FilterBaseAttribute SubqueryLinkAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class SubqueryLinkAttribute : FilterBaseAttribute Constructors Name Description SubqueryLinkAttribute(String, String, String) Subquery link attribute Properties Name Description Combination Filter combination (filter group) name FilterType Filter type Operation Filter operation PrimaryFilter Primary filter flag PropertyName Parent property Subquery Child source alias SubqueryProperty Child property to link TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also SubqueryAttribute InnerViewAttribute"
  },
  "api/XData.Mapping.SubqueryFilterAttribute.TypeId.html": {
    "href": "api/XData.Mapping.SubqueryFilterAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.SubqueryFilterAttribute.Subquery.html": {
    "href": "api/XData.Mapping.SubqueryFilterAttribute.Subquery.html",
    "title": "Property Subquery | XData website",
    "keywords": "Property Subquery | Improve this Doc View Source Subquery Subquery alias Declaration public string Subquery { get; } Property Value Type Description String See Also SubqueryAttribute"
  },
  "api/XData.Mapping.SubqueryFilterAttribute.FilterType.html": {
    "href": "api/XData.Mapping.SubqueryFilterAttribute.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Subquery Overrides FilterBaseAttribute.FilterType"
  },
  "api/XData.Mapping.SubqueryFilterAttribute.-ctor.html": {
    "href": "api/XData.Mapping.SubqueryFilterAttribute.-ctor.html",
    "title": "Constructor SubqueryFilterAttribute | XData website",
    "keywords": "Constructor SubqueryFilterAttribute | Improve this Doc View Source SubqueryFilterAttribute(String, String, String) Subquery filter attribute Declaration public SubqueryFilterAttribute(string subquery, string source, string fieldName) Parameters Type Name Description String subquery Subquery alias String source Primary source alias String fieldName Primary field name Exceptions Type Condition XDataRuntimeException Subquery alias cannot be null or empty string"
  },
  "api/XData.Mapping.SubqueryFilterAttribute.html": {
    "href": "api/XData.Mapping.SubqueryFilterAttribute.html",
    "title": "Class SubqueryFilterAttribute | XData website",
    "keywords": "Class SubqueryFilterAttribute Data object subquery filter attribute Inheritance Object Attribute FilterBaseAttribute FilterAttribute OptionalFilterAttribute SubqueryFilterAttribute Inherited Members OptionalFilterAttribute.PrimaryFilter FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class SubqueryFilterAttribute : OptionalFilterAttribute Remarks Filter data by subquery: some_field = (select ...) some_field != (select ...) some_field in (select ...) some_field not in (select ...) exists (select ...) not exists (select ...) Constructors Name Description SubqueryFilterAttribute(String, String, String) Subquery filter attribute Properties Name Description FilterType Filter type Subquery Subquery alias TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also SubqueryAttribute"
  },
  "api/XData.Mapping.SubqueryAttribute.TypeId.html": {
    "href": "api/XData.Mapping.SubqueryAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.SubqueryAttribute.Type.html": {
    "href": "api/XData.Mapping.SubqueryAttribute.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Data source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType Subquery Overrides DataSourceAttribute.Type"
  },
  "api/XData.Mapping.SubqueryAttribute.SubqueryType.html": {
    "href": "api/XData.Mapping.SubqueryAttribute.SubqueryType.html",
    "title": "Property SubqueryType | XData website",
    "keywords": "Property SubqueryType | Improve this Doc View Source SubqueryType Object type represents subquery structure Declaration public Type SubqueryType { get; } Property Value Type Description Type"
  },
  "api/XData.Mapping.SubqueryAttribute.Alias.html": {
    "href": "api/XData.Mapping.SubqueryAttribute.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Subquery alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias"
  },
  "api/XData.Mapping.SubqueryAttribute.PropertyName.html": {
    "href": "api/XData.Mapping.SubqueryAttribute.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Subquery selected property Declaration public string PropertyName { get; } Property Value Type Description String Remarks Only one property (or column) can be selected from subquery"
  },
  "api/XData.Mapping.SubqueryAttribute.Grouping.html": {
    "href": "api/XData.Mapping.SubqueryAttribute.Grouping.html",
    "title": "Property Grouping | XData website",
    "keywords": "Property Grouping | Improve this Doc View Source Grouping Subquery grouping mode Declaration public DataGrouping Grouping { get; set; } Property Value Type Description DataGrouping Remarks Subquery selected property (see PropertyName ) aggregate function Grouping in subquery mast to be defined by GroupOrder WARNING! Do not use properties inside grouped subqueries! Use ColumnAttribute instead!"
  },
  "api/XData.Mapping.SubqueryAttribute.-ctor.html": {
    "href": "api/XData.Mapping.SubqueryAttribute.-ctor.html",
    "title": "Constructor SubqueryAttribute | XData website",
    "keywords": "Constructor SubqueryAttribute | Improve this Doc View Source SubqueryAttribute(String, Type, String) Data object subquery attribute Declaration public SubqueryAttribute(string alias, Type subqueryType, string propertyName) Parameters Type Name Description String alias Subquery alias Type subqueryType Object type represents subquery structure String propertyName Subquery selected property Exceptions Type Condition XDataRuntimeException Subquery alias cannot be null or empty string XDataRuntimeException Object type represents subquery structure cannot be null XDataRuntimeException Subquery selected property cannot be null or empty string"
  },
  "api/XData.Mapping.SubqueryAttribute.html": {
    "href": "api/XData.Mapping.SubqueryAttribute.html",
    "title": "Class SubqueryAttribute | XData website",
    "keywords": "Class SubqueryAttribute Data object subquery attribute Inheritance Object Attribute DataSourceAttribute SubqueryAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class SubqueryAttribute : DataSourceAttribute Examples Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", Grouping = DataGrouping.Sum) Constructors Name Description SubqueryAttribute(String, Type, String) Data object subquery attribute Properties Name Description Alias Subquery alias Grouping Subquery grouping mode PropertyName Subquery selected property SubqueryType Object type represents subquery structure Type Data source type TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DataTableAttribute InnerViewAttribute SubqueryLinkAttribute SubqueryFilterAttribute SubQuery ColumnExpressionAttribute PropertyExpressionAttribute ExpressionFilterAttribute"
  },
  "api/XData.Mapping.SqlExpressionAttribute.html": {
    "href": "api/XData.Mapping.SqlExpressionAttribute.html",
    "title": "Class SqlExpressionAttribute | XData website",
    "keywords": "Class SqlExpressionAttribute Sql expression name Inheritance Object Attribute SqlExpressionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class SqlExpressionAttribute : Attribute Remarks Mark static field of type Calculate<T> to use in ExpressionFilterAttribute or PropertyExpressionAttribute as expression text. Hint:This is native way to use expressions Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also ExpressionFilterAttribute PropertyExpressionAttribute"
  },
  "api/XData.Mapping.ResultSetAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ResultSetAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ResultSetAttribute.Order.html": {
    "href": "api/XData.Mapping.ResultSetAttribute.Order.html",
    "title": "Property Order | XData website",
    "keywords": "Property Order | Improve this Doc View Source Order Result set order Declaration public int Order { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.ResultSetAttribute.ResultType.html": {
    "href": "api/XData.Mapping.ResultSetAttribute.ResultType.html",
    "title": "Property ResultType | XData website",
    "keywords": "Property ResultType | Improve this Doc View Source ResultType Result set mapped type Declaration public Type ResultType { get; set; } Property Value Type Description Type"
  },
  "api/XData.Mapping.ResultSetAttribute.IsDefault.html": {
    "href": "api/XData.Mapping.ResultSetAttribute.IsDefault.html",
    "title": "Property IsDefault | XData website",
    "keywords": "Property IsDefault | Improve this Doc View Source IsDefault Result set is used to fill procedure output data object Declaration public bool IsDefault { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.ResultSetAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ResultSetAttribute.-ctor.html",
    "title": "Constructor ResultSetAttribute | XData website",
    "keywords": "Constructor ResultSetAttribute | Improve this Doc View Source ResultSetAttribute(String, String) Result set attribute constructor Declaration public ResultSetAttribute(string alias, string name) Parameters Type Name Description String alias SQL procedure/function alias String name Result set name"
  },
  "api/XData.Mapping.ResultSetAttribute.html": {
    "href": "api/XData.Mapping.ResultSetAttribute.html",
    "title": "Class ResultSetAttribute | XData website",
    "keywords": "Class ResultSetAttribute SQL stored procedure/function result set Inheritance Object Attribute ResultSetAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ResultSetAttribute : Attribute Remarks Result sets can be accessed by GetResultSet<T, TRes>(IRepository<T>, Expression<Func<T, IEnumerable<TRes>>>) repository method Constructors Name Description ResultSetAttribute(String, String) Result set attribute constructor Properties Name Description IsDefault Result set is used to fill procedure output data object Order Result set order ResultType Result set mapped type TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ReferenceAttribute.IsLink.html": {
    "href": "api/XData.Mapping.ReferenceAttribute.IsLink.html",
    "title": "Property IsLink | XData website",
    "keywords": "Property IsLink | Improve this Doc View Source IsLink Property reference flag Declaration public override bool IsLink { get; } Property Value Type Description Boolean True Overrides PropertyBaseAttribute.IsLink"
  },
  "api/XData.Mapping.ReferenceAttribute.PropertyName.html": {
    "href": "api/XData.Mapping.ReferenceAttribute.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Referenced property (or column) name Declaration public string PropertyName { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.ReferenceAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ReferenceAttribute.-ctor.html",
    "title": "Constructor ReferenceAttribute | XData website",
    "keywords": "Constructor ReferenceAttribute | Improve this Doc View Source ReferenceAttribute(String, String) Data object referenced inner view property attribute Declaration public ReferenceAttribute(string source, string propertyName = \"\") Parameters Type Name Description String source Source alias String propertyName Linked property name Exceptions Type Condition XDataRuntimeException Linked property name cannot be null or empty string"
  },
  "api/XData.Mapping.ReferenceAttribute.html": {
    "href": "api/XData.Mapping.ReferenceAttribute.html",
    "title": "Class ReferenceAttribute | XData website",
    "keywords": "Class ReferenceAttribute Data object referenced inner view property attribute Inheritance Object Attribute PropertyBaseAttribute ReferenceAttribute Inherited Members PropertyBaseAttribute.Source PropertyBaseAttribute.Flags PropertyBaseAttribute.NativeSqlType Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class ReferenceAttribute : PropertyBaseAttribute Remarks Used to map property to data of inner view declared PropertyAttribute or ColumnAttribute Constructors Name Description ReferenceAttribute(String, String) Data object referenced inner view property attribute Properties Name Description IsLink Property reference flag PropertyName Referenced property (or column) name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.RangeFilterAttribute.TypeId.html": {
    "href": "api/XData.Mapping.RangeFilterAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.RangeFilterAttribute.Range.html": {
    "href": "api/XData.Mapping.RangeFilterAttribute.Range.html",
    "title": "Property Range | XData website",
    "keywords": "Property Range | Improve this Doc View Source Range Range values Declaration public object[] Range { get; } Property Value Type Description Object []"
  },
  "api/XData.Mapping.RangeFilterAttribute.FilterType.html": {
    "href": "api/XData.Mapping.RangeFilterAttribute.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Range Overrides FilterBaseAttribute.FilterType"
  },
  "api/XData.Mapping.RangeFilterAttribute.-ctor.html": {
    "href": "api/XData.Mapping.RangeFilterAttribute.-ctor.html",
    "title": "Constructor RangeFilterAttribute | XData website",
    "keywords": "Constructor RangeFilterAttribute | Improve this Doc View Source RangeFilterAttribute(String, String, Object[]) Range filter attribute Declaration public RangeFilterAttribute(string source, string fieldName, params object[] range) Parameters Type Name Description String source Primary source alias String fieldName Primary field name Object [] range Range values Exceptions Type Condition XDataRuntimeException Range values cannot be null or empty array"
  },
  "api/XData.Mapping.RangeFilterAttribute.html": {
    "href": "api/XData.Mapping.RangeFilterAttribute.html",
    "title": "Class RangeFilterAttribute | XData website",
    "keywords": "Class RangeFilterAttribute Data object range filter attribute Inheritance Object Attribute FilterBaseAttribute FilterAttribute RangeFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class RangeFilterAttribute : FilterAttribute Remarks Used to filter data by range of values (for example: some_field in (1, 2, 3) or some_field not in (1, 2, 3) ) Hint: Using dynamic LINQ range filters will increase code flexibility (see example). Examples var states = new List<int>(); // fill states from somewhere dataScope.GetRepository<Invoice>().Where(x => states.Contains(x.State)); Constructors Name Description RangeFilterAttribute(String, String, Object[]) Range filter attribute Properties Name Description FilterType Filter type Range Range values TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.PropertyUpdateWithAttribute.ExprText.html": {
    "href": "api/XData.Mapping.PropertyUpdateWithAttribute.ExprText.html",
    "title": "Property ExprText | XData website",
    "keywords": "Property ExprText | Improve this Doc View Source ExprText Expression text Declaration public string ExprText { get; } Property Value Type Description String Remarks PlainSql expression text is Sql expression or SqlExpressionAttribute name SubQuery expression text is Alias WARNING! Plain Sql expressions (see ExprType ) can use specific SQL dialect features! Data mapping may be not compatible with other database engines! Use SqlExpressionAttribute instead."
  },
  "api/XData.Mapping.PropertyUpdateWithAttribute.ExprType.html": {
    "href": "api/XData.Mapping.PropertyUpdateWithAttribute.ExprType.html",
    "title": "Property ExprType | XData website",
    "keywords": "Property ExprType | Improve this Doc View Source ExprType Expression type Declaration public DataExpressionType ExprType { get; } Property Value Type Description DataExpressionType Remarks WARNING! Plain Sql expressions can use specific Sql dialect features! Data mapping may be not compatible with other database engines! Use SqlExpressionAttribute instead. See Also DataExpressionType"
  },
  "api/XData.Mapping.PropertyUpdateWithAttribute.-ctor.html": {
    "href": "api/XData.Mapping.PropertyUpdateWithAttribute.-ctor.html",
    "title": "Constructor PropertyUpdateWithAttribute | XData website",
    "keywords": "Constructor PropertyUpdateWithAttribute | Improve this Doc View Source PropertyUpdateWithAttribute(String, DataExpressionType) Data object property plain expression attribute Declaration public PropertyUpdateWithAttribute(string exprText, DataExpressionType exprType = DataExpressionType.PlainSql) Parameters Type Name Description String exprText Expression text DataExpressionType exprType Expression type Exceptions Type Condition XDataRuntimeException Expression text cannot be null or empty string"
  },
  "api/XData.Mapping.PropertyUpdateWithAttribute.html": {
    "href": "api/XData.Mapping.PropertyUpdateWithAttribute.html",
    "title": "Class PropertyUpdateWithAttribute | XData website",
    "keywords": "Class PropertyUpdateWithAttribute Data object property update source expression attribute Inheritance Object Attribute PropertyUpdateWithAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyUpdateWithAttribute : Attribute Remarks Used when PropertyAttribute value must to be updated with expression ( PlainSql or SubQuery ) result according ExprType Constructors Name Description PropertyUpdateWithAttribute(String, DataExpressionType) Data object property plain expression attribute Properties Name Description ExprText Expression text ExprType Expression type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.PropertyGroupingAttribute.GroupOrder.html": {
    "href": "api/XData.Mapping.PropertyGroupingAttribute.GroupOrder.html",
    "title": "Property GroupOrder | XData website",
    "keywords": "Property GroupOrder | Improve this Doc View Source GroupOrder Property group order Declaration public short GroupOrder { get; set; } Property Value Type Description Int16"
  },
  "api/XData.Mapping.PropertyGroupingAttribute.Grouping.html": {
    "href": "api/XData.Mapping.PropertyGroupingAttribute.Grouping.html",
    "title": "Property Grouping | XData website",
    "keywords": "Property Grouping | Improve this Doc View Source Grouping Property data aggregate function Declaration public DataGrouping Grouping { get; set; } Property Value Type Description DataGrouping See Also DataGrouping"
  },
  "api/XData.Mapping.PropertyGroupingAttribute.-ctor.html": {
    "href": "api/XData.Mapping.PropertyGroupingAttribute.-ctor.html",
    "title": "Constructor PropertyGroupingAttribute | XData website",
    "keywords": "Constructor PropertyGroupingAttribute | Improve this Doc View Source PropertyGroupingAttribute() Data object property grouping attribute Declaration public PropertyGroupingAttribute()"
  },
  "api/XData.Mapping.PropertyGroupingAttribute.html": {
    "href": "api/XData.Mapping.PropertyGroupingAttribute.html",
    "title": "Class PropertyGroupingAttribute | XData website",
    "keywords": "Class PropertyGroupingAttribute Data object property grouping attribute Inheritance Object Attribute PropertyGroupingAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyGroupingAttribute : Attribute Constructors Name Description PropertyGroupingAttribute() Data object property grouping attribute Properties Name Description Grouping Property data aggregate function GroupOrder Property group order Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DataGrouping"
  },
  "api/XData.Mapping.PropertyExpressionAttribute.ExprText.html": {
    "href": "api/XData.Mapping.PropertyExpressionAttribute.ExprText.html",
    "title": "Property ExprText | XData website",
    "keywords": "Property ExprText | Improve this Doc View Source ExprText Expression text Declaration public string ExprText { get; } Property Value Type Description String Remarks PlainSql expression text is Sql expression or SqlExpressionAttribute name SubQuery expression text is Alias WARNING! Plain Sql expressions (see ExprType ) can use specific SQL dialect features! Data mapping may be not compatible with other database engines! Use SqlExpressionAttribute instead."
  },
  "api/XData.Mapping.PropertyExpressionAttribute.ExprSize.html": {
    "href": "api/XData.Mapping.PropertyExpressionAttribute.ExprSize.html",
    "title": "Property ExprSize | XData website",
    "keywords": "Property ExprSize | Improve this Doc View Source ExprSize Expression size Declaration public int ExprSize { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.PropertyExpressionAttribute.ExprScale.html": {
    "href": "api/XData.Mapping.PropertyExpressionAttribute.ExprScale.html",
    "title": "Property ExprScale | XData website",
    "keywords": "Property ExprScale | Improve this Doc View Source ExprScale Expression scale Declaration public int ExprScale { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.PropertyExpressionAttribute.ExprType.html": {
    "href": "api/XData.Mapping.PropertyExpressionAttribute.ExprType.html",
    "title": "Property ExprType | XData website",
    "keywords": "Property ExprType | Improve this Doc View Source ExprType Expression type Declaration public DataExpressionType ExprType { get; } Property Value Type Description DataExpressionType Remarks WARNING! Plain Sql expressions can use specific Sql dialect features! Data mapping may be not compatible with other database engines! Use SqlExpressionAttribute instead. See Also DataExpressionType"
  },
  "api/XData.Mapping.PropertyExpressionAttribute.DbType.html": {
    "href": "api/XData.Mapping.PropertyExpressionAttribute.DbType.html",
    "title": "Property DbType | XData website",
    "keywords": "Property DbType | Improve this Doc View Source DbType Expression DbType Declaration public DbType DbType { get; } Property Value Type Description DbType"
  },
  "api/XData.Mapping.PropertyExpressionAttribute.-ctor.html": {
    "href": "api/XData.Mapping.PropertyExpressionAttribute.-ctor.html",
    "title": "Constructor PropertyExpressionAttribute | XData website",
    "keywords": "Constructor PropertyExpressionAttribute | Improve this Doc View Source PropertyExpressionAttribute(String, DataExpressionType, DbType) Data object property plain expression attribute Declaration public PropertyExpressionAttribute(string exprText, DataExpressionType exprType = DataExpressionType.PlainSql, DbType type = null) Parameters Type Name Description String exprText Expression text DataExpressionType exprType Expression type DbType type Expression DbType Exceptions Type Condition XDataRuntimeException Expression text cannot be null or empty string"
  },
  "api/XData.Mapping.PropertyExpressionAttribute.html": {
    "href": "api/XData.Mapping.PropertyExpressionAttribute.html",
    "title": "Class PropertyExpressionAttribute | XData website",
    "keywords": "Class PropertyExpressionAttribute Data object property plain expression attribute Inheritance Object Attribute PropertyExpressionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyExpressionAttribute : Attribute Remarks Used when PropertyAttribute value is expression ( PlainSql or SubQuery ) according ExprType Constructors Name Description PropertyExpressionAttribute(String, DataExpressionType, DbType) Data object property plain expression attribute Properties Name Description DbType Expression DbType ExprScale Expression scale ExprSize Expression size ExprText Expression text ExprType Expression type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.PropertyDefaultAttribute.DefaultSource.html": {
    "href": "api/XData.Mapping.PropertyDefaultAttribute.DefaultSource.html",
    "title": "Property DefaultSource | XData website",
    "keywords": "Property DefaultSource | Improve this Doc View Source DefaultSource Default value source Declaration public DefaultType DefaultSource { get; } Property Value Type Description DefaultType See Also DefaultType"
  },
  "api/XData.Mapping.PropertyDefaultAttribute.DefaultValue.html": {
    "href": "api/XData.Mapping.PropertyDefaultAttribute.DefaultValue.html",
    "title": "Property DefaultValue | XData website",
    "keywords": "Property DefaultValue | Improve this Doc View Source DefaultValue Default value Declaration public object DefaultValue { get; } Property Value Type Description Object"
  },
  "api/XData.Mapping.PropertyDefaultAttribute.DefaultFeature.html": {
    "href": "api/XData.Mapping.PropertyDefaultAttribute.DefaultFeature.html",
    "title": "Property DefaultFeature | XData website",
    "keywords": "Property DefaultFeature | Improve this Doc View Source DefaultFeature Default extended features Declaration public DefaultFeature DefaultFeature { get; set; } Property Value Type Description DefaultFeature"
  },
  "api/XData.Mapping.PropertyDefaultAttribute.-ctor.html": {
    "href": "api/XData.Mapping.PropertyDefaultAttribute.-ctor.html",
    "title": "Constructor PropertyDefaultAttribute | XData website",
    "keywords": "Constructor PropertyDefaultAttribute | Improve this Doc View Source PropertyDefaultAttribute(DefaultType, Object) Data object property default value attribute Declaration public PropertyDefaultAttribute(DefaultType source, object val = null) Parameters Type Name Description DefaultType source Default value source Object val Default value"
  },
  "api/XData.Mapping.PropertyDefaultAttribute.html": {
    "href": "api/XData.Mapping.PropertyDefaultAttribute.html",
    "title": "Class PropertyDefaultAttribute | XData website",
    "keywords": "Class PropertyDefaultAttribute Data object property default value attribute Inheritance Object Attribute PropertyDefaultAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyDefaultAttribute : Attribute Remarks Used to declare default value rule for property Constructors Name Description PropertyDefaultAttribute(DefaultType, Object) Data object property default value attribute Properties Name Description DefaultFeature Default extended features DefaultSource Default value source DefaultValue Default value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DefaultType"
  },
  "api/XData.Mapping.PropertyBaseAttribute.IsLink.html": {
    "href": "api/XData.Mapping.PropertyBaseAttribute.IsLink.html",
    "title": "Property IsLink | XData website",
    "keywords": "Property IsLink | Improve this Doc View Source IsLink Property link flag Declaration public abstract bool IsLink { get; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.PropertyBaseAttribute.Source.html": {
    "href": "api/XData.Mapping.PropertyBaseAttribute.Source.html",
    "title": "Property Source | XData website",
    "keywords": "Property Source | Improve this Doc View Source Source Source alias Declaration public string Source { get; } Property Value Type Description String See Also Alias"
  },
  "api/XData.Mapping.PropertyBaseAttribute.Flags.html": {
    "href": "api/XData.Mapping.PropertyBaseAttribute.Flags.html",
    "title": "Property Flags | XData website",
    "keywords": "Property Flags | Improve this Doc View Source Flags Property flags Declaration public DataPropertyFlag Flags { get; set; } Property Value Type Description DataPropertyFlag See Also DataPropertyFlag"
  },
  "api/XData.Mapping.PropertyBaseAttribute.NativeSqlType.html": {
    "href": "api/XData.Mapping.PropertyBaseAttribute.NativeSqlType.html",
    "title": "Property NativeSqlType | XData website",
    "keywords": "Property NativeSqlType | Improve this Doc View Source NativeSqlType Native SQL type name Declaration public string NativeSqlType { get; set; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter!"
  },
  "api/XData.Mapping.PropertyBaseAttribute.html": {
    "href": "api/XData.Mapping.PropertyBaseAttribute.html",
    "title": "Class PropertyBaseAttribute | XData website",
    "keywords": "Class PropertyBaseAttribute Data property base attribute Inheritance Object Attribute PropertyBaseAttribute PropertyAttribute ReferenceAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax public abstract class PropertyBaseAttribute : Attribute Properties Name Description Flags Property flags IsLink Property link flag NativeSqlType Native SQL type name Source Source alias Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also PropertyAttribute ReferenceAttribute"
  },
  "api/XData.Mapping.PropertyAttribute.IsLink.html": {
    "href": "api/XData.Mapping.PropertyAttribute.IsLink.html",
    "title": "Property IsLink | XData website",
    "keywords": "Property IsLink | Improve this Doc View Source IsLink Property link flag Declaration public override bool IsLink { get; } Property Value Type Description Boolean False Overrides PropertyBaseAttribute.IsLink"
  },
  "api/XData.Mapping.PropertyAttribute.FieldName.html": {
    "href": "api/XData.Mapping.PropertyAttribute.FieldName.html",
    "title": "Property FieldName | XData website",
    "keywords": "Property FieldName | Improve this Doc View Source FieldName Field name Declaration public string FieldName { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.PropertyAttribute.-ctor.html": {
    "href": "api/XData.Mapping.PropertyAttribute.-ctor.html",
    "title": "Constructor PropertyAttribute | XData website",
    "keywords": "Constructor PropertyAttribute | Improve this Doc View Source PropertyAttribute(String, String) Data object property attribute Declaration public PropertyAttribute(string source = \"\", string fieldName = \"\") Parameters Type Name Description String source Source alias String fieldName Field name Exceptions Type Condition XDataRuntimeException Field name cannot be null or empty string"
  },
  "api/XData.Mapping.PropertyAttribute.html": {
    "href": "api/XData.Mapping.PropertyAttribute.html",
    "title": "Class PropertyAttribute | XData website",
    "keywords": "Class PropertyAttribute Data object property attribute Inheritance Object Attribute PropertyBaseAttribute PropertyAttribute Inherited Members PropertyBaseAttribute.Source PropertyBaseAttribute.Flags PropertyBaseAttribute.NativeSqlType Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyAttribute : PropertyBaseAttribute Constructors Name Description PropertyAttribute(String, String) Data object property attribute Properties Name Description FieldName Field name IsLink Property link flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ProcedureAttribute.Type.html": {
    "href": "api/XData.Mapping.ProcedureAttribute.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Data source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType Procedure Overrides DataSourceAttribute.Type"
  },
  "api/XData.Mapping.ProcedureAttribute.ProcedureType.html": {
    "href": "api/XData.Mapping.ProcedureAttribute.ProcedureType.html",
    "title": "Property ProcedureType | XData website",
    "keywords": "Property ProcedureType | Improve this Doc View Source ProcedureType Stored procedure type Declaration public ProcedureType ProcedureType { get; } Property Value Type Description ProcedureType See Also ProcedureType"
  },
  "api/XData.Mapping.ProcedureAttribute.Alias.html": {
    "href": "api/XData.Mapping.ProcedureAttribute.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Procedure / function alias Set procedure alias as BaseSource Hint: Alias used with table-valued functions as from-structure alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias"
  },
  "api/XData.Mapping.ProcedureAttribute.Name.html": {
    "href": "api/XData.Mapping.ProcedureAttribute.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name SQL stored procedure / function name WARNING! Specify full qualified name of procedure! Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.ProcedureAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ProcedureAttribute.-ctor.html",
    "title": "Constructor ProcedureAttribute | XData website",
    "keywords": "Constructor ProcedureAttribute | Improve this Doc View Source ProcedureAttribute(String, String, ProcedureType) Data object SQL procedure / function attribute Declaration public ProcedureAttribute(string alias, string name, ProcedureType type) Parameters Type Name Description String alias Procedure / function alias String name Procedure / function name ProcedureType type Stored procedure type Exceptions Type Condition XDataRuntimeException Procedure alias cannot be null or empty string XDataRuntimeException Procedure name cannot be null or empty string"
  },
  "api/XData.Mapping.ProcedureAttribute.html": {
    "href": "api/XData.Mapping.ProcedureAttribute.html",
    "title": "Class ProcedureAttribute | XData website",
    "keywords": "Class ProcedureAttribute Data object SQL procedure / function attribute Inheritance Object Attribute DataSourceAttribute ProcedureAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class ProcedureAttribute : DataSourceAttribute Examples Procedure(\"C\", \"dbo.GetCustomers\", ProcedureType.Function) Constructors Name Description ProcedureAttribute(String, String, ProcedureType) Data object SQL procedure / function attribute Properties Name Description Alias Procedure / function alias Set procedure alias as BaseSource Hint: Alias used with table-valued functions as from-structure alias Name SQL stored procedure / function name WARNING! Specify full qualified name of procedure! ProcedureType Stored procedure type Type Data source type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DataTableAttribute InnerViewAttribute SubqueryAttribute ParameterAttribute ResultSetAttribute"
  },
  "api/XData.Mapping.ParameterAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ParameterAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ParameterAttribute.Direction.html": {
    "href": "api/XData.Mapping.ParameterAttribute.Direction.html",
    "title": "Property Direction | XData website",
    "keywords": "Property Direction | Improve this Doc View Source Direction Parameter direction Declaration public ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection"
  },
  "api/XData.Mapping.ParameterAttribute.Size.html": {
    "href": "api/XData.Mapping.ParameterAttribute.Size.html",
    "title": "Property Size | XData website",
    "keywords": "Property Size | Improve this Doc View Source Size Parameter data size (if applicable) Declaration public int Size { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.ParameterAttribute.Scale.html": {
    "href": "api/XData.Mapping.ParameterAttribute.Scale.html",
    "title": "Property Scale | XData website",
    "keywords": "Property Scale | Improve this Doc View Source Scale Parameter data scale (if applicable) Declaration public int Scale { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.ParameterAttribute.Name.html": {
    "href": "api/XData.Mapping.ParameterAttribute.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Parameter name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/XData.Mapping.ParameterAttribute.DefaultType.html": {
    "href": "api/XData.Mapping.ParameterAttribute.DefaultType.html",
    "title": "Property DefaultType | XData website",
    "keywords": "Property DefaultType | Improve this Doc View Source DefaultType Parameter default value type Declaration public DefaultType DefaultType { get; set; } Property Value Type Description DefaultType"
  },
  "api/XData.Mapping.ParameterAttribute.DefaultValue.html": {
    "href": "api/XData.Mapping.ParameterAttribute.DefaultValue.html",
    "title": "Property DefaultValue | XData website",
    "keywords": "Property DefaultValue | Improve this Doc View Source DefaultValue Parameter default value Declaration public object DefaultValue { get; set; } Property Value Type Description Object"
  },
  "api/XData.Mapping.ParameterAttribute.NativeSqlType.html": {
    "href": "api/XData.Mapping.ParameterAttribute.NativeSqlType.html",
    "title": "Property NativeSqlType | XData website",
    "keywords": "Property NativeSqlType | Improve this Doc View Source NativeSqlType Native SQL type name Declaration public string NativeSqlType { get; set; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter!"
  },
  "api/XData.Mapping.ParameterAttribute.UdtTypeName.html": {
    "href": "api/XData.Mapping.ParameterAttribute.UdtTypeName.html",
    "title": "Property UdtTypeName | XData website",
    "keywords": "Property UdtTypeName | Improve this Doc View Source UdtTypeName User defined type (UDT) name Declaration public string UdtTypeName { get; set; } Property Value Type Description String"
  },
  "api/XData.Mapping.ParameterAttribute.UdtElementTypeName.html": {
    "href": "api/XData.Mapping.ParameterAttribute.UdtElementTypeName.html",
    "title": "Property UdtElementTypeName | XData website",
    "keywords": "Property UdtElementTypeName | Improve this Doc View Source UdtElementTypeName User defined type (UDT) element type name Declaration public string UdtElementTypeName { get; set; } Property Value Type Description String"
  },
  "api/XData.Mapping.ParameterAttribute.IsArray.html": {
    "href": "api/XData.Mapping.ParameterAttribute.IsArray.html",
    "title": "Property IsArray | XData website",
    "keywords": "Property IsArray | Improve this Doc View Source IsArray User defined type (UDT) collection is VARARRAY Declaration public bool IsArray { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.ParameterAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ParameterAttribute.-ctor.html",
    "title": "Constructor ParameterAttribute | XData website",
    "keywords": "Constructor ParameterAttribute | Improve this Doc View Source ParameterAttribute(String, Int32, String, Type, DbType) Parameter attribute constructor Declaration public ParameterAttribute(string alias, int order, string binding, Type type, DbType dbType) Parameters Type Name Description String alias SQL stored procedure/function alias Int32 order Parameter order String binding Parameter to repository variable binding Type type Parameter mapped type DbType dbType Parameter database type"
  },
  "api/XData.Mapping.ParameterAttribute.html": {
    "href": "api/XData.Mapping.ParameterAttribute.html",
    "title": "Class ParameterAttribute | XData website",
    "keywords": "Class ParameterAttribute SQL stored procedure/function parameter Inheritance Object Attribute ParameterAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ParameterAttribute : Attribute Constructors Name Description ParameterAttribute(String, Int32, String, Type, DbType) Parameter attribute constructor Properties Name Description DefaultType Parameter default value type DefaultValue Parameter default value Direction Parameter direction IsArray User defined type (UDT) collection is VARARRAY Name Parameter name NativeSqlType Native SQL type name Scale Parameter data scale (if applicable) Size Parameter data size (if applicable) TypeId When implemented in a derived class, gets a unique identifier for this Attribute . UdtElementTypeName User defined type (UDT) element type name UdtTypeName User defined type (UDT) name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.OptionalFilterAttribute.PrimaryFilter.html": {
    "href": "api/XData.Mapping.OptionalFilterAttribute.PrimaryFilter.html",
    "title": "Property PrimaryFilter | XData website",
    "keywords": "Property PrimaryFilter | Improve this Doc View Source PrimaryFilter Primary filter flag Declaration public bool PrimaryFilter { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.OptionalFilterAttribute.-ctor.html": {
    "href": "api/XData.Mapping.OptionalFilterAttribute.-ctor.html",
    "title": "Constructor OptionalFilterAttribute | XData website",
    "keywords": "Constructor OptionalFilterAttribute | Improve this Doc View Source OptionalFilterAttribute(String, String) Base optional filter attribute Declaration protected OptionalFilterAttribute(string sourceAlias, string fieldName) Parameters Type Name Description String sourceAlias Primary source alias String fieldName Primary field name"
  },
  "api/XData.Mapping.OptionalFilterAttribute.html": {
    "href": "api/XData.Mapping.OptionalFilterAttribute.html",
    "title": "Class OptionalFilterAttribute | XData website",
    "keywords": "Class OptionalFilterAttribute Base optional filter attribute Inheritance Object Attribute FilterBaseAttribute FilterAttribute OptionalFilterAttribute LinkAttribute SubqueryFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination FilterBaseAttribute.FilterType Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public abstract class OptionalFilterAttribute : FilterAttribute Remarks Optional filters can be used to conditionally omit parts of query If filter marked by PrimaryFilter = true has no value assigned - it cause omit it primary source from query If link marked by PrimaryFilter = true has one of sources omitted - it cause omit other source from query two If base source BaseSource is omitted - all entire query is omitted Hint: It can be used to build conditional sub queries or inner views For example: -- if filterBySomeField has PrimaryFilter flag = true, query... select ot.one_table_id, ot.name from one_table ot where ot.one_table_id in (select st.one_table_id from second_table st where st.somefield = :filterBySomeField) -- when filterBySomeField has no value assigned will be transformed into... select one_table_id, name from one_table -- bat have a full form when filterBySomeField value is assigned Constructors Name Description OptionalFilterAttribute(String, String) Base optional filter attribute Properties Name Description PrimaryFilter Primary filter flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also LinkAttribute SubqueryLinkAttribute SubqueryFilterAttribute RuntimeFilter"
  },
  "api/XData.Mapping.Lob.Value.html": {
    "href": "api/XData.Mapping.Lob.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Blob value Declaration public abstract byte[] Value { get; set; } Property Value Type Description Byte []"
  },
  "api/XData.Mapping.Lob.Assigned.html": {
    "href": "api/XData.Mapping.Lob.Assigned.html",
    "title": "Property Assigned | XData website",
    "keywords": "Property Assigned | Improve this Doc View Source Assigned Blob is value is changed from null value Declaration public abstract bool Assigned { get; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.Lob.Cleared.html": {
    "href": "api/XData.Mapping.Lob.Cleared.html",
    "title": "Property Cleared | XData website",
    "keywords": "Property Cleared | Improve this Doc View Source Cleared Blob is value is cleared Declaration public abstract bool Cleared { get; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.Lob.EmptyKeys.html": {
    "href": "api/XData.Mapping.Lob.EmptyKeys.html",
    "title": "Property EmptyKeys | XData website",
    "keywords": "Property EmptyKeys | Improve this Doc View Source EmptyKeys Blob table keys are empty Declaration public abstract bool EmptyKeys { get; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.Lob.op_Addition.html": {
    "href": "api/XData.Mapping.Lob.op_Addition.html",
    "title": "Operator Addition | XData website",
    "keywords": "Operator Addition | Improve this Doc View Source Addition(Lob, Byte[]) Set Lob value Declaration public static Lob operator +(Lob lob, byte[] body) Parameters Type Name Description Lob lob Lob Byte [] body Lob body Returns Type Description Lob Updated lob"
  },
  "api/XData.Mapping.Lob.op_Implicit.html": {
    "href": "api/XData.Mapping.Lob.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(Lob to Byte[]) Implicit Lob body extraction Declaration public static implicit operator byte[](Lob lob) Parameters Type Name Description Lob lob Lob property Returns Type Description Byte [] Lob body"
  },
  "api/XData.Mapping.Lob.GetSize.html": {
    "href": "api/XData.Mapping.Lob.GetSize.html",
    "title": "Method GetSize | XData website",
    "keywords": "Method GetSize | Improve this Doc View Source GetSize() Returns Lob size Declaration public abstract long GetSize() Returns Type Description Int64"
  },
  "api/XData.Mapping.Lob.html": {
    "href": "api/XData.Mapping.Lob.html",
    "title": "Class Lob | XData website",
    "keywords": "Class Lob Blob field wrapper Inheritance Object Lob Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax public abstract class Lob Examples // declaration [Property(\"scan\", \"SC\", Flags = DataPropertyFlag.OuterFlag)] public Lob Scan { get; set; } // using byte[] scan = GetScanFileBody(); newInvoice.Scan += scan; // is the same as newInvoice.Scan.Value = scan; Properties Name Description Assigned Blob is value is changed from null value Cleared Blob is value is cleared EmptyKeys Blob table keys are empty Value Blob value Methods Name Description GetSize() Returns Lob size Operators Name Description Addition(Lob, Byte[]) Set Lob value Implicit(Lob to Byte[]) Implicit Lob body extraction Extension Methods DataObjectExtensions.Modify(Lob, Action<Byte[]>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Value Addition(Lob, Byte[]) Implicit(Lob to Byte[]) Modify ( Lob , Action < Byte []>) Assigned Cleared EmptyKeys"
  },
  "api/XData.Mapping.LinkPropertyAttribute.TypeId.html": {
    "href": "api/XData.Mapping.LinkPropertyAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.LinkPropertyAttribute.DictSource.html": {
    "href": "api/XData.Mapping.LinkPropertyAttribute.DictSource.html",
    "title": "Property DictSource | XData website",
    "keywords": "Property DictSource | Improve this Doc View Source DictSource Dictionary source object property Declaration public string DictSource { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.LinkPropertyAttribute.Property.html": {
    "href": "api/XData.Mapping.LinkPropertyAttribute.Property.html",
    "title": "Property Property | XData website",
    "keywords": "Property Property | Improve this Doc View Source Property Property to fill Declaration public string Property { get; set; } Property Value Type Description String"
  },
  "api/XData.Mapping.LinkPropertyAttribute.-ctor.html": {
    "href": "api/XData.Mapping.LinkPropertyAttribute.-ctor.html",
    "title": "Constructor LinkPropertyAttribute | XData website",
    "keywords": "Constructor LinkPropertyAttribute | Improve this Doc View Source LinkPropertyAttribute(String, String) Data object link property attribute Declaration public LinkPropertyAttribute(string dictSource = null, string property = null) Parameters Type Name Description String dictSource Dictionary source object property String property Property to fill"
  },
  "api/XData.Mapping.LinkPropertyAttribute.html": {
    "href": "api/XData.Mapping.LinkPropertyAttribute.html",
    "title": "Class LinkPropertyAttribute | XData website",
    "keywords": "Class LinkPropertyAttribute Data object link property attribute Inheritance Object Attribute LinkPropertyAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public sealed class LinkPropertyAttribute : Attribute Remarks Used to declare source and destination properties to copy values when assigned Source Every link from DictSource to Property mast be declared as separated LinkPropertyAttribute WARNING! Applicable to Link<TVal, TSrc> typed properties only! Constructors Name Description LinkPropertyAttribute(String, String) Data object link property attribute Properties Name Description DictSource Dictionary source object property Property Property to fill TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.LinkAttribute.TypeId.html": {
    "href": "api/XData.Mapping.LinkAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.LinkAttribute.FilterType.html": {
    "href": "api/XData.Mapping.LinkAttribute.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Link Overrides FilterBaseAttribute.FilterType"
  },
  "api/XData.Mapping.LinkAttribute.LinkedSourceAlias.html": {
    "href": "api/XData.Mapping.LinkAttribute.LinkedSourceAlias.html",
    "title": "Property LinkedSourceAlias | XData website",
    "keywords": "Property LinkedSourceAlias | Improve this Doc View Source LinkedSourceAlias Secondary source alias Declaration public string LinkedSourceAlias { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.LinkAttribute.LinkedFieldName.html": {
    "href": "api/XData.Mapping.LinkAttribute.LinkedFieldName.html",
    "title": "Property LinkedFieldName | XData website",
    "keywords": "Property LinkedFieldName | Improve this Doc View Source LinkedFieldName Secondary field name Declaration public string LinkedFieldName { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.LinkAttribute.-ctor.html": {
    "href": "api/XData.Mapping.LinkAttribute.-ctor.html",
    "title": "Constructor LinkAttribute | XData website",
    "keywords": "Constructor LinkAttribute | Improve this Doc View Source LinkAttribute(String, String, String, String) Base link attribute constructor Declaration public LinkAttribute(string linkedSource, string linkedFieldName, string source, string fieldName = \"\") Parameters Type Name Description String linkedSource Secondary source alias String linkedFieldName Secondary field name String source Primary source alias String fieldName Primary field name Exceptions Type Condition XDataRuntimeException Secondary source alias cannot be null or empty string XDataRuntimeException Secondary field name cannot be null or empty string"
  },
  "api/XData.Mapping.LinkAttribute.html": {
    "href": "api/XData.Mapping.LinkAttribute.html",
    "title": "Class LinkAttribute | XData website",
    "keywords": "Class LinkAttribute Base link attribute Inheritance Object Attribute FilterBaseAttribute FilterAttribute OptionalFilterAttribute LinkAttribute Inherited Members OptionalFilterAttribute.PrimaryFilter FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class LinkAttribute : OptionalFilterAttribute Constructors Name Description LinkAttribute(String, String, String, String) Base link attribute constructor Properties Name Description FilterType Filter type LinkedFieldName Secondary field name LinkedSourceAlias Secondary source alias TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also LinkAttribute OptionalFilterAttribute"
  },
  "api/XData.Mapping.Link-2.Value.html": {
    "href": "api/XData.Mapping.Link-2.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Dictionary value Declaration public TVal Value { get; protected set; } Property Value Type Description TVal"
  },
  "api/XData.Mapping.Link-2.Source.html": {
    "href": "api/XData.Mapping.Link-2.Source.html",
    "title": "Property Source | XData website",
    "keywords": "Property Source | Improve this Doc View Source Source Dictionary source data object Declaration public abstract TSrc Source { set; } Property Value Type Description TSrc"
  },
  "api/XData.Mapping.Link-2.op_Implicit.html": {
    "href": "api/XData.Mapping.Link-2.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(Link<TVal, TSrc> to TVal) Implicitly returns dictionary value Declaration public static implicit operator TVal(Link<TVal, TSrc> val) Parameters Type Name Description Link <TVal, TSrc> val Dictionary property Returns Type Description TVal Value"
  },
  "api/XData.Mapping.Link-2.IsNull.html": {
    "href": "api/XData.Mapping.Link-2.IsNull.html",
    "title": "Method IsNull | XData website",
    "keywords": "Method IsNull | Improve this Doc View Source IsNull() Check link for null value Declaration public bool IsNull() Returns Type Description Boolean Link is null"
  },
  "api/XData.Mapping.Link-2.op_Addition.html": {
    "href": "api/XData.Mapping.Link-2.op_Addition.html",
    "title": "Operator Addition | XData website",
    "keywords": "Operator Addition | Improve this Doc View Source Addition(Link<TVal, TSrc>, TSrc) Set link source Declaration public static Link<TVal, TSrc> operator +(Link<TVal, TSrc> link, TSrc source) Parameters Type Name Description Link <TVal, TSrc> link Link TSrc source Link source Returns Type Description Link <TVal, TSrc> Updated link"
  },
  "api/XData.Mapping.Link-2.Key.html": {
    "href": "api/XData.Mapping.Link-2.Key.html",
    "title": "Method Key | XData website",
    "keywords": "Method Key | Improve this Doc View Source Key<TKey>(String) Declaration public abstract TKey Key<TKey>(string keyProperty) Parameters Type Name Description String keyProperty Returns Type Description TKey Type Parameters Name Description TKey"
  },
  "api/XData.Mapping.Link-2.html": {
    "href": "api/XData.Mapping.Link-2.html",
    "title": "Class Link<TVal, TSrc> | XData website",
    "keywords": "Class Link<TVal, TSrc> Dictionary link wrapper Inheritance Object Link<TVal, TSrc> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax public abstract class Link<TVal, TSrc> : ILink where TVal : IComparable<TVal> where TSrc : class, IDataObject, new() Type Parameters Name Description TVal Link value type TSrc Link source type Examples // declaration [Property(\"name\", \"S\"), DictionaryProperty(\"Name\", \"DocState\"), DictionaryProperty(\"Code\", \"DocStateCode\")] public Link<string, DocState> DocState { get; set; } // using newInvoice.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == \"CREATED\"); // is the same as newInvoice.DocState.Source = dataScope.GetDictionaryValue<DocState>(x => x.Code == \"CREATED\"); Properties Name Description Source Dictionary source data object Value Dictionary value Methods Name Description IsNull() Check link for null value Key<TKey>(String) Operators Name Description Addition(Link<TVal, TSrc>, TSrc) Set link source Implicit(Link<TVal, TSrc> to TVal) Implicitly returns dictionary value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also LinkPropertyAttribute Value Source Addition(Link<TVal, TSrc>, TSrc) Implicit(Link<TVal, TSrc> to TVal) GetDictionaryValue<T>(Expression<Func<T, Boolean>>, String, ISecuritySession, Variable[]) IsNull()"
  },
  "api/XData.Mapping.InnerViewAttribute.TypeId.html": {
    "href": "api/XData.Mapping.InnerViewAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.InnerViewAttribute.Type.html": {
    "href": "api/XData.Mapping.InnerViewAttribute.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType InnerView Overrides DataSourceAttribute.Type"
  },
  "api/XData.Mapping.InnerViewAttribute.Alias.html": {
    "href": "api/XData.Mapping.InnerViewAttribute.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Inner view alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias"
  },
  "api/XData.Mapping.InnerViewAttribute.InnerViewType.html": {
    "href": "api/XData.Mapping.InnerViewAttribute.InnerViewType.html",
    "title": "Property InnerViewType | XData website",
    "keywords": "Property InnerViewType | Improve this Doc View Source InnerViewType Object type represents inner view structure Declaration public Type InnerViewType { get; } Property Value Type Description Type"
  },
  "api/XData.Mapping.InnerViewAttribute.-ctor.html": {
    "href": "api/XData.Mapping.InnerViewAttribute.-ctor.html",
    "title": "Constructor InnerViewAttribute | XData website",
    "keywords": "Constructor InnerViewAttribute | Improve this Doc View Source InnerViewAttribute(String, Type) Data object inner view attribute Declaration public InnerViewAttribute(string alias, Type innerViewType) Parameters Type Name Description String alias Inner view alias Type innerViewType Object type represents inner view structure Exceptions Type Condition XDataRuntimeException Inner view alias cannot be null or empty string XDataRuntimeException Object type represents inner view structure cannot be null"
  },
  "api/XData.Mapping.InnerViewAttribute.html": {
    "href": "api/XData.Mapping.InnerViewAttribute.html",
    "title": "Class InnerViewAttribute | XData website",
    "keywords": "Class InnerViewAttribute Data object inner view attribute Inheritance Object Attribute DataSourceAttribute InnerViewAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class InnerViewAttribute : DataSourceAttribute Examples InnerView(\"H\", typeof(DocLastChange)) Constructors Name Description InnerViewAttribute(String, Type) Data object inner view attribute Properties Name Description Alias Inner view alias InnerViewType Object type represents inner view structure Type Source type TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DataTableAttribute SubqueryAttribute SubqueryLinkAttribute"
  },
  "api/XData.Mapping.HintType.html": {
    "href": "api/XData.Mapping.HintType.html",
    "title": "Enum HintType | XData website",
    "keywords": "Enum HintType Hint type Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [Flags] public enum HintType Fields Name Description All Delete Insert Select Update Extension Methods SerializationExtensions.ToXml<HintType>() CollectionsExtensions.SetValue<HintType, T>(T) CollectionsExtensions.AsEnum<HintType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<HintType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<HintType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.HintInfo.Hint.html": {
    "href": "api/XData.Mapping.HintInfo.Hint.html",
    "title": "Property Hint | XData website",
    "keywords": "Property Hint | Improve this Doc View Source Hint Hint text Declaration public string Hint { get; set; } Property Value Type Description String"
  },
  "api/XData.Mapping.HintInfo.HintType.html": {
    "href": "api/XData.Mapping.HintInfo.HintType.html",
    "title": "Property HintType | XData website",
    "keywords": "Property HintType | Improve this Doc View Source HintType Hint type Declaration public HintType HintType { get; set; } Property Value Type Description HintType"
  },
  "api/XData.Mapping.HintInfo.html": {
    "href": "api/XData.Mapping.HintInfo.html",
    "title": "Class HintInfo | XData website",
    "keywords": "Class HintInfo Hint description Inheritance Object HintInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax public class HintInfo Properties Name Description Hint Hint text HintType Hint type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.HintAttribute.TypeId.html": {
    "href": "api/XData.Mapping.HintAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.HintAttribute.Alias.html": {
    "href": "api/XData.Mapping.HintAttribute.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Data source alias to apply hint Declaration public string Alias { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.HintAttribute.Hint.html": {
    "href": "api/XData.Mapping.HintAttribute.Hint.html",
    "title": "Property Hint | XData website",
    "keywords": "Property Hint | Improve this Doc View Source Hint Hint Declaration public HintInfo Hint { get; } Property Value Type Description HintInfo"
  },
  "api/XData.Mapping.HintAttribute.-ctor.html": {
    "href": "api/XData.Mapping.HintAttribute.-ctor.html",
    "title": "Constructor HintAttribute | XData website",
    "keywords": "Constructor HintAttribute | Improve this Doc View Source HintAttribute(String, String, HintType) Hint attribute constructor Declaration public HintAttribute(string alias, string hint, HintType hintType = HintType.Select) Parameters Type Name Description String alias Data source alias String hint Hint text HintType hintType Hint type"
  },
  "api/XData.Mapping.HintAttribute.html": {
    "href": "api/XData.Mapping.HintAttribute.html",
    "title": "Class HintAttribute | XData website",
    "keywords": "Class HintAttribute Inheritance Object Attribute HintAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class HintAttribute : Attribute Constructors Name Description HintAttribute(String, String, HintType) Hint attribute constructor Properties Name Description Alias Data source alias to apply hint Hint Hint TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.HierarchyAttribute.TypeId.html": {
    "href": "api/XData.Mapping.HierarchyAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.HierarchyAttribute.Source.html": {
    "href": "api/XData.Mapping.HierarchyAttribute.Source.html",
    "title": "Property Source | XData website",
    "keywords": "Property Source | Improve this Doc View Source Source Source table alias Declaration public string Source { get; } Property Value Type Description String See Also Alias"
  },
  "api/XData.Mapping.HierarchyAttribute.TreeTableName.html": {
    "href": "api/XData.Mapping.HierarchyAttribute.TreeTableName.html",
    "title": "Property TreeTableName | XData website",
    "keywords": "Property TreeTableName | Improve this Doc View Source TreeTableName Link table name Declaration public string TreeTableName { get; } Property Value Type Description String Remarks Tree table contains links from tree node to all subtree nodes."
  },
  "api/XData.Mapping.HierarchyAttribute.Parent.html": {
    "href": "api/XData.Mapping.HierarchyAttribute.Parent.html",
    "title": "Property Parent | XData website",
    "keywords": "Property Parent | Improve this Doc View Source Parent Source table parent column name Declaration public string Parent { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.HierarchyAttribute.LinkParent.html": {
    "href": "api/XData.Mapping.HierarchyAttribute.LinkParent.html",
    "title": "Property LinkParent | XData website",
    "keywords": "Property LinkParent | Improve this Doc View Source LinkParent Link table parent column name Declaration public string LinkParent { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.HierarchyAttribute.LinkChild.html": {
    "href": "api/XData.Mapping.HierarchyAttribute.LinkChild.html",
    "title": "Property LinkChild | XData website",
    "keywords": "Property LinkChild | Improve this Doc View Source LinkChild Link table child column name Declaration public string LinkChild { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.HierarchyAttribute.-ctor.html": {
    "href": "api/XData.Mapping.HierarchyAttribute.-ctor.html",
    "title": "Constructor HierarchyAttribute | XData website",
    "keywords": "Constructor HierarchyAttribute | Improve this Doc View Source HierarchyAttribute(String, String, String, String, String) Hierarchy attribute Declaration public HierarchyAttribute(string source, string treeTableName, string parent, string linkParent, string linkChild) Parameters Type Name Description String source Source table alias String treeTableName Link table name String parent Source table parent column name String linkParent Link table parent column name String linkChild Link table child column name Exceptions Type Condition XDataRuntimeException Source table alias cannot be null or empty string XDataRuntimeException Link table name cannot be null or empty string XDataRuntimeException Source table parent column name cannot be null or empty string XDataRuntimeException Link table parent column name cannot be null or empty string XDataRuntimeException Link table child column name cannot be null or empty string"
  },
  "api/XData.Mapping.HierarchyAttribute.html": {
    "href": "api/XData.Mapping.HierarchyAttribute.html",
    "title": "Class HierarchyAttribute | XData website",
    "keywords": "Class HierarchyAttribute Hierarchy attribute Inheritance Object Attribute HierarchyAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class HierarchyAttribute : Attribute Remarks Tables can be hierarchically liked to themselves. On every hierarchical link is possible to build hierarchy table, to simplify tree structure queries. It's alternative of ORACLE CONNECT BY PRIOR...START WITH construction for other database engines // Table T_TEST has parent_id field tree linked to test_id (T_TEST's pk) // Table L_TEST has two fields parent_id and child_id all linked to T_TEST.test_id // Table L_TEST contains all subtree relations inside T_TEST // For example: for T_TEST (test_id, parent_id): (1, null) : (2, 1) : (3, 2) // L_TEST will contain (parent_id, child_id): (1, 1) : (1, 2) : (1, 3) : (2, 2) : (2, 3) : (3, 3) [DataObject(\"T\"), DataTable(\"T_TEST\", \"T\"), Hierarchy(\"T\", \"L_TEST\", \"parent_id\", \"parent_id\", \"child_id\"), Column(\"TestId\", \"test_id\", typeof(long?), \"T\", Flags = DataPropertyFlag.Id)] WARNING! Hierarchy base table (T_TEST in example above) mast contain non complex primary key! Hint: Possible to describe multiple hierarchies across one table using different tree links Constructors Name Description HierarchyAttribute(String, String, String, String, String) Hierarchy attribute Properties Name Description LinkChild Link table child column name LinkParent Link table parent column name Parent Source table parent column name Source Source table alias TreeTableName Link table name TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.FilterCombinationAttribute.TypeId.html": {
    "href": "api/XData.Mapping.FilterCombinationAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.FilterCombinationAttribute.Name.html": {
    "href": "api/XData.Mapping.FilterCombinationAttribute.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Name of filter combination (filter group) Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.FilterCombinationAttribute.Parent.html": {
    "href": "api/XData.Mapping.FilterCombinationAttribute.Parent.html",
    "title": "Property Parent | XData website",
    "keywords": "Property Parent | Improve this Doc View Source Parent Parent filter combination (filter group) name Declaration public string Parent { get; set; } Property Value Type Description String"
  },
  "api/XData.Mapping.FilterCombinationAttribute.Combination.html": {
    "href": "api/XData.Mapping.FilterCombinationAttribute.Combination.html",
    "title": "Property Combination | XData website",
    "keywords": "Property Combination | Improve this Doc View Source Combination Filter combination (filter group) logical operation (And or Or) Declaration public Combination Combination { get; set; } Property Value Type Description Combination"
  },
  "api/XData.Mapping.FilterCombinationAttribute.-ctor.html": {
    "href": "api/XData.Mapping.FilterCombinationAttribute.-ctor.html",
    "title": "Constructor FilterCombinationAttribute | XData website",
    "keywords": "Constructor FilterCombinationAttribute | Improve this Doc View Source FilterCombinationAttribute(String) Data object filter combination (filter group) attribute constructor Declaration public FilterCombinationAttribute(string name) Parameters Type Name Description String name Name of filter combination (filter group) Exceptions Type Condition XDataRuntimeException Name of filter combination (filter group) cannot be null or empty string"
  },
  "api/XData.Mapping.FilterCombinationAttribute.html": {
    "href": "api/XData.Mapping.FilterCombinationAttribute.html",
    "title": "Class FilterCombinationAttribute | XData website",
    "keywords": "Class FilterCombinationAttribute Data object filter combination (filter group) attribute Inheritance Object Attribute FilterCombinationAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class FilterCombinationAttribute : Attribute Remarks Filter combinations combine filters into named logical groups united by same logical operation (see Combination ) Default filter combination always exists. It have And combination and named as Empty Filter combination tree based on Parent property Constructors Name Description FilterCombinationAttribute(String) Data object filter combination (filter group) attribute constructor Properties Name Description Combination Filter combination (filter group) logical operation (And or Or) Name Name of filter combination (filter group) Parent Parent filter combination (filter group) name TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.FilterBaseAttribute.FilterType.html": {
    "href": "api/XData.Mapping.FilterBaseAttribute.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration public abstract FilterType FilterType { get; } Property Value Type Description FilterType See Also FilterType"
  },
  "api/XData.Mapping.FilterBaseAttribute.html": {
    "href": "api/XData.Mapping.FilterBaseAttribute.html",
    "title": "Class FilterBaseAttribute | XData website",
    "keywords": "Class FilterBaseAttribute Base filter description attribute Inheritance Object Attribute FilterBaseAttribute FilterAttribute SubqueryLinkAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax public abstract class FilterBaseAttribute : Attribute Properties Name Description FilterType Filter type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.FilterAttribute.Source.html": {
    "href": "api/XData.Mapping.FilterAttribute.Source.html",
    "title": "Property Source | XData website",
    "keywords": "Property Source | Improve this Doc View Source Source Primary source alias Declaration public string Source { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.FilterAttribute.FieldName.html": {
    "href": "api/XData.Mapping.FilterAttribute.FieldName.html",
    "title": "Property FieldName | XData website",
    "keywords": "Property FieldName | Improve this Doc View Source FieldName Primary field name Declaration public string FieldName { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.FilterAttribute.Operation.html": {
    "href": "api/XData.Mapping.FilterAttribute.Operation.html",
    "title": "Property Operation | XData website",
    "keywords": "Property Operation | Improve this Doc View Source Operation Filter operation Declaration public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation See Also FilterOperation"
  },
  "api/XData.Mapping.FilterAttribute.Combination.html": {
    "href": "api/XData.Mapping.FilterAttribute.Combination.html",
    "title": "Property Combination | XData website",
    "keywords": "Property Combination | Improve this Doc View Source Combination Filter combination (filter group) name Declaration public string Combination { get; set; } Property Value Type Description String See Also FilterCombinationAttribute"
  },
  "api/XData.Mapping.FilterAttribute.-ctor.html": {
    "href": "api/XData.Mapping.FilterAttribute.-ctor.html",
    "title": "Constructor FilterAttribute | XData website",
    "keywords": "Constructor FilterAttribute | Improve this Doc View Source FilterAttribute(String, String) Base filter attribute Declaration protected FilterAttribute(string source, string fieldName) Parameters Type Name Description String source Primary source alias String fieldName Primary field name Exceptions Type Condition XDataRuntimeException Primary source alias cannot be null or empty string XDataRuntimeException Primary field name cannot be null or empty string"
  },
  "api/XData.Mapping.FilterAttribute.html": {
    "href": "api/XData.Mapping.FilterAttribute.html",
    "title": "Class FilterAttribute | XData website",
    "keywords": "Class FilterAttribute Base inner filter attribute Inheritance Object Attribute FilterBaseAttribute FilterAttribute ConstantFilterAttribute DictionaryFilterAttribute ExpressionFilterAttribute OptionalFilterAttribute RangeFilterAttribute Inherited Members FilterBaseAttribute.FilterType Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public abstract class FilterAttribute : FilterBaseAttribute Constructors Name Description FilterAttribute(String, String) Base filter attribute Properties Name Description Combination Filter combination (filter group) name FieldName Primary field name Operation Filter operation Source Primary source alias Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also FilterCombinationAttribute LinkAttribute SubqueryLinkAttribute ConstantFilterAttribute DictionaryFilterAttribute SubqueryFilterAttribute RangeFilterAttribute ExpressionFilterAttribute RuntimeFilter"
  },
  "api/XData.Mapping.ExternalLinkAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ExternalLinkAttribute.ChildType.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.ChildType.html",
    "title": "Property ChildType | XData website",
    "keywords": "Property ChildType | Improve this Doc View Source ChildType Child data object type Declaration public Type ChildType { get; } Property Value Type Description Type"
  },
  "api/XData.Mapping.ExternalLinkAttribute.ChildLinkType.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.ChildLinkType.html",
    "title": "Property ChildLinkType | XData website",
    "keywords": "Property ChildLinkType | Improve this Doc View Source ChildLinkType Child linked property type Declaration public Type ChildLinkType { get; set; } Property Value Type Description Type Remarks Used when child repository linked through subquery"
  },
  "api/XData.Mapping.ExternalLinkAttribute.ChildProperty.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.ChildProperty.html",
    "title": "Property ChildProperty | XData website",
    "keywords": "Property ChildProperty | Improve this Doc View Source ChildProperty Child property to link Declaration public string ChildProperty { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.ExternalLinkAttribute.FilterName.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.FilterName.html",
    "title": "Property FilterName | XData website",
    "keywords": "Property FilterName | Improve this Doc View Source FilterName Filter name Declaration public string FilterName { get; } Property Value Type Description String Remarks If not assigned used FilterBy ChildProperty pattern"
  },
  "api/XData.Mapping.ExternalLinkAttribute.PropertyName.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Property to link Declaration public string PropertyName { get; } Property Value Type Description String Remarks If not assigned used ChildProperty name"
  },
  "api/XData.Mapping.ExternalLinkAttribute.MasterRefresh.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.MasterRefresh.html",
    "title": "Property MasterRefresh | XData website",
    "keywords": "Property MasterRefresh | Improve this Doc View Source MasterRefresh Refresh parent object notification on child submit Declaration public bool MasterRefresh { get; set; } Property Value Type Description Boolean Remarks Used when parent object contains calculated fields over child objects"
  },
  "api/XData.Mapping.ExternalLinkAttribute.DirectLink.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.DirectLink.html",
    "title": "Property DirectLink | XData website",
    "keywords": "Property DirectLink | Improve this Doc View Source DirectLink Direct link slave to selected tree node Declaration public bool DirectLink { get; set; } Property Value Type Description Boolean Remarks Used to show/hide subtree related items in slave view when master is tree When ShowSubtree = false - slave contains selected node child items only When ShowSubtree = true - selected node and it's subtree child items Works with ShowSubtree : External links marked as DirectLink is filled while ShowSubtree is false and omitted otherwise"
  },
  "api/XData.Mapping.ExternalLinkAttribute.Operation.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.Operation.html",
    "title": "Property Operation | XData website",
    "keywords": "Property Operation | Improve this Doc View Source Operation Filter operation Declaration public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation See Also FilterOperation"
  },
  "api/XData.Mapping.ExternalLinkAttribute.Nullable.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.Nullable.html",
    "title": "Property Nullable | XData website",
    "keywords": "Property Nullable | Improve this Doc View Source Nullable Filter null value handling Declaration public FilterNullable Nullable { get; set; } Property Value Type Description FilterNullable See Also FilterNullable"
  },
  "api/XData.Mapping.ExternalLinkAttribute.PrimaryFilter.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.PrimaryFilter.html",
    "title": "Property PrimaryFilter | XData website",
    "keywords": "Property PrimaryFilter | Improve this Doc View Source PrimaryFilter Primary filter flag Declaration public bool PrimaryFilter { get; set; } Property Value Type Description Boolean See Also OptionalFilterAttribute"
  },
  "api/XData.Mapping.ExternalLinkAttribute.Combination.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.Combination.html",
    "title": "Property Combination | XData website",
    "keywords": "Property Combination | Improve this Doc View Source Combination Filter combination (filter group) name Declaration public string Combination { get; set; } Property Value Type Description String See Also FilterCombinationAttribute"
  },
  "api/XData.Mapping.ExternalLinkAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.-ctor.html",
    "title": "Constructor ExternalLinkAttribute | XData website",
    "keywords": "Constructor ExternalLinkAttribute | Improve this Doc View Source ExternalLinkAttribute(Type, String, String, String) External link attribute Declaration public ExternalLinkAttribute(Type childType, string childProperty, string property = \"\", string filterName = \"\") Parameters Type Name Description Type childType Child data object description type String childProperty Child property to link String property Parent property contains value to link String filterName Filter name Exceptions Type Condition XDataRuntimeException Child data object description type cannot be null XDataRuntimeException Child property to link cannot be null or empty string"
  },
  "api/XData.Mapping.ExternalLinkAttribute.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.html",
    "title": "Class ExternalLinkAttribute | XData website",
    "keywords": "Class ExternalLinkAttribute Data object external link to other (child) data objects attribute Inheritance Object Attribute ExternalLinkAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ExternalLinkAttribute : Attribute Remarks Used to organize master/detail relation between repositories Constructors Name Description ExternalLinkAttribute(Type, String, String, String) External link attribute Properties Name Description ChildLinkType Child linked property type ChildProperty Child property to link ChildType Child data object type Combination Filter combination (filter group) name DirectLink Direct link slave to selected tree node FilterName Filter name MasterRefresh Refresh parent object notification on child submit Nullable Filter null value handling Operation Filter operation PrimaryFilter Primary filter flag PropertyName Property to link TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ExpressionFilterAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ExpressionFilterAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ExpressionFilterAttribute.ExprText.html": {
    "href": "api/XData.Mapping.ExpressionFilterAttribute.ExprText.html",
    "title": "Property ExprText | XData website",
    "keywords": "Property ExprText | Improve this Doc View Source ExprText SQL expression Declaration public string ExprText { get; } Property Value Type Description String Remarks WARNING! SQL expressions can use specific SQL dialect features! Data mapping may be not compatible with other database engines!"
  },
  "api/XData.Mapping.ExpressionFilterAttribute.FilterType.html": {
    "href": "api/XData.Mapping.ExpressionFilterAttribute.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Expression Overrides FilterBaseAttribute.FilterType"
  },
  "api/XData.Mapping.ExpressionFilterAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ExpressionFilterAttribute.-ctor.html",
    "title": "Constructor ExpressionFilterAttribute | XData website",
    "keywords": "Constructor ExpressionFilterAttribute | Improve this Doc View Source ExpressionFilterAttribute(String, String, String) Expression filter attribute Declaration public ExpressionFilterAttribute(string source, string fieldName, string exprText) Parameters Type Name Description String source Primary source alias String fieldName Primary field name String exprText SQL expression text Exceptions Type Condition XDataRuntimeException SQL expression cannot be null or empty string"
  },
  "api/XData.Mapping.ExpressionFilterAttribute.html": {
    "href": "api/XData.Mapping.ExpressionFilterAttribute.html",
    "title": "Class ExpressionFilterAttribute | XData website",
    "keywords": "Class ExpressionFilterAttribute Data object plain SQL expression filter attribute Inheritance Object Attribute FilterBaseAttribute FilterAttribute ExpressionFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ExpressionFilterAttribute : FilterAttribute Remarks Used to filter data by field comparison to plain SQL expression (for example: some_field = substr(other_field, 1, 2) ) Hint: Filter field can be represented as expression two by ColumnExpressionAttribute or PropertyExpressionAttribute WARNING! Sql expressions can use specific Sql dialect features! Data mapping may be not compatible with other database engines! Constructors Name Description ExpressionFilterAttribute(String, String, String) Expression filter attribute Properties Name Description ExprText SQL expression FilterType Filter type TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.html": {
    "href": "api/XData.Mapping.Dynamic.html",
    "title": "Namespace XData.Mapping.Dynamic | XData website",
    "keywords": "Namespace XData.Mapping.Dynamic Classes ParameterDescription SQL procedure / function parameter description QueryDescriptionExtensions Query description extensions TaggedExpression<TTag, TResult> Tagged expression XDataMapping Interfaces IExpressionPropertyAdapter SQL expression property mapping adapter IExternalLinkAdapter<T, TChild> External link mapping adapter IExternalLinkDefinition Dynamic structure external link definition interface IExternalLinkDefinitionAdapter<T> External link definition adapter IExternalLinkFlag Dynamic structure external link flag interface IFilterAdapter Filter description adapter IFilterDescription Dynamic query filter description IInnerFilterAdapter Inner filter description adapter ILinkPropertyMappingAdapter<T> Link property mapping adapter IParameterDescription Dynamic stored procedure parameter description IProcedureParameterAdapter Procedure parameter mapping adapter IProcedureParameterFlag Procedure parameter mapping flag IPropertyMappingAdapter Basic dynamic structure adapter IQueryDescription Dynamic query description basic interface IQueryDescription<T> Dynamic query description with result type specified interface IQueryStructure Dynamic query structure interface IQueryStructureAdapter Query structure mapping adapter interface IQueryWithAdapter<TRoot> Common-Table-Expression (WITH) mapping attributes IQueryWithFlag Common-Table-Expression (WITH) flag IRepositoryDescription<T> Dynamic repository structure description interface IRepositoryExpressionMappingAdapter Repository SQL expression property mapping adapter IRepositoryPropertyMappingAdapter<T, TValue> Repository property mapping adapter IRepositoryReadOnlyPropertyMappingAdapter Repository read only property mapping adapter IRepositoryStructure<T> Repository structure descriptor IRepositoryStructureAdapter Repository structure adapter IRepositoryStructureAdapter<T> Repository structure mapping adapter interface IResultSetDescription Dynamic stored procedure result set description IStructureFlag Dynamic structure flag interface ISubqueryLinkAdapter Subquery link filter description adapter ISubqueryLinkAdapter<TDObj> Subquery link filter description adapter ISubqueryLinkAdapter<T, TDObj> Subquery link filter description adapter ITaggedExpression Object tagged expression interface"
  },
  "api/XData.Mapping.Dynamic.XDataMapping.GetStructure.html": {
    "href": "api/XData.Mapping.Dynamic.XDataMapping.GetStructure.html",
    "title": "Method GetStructure | XData website",
    "keywords": "Method GetStructure | Improve this Doc View Source GetStructure(String, String, DataStructureFlag, Variable[]) Returns dynamic query structure Declaration public static IQueryStructure GetStructure(string baseTableAlias = \"\", string context = null, DataStructureFlag flags = DataStructureFlag.ReadOnly, params Variable[] variables) Parameters Type Name Description String baseTableAlias Base table alias String context Context name DataStructureFlag flags Data object flags Variable [] variables Variables Returns Type Description IQueryStructure Dynamic query structure See Also DataStructureFlag Variable IQueryStructure | Improve this Doc View Source GetStructure<T>(String) Returns dynamic query structure based on static mapping Declaration public static IQueryStructure GetStructure<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description IQueryStructure Dynamic query structure Type Parameters Name Description T See Also DataStructureFlag Variable IQueryStructure"
  },
  "api/XData.Mapping.Dynamic.XDataMapping.CustomMapping.html": {
    "href": "api/XData.Mapping.Dynamic.XDataMapping.CustomMapping.html",
    "title": "Method CustomMapping | XData website",
    "keywords": "Method CustomMapping | Improve this Doc View Source CustomMapping<T>() Returns dynamic repository structure Declaration public static IRepositoryStructure<T> CustomMapping<T>() where T : class, IDataObject, new() Returns Type Description IRepositoryStructure <T> Dynamic query structure Type Parameters Name Description T Exceptions Type Condition XDataRuntimeException See Also DataStructureFlag Variable IQueryStructure"
  },
  "api/XData.Mapping.Dynamic.XDataMapping.html": {
    "href": "api/XData.Mapping.Dynamic.XDataMapping.html",
    "title": "Class XDataMapping | XData website",
    "keywords": "Class XDataMapping Inheritance Object XDataMapping Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public static class XDataMapping Methods Name Description CustomMapping<T>() Returns dynamic repository structure GetStructure(String, String, DataStructureFlag, Variable[]) Returns dynamic query structure GetStructure<T>(String) Returns dynamic query structure based on static mapping"
  },
  "api/XData.Mapping.Dynamic.TaggedExpression-2.KeyType.html": {
    "href": "api/XData.Mapping.Dynamic.TaggedExpression-2.KeyType.html",
    "title": "Property KeyType | XData website",
    "keywords": "Property KeyType | Improve this Doc View Source KeyType Tag key type Declaration public Type KeyType { get; } Property Value Type Description Type Implements ITaggedExpression.KeyType"
  },
  "api/XData.Mapping.Dynamic.TaggedExpression-2.Key.html": {
    "href": "api/XData.Mapping.Dynamic.TaggedExpression-2.Key.html",
    "title": "Property Key | XData website",
    "keywords": "Property Key | Improve this Doc View Source Key Tag key Declaration public object Key { get; } Property Value Type Description Object Implements ITaggedExpression.Key"
  },
  "api/XData.Mapping.Dynamic.TaggedExpression-2.Value.html": {
    "href": "api/XData.Mapping.Dynamic.TaggedExpression-2.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Tagged expression Declaration public Expression Value { get; } Property Value Type Description Expression Implements ITaggedExpression.Value"
  },
  "api/XData.Mapping.Dynamic.TaggedExpression-2.op_Implicit.html": {
    "href": "api/XData.Mapping.Dynamic.TaggedExpression-2.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(KeyValuePair<TTag, Expression<Func<IQueryStructureAdapter, TResult>>> to TaggedExpression<TTag, TResult>) Tagged expression implicit conversion operator Declaration public static implicit operator TaggedExpression<TTag, TResult>(KeyValuePair<TTag, Expression<Func<IQueryStructureAdapter, TResult>>> pair) Parameters Type Name Description KeyValuePair <TTag, Expression < Func < IQueryStructureAdapter , TResult>>> pair Key value pair Returns Type Description TaggedExpression <TTag, TResult> Tagged expression | Improve this Doc View Source Implicit(KeyValuePair<TTag, Expression<Func<IBlockQueryAdapter, TResult>>> to TaggedExpression<TTag, TResult>) Tagged expression implicit conversion operator Declaration public static implicit operator TaggedExpression<TTag, TResult>(KeyValuePair<TTag, Expression<Func<IBlockQueryAdapter, TResult>>> pair) Parameters Type Name Description KeyValuePair <TTag, Expression < Func < IBlockQueryAdapter , TResult>>> pair Key value pair Returns Type Description TaggedExpression <TTag, TResult> Tagged expression"
  },
  "api/XData.Mapping.Dynamic.TaggedExpression-2.html": {
    "href": "api/XData.Mapping.Dynamic.TaggedExpression-2.html",
    "title": "Class TaggedExpression<TTag, TResult> | XData website",
    "keywords": "Class TaggedExpression<TTag, TResult> Tagged expression Inheritance Object TaggedExpression<TTag, TResult> Implements ITaggedExpression Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public class TaggedExpression<TTag, TResult> : ITaggedExpression Type Parameters Name Description TTag Tag type TResult Expression Properties Name Description Key Tag key KeyType Tag key type Value Tagged expression Operators Name Description Implicit(KeyValuePair<TTag, Expression<Func<IBlockQueryAdapter, TResult>>> to TaggedExpression<TTag, TResult>) Tagged expression implicit conversion operator Implicit(KeyValuePair<TTag, Expression<Func<IQueryStructureAdapter, TResult>>> to TaggedExpression<TTag, TResult>) Tagged expression implicit conversion operator Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SetOperation.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SetOperation.html",
    "title": "Method SetOperation | XData website",
    "keywords": "Method SetOperation | Improve this Doc View Source SetOperation<T>(T, FilterOperation) Set filter or link operation Declaration public static T SetOperation<T>(this T desc, FilterOperation operation) where T : IFilterDescription Parameters Type Name Description T desc Filter description FilterOperation operation Filter operation Returns Type Description T Filter description Type Parameters Name Description T Filter description type Exceptions Type Condition XDataRuntimeException desc argument can not be null or empty See Also FilterOperation"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.AsPrimary.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.AsPrimary.html",
    "title": "Method AsPrimary | XData website",
    "keywords": "Method AsPrimary | Improve this Doc View Source AsPrimary<T>(T) Set primary filter flag to filter description Declaration public static T AsPrimary<T>(this T desc) where T : IFilterDescription Parameters Type Name Description T desc Filter description Returns Type Description T Filter description Type Parameters Name Description T Filter description type Exceptions Type Condition XDataRuntimeException desc argument can not be null"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SetCombination.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SetCombination.html",
    "title": "Method SetCombination | XData website",
    "keywords": "Method SetCombination | Improve this Doc View Source SetCombination<T>(T, String) Set combination name to filter description Declaration public static T SetCombination<T>(this T desc, string combinationName) where T : IFilterDescription Parameters Type Name Description T desc Filter description String combinationName Filter combination name Returns Type Description T Filter description Type Parameters Name Description T Filter description type Exceptions Type Condition XDataRuntimeException desc argument can not be null"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.Exists.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.Exists.html",
    "title": "Method Exists | XData website",
    "keywords": "Method Exists | Improve this Doc View Source Exists(IQueryStructureAdapter, String) Exists Declaration public static bool Exists(this IQueryStructureAdapter adapter, string subQueryAlias) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter String subQueryAlias Subquery alias Returns Type Description Boolean Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.Case.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.Case.html",
    "title": "Method Case | XData website",
    "keywords": "Method Case | Improve this Doc View Source Case<T, TResult>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, TResult>>, TaggedExpression<T, TResult>[]) Case Declaration public static TResult Case<T, TResult>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, TResult>> elseValue, params TaggedExpression<T, TResult>[] switchValues) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter Expression < Func < IQueryStructureAdapter , T>> expression Case expression Expression < Func < IQueryStructureAdapter , TResult>> elseValue Else value TaggedExpression <T, TResult>[] switchValues Case switch values Returns Type Description TResult Case result Type Parameters Name Description T TResult Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.DateDiff.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.DateDiff.html",
    "title": "Method DateDiff | XData website",
    "keywords": "Method DateDiff | Improve this Doc View Source DateDiff<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, DateTime>>, Expression<Func<IQueryStructureAdapter, DateTime>>, DateDiffKind) Dates difference Declaration public static T DateDiff<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, DateTime>> finalDate, Expression<Func<IQueryStructureAdapter, DateTime>> startDate, DateDiffKind kind) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter Expression < Func < IQueryStructureAdapter , DateTime >> finalDate Final date Expression < Func < IQueryStructureAdapter , DateTime >> startDate Start date DateDiffKind kind Dates differences kind Returns Type Description T Dates difference Type Parameters Name Description T Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.HasFlag.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.HasFlag.html",
    "title": "Method HasFlag | XData website",
    "keywords": "Method HasFlag | Improve this Doc View Source HasFlag<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>) Bit mask has flag Declaration public static T HasFlag<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, T>> flagValue, Expression<Func<IQueryStructureAdapter, T>> trueValue, Expression<Func<IQueryStructureAdapter, T>> falseValue) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter Expression < Func < IQueryStructureAdapter , T>> expression Expression to test Expression < Func < IQueryStructureAdapter , T>> flagValue Flag value Expression < Func < IQueryStructureAdapter , T>> trueValue Result if flag exists Expression < Func < IQueryStructureAdapter , T>> falseValue Result if flag not exists Returns Type Description T Bit mask has flag than trueValue else falseValue Type Parameters Name Description T Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SetExpression.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SetExpression.html",
    "title": "Method SetExpression | XData website",
    "keywords": "Method SetExpression | Improve this Doc View Source SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) Set expression to tag Declaration public static TaggedExpression<TTag, TResult> SetExpression<TTag, TResult>(this TTag key, Expression<Func<IQueryStructureAdapter, TResult>> expression) Parameters Type Name Description TTag key Tag value Expression < Func < IQueryStructureAdapter , TResult>> expression Expression Returns Type Description TaggedExpression <TTag, TResult> Tagged expression Type Parameters Name Description TTag Tag type TResult Expression result"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SqlFn.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SqlFn.html",
    "title": "Method SqlFn | XData website",
    "keywords": "Method SqlFn | Improve this Doc View Source SqlFn<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, Object>>[]) SQL function call Declaration public static TResult SqlFn<TResult>(this IQueryStructureAdapter adapter, string name, params Expression<Func<IQueryStructureAdapter, object>>[] parameters) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter String name SQL function full qualified name Expression < Func < IQueryStructureAdapter , Object >>[] parameters Function parameters descriptions Returns Type Description TResult Function call result Type Parameters Name Description TResult Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SqlParam.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SqlParam.html",
    "title": "Method SqlParam | XData website",
    "keywords": "Method SqlParam | Improve this Doc View Source SqlParam<TResult>(IQueryStructureAdapter, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) SQL parameter definition Declaration public static TResult SqlParam<TResult>(this IQueryStructureAdapter adapter, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) Parameters Type Name Description IQueryStructureAdapter adapter Query structure adapter String binding Parameter data binding name DbType type Parameter database type Expression < Func < IProcedureParameterAdapter , IProcedureParameterFlag >>[] attributes Parameter mapping attributes Returns Type Description TResult Parameter Type Parameters Name Description TResult Parameter mapped type Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SqlExpr.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.SqlExpr.html",
    "title": "Method SqlExpr | XData website",
    "keywords": "Method SqlExpr | Improve this Doc View Source SqlExpr<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, TResult>>[]) Plain SQL expression with XData LINQ expression placeholders Declaration public static TResult SqlExpr<TResult>(this IQueryStructureAdapter adapter, string format, params Expression<Func<IQueryStructureAdapter, TResult>>[] expressions) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter String format SQL expression body in Format(String, Object[]) style Expression < Func < IQueryStructureAdapter , TResult>>[] expressions XData LINQ parameter expressions Returns Type Description TResult SQL expression result Type Parameters Name Description TResult Remarks WARNING! Plain SQL expressions can use specific SQL dialect features! Data mapping may be not compatible with other database engines! Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.ToDataSet.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.ToDataSet.html",
    "title": "Method ToDataSet | XData website",
    "keywords": "Method ToDataSet | Improve this Doc View Source ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder) Composes data source text from sequence Declaration public static string ToDataSet<T>(this IEnumerable<T> source, string prefix, ISqlBuilder builder) Parameters Type Name Description IEnumerable <T> source Source sequence String prefix Source column prefix ISqlBuilder builder SQL dialect adapter Returns Type Description String Data source text Type Parameters Name Description T Source object type Remarks Used to compose synthetic data source from object sequence var ds = Enumerable.Range(1,3).ToDataSet(\"val\", XDataManager.GetContext().DialectAdapter); // for MSSQL dialect ds will contains \"(select 1 as val union select 2 as val union select 3 as val)\" // for Oracle dialect ds will contains \"(select 1 as val from dual union select 2 as val from dual union select 3 as val from dual)\" // Enumeration types can be used as var ds = Enum.GetValues(typeof(SomeEnumType)).Cast<int>().ToDataSet(\"val\", XDataManager.GetContext().DialectAdapter); // Object types properties are represented as fields var test = new []{new {Id=1, Name=\"Test\"}, new {Id=2, Name=\"Another\"}}; var ds = test.ToDataSet(\"X\", XDataManager.GetContext().DialectAdapter); // for MSSQL dialect ds will contains \"(select 1 as X_Id, 'Test' as X_Name union select 2 as X_Id, 'Another' as X_Name)\""
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.html",
    "title": "Class QueryDescriptionExtensions | XData website",
    "keywords": "Class QueryDescriptionExtensions Query description extensions Inheritance Object QueryDescriptionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public static class QueryDescriptionExtensions Methods Name Description AsPrimary<T>(T) Set primary filter flag to filter description Case<T, TResult>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, TResult>>, TaggedExpression<T, TResult>[]) Case DateDiff<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, DateTime>>, Expression<Func<IQueryStructureAdapter, DateTime>>, DateDiffKind) Dates difference Exists(IQueryStructureAdapter, String) Exists HasFlag<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>) Bit mask has flag SetCombination<T>(T, String) Set combination name to filter description SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) Set expression to tag SetOperation<T>(T, FilterOperation) Set filter or link operation SqlExpr<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, TResult>>[]) Plain SQL expression with XData LINQ expression placeholders SqlFn<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, Object>>[]) SQL function call SqlParam<TResult>(IQueryStructureAdapter, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) SQL parameter definition ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder) Composes data source text from sequence"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Alias.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Procedure alias Declaration public string Alias { get; set; } Property Value Type Description String Implements IParameterDescription.Alias"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Order.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Order.html",
    "title": "Property Order | XData website",
    "keywords": "Property Order | Improve this Doc View Source Order Parameter order Declaration public int Order { get; set; } Property Value Type Description Int32 Implements IParameterDescription.Order"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Binding.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Binding.html",
    "title": "Property Binding | XData website",
    "keywords": "Property Binding | Improve this Doc View Source Binding Parameter XData binding name Declaration public string Binding { get; set; } Property Value Type Description String Implements IParameterDescription.Binding"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Name.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Parameter name Declaration public string Name { get; set; } Property Value Type Description String Implements IParameterDescription.Name"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Type.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Parameter mapped type Declaration public Type Type { get; set; } Property Value Type Description Type Implements IParameterDescription.Type"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.DbType.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.DbType.html",
    "title": "Property DbType | XData website",
    "keywords": "Property DbType | Improve this Doc View Source DbType Parameter database type Declaration public DbType DbType { get; set; } Property Value Type Description DbType Implements IParameterDescription.DbType"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Direction.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Direction.html",
    "title": "Property Direction | XData website",
    "keywords": "Property Direction | Improve this Doc View Source Direction Parameter direction Declaration public ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection Implements IParameterDescription.Direction"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.UdtSqlType.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.UdtSqlType.html",
    "title": "Property UdtSqlType | XData website",
    "keywords": "Property UdtSqlType | Improve this Doc View Source UdtSqlType Parameter user-defined-type definition Declaration public UdtSqlType UdtSqlType { get; set; } Property Value Type Description UdtSqlType Implements IParameterDescription.UdtSqlType"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Size.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Size.html",
    "title": "Property Size | XData website",
    "keywords": "Property Size | Improve this Doc View Source Size Parameter size Declaration public int Size { get; set; } Property Value Type Description Int32 Implements IParameterDescription.Size"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Scale.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Scale.html",
    "title": "Property Scale | XData website",
    "keywords": "Property Scale | Improve this Doc View Source Scale Parameter scale Declaration public int Scale { get; set; } Property Value Type Description Int32 Implements IParameterDescription.Scale"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Value.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Parameter value Declaration public object Value { get; set; } Property Value Type Description Object Implements IParameterDescription.Value"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.DefaultValueType.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.DefaultValueType.html",
    "title": "Property DefaultValueType | XData website",
    "keywords": "Property DefaultValueType | Improve this Doc View Source DefaultValueType Parameter default value type Declaration public DefaultType DefaultValueType { get; set; } Property Value Type Description DefaultType Implements IParameterDescription.DefaultValueType"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.DefaultValue.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.DefaultValue.html",
    "title": "Property DefaultValue | XData website",
    "keywords": "Property DefaultValue | Improve this Doc View Source DefaultValue Parameter default value Declaration public object DefaultValue { get; set; } Property Value Type Description Object Implements IParameterDescription.DefaultValue"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.NativeSqlType.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.NativeSqlType.html",
    "title": "Property NativeSqlType | XData website",
    "keywords": "Property NativeSqlType | Improve this Doc View Source NativeSqlType Parameter native SQL type Declaration public string NativeSqlType { get; set; } Property Value Type Description String Implements IParameterDescription.NativeSqlType"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.TypeIsArray.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.TypeIsArray.html",
    "title": "Property TypeIsArray | XData website",
    "keywords": "Property TypeIsArray | Improve this Doc View Source TypeIsArray Parameter is VARARRAY Declaration public bool TypeIsArray { get; set; } Property Value Type Description Boolean Implements IParameterDescription.TypeIsArray"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.GetValue.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.GetValue.html",
    "title": "Method GetValue | XData website",
    "keywords": "Method GetValue | Improve this Doc View Source GetValue<T>() Parameter conversion Declaration public T GetValue<T>() Returns Type Description T Type Parameters Name Description T Conversion result type Implements IParameterDescription.GetValue<T>()"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Clone.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Clone.html",
    "title": "Method Clone | XData website",
    "keywords": "Method Clone | Improve this Doc View Source Clone() Parameter clone Declaration public IParameterDescription Clone() Returns Type Description IParameterDescription Implements IParameterDescription.Clone()"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.Copy.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.Copy.html",
    "title": "Method Copy | XData website",
    "keywords": "Method Copy | Improve this Doc View Source Copy(Object) Parameter copy Declaration public IParameterDescription Copy(object value) Parameters Type Name Description Object value Parameter value Returns Type Description IParameterDescription Parameter description"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.html",
    "title": "Class ParameterDescription | XData website",
    "keywords": "Class ParameterDescription SQL procedure / function parameter description Inheritance Object ParameterDescription Implements IParameterDescription Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public class ParameterDescription : IParameterDescription Properties Name Description Alias Procedure alias Binding Parameter XData binding name DbType Parameter database type DefaultValue Parameter default value DefaultValueType Parameter default value type Direction Parameter direction Name Parameter name NativeSqlType Parameter native SQL type Order Parameter order Scale Parameter scale Size Parameter size Type Parameter mapped type TypeIsArray Parameter is VARARRAY UdtSqlType Parameter user-defined-type definition Value Parameter value Methods Name Description Clone() Parameter clone Copy(Object) Parameter copy GetValue<T>() Parameter conversion Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ITaggedExpression.KeyType.html": {
    "href": "api/XData.Mapping.Dynamic.ITaggedExpression.KeyType.html",
    "title": "Property KeyType | XData website",
    "keywords": "Property KeyType | Improve this Doc View Source KeyType Key type Declaration Type KeyType { get; } Property Value Type Description Type"
  },
  "api/XData.Mapping.Dynamic.ITaggedExpression.Key.html": {
    "href": "api/XData.Mapping.Dynamic.ITaggedExpression.Key.html",
    "title": "Property Key | XData website",
    "keywords": "Property Key | Improve this Doc View Source Key Key value Declaration object Key { get; } Property Value Type Description Object"
  },
  "api/XData.Mapping.Dynamic.ITaggedExpression.Value.html": {
    "href": "api/XData.Mapping.Dynamic.ITaggedExpression.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Value type Declaration Expression Value { get; } Property Value Type Description Expression"
  },
  "api/XData.Mapping.Dynamic.ITaggedExpression.html": {
    "href": "api/XData.Mapping.Dynamic.ITaggedExpression.html",
    "title": "Interface ITaggedExpression | XData website",
    "keywords": "Interface ITaggedExpression Object tagged expression interface Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface ITaggedExpression Properties Name Description Key Key value KeyType Key type Value Value type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter.SubqueryLink.html": {
    "href": "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter.SubqueryLink.html",
    "title": "Method SubqueryLink | XData website",
    "keywords": "Method SubqueryLink | Improve this Doc View Source SubqueryLink(String) Subquery link filter description Declaration IFilterDescription SubqueryLink(string subqueryProperty) Parameters Type Name Description String subqueryProperty Subquery property name to link with Returns Type Description IFilterDescription Filter description | Improve this Doc View Source SubqueryLink(String, String) Subquery link filter description Declaration IFilterDescription SubqueryLink(string subqueryProperty, string property) Parameters Type Name Description String subqueryProperty Subquery property name to link with String property Base query property name to link with Returns Type Description IFilterDescription Filter description"
  },
  "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter.html",
    "title": "Interface ISubqueryLinkAdapter | XData website",
    "keywords": "Interface ISubqueryLinkAdapter Subquery link filter description adapter Inherited Members IFilterAdapter.Combination(String, Combination, String) IFilterAdapter.Combination(String, Combination) Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface ISubqueryLinkAdapter : IFilterAdapter Methods Name Description SubqueryLink(String) Subquery link filter description SubqueryLink(String, String) Subquery link filter description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter-2.SubqueryLink.html": {
    "href": "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter-2.SubqueryLink.html",
    "title": "Method SubqueryLink | XData website",
    "keywords": "Method SubqueryLink | Improve this Doc View Source SubqueryLink(Expression<Func<TDObj, Object>>) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with Returns Type Description IFilterDescription Filter description | Improve this Doc View Source SubqueryLink(Expression<Func<TDObj, Object>>, String) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty, string property) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with String property Base query property name to link with Returns Type Description IFilterDescription Filter description | Improve this Doc View Source SubqueryLink(Expression<Func<TDObj, Object>>, Expression<Func<T, Object>>) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty, Expression<Func<T, object>> property) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with Expression < Func <T, Object >> property Base query property name expression to link with Returns Type Description IFilterDescription Filter description"
  },
  "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter-2.html": {
    "href": "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter-2.html",
    "title": "Interface ISubqueryLinkAdapter<T, TDObj> | XData website",
    "keywords": "Interface ISubqueryLinkAdapter<T, TDObj> Subquery link filter description adapter Inherited Members ISubqueryLinkAdapter<T>.SubqueryLink(Expression<Func<T, Object>>) ISubqueryLinkAdapter<T>.SubqueryLink(Expression<Func<T, Object>>, String) ISubqueryLinkAdapter.SubqueryLink(String) ISubqueryLinkAdapter.SubqueryLink(String, String) IFilterAdapter.Combination(String, Combination, String) IFilterAdapter.Combination(String, Combination) Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface ISubqueryLinkAdapter<T, TDObj> : ISubqueryLinkAdapter<T>, ISubqueryLinkAdapter, IFilterAdapter where T : class where TDObj : class Type Parameters Name Description T Repository data object type TDObj Subquery mapped type Methods Name Description SubqueryLink(Expression<Func<TDObj, Object>>) Subquery link filter description SubqueryLink(Expression<Func<TDObj, Object>>, Expression<Func<T, Object>>) Subquery link filter description SubqueryLink(Expression<Func<TDObj, Object>>, String) Subquery link filter description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter-1.SubqueryLink.html": {
    "href": "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter-1.SubqueryLink.html",
    "title": "Method SubqueryLink | XData website",
    "keywords": "Method SubqueryLink | Improve this Doc View Source SubqueryLink(Expression<Func<TDObj, Object>>) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with Returns Type Description IFilterDescription Filter description | Improve this Doc View Source SubqueryLink(Expression<Func<TDObj, Object>>, String) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty, string property) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with String property Base query property name to link with Returns Type Description IFilterDescription Filter description"
  },
  "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.ISubqueryLinkAdapter-1.html",
    "title": "Interface ISubqueryLinkAdapter<TDObj> | XData website",
    "keywords": "Interface ISubqueryLinkAdapter<TDObj> Subquery link filter description adapter Inherited Members ISubqueryLinkAdapter.SubqueryLink(String) ISubqueryLinkAdapter.SubqueryLink(String, String) IFilterAdapter.Combination(String, Combination, String) IFilterAdapter.Combination(String, Combination) Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface ISubqueryLinkAdapter<TDObj> : ISubqueryLinkAdapter, IFilterAdapter where TDObj : class Type Parameters Name Description TDObj Subquery mapped type Methods Name Description SubqueryLink(Expression<Func<TDObj, Object>>) Subquery link filter description SubqueryLink(Expression<Func<TDObj, Object>>, String) Subquery link filter description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IStructureFlag.html": {
    "href": "api/XData.Mapping.Dynamic.IStructureFlag.html",
    "title": "Interface IStructureFlag | XData website",
    "keywords": "Interface IStructureFlag Dynamic structure flag interface Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IStructureFlag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IResultSetDescription.Alias.html": {
    "href": "api/XData.Mapping.Dynamic.IResultSetDescription.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Stored procedure alias Declaration string Alias { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.Dynamic.IResultSetDescription.Name.html": {
    "href": "api/XData.Mapping.Dynamic.IResultSetDescription.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Result set name Declaration string Name { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.Dynamic.IResultSetDescription.Order.html": {
    "href": "api/XData.Mapping.Dynamic.IResultSetDescription.Order.html",
    "title": "Property Order | XData website",
    "keywords": "Property Order | Improve this Doc View Source Order Result set order Declaration int Order { get; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.Dynamic.IResultSetDescription.Clone.html": {
    "href": "api/XData.Mapping.Dynamic.IResultSetDescription.Clone.html",
    "title": "Method Clone | XData website",
    "keywords": "Method Clone | Improve this Doc View Source Clone() Clone result set description Declaration IResultSetDescription Clone() Returns Type Description IResultSetDescription"
  },
  "api/XData.Mapping.Dynamic.IResultSetDescription.html": {
    "href": "api/XData.Mapping.Dynamic.IResultSetDescription.html",
    "title": "Interface IResultSetDescription | XData website",
    "keywords": "Interface IResultSetDescription Dynamic stored procedure result set description Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IResultSetDescription Properties Name Description Alias Stored procedure alias Name Result set name Order Result set order Methods Name Description Clone() Clone result set description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Return<T>(String, String, Int32, Expression<Func<IQueryStructureAdapter, T>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter.Expr.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter.Expr.html",
    "title": "Method Expr | XData website",
    "keywords": "Method Expr | Improve this Doc View Source Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name DataExpressionType type Expression source type String exprText Expression text DbType dbType Expression database type Expression < Func < IRepositoryExpressionMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only! See Also DataExpressionType Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) | Improve this Doc View Source Expr<TValue>(String, Expression<Func<IQueryStructureAdapter, TValue>>, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name Expression < Func < IQueryStructureAdapter , TValue>> expr Expression DbType dbType Expression database type Expression < Func < IRepositoryExpressionMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only! See Also DataExpressionType Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter.Ref.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter.Ref.html",
    "title": "Method Ref | XData website",
    "keywords": "Method Ref | Improve this Doc View Source Ref<TValue>(String, String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue>(string sourceAlias, string property, params Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Referenced property subquery alias String property Referenced property name Expression < Func < IRepositoryReadOnlyPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) | Improve this Doc View Source Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[] attributes) where TDobj : class Parameters Type Name Description String sourceAlias Referenced property subquery alias Expression < Func <TDobj, Object >> property Referenced property name Expression < Func < IRepositoryReadOnlyPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type TDobj Referenced inner view type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter.html",
    "title": "Interface IRepositoryStructureAdapter | XData website",
    "keywords": "Interface IRepositoryStructureAdapter Repository structure adapter Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IRepositoryStructureAdapter Methods Name Description Expr<TValue>(String, Expression<Func<IQueryStructureAdapter, TValue>>, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) SQL expression mapping Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) SQL expression mapping Ref<TValue>(String, String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.Field.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.Field.html",
    "title": "Method Field | XData website",
    "keywords": "Method Field | Improve this Doc View Source Field<TValue>(String, String, Expression<Func<IRepositoryPropertyMappingAdapter<T, TValue>, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(string sourceAlias, string fieldName, params Expression<Func<IRepositoryPropertyMappingAdapter<T, TValue>, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name Expression < Func < IRepositoryPropertyMappingAdapter <T, TValue>, IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) | Improve this Doc View Source Field<TValue>(String, Expression<Func<IRepositoryPropertyMappingAdapter<T, TValue>, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(string fieldName, params Expression<Func<IRepositoryPropertyMappingAdapter<T, TValue>, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Field name Expression < Func < IRepositoryPropertyMappingAdapter <T, TValue>, IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) | Improve this Doc View Source Field<TValue>(Expression<Func<IRepositoryPropertyMappingAdapter<T, TValue>, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(params Expression<Func<IRepositoryPropertyMappingAdapter<T, TValue>, IStructureFlag>>[] attributes) Parameters Type Name Description Expression < Func < IRepositoryPropertyMappingAdapter <T, TValue>, IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.Link.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.Link.html",
    "title": "Method Link | XData website",
    "keywords": "Method Link | Improve this Doc View Source Link<TValue, TSource>(String, Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[]) Link property mapping Declaration Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) where TValue : IComparable<TValue> where TSource : class, IDataObject, new() Parameters Type Name Description String sourceAlias Property source alias Expression < Func < ILinkPropertyMappingAdapter <T>, IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Link <TValue, TSource> Link property Type Parameters Name Description TValue Link value type TSource Link source type | Improve this Doc View Source Link<TValue, TSource>(String, String, Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[]) Link property mapping Declaration Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, string fieldName, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) where TValue : IComparable<TValue> where TSource : class, IDataObject, new() Parameters Type Name Description String sourceAlias Property source alias String fieldName Property field name Expression < Func < ILinkPropertyMappingAdapter <T>, IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Link <TValue, TSource> Link property Type Parameters Name Description TValue Link value type TSource Link source type"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.Xml.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.Xml.html",
    "title": "Method Xml | XData website",
    "keywords": "Method Xml | Improve this Doc View Source Xml(String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Xml property mapping Declaration Xml Xml(string sourceAlias, params Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Property source alias Expression < Func < IRepositoryReadOnlyPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Xml Xml property | Improve this Doc View Source Xml(String, String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Xml property mapping Declaration Xml Xml(string sourceAlias, string fieldName, params Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Property source alias String fieldName Property field name Expression < Func < IRepositoryReadOnlyPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Xml Xml property"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.Lob.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.Lob.html",
    "title": "Method Lob | XData website",
    "keywords": "Method Lob | Improve this Doc View Source Lob(String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Lob property mapping Declaration Lob Lob(string sourceAlias, params Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Property source alias Expression < Func < IRepositoryReadOnlyPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Lob Lob property | Improve this Doc View Source Lob(String, String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Lob property mapping Declaration Lob Lob(string sourceAlias, string fieldName, params Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Property source alias String fieldName Property field name Expression < Func < IRepositoryReadOnlyPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Lob Lob property"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.html",
    "title": "Interface IRepositoryStructureAdapter<T> | XData website",
    "keywords": "Interface IRepositoryStructureAdapter<T> Repository structure mapping adapter interface Inherited Members IRepositoryStructureAdapter.Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) IRepositoryStructureAdapter.Expr<TValue>(String, Expression<Func<IQueryStructureAdapter, TValue>>, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) IRepositoryStructureAdapter.Ref<TValue>(String, String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) IRepositoryStructureAdapter.Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IRepositoryStructureAdapter<T> : IRepositoryStructureAdapter where T : class, IDataObject, new() Type Parameters Name Description T Methods Name Description Field<TValue>(Expression<Func<IRepositoryPropertyMappingAdapter<T, TValue>, IStructureFlag>>[]) Field mapping Field<TValue>(String, Expression<Func<IRepositoryPropertyMappingAdapter<T, TValue>, IStructureFlag>>[]) Field mapping Field<TValue>(String, String, Expression<Func<IRepositoryPropertyMappingAdapter<T, TValue>, IStructureFlag>>[]) Field mapping Link<TValue, TSource>(String, Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[]) Link property mapping Link<TValue, TSource>(String, String, Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[]) Link property mapping Lob(String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Lob property mapping Lob(String, String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Lob property mapping Xml(String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Xml property mapping Xml(String, String, Expression<Func<IRepositoryReadOnlyPropertyMappingAdapter, IStructureFlag>>[]) Xml property mapping Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Column.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Column.html",
    "title": "Method Column | XData website",
    "keywords": "Method Column | Improve this Doc View Source Column<TResult>(String, Expression<Func<IRepositoryStructureAdapter<T>, TResult>>) Dynamic repository hidden property mapping Declaration IRepositoryStructure<T> Column<TResult>(string name, Expression<Func<IRepositoryStructureAdapter<T>, TResult>> mapper) Parameters Type Name Description String name Hidden property name Expression < Func < IRepositoryStructureAdapter <T>, TResult>> mapper Property mapping expression Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TResult Hidden property type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryStructureAdapter"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.DataTable.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.DataTable.html",
    "title": "Method DataTable | XData website",
    "keywords": "Method DataTable | Improve this Doc View Source DataTable(String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic repository table mapping Declaration IRepositoryStructure<T> DataTable(string name, string alias, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String name Table name String alias Table alias Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IRepositoryStructure <T> Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription | Improve this Doc View Source DataTable(String, String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic repository table mapping Declaration IRepositoryStructure<T> DataTable(string name, string alias, string parent = null, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String name Table name String alias Table alias String parent Parent table alias Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IRepositoryStructure <T> Repository structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.InnerView.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.InnerView.html",
    "title": "Method InnerView | XData website",
    "keywords": "Method InnerView | Improve this Doc View Source InnerView(String, Type, Expression<Func<ISubqueryLinkAdapter<T>, IFilterDescription>>[]) Dynamic repository inner view mapping Declaration IRepositoryStructure<T> InnerView(string alias, Type dobjType, params Expression<Func<ISubqueryLinkAdapter<T>, IFilterDescription>>[] filters) Parameters Type Name Description String alias Inner view alias Type dobjType Inner view statically mapped type Expression < Func < ISubqueryLinkAdapter <T>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IRepositoryStructure <T> Repository structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription | Improve this Doc View Source InnerView<TDobj>(String, Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository inner view mapping Declaration IRepositoryStructure<T> InnerView<TDobj>(string alias, params Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Inner view alias Expression < Func < ISubqueryLinkAdapter <T, TDobj>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IRepositoryStructure <T> Query structure Type Parameters Name Description TDobj Inner view statically mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription | Improve this Doc View Source InnerView<TDobj>(String, IQueryDescription<TDobj>, Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository inner view mapping Declaration IRepositoryStructure<T> InnerView<TDobj>(string alias, IQueryDescription<TDobj> sub, params Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Inner view alias IQueryDescription <TDobj> sub Inner view query structure Expression < Func < ISubqueryLinkAdapter <T, TDobj>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TDobj See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Subquery.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Subquery.html",
    "title": "Method Subquery | XData website",
    "keywords": "Method Subquery | Improve this Doc View Source Subquery(String, Type, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T>, IFilterDescription>>[]) Dynamic repository subquery mapping Declaration IRepositoryStructure<T> Subquery(string alias, Type dobjType, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter<T>, IFilterDescription>>[] filters) Parameters Type Name Description String alias Subquery alias Type dobjType Subquery statically mapped type String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryLinkAdapter <T>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IRepositoryStructure <T> Repository structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription | Improve this Doc View Source Subquery<TDobj>(String, Expression<Func<TDobj, Object>>, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository subquery mapping Declaration IRepositoryStructure<T> Subquery<TDobj>(string alias, Expression<Func<TDobj, object>> property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Subquery alias Expression < Func <TDobj, Object >> property Subquery selected property expression DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryLinkAdapter <T, TDobj>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TDobj Subquery statically mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription | Improve this Doc View Source Subquery<TDobj>(String, IQueryDescription<TDobj>, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository subquery mapping Declaration IRepositoryStructure<T> Subquery<TDobj>(string alias, IQueryDescription<TDobj> sub, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Subquery alias IQueryDescription <TDobj> sub Subquery query structure String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryLinkAdapter <T, TDobj>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TDobj See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription DataGrouping IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Map.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Map.html",
    "title": "Method Map | XData website",
    "keywords": "Method Map | Improve this Doc View Source Map(Expression<Func<IRepositoryStructureAdapter<T>, T>>, Expression<Func<IExternalLinkDefinitionAdapter<T>, IExternalLinkDefinition>>[]) Dynamic repository properties mapping Declaration IRepositoryDescription<T> Map(Expression<Func<IRepositoryStructureAdapter<T>, T>> mapper, params Expression<Func<IExternalLinkDefinitionAdapter<T>, IExternalLinkDefinition>>[] externalLinks) Parameters Type Name Description Expression < Func < IRepositoryStructureAdapter <T>, T>> mapper Mapping expression Expression < Func < IExternalLinkDefinitionAdapter <T>, IExternalLinkDefinition >>[] externalLinks External link descriptions Returns Type Description IRepositoryDescription <T> Dynamic repository description See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Procedure.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Procedure.html",
    "title": "Method Procedure | XData website",
    "keywords": "Method Procedure | Improve this Doc View Source Procedure(String, String, ProcedureType, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic repository procedure mapping Declaration IRepositoryStructure<T> Procedure(string alias, string name, ProcedureType type, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Procedure alias String name Procedure name ProcedureType type Procedure type Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IRepositoryStructure <T> Repository structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Parameter.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Parameter.html",
    "title": "Method Parameter | XData website",
    "keywords": "Method Parameter | Improve this Doc View Source Parameter<TResult>(String, Int32, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) Dynamic repository procedure parameter mapping Declaration IRepositoryStructure<T> Parameter<TResult>(string alias, int order, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) Parameters Type Name Description String alias Procedure alias Int32 order Parameter order String binding Parameter value binding DbType type Parameter SQL data type Expression < Func < IProcedureParameterAdapter , IProcedureParameterFlag >>[] attributes Parameter attributes Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TResult Parameter data type"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Return.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.Return.html",
    "title": "Method Return | XData website",
    "keywords": "Method Return | Improve this Doc View Source Return<TResult>(String, String, Int32, Expression<Func<IQueryStructureAdapter, T>>) Dynamic repository procedure result set mapping Declaration IRepositoryStructure<T> Return<TResult>(string alias, string name, int order, Expression<Func<IQueryStructureAdapter, T>> mapper = null) where TResult : class Parameters Type Name Description String alias Procedure alias String name Result set name Int32 order Result set order Expression < Func < IQueryStructureAdapter , T>> mapper Result set mapper Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TResult Result set data type"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.ReadOnlyProperty.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.ReadOnlyProperty.html",
    "title": "Method ReadOnlyProperty | XData website",
    "keywords": "Method ReadOnlyProperty | Improve this Doc View Source ReadOnlyProperty<TResult>(Expression<Func<T, TResult>>, Expression<Func<IRepositoryStructureAdapter<T>, TResult>>) Dynamic repository read only properties mapping Declaration IRepositoryStructure<T> ReadOnlyProperty<TResult>(Expression<Func<T, TResult>> property, Expression<Func<IRepositoryStructureAdapter<T>, TResult>> mapper) Parameters Type Name Description Expression < Func <T, TResult>> property Property name expression Expression < Func < IRepositoryStructureAdapter <T>, TResult>> mapper Property mapping Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TResult Property type"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.With.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.With.html",
    "title": "Method With | XData website",
    "keywords": "Method With | Improve this Doc View Source With<TRoot>(String, IQueryDescription<TRoot>, Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[]) Dynamic repository Common-Table-Expression (WITH) subquery mapping Declaration IRepositoryStructure<T> With<TRoot>(string alias, IQueryDescription<TRoot> sub, params Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[] attributes) where TRoot : class Parameters Type Name Description String alias Common-Table-Expression (WITH) subquery alias IQueryDescription <TRoot> sub Common-Table-Expression (WITH) initial subquery description Expression < Func < IQueryWithAdapter <TRoot>, IQueryWithFlag >>[] attributes Common-Table-Expression (WITH) attributes Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TRoot Common-Table-Expression (WITH) initial subquery mapped type"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.html",
    "title": "Interface IRepositoryStructure<T> | XData website",
    "keywords": "Interface IRepositoryStructure<T> Repository structure descriptor Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IRepositoryStructure<T> where T : class, IDataObject, new() Type Parameters Name Description T Data object type Methods Name Description Column<TResult>(String, Expression<Func<IRepositoryStructureAdapter<T>, TResult>>) Dynamic repository hidden property mapping DataTable(String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic repository table mapping DataTable(String, String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic repository table mapping InnerView(String, Type, Expression<Func<ISubqueryLinkAdapter<T>, IFilterDescription>>[]) Dynamic repository inner view mapping InnerView<TDobj>(String, Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository inner view mapping InnerView<TDobj>(String, IQueryDescription<TDobj>, Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository inner view mapping Map(Expression<Func<IRepositoryStructureAdapter<T>, T>>, Expression<Func<IExternalLinkDefinitionAdapter<T>, IExternalLinkDefinition>>[]) Dynamic repository properties mapping Parameter<TResult>(String, Int32, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) Dynamic repository procedure parameter mapping Procedure(String, String, ProcedureType, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic repository procedure mapping ReadOnlyProperty<TResult>(Expression<Func<T, TResult>>, Expression<Func<IRepositoryStructureAdapter<T>, TResult>>) Dynamic repository read only properties mapping Return<TResult>(String, String, Int32, Expression<Func<IQueryStructureAdapter, T>>) Dynamic repository procedure result set mapping Subquery(String, Type, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T>, IFilterDescription>>[]) Dynamic repository subquery mapping Subquery<TDobj>(String, Expression<Func<TDobj, Object>>, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository subquery mapping Subquery<TDobj>(String, IQueryDescription<TDobj>, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository subquery mapping With<TRoot>(String, IQueryDescription<TRoot>, Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[]) Dynamic repository Common-Table-Expression (WITH) subquery mapping Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryReadOnlyPropertyMappingAdapter.ConcurrencyToken.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryReadOnlyPropertyMappingAdapter.ConcurrencyToken.html",
    "title": "Method ConcurrencyToken | XData website",
    "keywords": "Method ConcurrencyToken | Improve this Doc View Source ConcurrencyToken() Property is concurrency token flag Declaration IStructureFlag ConcurrencyToken() Returns Type Description IStructureFlag"
  },
  "api/XData.Mapping.Dynamic.IRepositoryReadOnlyPropertyMappingAdapter.OuterFlag.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryReadOnlyPropertyMappingAdapter.OuterFlag.html",
    "title": "Method OuterFlag | XData website",
    "keywords": "Method OuterFlag | Improve this Doc View Source OuterFlag() Property is outer join flag Declaration IStructureFlag OuterFlag() Returns Type Description IStructureFlag"
  },
  "api/XData.Mapping.Dynamic.IRepositoryReadOnlyPropertyMappingAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryReadOnlyPropertyMappingAdapter.html",
    "title": "Interface IRepositoryReadOnlyPropertyMappingAdapter | XData website",
    "keywords": "Interface IRepositoryReadOnlyPropertyMappingAdapter Repository read only property mapping adapter Inherited Members IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IRepositoryReadOnlyPropertyMappingAdapter : IPropertyMappingAdapter Methods Name Description ConcurrencyToken() Property is concurrency token flag OuterFlag() Property is outer join flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryPropertyMappingAdapter-2.Default.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryPropertyMappingAdapter-2.Default.html",
    "title": "Method Default | XData website",
    "keywords": "Method Default | Improve this Doc View Source Default(DefaultType) Default value description Declaration IStructureFlag Default(DefaultType source) Parameters Type Name Description DefaultType source Default value algorithm Returns Type Description IStructureFlag Property default value description | Improve this Doc View Source Default(DefaultType, DefaultFeature) Default value description Declaration IStructureFlag Default(DefaultType source, DefaultFeature features) Parameters Type Name Description DefaultType source Default value algorithm DefaultFeature features Default extended features Returns Type Description IStructureFlag Property default value description | Improve this Doc View Source Default(DefaultType, TValue) Default value description Declaration IStructureFlag Default(DefaultType source, TValue value) Parameters Type Name Description DefaultType source Default value algorithm TValue value Default value Returns Type Description IStructureFlag Property default value description | Improve this Doc View Source Default(DefaultType, TValue, DefaultFeature) Default value description Declaration IStructureFlag Default(DefaultType source, TValue value, DefaultFeature features) Parameters Type Name Description DefaultType source Default value algorithm TValue value Default value DefaultFeature features Default extended features Returns Type Description IStructureFlag Property default value description"
  },
  "api/XData.Mapping.Dynamic.IRepositoryPropertyMappingAdapter-2.UpdateWith.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryPropertyMappingAdapter-2.UpdateWith.html",
    "title": "Method UpdateWith | XData website",
    "keywords": "Method UpdateWith | Improve this Doc View Source UpdateWith(DataExpressionType, String) Update value source description Declaration IStructureFlag UpdateWith(DataExpressionType type, string exprText) Parameters Type Name Description DataExpressionType type Update value source expression type String exprText Expression text alias Returns Type Description IStructureFlag Update value source description | Improve this Doc View Source UpdateWith(Expression<Func<IQueryStructureAdapter, TValue>>) Update value source description Declaration IStructureFlag UpdateWith(Expression<Func<IQueryStructureAdapter, TValue>> expr) Parameters Type Name Description Expression < Func < IQueryStructureAdapter , TValue>> expr Update value expression definition Returns Type Description IStructureFlag Update value source description | Improve this Doc View Source UpdateWith(String, Type, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter, IStructureFlag>>[]) Update value source description Declaration IStructureFlag UpdateWith(string alias, Type dobjType, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String alias Subquery alias Type dobjType Subquery type String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryLinkAdapter , IStructureFlag >>[] attributes Subquery links Returns Type Description IStructureFlag Update value source description | Improve this Doc View Source UpdateWith<TDObj>(String, IQueryDescription<TDObj>, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T, TDObj>, IStructureFlag>>[]) Update value source description Declaration IStructureFlag UpdateWith<TDObj>(string alias, IQueryDescription<TDObj> sub, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter<T, TDObj>, IStructureFlag>>[] attributes) where TDObj : class Parameters Type Name Description String alias Subquery alias IQueryDescription <TDObj> sub Subquery definition String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryLinkAdapter <T, TDObj>, IStructureFlag >>[] attributes Subquery links Returns Type Description IStructureFlag Update value source description Type Parameters Name Description TDObj | Improve this Doc View Source UpdateWith<TDObj>(String, IQueryDescription<TDObj>, Expression<Func<TDObj, TValue>>, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T, TDObj>, IStructureFlag>>[]) Update value source description Declaration IStructureFlag UpdateWith<TDObj>(string alias, IQueryDescription<TDObj> sub, Expression<Func<TDObj, TValue>> property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter<T, TDObj>, IStructureFlag>>[] attributes) where TDObj : class Parameters Type Name Description String alias Subquery alias IQueryDescription <TDObj> sub Subquery definition Expression < Func <TDObj, TValue>> property Subquery selected property expression DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryLinkAdapter <T, TDObj>, IStructureFlag >>[] attributes Subquery links Returns Type Description IStructureFlag Update value source description Type Parameters Name Description TDObj"
  },
  "api/XData.Mapping.Dynamic.IRepositoryPropertyMappingAdapter-2.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryPropertyMappingAdapter-2.html",
    "title": "Interface IRepositoryPropertyMappingAdapter<T, TValue> | XData website",
    "keywords": "Interface IRepositoryPropertyMappingAdapter<T, TValue> Repository property mapping adapter Inherited Members IRepositoryReadOnlyPropertyMappingAdapter.ConcurrencyToken() IRepositoryReadOnlyPropertyMappingAdapter.OuterFlag() IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IRepositoryPropertyMappingAdapter<T, TValue> : IRepositoryReadOnlyPropertyMappingAdapter, IPropertyMappingAdapter where T : class, IDataObject, new() Type Parameters Name Description T TValue Methods Name Description Default(DefaultType) Default value description Default(DefaultType, TValue) Default value description Default(DefaultType, TValue, DefaultFeature) Default value description Default(DefaultType, DefaultFeature) Default value description UpdateWith(Expression<Func<IQueryStructureAdapter, TValue>>) Update value source description UpdateWith(String, Type, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter, IStructureFlag>>[]) Update value source description UpdateWith(DataExpressionType, String) Update value source description UpdateWith<TDObj>(String, IQueryDescription<TDObj>, Expression<Func<TDObj, TValue>>, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T, TDObj>, IStructureFlag>>[]) Update value source description UpdateWith<TDObj>(String, IQueryDescription<TDObj>, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter<T, TDObj>, IStructureFlag>>[]) Update value source description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryExpressionMappingAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryExpressionMappingAdapter.html",
    "title": "Interface IRepositoryExpressionMappingAdapter | XData website",
    "keywords": "Interface IRepositoryExpressionMappingAdapter Repository SQL expression property mapping adapter Inherited Members IExpressionPropertyAdapter.Size(Int32) IExpressionPropertyAdapter.Size(Int32, Int32) IExpressionPropertyAdapter.NativeSqlType(String) IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IRepositoryExpressionMappingAdapter : IExpressionPropertyAdapter, IPropertyMappingAdapter Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryDescription-1.SetBaseTable.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryDescription-1.SetBaseTable.html",
    "title": "Method SetBaseTable | XData website",
    "keywords": "Method SetBaseTable | Improve this Doc View Source SetBaseTable(String) Set base table alias to repository dynamic mapping Declaration IRepositoryDescription<T> SetBaseTable(string baseTableAlias) Parameters Type Name Description String baseTableAlias Base table alias Returns Type Description IRepositoryDescription <T> Dynamic repository description"
  },
  "api/XData.Mapping.Dynamic.IRepositoryDescription-1.SetContext.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryDescription-1.SetContext.html",
    "title": "Method SetContext | XData website",
    "keywords": "Method SetContext | Improve this Doc View Source SetContext(String) Set context to repository dynamic mapping Declaration IRepositoryDescription<T> SetContext(string context) Parameters Type Name Description String context Database context name Returns Type Description IRepositoryDescription <T> Dynamic repository description"
  },
  "api/XData.Mapping.Dynamic.IRepositoryDescription-1.SetLogicAssembly.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryDescription-1.SetLogicAssembly.html",
    "title": "Method SetLogicAssembly | XData website",
    "keywords": "Method SetLogicAssembly | Improve this Doc View Source SetLogicAssembly(String) Set server data logic assembly name to repository dynamic mapping Declaration IRepositoryDescription<T> SetLogicAssembly(string logicAssemblyName) Parameters Type Name Description String logicAssemblyName Server data logic assembly name Returns Type Description IRepositoryDescription <T> Dynamic repository description"
  },
  "api/XData.Mapping.Dynamic.IRepositoryDescription-1.SetFlags.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryDescription-1.SetFlags.html",
    "title": "Method SetFlags | XData website",
    "keywords": "Method SetFlags | Improve this Doc View Source SetFlags(DataStructureFlag) Set flags to repository dynamic mapping Declaration IRepositoryDescription<T> SetFlags(DataStructureFlag flags) Parameters Type Name Description DataStructureFlag flags Data repository flags Returns Type Description IRepositoryDescription <T> Dynamic repository description"
  },
  "api/XData.Mapping.Dynamic.IRepositoryDescription-1.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryDescription-1.html",
    "title": "Interface IRepositoryDescription<T> | XData website",
    "keywords": "Interface IRepositoryDescription<T> Dynamic repository structure description interface Inherited Members IQueryDescription.Type Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IRepositoryDescription<out T> : IQueryDescription where T : class, IDataObject, new() Type Parameters Name Description T Methods Name Description SetBaseTable(String) Set base table alias to repository dynamic mapping SetContext(String) Set context to repository dynamic mapping SetFlags(DataStructureFlag) Set flags to repository dynamic mapping SetLogicAssembly(String) Set server data logic assembly name to repository dynamic mapping Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryWithFlag.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryWithFlag.html",
    "title": "Interface IQueryWithFlag | XData website",
    "keywords": "Interface IQueryWithFlag Common-Table-Expression (WITH) flag Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IQueryWithFlag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.Properties.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.Properties.html",
    "title": "Method Properties | XData website",
    "keywords": "Method Properties | Improve this Doc View Source Properties(Expression<Func<TRoot, Object>>[]) Common-Table-Expression (WITH) properties order Declaration IQueryWithFlag Properties(params Expression<Func<TRoot, object>>[] properties) Parameters Type Name Description Expression < Func <TRoot, Object >>[] properties Common-Table-Expression (WITH) properties expressions Returns Type Description IQueryWithFlag Common-Table-Expression (WITH) flag"
  },
  "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.RecursiveType.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.RecursiveType.html",
    "title": "Method RecursiveType | XData website",
    "keywords": "Method RecursiveType | Improve this Doc View Source RecursiveType(WithRecursiveType) Common-Table-Expression (WITH) recursive link type attribute Declaration IQueryWithFlag RecursiveType(WithRecursiveType withType) Parameters Type Name Description WithRecursiveType withType Common-Table-Expression (WITH) recursive link type Returns Type Description IQueryWithFlag Common-Table-Expression (WITH) flag"
  },
  "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.WithRecursive.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.WithRecursive.html",
    "title": "Method WithRecursive | XData website",
    "keywords": "Method WithRecursive | Improve this Doc View Source WithRecursive<TDobj>(String, IQueryDescription<TDobj>, Expression<Func<ISubqueryLinkAdapter<TRoot, TDobj>, IFilterDescription>>[]) Common-Table-Expression (WITH) recursive subqueries Declaration IQueryWithFlag WithRecursive<TDobj>(string alias, IQueryDescription<TDobj> query, params Expression<Func<ISubqueryLinkAdapter<TRoot, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Common-Table-Expression (WITH) recursive subquery alias IQueryDescription <TDobj> query Common-Table-Expression (WITH) recursive subquery description Expression < Func < ISubqueryLinkAdapter <TRoot, TDobj>, IFilterDescription >>[] filters Common-Table-Expression (WITH) recursive subquery links Returns Type Description IQueryWithFlag Common-Table-Expression (WITH) flag Type Parameters Name Description TDobj Common-Table-Expression (WITH) recursive subquery type"
  },
  "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.html",
    "title": "Interface IQueryWithAdapter<TRoot> | XData website",
    "keywords": "Interface IQueryWithAdapter<TRoot> Common-Table-Expression (WITH) mapping attributes Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IQueryWithAdapter<TRoot> where TRoot : class Type Parameters Name Description TRoot Common-Table-Expression (WITH) initial subquery mapped type Methods Name Description Properties(Expression<Func<TRoot, Object>>[]) Common-Table-Expression (WITH) properties order RecursiveType(WithRecursiveType) Common-Table-Expression (WITH) recursive link type attribute WithRecursive<TDobj>(String, IQueryDescription<TDobj>, Expression<Func<ISubqueryLinkAdapter<TRoot, TDobj>, IFilterDescription>>[]) Common-Table-Expression (WITH) recursive subqueries Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryStructureAdapter.Field.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructureAdapter.Field.html",
    "title": "Method Field | XData website",
    "keywords": "Method Field | Improve this Doc View Source Field<TValue>(String, String, Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(string sourceAlias, string fieldName, params Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name Expression < Func < IPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) | Improve this Doc View Source Field<TValue>(Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(params Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description Expression < Func < IPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) | Improve this Doc View Source Field<TValue>(String, String, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(string sourceAlias, string fieldName, DbType dbType, params Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name DbType dbType Field database type Expression < Func < IExpressionPropertyAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryStructureAdapter.Expr.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructureAdapter.Expr.html",
    "title": "Method Expr | XData website",
    "keywords": "Method Expr | Improve this Doc View Source Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name DataExpressionType type Expression source type String exprText Expression text DbType dbType Expression database type Expression < Func < IExpressionPropertyAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only! See Also DataExpressionType Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) | Improve this Doc View Source Expr<TValue>(String, Expression<Func<IQueryStructureAdapter, TValue>>, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name Expression < Func < IQueryStructureAdapter , TValue>> expr Expression DbType dbType Expression database type Expression < Func < IExpressionPropertyAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only! See Also DataExpressionType Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryStructureAdapter.Ref.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructureAdapter.Ref.html",
    "title": "Method Ref | XData website",
    "keywords": "Method Ref | Improve this Doc View Source Ref<TValue>(String, String, Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue>(string sourceAlias, string property, params Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Referenced property subquery alias String property Referenced property name Expression < Func < IPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) | Improve this Doc View Source Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[] attributes) where TDobj : class Parameters Type Name Description String sourceAlias Referenced property subquery alias Expression < Func <TDobj, Object >> property Referenced property name Expression < Func < IPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type TDobj Referenced inner view type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryStructureAdapter.XmlField.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructureAdapter.XmlField.html",
    "title": "Method XmlField | XData website",
    "keywords": "Method XmlField | Improve this Doc View Source XmlField<TValue>(String, String, String, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) XML field mapping Declaration TValue XmlField<TValue>(string sourceAlias, string fieldName, string xPath, DbType dbType, params Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias XML data source alias String fieldName XML field name String xPath XML field XPath expression DbType dbType XML field database type Expression < Func < IExpressionPropertyAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue XML Field type Remarks WARNING! Can be used in dynamic query mapping for XmlSource(String, String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) data sources only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryStructureAdapter.CastTo.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructureAdapter.CastTo.html",
    "title": "Method CastTo | XData website",
    "keywords": "Method CastTo | Improve this Doc View Source CastTo<T>() Type cast modifier Declaration IQueryStructureAdapter CastTo<T>() Returns Type Description IQueryStructureAdapter Type Parameters Name Description T Type to cast"
  },
  "api/XData.Mapping.Dynamic.IQueryStructureAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructureAdapter.html",
    "title": "Interface IQueryStructureAdapter | XData website",
    "keywords": "Interface IQueryStructureAdapter Query structure mapping adapter interface Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IQueryStructureAdapter Methods Name Description CastTo<T>() Type cast modifier Expr<TValue>(String, Expression<Func<IQueryStructureAdapter, TValue>>, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) SQL expression mapping Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) SQL expression mapping Field<TValue>(Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Field mapping Field<TValue>(String, String, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) Field mapping Field<TValue>(String, String, Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Field mapping Ref<TValue>(String, String, Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping XmlField<TValue>(String, String, String, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) XML field mapping Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.Exists(IQueryStructureAdapter, String) QueryDescriptionExtensions.Case<T, TResult>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, TResult>>, TaggedExpression<T, TResult>[]) QueryDescriptionExtensions.DateDiff<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, DateTime>>, Expression<Func<IQueryStructureAdapter, DateTime>>, DateDiffKind) QueryDescriptionExtensions.HasFlag<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.SqlFn<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, Object>>[]) QueryDescriptionExtensions.SqlParam<TResult>(IQueryStructureAdapter, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) QueryDescriptionExtensions.SqlExpr<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, TResult>>[]) See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.Column.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.Column.html",
    "title": "Method Column | XData website",
    "keywords": "Method Column | Improve this Doc View Source Column<TResult>(String, Expression<Func<IQueryStructureAdapter, TResult>>) Dynamic query hidden property mapping Declaration IQueryStructure Column<TResult>(string name, Expression<Func<IQueryStructureAdapter, TResult>> mapper) Parameters Type Name Description String name Hidden property name Expression < Func < IQueryStructureAdapter , TResult>> mapper Property mapping expression Returns Type Description IQueryStructure Query structure Type Parameters Name Description TResult See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryStructureAdapter"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.DataTable.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.DataTable.html",
    "title": "Method DataTable | XData website",
    "keywords": "Method DataTable | Improve this Doc View Source DataTable(String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query table mapping Declaration IQueryStructure DataTable(string name, string alias, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String name Table name String alias Table alias Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.InnerView.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.InnerView.html",
    "title": "Method InnerView | XData website",
    "keywords": "Method InnerView | Improve this Doc View Source InnerView(String, Type, Expression<Func<ISubqueryLinkAdapter, IFilterDescription>>[]) Dynamic query inner view mapping Declaration IQueryStructure InnerView(string alias, Type dobjType, params Expression<Func<ISubqueryLinkAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Inner view alias Type dobjType Inner view statically mapped type Expression < Func < ISubqueryLinkAdapter , IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription | Improve this Doc View Source InnerView<TDobj>(String, Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[]) Dynamic query inner view mapping Declaration IQueryStructure InnerView<TDobj>(string alias, params Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Inner view alias Expression < Func < ISubqueryLinkAdapter <TDobj>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IQueryStructure Query structure Type Parameters Name Description TDobj Inner view statically mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription | Improve this Doc View Source InnerView<TDobj>(String, IQueryDescription<TDobj>, Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[]) Dynamic query inner view mapping Declaration IQueryStructure InnerView<TDobj>(string alias, IQueryDescription<TDobj> sub, params Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Inner view alias IQueryDescription <TDobj> sub Inner view query structure Expression < Func < ISubqueryLinkAdapter <TDobj>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IQueryStructure Query structure Type Parameters Name Description TDobj See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.Subquery.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.Subquery.html",
    "title": "Method Subquery | XData website",
    "keywords": "Method Subquery | Improve this Doc View Source Subquery(String, Type, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter, IFilterDescription>>[]) Dynamic query subquery mapping Declaration IQueryStructure Subquery(string alias, Type dobjType, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Subquery alias Type dobjType Subquery statically mapped type String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryLinkAdapter , IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription | Improve this Doc View Source Subquery<TDobj>(String, Expression<Func<TDobj, Object>>, DataGrouping, Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[]) Dynamic query subquery mapping Declaration IQueryStructure Subquery<TDobj>(string alias, Expression<Func<TDobj, object>> property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Subquery alias Expression < Func <TDobj, Object >> property Subquery selected property expression DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryLinkAdapter <TDobj>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IQueryStructure Query structure Type Parameters Name Description TDobj Subquery statically mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription | Improve this Doc View Source Subquery<TDobj>(String, IQueryDescription<TDobj>, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[]) Dynamic query subquery mapping Declaration IQueryStructure Subquery<TDobj>(string alias, IQueryDescription<TDobj> sub, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Subquery alias IQueryDescription <TDobj> sub Subquery query structure String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryLinkAdapter <TDobj>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IQueryStructure Query structure Type Parameters Name Description TDobj See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription DataGrouping IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.XmlSource.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.XmlSource.html",
    "title": "Method XmlSource | XData website",
    "keywords": "Method XmlSource | Improve this Doc View Source XmlSource(String, String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query XML data source mapping Declaration IQueryStructure XmlSource(string name, string alias, string xmlRoot, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String name XML data variable name String alias XML data source alias String xmlRoot XML data root XPath expression Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to XML data source Returns Type Description IQueryStructure Query structure Remarks XML data passed to query as variable with name equals name of XML data source Variable value must to be a String See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.TempTable.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.TempTable.html",
    "title": "Method TempTable | XData website",
    "keywords": "Method TempTable | Improve this Doc View Source TempTable(String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query temporary table mapping Declaration IQueryStructure TempTable(string name, string alias, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String name Temporary table data variable name String alias Temporary table data source alias Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to temporary table data source Returns Type Description IQueryStructure Query structure Remarks Data passed to query as variable with name equals name of temporary table data source Variable value must to be See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.Hint.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.Hint.html",
    "title": "Method Hint | XData website",
    "keywords": "Method Hint | Improve this Doc View Source Hint(String, String, HintType) Dynamic query data source hint Declaration IQueryStructure Hint(string alias, string hint, HintType hintType = HintType.Select) Parameters Type Name Description String alias Data source alias String hint Hint HintType hintType Hint type Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[])"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.Select.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.Select.html",
    "title": "Method Select | XData website",
    "keywords": "Method Select | Improve this Doc View Source Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Dynamic query result mapping Declaration IQueryDescription<TResult> Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>> mapper) where TResult : class Parameters Type Name Description Expression < Func < IQueryStructureAdapter , TResult>> mapper Mapping expression Returns Type Description IQueryDescription <TResult> Dynamic query description Type Parameters Name Description TResult Dynamic query result type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter | Improve this Doc View Source Select<TResult>() Dynamic query result mapping using statically mapped data Declaration IQueryDescription<TResult> Select<TResult>() where TResult : class, IDataObject, new() Returns Type Description IQueryDescription <TResult> Dynamic query description Type Parameters Name Description TResult Dynamic query result type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.AddFilters.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.AddFilters.html",
    "title": "Method AddFilters | XData website",
    "keywords": "Method AddFilters | Improve this Doc View Source AddFilters(String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Add dynamic filters Declaration IQueryStructure AddFilters(string alias, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Source alias Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Dynamic filters Returns Type Description IQueryStructure"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.Map.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.Map.html",
    "title": "Method Map | XData website",
    "keywords": "Method Map | Improve this Doc View Source Map<TResult>(Expression<Func<IRepositoryStructureAdapter<TResult>, TResult>>, Expression<Func<IRepositoryStructureAdapter<TResult>, IExternalLinkDefinition>>[]) Dynamic repository mapping Declaration IRepositoryDescription<TResult> Map<TResult>(Expression<Func<IRepositoryStructureAdapter<TResult>, TResult>> mapper, params Expression<Func<IRepositoryStructureAdapter<TResult>, IExternalLinkDefinition>>[] externalLinks) where TResult : class, IDataObject, new() Parameters Type Name Description Expression < Func < IRepositoryStructureAdapter <TResult>, TResult>> mapper Mapping expression Expression < Func < IRepositoryStructureAdapter <TResult>, IExternalLinkDefinition >>[] externalLinks External link descriptions Returns Type Description IRepositoryDescription <TResult> Dynamic repository description Type Parameters Name Description TResult Dynamic repository type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.Procedure.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.Procedure.html",
    "title": "Method Procedure | XData website",
    "keywords": "Method Procedure | Improve this Doc View Source Procedure(String, String, ProcedureType, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query procedure mapping Declaration IQueryStructure Procedure(string alias, string name, ProcedureType type, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Procedure alias String name Procedure name ProcedureType type Procedure type Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.Parameter.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.Parameter.html",
    "title": "Method Parameter | XData website",
    "keywords": "Method Parameter | Improve this Doc View Source Parameter<T>(String, Int32, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) Dynamic query procedure parameter mapping Declaration IQueryStructure Parameter<T>(string alias, int order, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) Parameters Type Name Description String alias Procedure alias Int32 order Parameter order String binding Parameter value binding DbType type Parameter SQL data type Expression < Func < IProcedureParameterAdapter , IProcedureParameterFlag >>[] attributes Parameter mapping attributes Returns Type Description IQueryStructure Query structure Type Parameters Name Description T Parameter data type"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.Return.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.Return.html",
    "title": "Method Return | XData website",
    "keywords": "Method Return | Improve this Doc View Source Return<T>(String, String, Int32, Expression<Func<IQueryStructureAdapter, T>>) Dynamic query procedure result set mapping Declaration IQueryStructure Return<T>(string alias, string name, int order, Expression<Func<IQueryStructureAdapter, T>> mapper = null) where T : class Parameters Type Name Description String alias Procedure alias String name Result set name Int32 order Result set order Expression < Func < IQueryStructureAdapter , T>> mapper Result set mapper Returns Type Description IQueryStructure Query structure Type Parameters Name Description T Parameter data type"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.Call.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.Call.html",
    "title": "Method Call | XData website",
    "keywords": "Method Call | Improve this Doc View Source Call<TResult>(Guid, String, Variable[]) Dynamic procedure call Declaration IDataQuery<TResult> Call<TResult>(Guid layer, string resultSetName, params Variable[] variables) where TResult : class Parameters Type Name Description Guid layer Layer String resultSetName Base result set name Variable [] variables Data object variables Returns Type Description IDataQuery <TResult> Procedure call result Type Parameters Name Description TResult Dynamic query result type Remarks Hint: Use variables as parameter values Hint: To pass binary parameters use Base64 string value Hint: To pass UDT parameters use Xml-serialized value of mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter | Improve this Doc View Source Call(Guid, Variable[]) Dynamic procedure call with no result set Declaration IDataQuery Call(Guid layer, params Variable[] variables) Parameters Type Name Description Guid layer Layer Variable [] variables Data object variables Returns Type Description IDataQuery Procedure call result Remarks Hint: Use variables as parameter values Hint: To pass binary parameters use Base64 string value Hint: To pass UDT parameters use Xml-serialized value of mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.With.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.With.html",
    "title": "Method With | XData website",
    "keywords": "Method With | Improve this Doc View Source With<TRoot>(String, IQueryDescription<TRoot>, Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[]) Dynamic query Common-Table-Expression (WITH) subquery mapping Declaration IQueryStructure With<TRoot>(string alias, IQueryDescription<TRoot> sub, params Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[] attributes) where TRoot : class Parameters Type Name Description String alias Common-Table-Expression (WITH) subquery alias IQueryDescription <TRoot> sub Common-Table-Expression (WITH) initial subquery description Expression < Func < IQueryWithAdapter <TRoot>, IQueryWithFlag >>[] attributes Common-Table-Expression (WITH) attributes Returns Type Description IQueryStructure Query structure Type Parameters Name Description TRoot Common-Table-Expression (WITH) initial subquery mapped type"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.html",
    "title": "Interface IQueryStructure | XData website",
    "keywords": "Interface IQueryStructure Dynamic query structure interface Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IQueryStructure Methods Name Description AddFilters(String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Add dynamic filters Call(Guid, Variable[]) Dynamic procedure call with no result set Call<TResult>(Guid, String, Variable[]) Dynamic procedure call Column<TResult>(String, Expression<Func<IQueryStructureAdapter, TResult>>) Dynamic query hidden property mapping DataTable(String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query table mapping Hint(String, String, HintType) Dynamic query data source hint InnerView(String, Type, Expression<Func<ISubqueryLinkAdapter, IFilterDescription>>[]) Dynamic query inner view mapping InnerView<TDobj>(String, Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[]) Dynamic query inner view mapping InnerView<TDobj>(String, IQueryDescription<TDobj>, Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[]) Dynamic query inner view mapping Map<TResult>(Expression<Func<IRepositoryStructureAdapter<TResult>, TResult>>, Expression<Func<IRepositoryStructureAdapter<TResult>, IExternalLinkDefinition>>[]) Dynamic repository mapping Parameter<T>(String, Int32, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) Dynamic query procedure parameter mapping Procedure(String, String, ProcedureType, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query procedure mapping Return<T>(String, String, Int32, Expression<Func<IQueryStructureAdapter, T>>) Dynamic query procedure result set mapping Select<TResult>() Dynamic query result mapping using statically mapped data Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Dynamic query result mapping Subquery(String, Type, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter, IFilterDescription>>[]) Dynamic query subquery mapping Subquery<TDobj>(String, Expression<Func<TDobj, Object>>, DataGrouping, Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[]) Dynamic query subquery mapping Subquery<TDobj>(String, IQueryDescription<TDobj>, String, DataGrouping, Expression<Func<ISubqueryLinkAdapter<TDobj>, IFilterDescription>>[]) Dynamic query subquery mapping TempTable(String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query temporary table mapping With<TRoot>(String, IQueryDescription<TRoot>, Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[]) Dynamic query Common-Table-Expression (WITH) subquery mapping XmlSource(String, String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query XML data source mapping Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also GetStructure(String, String, DataStructureFlag, Variable[])"
  },
  "api/XData.Mapping.Dynamic.IQueryDescription.Type.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryDescription.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Dynamic query description element type Declaration Type Type { get; } Property Value Type Description Type"
  },
  "api/XData.Mapping.Dynamic.IQueryDescription.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryDescription.html",
    "title": "Interface IQueryDescription | XData website",
    "keywords": "Interface IQueryDescription Dynamic query description basic interface Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IQueryDescription Properties Name Description Type Dynamic query description element type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryDescription-1.AsQuery.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryDescription-1.AsQuery.html",
    "title": "Method AsQuery | XData website",
    "keywords": "Method AsQuery | Improve this Doc View Source AsQuery(Guid, Variable[]) Returns queryable data source based on description Declaration IDataQuery<T> AsQuery(Guid layer, params Variable[] variables) Parameters Type Name Description Guid layer Layer Variable [] variables Object variables values Returns Type Description IDataQuery <T> Data source"
  },
  "api/XData.Mapping.Dynamic.IQueryDescription-1.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryDescription-1.html",
    "title": "Interface IQueryDescription<T> | XData website",
    "keywords": "Interface IQueryDescription<T> Dynamic query description with result type specified interface Inherited Members IQueryDescription.Type Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IQueryDescription<T> : IQueryDescription Type Parameters Name Description T Query description element type Methods Name Description AsQuery(Guid, Variable[]) Returns queryable data source based on description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.Key.html": {
    "href": "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.Key.html",
    "title": "Method Key | XData website",
    "keywords": "Method Key | Improve this Doc View Source Key() Property is key modifier Declaration IStructureFlag Key() Returns Type Description IStructureFlag Property key description Remarks Used as property description attribute"
  },
  "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.Group.html": {
    "href": "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.Group.html",
    "title": "Method Group | XData website",
    "keywords": "Method Group | Improve this Doc View Source Group(DataGrouping) Property grouping modifier Declaration IStructureFlag Group(DataGrouping grouping) Parameters Type Name Description DataGrouping grouping Property grouping option Returns Type Description IStructureFlag Property key description Remarks Used as property description attribute | Improve this Doc View Source Group(Int32) Property grouping modifier Declaration IStructureFlag Group(int groupOrder) Parameters Type Name Description Int32 groupOrder Property grouping option Returns Type Description IStructureFlag Property grouping description"
  },
  "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.Hidden.html": {
    "href": "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.Hidden.html",
    "title": "Method Hidden | XData website",
    "keywords": "Method Hidden | Improve this Doc View Source Hidden() Column is hidden column flag Declaration IStructureFlag Hidden() Returns Type Description IStructureFlag"
  },
  "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.html",
    "title": "Interface IPropertyMappingAdapter | XData website",
    "keywords": "Interface IPropertyMappingAdapter Basic dynamic structure adapter Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IPropertyMappingAdapter Methods Name Description Group(Int32) Property grouping modifier Group(DataGrouping) Property grouping modifier Hidden() Column is hidden column flag Key() Property is key modifier Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterFlag.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterFlag.html",
    "title": "Interface IProcedureParameterFlag | XData website",
    "keywords": "Interface IProcedureParameterFlag Procedure parameter mapping flag Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IProcedureParameterFlag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.Size.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.Size.html",
    "title": "Method Size | XData website",
    "keywords": "Method Size | Improve this Doc View Source Size(Int32) Size of SQL expression result value Declaration IProcedureParameterFlag Size(int size) Parameters Type Name Description Int32 size Size Returns Type Description IProcedureParameterFlag SQL expression mapping flag | Improve this Doc View Source Size(Int32, Int32) Size of SQL expression result value Declaration IProcedureParameterFlag Size(int size, int scale) Parameters Type Name Description Int32 size Size Int32 scale Scale Returns Type Description IProcedureParameterFlag SQL expression mapping flag"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.UdtDataType.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.UdtDataType.html",
    "title": "Method UdtDataType | XData website",
    "keywords": "Method UdtDataType | Improve this Doc View Source UdtDataType(String) User defined type mapping Declaration IProcedureParameterFlag UdtDataType(string sqlTypeName) Parameters Type Name Description String sqlTypeName UDT SQL type name Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag | Improve this Doc View Source UdtDataType(String, String) User defined type mapping Declaration IProcedureParameterFlag UdtDataType(string sqlTypeName, string elementSqlTypeName) Parameters Type Name Description String sqlTypeName UDT SQL type name String elementSqlTypeName UDT type element type name Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.NativeSqlType.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.NativeSqlType.html",
    "title": "Method NativeSqlType | XData website",
    "keywords": "Method NativeSqlType | Improve this Doc View Source NativeSqlType(String) Native SQL type name Declaration IProcedureParameterFlag NativeSqlType(string nativeSqlType) Parameters Type Name Description String nativeSqlType Native SQL type name Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.Direction.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.Direction.html",
    "title": "Method Direction | XData website",
    "keywords": "Method Direction | Improve this Doc View Source Direction(ParameterDirection) Parameter direction Declaration IProcedureParameterFlag Direction(ParameterDirection direction) Parameters Type Name Description ParameterDirection direction Parameter direction Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.Array.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.Array.html",
    "title": "Method Array | XData website",
    "keywords": "Method Array | Improve this Doc View Source Array() Parameter is simple type array flag Declaration IProcedureParameterFlag Array() Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.ParameterName.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.ParameterName.html",
    "title": "Method ParameterName | XData website",
    "keywords": "Method ParameterName | Improve this Doc View Source ParameterName(String) Parameter mapping name Declaration IProcedureParameterFlag ParameterName(string parameterName) Parameters Type Name Description String parameterName Parameter mapping name Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.Default.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.Default.html",
    "title": "Method Default | XData website",
    "keywords": "Method Default | Improve this Doc View Source Default(DefaultType, Object) Parameter default value Declaration IProcedureParameterFlag Default(DefaultType type, object defaultValue) Parameters Type Name Description DefaultType type Parameter default value type Object defaultValue Parameter default value Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag | Improve this Doc View Source Default(DefaultType) Parameter default value Declaration IProcedureParameterFlag Default(DefaultType type) Parameters Type Name Description DefaultType type Parameter default value type Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag | Improve this Doc View Source Default(Object) Parameter default value Declaration IProcedureParameterFlag Default(object defaultValue) Parameters Type Name Description Object defaultValue Parameter default value Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.html",
    "title": "Interface IProcedureParameterAdapter | XData website",
    "keywords": "Interface IProcedureParameterAdapter Procedure parameter mapping adapter Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IProcedureParameterAdapter Methods Name Description Array() Parameter is simple type array flag Default(Object) Parameter default value Default(DefaultType) Parameter default value Default(DefaultType, Object) Parameter default value Direction(ParameterDirection) Parameter direction NativeSqlType(String) Native SQL type name ParameterName(String) Parameter mapping name Size(Int32) Size of SQL expression result value Size(Int32, Int32) Size of SQL expression result value UdtDataType(String) User defined type mapping UdtDataType(String, String) User defined type mapping Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Alias.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Procedure source alias Declaration string Alias { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Order.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Order.html",
    "title": "Property Order | XData website",
    "keywords": "Property Order | Improve this Doc View Source Order Parameter order Declaration int Order { get; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Binding.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Binding.html",
    "title": "Property Binding | XData website",
    "keywords": "Property Binding | Improve this Doc View Source Binding Parameter value binding Declaration string Binding { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Name.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Parameter name Declaration string Name { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Type.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Parameter mapped type Declaration Type Type { get; } Property Value Type Description Type"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.DbType.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.DbType.html",
    "title": "Property DbType | XData website",
    "keywords": "Property DbType | Improve this Doc View Source DbType Parameter database type Declaration DbType DbType { get; } Property Value Type Description DbType"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Size.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Size.html",
    "title": "Property Size | XData website",
    "keywords": "Property Size | Improve this Doc View Source Size Parameter size Declaration int Size { get; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Scale.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Scale.html",
    "title": "Property Scale | XData website",
    "keywords": "Property Scale | Improve this Doc View Source Scale Parameter scale Declaration int Scale { get; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Direction.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Direction.html",
    "title": "Property Direction | XData website",
    "keywords": "Property Direction | Improve this Doc View Source Direction Parameter direction Declaration ParameterDirection Direction { get; } Property Value Type Description ParameterDirection"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.UdtSqlType.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.UdtSqlType.html",
    "title": "Property UdtSqlType | XData website",
    "keywords": "Property UdtSqlType | Improve this Doc View Source UdtSqlType Parameter SQL user defined type (UDT) description Declaration UdtSqlType UdtSqlType { get; } Property Value Type Description UdtSqlType"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.GetValue.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.GetValue.html",
    "title": "Method GetValue | XData website",
    "keywords": "Method GetValue | Improve this Doc View Source GetValue<T>() Returns parameter value Declaration T GetValue<T>() Returns Type Description T Parameter value Type Parameters Name Description T Parameter mapped type"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Value.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Parameter value Declaration object Value { get; } Property Value Type Description Object"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.DefaultValueType.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.DefaultValueType.html",
    "title": "Property DefaultValueType | XData website",
    "keywords": "Property DefaultValueType | Improve this Doc View Source DefaultValueType Default parameter value type Declaration DefaultType DefaultValueType { get; } Property Value Type Description DefaultType"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.DefaultValue.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.DefaultValue.html",
    "title": "Property DefaultValue | XData website",
    "keywords": "Property DefaultValue | Improve this Doc View Source DefaultValue Default parameter value Declaration object DefaultValue { get; } Property Value Type Description Object"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.Clone.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.Clone.html",
    "title": "Method Clone | XData website",
    "keywords": "Method Clone | Improve this Doc View Source Clone() Clone parameter description Declaration IParameterDescription Clone() Returns Type Description IParameterDescription Cloned parameter"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.NativeSqlType.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.NativeSqlType.html",
    "title": "Property NativeSqlType | XData website",
    "keywords": "Property NativeSqlType | Improve this Doc View Source NativeSqlType Native SQL type name Declaration string NativeSqlType { get; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter!"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.TypeIsArray.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.TypeIsArray.html",
    "title": "Property TypeIsArray | XData website",
    "keywords": "Property TypeIsArray | Improve this Doc View Source TypeIsArray Parameter mapped type is array Declaration bool TypeIsArray { get; } Property Value Type Description Boolean"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.html",
    "title": "Interface IParameterDescription | XData website",
    "keywords": "Interface IParameterDescription Dynamic stored procedure parameter description Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IParameterDescription Properties Name Description Alias Procedure source alias Binding Parameter value binding DbType Parameter database type DefaultValue Default parameter value DefaultValueType Default parameter value type Direction Parameter direction Name Parameter name NativeSqlType Native SQL type name Order Parameter order Scale Parameter scale Size Parameter size Type Parameter mapped type TypeIsArray Parameter mapped type is array UdtSqlType Parameter SQL user defined type (UDT) description Value Parameter value Methods Name Description Clone() Clone parameter description GetValue<T>() Returns parameter value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ILinkPropertyMappingAdapter-1.LinkProperty.html": {
    "href": "api/XData.Mapping.Dynamic.ILinkPropertyMappingAdapter-1.LinkProperty.html",
    "title": "Method LinkProperty | XData website",
    "keywords": "Method LinkProperty | Improve this Doc View Source LinkProperty<TSource>(Expression<Func<TSource, Object>>, Expression<Func<T, Object>>) Link property data association property Declaration IStructureFlag LinkProperty<TSource>(Expression<Func<TSource, object>> source, Expression<Func<T, object>> property) where TSource : class, IDataObject, new() Parameters Type Name Description Expression < Func <TSource, Object >> source Source dictionary property Expression < Func <T, Object >> property Property Returns Type Description IStructureFlag Property link description Type Parameters Name Description TSource Source dictionary type | Improve this Doc View Source LinkProperty<TSource>(Expression<Func<TSource, Object>>) Link property data association property Declaration IStructureFlag LinkProperty<TSource>(Expression<Func<TSource, object>> source) where TSource : class, IDataObject, new() Parameters Type Name Description Expression < Func <TSource, Object >> source Source dictionary property Returns Type Description IStructureFlag Property link description Type Parameters Name Description TSource Source dictionary type | Improve this Doc View Source LinkProperty<TSource>(Expression<Func<T, Object>>) Link property data association property Declaration IStructureFlag LinkProperty<TSource>(Expression<Func<T, object>> property) where TSource : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, Object >> property Property Returns Type Description IStructureFlag Property link description Type Parameters Name Description TSource Source dictionary type | Improve this Doc View Source LinkProperty() Link property data association property Declaration IStructureFlag LinkProperty() Returns Type Description IStructureFlag Property link description"
  },
  "api/XData.Mapping.Dynamic.ILinkPropertyMappingAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.ILinkPropertyMappingAdapter-1.html",
    "title": "Interface ILinkPropertyMappingAdapter<T> | XData website",
    "keywords": "Interface ILinkPropertyMappingAdapter<T> Link property mapping adapter Inherited Members IRepositoryReadOnlyPropertyMappingAdapter.ConcurrencyToken() IRepositoryReadOnlyPropertyMappingAdapter.OuterFlag() IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface ILinkPropertyMappingAdapter<T> : IRepositoryReadOnlyPropertyMappingAdapter, IPropertyMappingAdapter where T : class, IDataObject, new() Type Parameters Name Description T Data object type Methods Name Description LinkProperty() Link property data association property LinkProperty<TSource>(Expression<Func<TSource, Object>>) Link property data association property LinkProperty<TSource>(Expression<Func<TSource, Object>>, Expression<Func<T, Object>>) Link property data association property LinkProperty<TSource>(Expression<Func<T, Object>>) Link property data association property Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IInnerFilterAdapter.Link.html": {
    "href": "api/XData.Mapping.Dynamic.IInnerFilterAdapter.Link.html",
    "title": "Method Link | XData website",
    "keywords": "Method Link | Improve this Doc View Source Link(String, String) Inner link filter description Declaration IFilterDescription Link(string linkedAlias, string linkedField) Parameters Type Name Description String linkedAlias Linked source alias String linkedField Linked source field name to link Returns Type Description IFilterDescription Filter description | Improve this Doc View Source Link(String, String, String) Inner link filter description Declaration IFilterDescription Link(string linkedAlias, string linkedField, string field) Parameters Type Name Description String linkedAlias Linked source alias String linkedField Linked source field name to link String field Current field name to link Returns Type Description IFilterDescription Filter description"
  },
  "api/XData.Mapping.Dynamic.IInnerFilterAdapter.ConstFilter.html": {
    "href": "api/XData.Mapping.Dynamic.IInnerFilterAdapter.ConstFilter.html",
    "title": "Method ConstFilter | XData website",
    "keywords": "Method ConstFilter | Improve this Doc View Source ConstFilter(String, String, FilterConstantType, Object, FilterNullable) Constant valued filter description Declaration IFilterDescription ConstFilter(string name, string field, FilterConstantType constantType, object constantValue, FilterNullable nullable) Parameters Type Name Description String name Filter name String field Field name to filter on FilterConstantType constantType Constant type Object constantValue Constant value FilterNullable nullable Filter null value handling mode Returns Type Description IFilterDescription Filter description | Improve this Doc View Source ConstFilter(String, String, FilterConstantType, Object) Constant valued filter description Declaration IFilterDescription ConstFilter(string name, string field, FilterConstantType constantType, object constantValue) Parameters Type Name Description String name Filter name String field Field name to filter on FilterConstantType constantType Constant type Object constantValue Constant value Returns Type Description IFilterDescription Filter description | Improve this Doc View Source ConstFilter(String, String, FilterConstantType) Constant valued filter description Declaration IFilterDescription ConstFilter(string name, string field, FilterConstantType constantType) Parameters Type Name Description String name Filter name String field Field name to filter on FilterConstantType constantType Constant type Returns Type Description IFilterDescription Filter description | Improve this Doc View Source ConstFilter(String, String, Object) Constant valued filter description Declaration IFilterDescription ConstFilter(string name, string field, object constantValue) Parameters Type Name Description String name Filter name String field Field name to filter on Object constantValue Constant value Returns Type Description IFilterDescription Filter description"
  },
  "api/XData.Mapping.Dynamic.IInnerFilterAdapter.DictFilter.html": {
    "href": "api/XData.Mapping.Dynamic.IInnerFilterAdapter.DictFilter.html",
    "title": "Method DictFilter | XData website",
    "keywords": "Method DictFilter | Improve this Doc View Source DictFilter(String, String, String, String, String, Boolean) Dictionary code filter description Declaration IFilterDescription DictFilter(string dictTable, string dictId, string dictCode, string dictValue, string field, bool valueIsVariable) Parameters Type Name Description String dictTable Dictionary table name String dictId Dictionary table identity column String dictCode Dictionary table code column String dictValue Dictionary code value to filter on String field Field name to filter on Boolean valueIsVariable Dictionary code value is a variable name flag Returns Type Description IFilterDescription Filter description | Improve this Doc View Source DictFilter(String, String, String, String, Boolean) Dictionary code filter description Declaration IFilterDescription DictFilter(string dictTable, string dictId, string dictCode, string dictValue, bool valueIsVariable) Parameters Type Name Description String dictTable Dictionary table name String dictId Dictionary table identity column String dictCode Dictionary table code column String dictValue Dictionary code value to filter on Boolean valueIsVariable Dictionary code value is a variable name flag Returns Type Description IFilterDescription Filter description | Improve this Doc View Source DictFilter(String, String, String, String, String) Dictionary code filter description Declaration IFilterDescription DictFilter(string dictTable, string dictId, string dictCode, string dictValue, string field) Parameters Type Name Description String dictTable Dictionary table name String dictId Dictionary table identity column String dictCode Dictionary table code column String dictValue Dictionary code value to filter on String field Field name to filter on Returns Type Description IFilterDescription Filter description | Improve this Doc View Source DictFilter(String, String, String, String) Dictionary code filter description Declaration IFilterDescription DictFilter(string dictTable, string dictId, string dictCode, string dictValue) Parameters Type Name Description String dictTable Dictionary table name String dictId Dictionary table identity column String dictCode Dictionary table code column String dictValue Dictionary code value to filter on Returns Type Description IFilterDescription Filter description"
  },
  "api/XData.Mapping.Dynamic.IInnerFilterAdapter.ExprFilter.html": {
    "href": "api/XData.Mapping.Dynamic.IInnerFilterAdapter.ExprFilter.html",
    "title": "Method ExprFilter | XData website",
    "keywords": "Method ExprFilter | Improve this Doc View Source ExprFilter(String, String) Expression filter description Declaration IFilterDescription ExprFilter(string field, string exprText) Parameters Type Name Description String field Field name to filter on String exprText SQL expression text Returns Type Description IFilterDescription Filter description | Improve this Doc View Source ExprFilter<T>(String, Expression<Func<IQueryStructureAdapter, T>>) Expression filter description Declaration IFilterDescription ExprFilter<T>(string field, Expression<Func<IQueryStructureAdapter, T>> expression) Parameters Type Name Description String field Field name to filter on Expression < Func < IQueryStructureAdapter , T>> expression SQL expression description Returns Type Description IFilterDescription Filter description Type Parameters Name Description T"
  },
  "api/XData.Mapping.Dynamic.IInnerFilterAdapter.RangeFilter.html": {
    "href": "api/XData.Mapping.Dynamic.IInnerFilterAdapter.RangeFilter.html",
    "title": "Method RangeFilter | XData website",
    "keywords": "Method RangeFilter | Improve this Doc View Source RangeFilter(String, Object[]) Range filter description Declaration IFilterDescription RangeFilter(string field, params object[] range) Parameters Type Name Description String field Field name to filter on Object [] range Values range Returns Type Description IFilterDescription Filter description"
  },
  "api/XData.Mapping.Dynamic.IInnerFilterAdapter.SubqueryFilter.html": {
    "href": "api/XData.Mapping.Dynamic.IInnerFilterAdapter.SubqueryFilter.html",
    "title": "Method SubqueryFilter | XData website",
    "keywords": "Method SubqueryFilter | Improve this Doc View Source SubqueryFilter(String, String) Subquery filter (exists, not exists, in select, not in select) description Declaration IFilterDescription SubqueryFilter(string field, string subqueryAlias) Parameters Type Name Description String field Field name to filter on String subqueryAlias Subquery alias Returns Type Description IFilterDescription Filter description"
  },
  "api/XData.Mapping.Dynamic.IInnerFilterAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IInnerFilterAdapter.html",
    "title": "Interface IInnerFilterAdapter | XData website",
    "keywords": "Interface IInnerFilterAdapter Inner filter description adapter Inherited Members IFilterAdapter.Combination(String, Combination, String) IFilterAdapter.Combination(String, Combination) Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IInnerFilterAdapter : IFilterAdapter Methods Name Description ConstFilter(String, String, Object) Constant valued filter description ConstFilter(String, String, FilterConstantType) Constant valued filter description ConstFilter(String, String, FilterConstantType, Object) Constant valued filter description ConstFilter(String, String, FilterConstantType, Object, FilterNullable) Constant valued filter description DictFilter(String, String, String, String) Dictionary code filter description DictFilter(String, String, String, String, Boolean) Dictionary code filter description DictFilter(String, String, String, String, String) Dictionary code filter description DictFilter(String, String, String, String, String, Boolean) Dictionary code filter description ExprFilter(String, String) Expression filter description ExprFilter<T>(String, Expression<Func<IQueryStructureAdapter, T>>) Expression filter description Link(String, String) Inner link filter description Link(String, String, String) Inner link filter description RangeFilter(String, Object[]) Range filter description SubqueryFilter(String, String) Subquery filter (exists, not exists, in select, not in select) description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IFilterDescription.html": {
    "href": "api/XData.Mapping.Dynamic.IFilterDescription.html",
    "title": "Interface IFilterDescription | XData website",
    "keywords": "Interface IFilterDescription Dynamic query filter description Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IFilterDescription Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetOperation<T>(T, FilterOperation) QueryDescriptionExtensions.AsPrimary<T>(T) QueryDescriptionExtensions.SetCombination<T>(T, String) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IFilterAdapter.Combination.html": {
    "href": "api/XData.Mapping.Dynamic.IFilterAdapter.Combination.html",
    "title": "Method Combination | XData website",
    "keywords": "Method Combination | Improve this Doc View Source Combination(String, Combination, String) Filter combination description Declaration IFilterDescription Combination(string name, Combination combination, string parent) Parameters Type Name Description String name Filter combination name Combination combination Filter combination logic String parent Parent filter combination name Returns Type Description IFilterDescription Filter description | Improve this Doc View Source Combination(String, Combination) Filter combination description Declaration IFilterDescription Combination(string name, Combination combination) Parameters Type Name Description String name Filter combination name Combination combination Filter combination logic Returns Type Description IFilterDescription Filter description"
  },
  "api/XData.Mapping.Dynamic.IFilterAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IFilterAdapter.html",
    "title": "Interface IFilterAdapter | XData website",
    "keywords": "Interface IFilterAdapter Filter description adapter Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IFilterAdapter Methods Name Description Combination(String, Combination) Filter combination description Combination(String, Combination, String) Filter combination description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkFlag.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkFlag.html",
    "title": "Interface IExternalLinkFlag | XData website",
    "keywords": "Interface IExternalLinkFlag Dynamic structure external link flag interface Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IExternalLinkFlag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkDefinitionAdapter-1.ExternalLink.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkDefinitionAdapter-1.ExternalLink.html",
    "title": "Method ExternalLink | XData website",
    "keywords": "Method ExternalLink | Improve this Doc View Source ExternalLink<TChild>(Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[]) External link definition Declaration IExternalLinkDefinition ExternalLink<TChild>(params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) where TChild : class, IDataObject, new() Parameters Type Name Description Expression < Func < IExternalLinkAdapter <T, TChild>, IExternalLinkFlag >>[] linkFlags External link flags Returns Type Description IExternalLinkDefinition External link definition Type Parameters Name Description TChild External link repository data object type | Improve this Doc View Source ExternalLink<TChild>(String, Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[]) External link definition Declaration IExternalLinkDefinition ExternalLink<TChild>(string property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) where TChild : class, IDataObject, new() Parameters Type Name Description String property Link property Expression < Func < IExternalLinkAdapter <T, TChild>, IExternalLinkFlag >>[] linkFlags External link flags Returns Type Description IExternalLinkDefinition External link definition Type Parameters Name Description TChild External link repository data object type | Improve this Doc View Source ExternalLink<TChild>(Expression<Func<IRepositoryStructureAdapter<TChild>, Object>>, Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[]) External link definition Declaration IExternalLinkDefinition ExternalLink<TChild>(Expression<Func<IRepositoryStructureAdapter<TChild>, object>> property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) where TChild : class, IDataObject, new() Parameters Type Name Description Expression < Func < IRepositoryStructureAdapter <TChild>, Object >> property Link property Expression < Func < IExternalLinkAdapter <T, TChild>, IExternalLinkFlag >>[] linkFlags External link flags Returns Type Description IExternalLinkDefinition External link definition Type Parameters Name Description TChild External link repository data object type"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkDefinitionAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkDefinitionAdapter-1.html",
    "title": "Interface IExternalLinkDefinitionAdapter<T> | XData website",
    "keywords": "Interface IExternalLinkDefinitionAdapter<T> External link definition adapter Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IExternalLinkDefinitionAdapter<T> where T : class, IDataObject, new() Type Parameters Name Description T Parent data object type Methods Name Description ExternalLink<TChild>(Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[]) External link definition ExternalLink<TChild>(Expression<Func<IRepositoryStructureAdapter<TChild>, Object>>, Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[]) External link definition ExternalLink<TChild>(String, Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[]) External link definition Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkDefinition.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkDefinition.html",
    "title": "Interface IExternalLinkDefinition | XData website",
    "keywords": "Interface IExternalLinkDefinition Dynamic structure external link definition interface Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IExternalLinkDefinition Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.Property.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.Property.html",
    "title": "Method Property | XData website",
    "keywords": "Method Property | Improve this Doc View Source Property(Expression<Func<TChild, Object>>) External link child property Declaration IExternalLinkFlag Property(Expression<Func<TChild, object>> property) Parameters Type Name Description Expression < Func <TChild, Object >> property Returns Type Description IExternalLinkFlag External link flag | Improve this Doc View Source Property<TChildLink>(Expression<Func<TChildLink, Object>>) External link child property Declaration IExternalLinkFlag Property<TChildLink>(Expression<Func<TChildLink, object>> property) Parameters Type Name Description Expression < Func <TChildLink, Object >> property Returns Type Description IExternalLinkFlag External link flag Type Parameters Name Description TChildLink"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.Filter.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.Filter.html",
    "title": "Method Filter | XData website",
    "keywords": "Method Filter | Improve this Doc View Source Filter(Expression<Func<TChild, RuntimeFilter>>) External link runtime filter Declaration IExternalLinkFlag Filter(Expression<Func<TChild, RuntimeFilter>> filter) Parameters Type Name Description Expression < Func <TChild, RuntimeFilter >> filter Runtime filter Returns Type Description IExternalLinkFlag External link flag"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.MasterRefresh.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.MasterRefresh.html",
    "title": "Method MasterRefresh | XData website",
    "keywords": "Method MasterRefresh | Improve this Doc View Source MasterRefresh() External link master refresh flag Declaration IExternalLinkFlag MasterRefresh() Returns Type Description IExternalLinkFlag External link flag"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.DirectLink.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.DirectLink.html",
    "title": "Method DirectLink | XData website",
    "keywords": "Method DirectLink | Improve this Doc View Source DirectLink() External link direct link flag Declaration IExternalLinkFlag DirectLink() Returns Type Description IExternalLinkFlag External link flag See Also ShowSubtree"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.Operation.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.Operation.html",
    "title": "Method Operation | XData website",
    "keywords": "Method Operation | Improve this Doc View Source Operation(FilterOperation) External link filter operation flag Declaration IExternalLinkFlag Operation(FilterOperation operation) Parameters Type Name Description FilterOperation operation Filter operation Returns Type Description IExternalLinkFlag External link flag See Also FilterOperation"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.Nullable.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.Nullable.html",
    "title": "Method Nullable | XData website",
    "keywords": "Method Nullable | Improve this Doc View Source Nullable(FilterNullable) External link filter null value assignment mode flag Declaration IExternalLinkFlag Nullable(FilterNullable nullable) Parameters Type Name Description FilterNullable nullable Filter null value assignment mode Returns Type Description IExternalLinkFlag External link flag See Also FilterNullable"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.TreeFilter.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.TreeFilter.html",
    "title": "Method TreeFilter | XData website",
    "keywords": "Method TreeFilter | Improve this Doc View Source TreeFilter() External link filter tree root condition (START WITH) flag Declaration IExternalLinkFlag TreeFilter() Returns Type Description IExternalLinkFlag External link flag"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.PrimaryFilter.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.PrimaryFilter.html",
    "title": "Method PrimaryFilter | XData website",
    "keywords": "Method PrimaryFilter | Improve this Doc View Source PrimaryFilter() External link optional filter flag Declaration IExternalLinkFlag PrimaryFilter() Returns Type Description IExternalLinkFlag External link flag See Also IOptionalFilter"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.FilterCombination.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.FilterCombination.html",
    "title": "Method FilterCombination | XData website",
    "keywords": "Method FilterCombination | Improve this Doc View Source FilterCombination(String) External link filter combination flag Declaration IExternalLinkFlag FilterCombination(string combinationName) Parameters Type Name Description String combinationName Filter combination name Returns Type Description IExternalLinkFlag"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.html",
    "title": "Interface IExternalLinkAdapter<T, TChild> | XData website",
    "keywords": "Interface IExternalLinkAdapter<T, TChild> External link mapping adapter Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IExternalLinkAdapter<T, TChild> where T : class, IDataObject, new() where TChild : class, IDataObject, new() Type Parameters Name Description T Parent date object type TChild Child date object type Methods Name Description DirectLink() External link direct link flag Filter(Expression<Func<TChild, RuntimeFilter>>) External link runtime filter FilterCombination(String) External link filter combination flag MasterRefresh() External link master refresh flag Nullable(FilterNullable) External link filter null value assignment mode flag Operation(FilterOperation) External link filter operation flag PrimaryFilter() External link optional filter flag Property(Expression<Func<TChild, Object>>) External link child property Property<TChildLink>(Expression<Func<TChildLink, Object>>) External link child property TreeFilter() External link filter tree root condition (START WITH) flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExpressionPropertyAdapter.Size.html": {
    "href": "api/XData.Mapping.Dynamic.IExpressionPropertyAdapter.Size.html",
    "title": "Method Size | XData website",
    "keywords": "Method Size | Improve this Doc View Source Size(Int32) Size of SQL expression result value Declaration IStructureFlag Size(int size) Parameters Type Name Description Int32 size Size Returns Type Description IStructureFlag SQL expression mapping flag | Improve this Doc View Source Size(Int32, Int32) Size of SQL expression result value Declaration IStructureFlag Size(int size, int scale) Parameters Type Name Description Int32 size Size Int32 scale Scale Returns Type Description IStructureFlag SQL expression mapping flag"
  },
  "api/XData.Mapping.Dynamic.IExpressionPropertyAdapter.NativeSqlType.html": {
    "href": "api/XData.Mapping.Dynamic.IExpressionPropertyAdapter.NativeSqlType.html",
    "title": "Method NativeSqlType | XData website",
    "keywords": "Method NativeSqlType | Improve this Doc View Source NativeSqlType(String) SQL expression result native SQL type name Declaration IStructureFlag NativeSqlType(string nativeSqlType) Parameters Type Name Description String nativeSqlType Native SQL type name Returns Type Description IStructureFlag SQL expression mapping flag"
  },
  "api/XData.Mapping.Dynamic.IExpressionPropertyAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IExpressionPropertyAdapter.html",
    "title": "Interface IExpressionPropertyAdapter | XData website",
    "keywords": "Interface IExpressionPropertyAdapter SQL expression property mapping adapter Inherited Members IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() Namespace : XData.Mapping.Dynamic Assembly : XData.docfx.dll Syntax public interface IExpressionPropertyAdapter : IPropertyMappingAdapter Methods Name Description NativeSqlType(String) SQL expression result native SQL type name Size(Int32) Size of SQL expression result value Size(Int32, Int32) Size of SQL expression result value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.DictionaryFilterAttribute.TypeId.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.DictionaryFilterAttribute.DictionaryTable.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.DictionaryTable.html",
    "title": "Property DictionaryTable | XData website",
    "keywords": "Property DictionaryTable | Improve this Doc View Source DictionaryTable Dictionary table name Declaration public string DictionaryTable { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.DictionaryFilterAttribute.DictionaryId.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.DictionaryId.html",
    "title": "Property DictionaryId | XData website",
    "keywords": "Property DictionaryId | Improve this Doc View Source DictionaryId Dictionary id field Declaration public string DictionaryId { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.DictionaryFilterAttribute.DictionaryCode.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.DictionaryCode.html",
    "title": "Property DictionaryCode | XData website",
    "keywords": "Property DictionaryCode | Improve this Doc View Source DictionaryCode Dictionary code field Declaration public string DictionaryCode { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.DictionaryFilterAttribute.DictionaryValue.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.DictionaryValue.html",
    "title": "Property DictionaryValue | XData website",
    "keywords": "Property DictionaryValue | Improve this Doc View Source DictionaryValue Dictionary code value Declaration public string DictionaryValue { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.DictionaryFilterAttribute.IsVariableValue.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.IsVariableValue.html",
    "title": "Property IsVariableValue | XData website",
    "keywords": "Property IsVariableValue | Improve this Doc View Source IsVariableValue Variable name as filter value Declaration public bool IsVariableValue { get; set; } Property Value Type Description Boolean Remarks If true DictionaryValue contains data object variable name which value will be compared with Dictionary code"
  },
  "api/XData.Mapping.DictionaryFilterAttribute.FilterType.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Dictionary Overrides FilterBaseAttribute.FilterType"
  },
  "api/XData.Mapping.DictionaryFilterAttribute.-ctor.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.-ctor.html",
    "title": "Constructor DictionaryFilterAttribute | XData website",
    "keywords": "Constructor DictionaryFilterAttribute | Improve this Doc View Source DictionaryFilterAttribute(String, String, String, String, String, String) Dictionary filter attribute Declaration public DictionaryFilterAttribute(string dictionaryTable, string dictionaryIdField, string dictionaryCodeField, string dictionaryValue, string source, string fieldName = \"\") Parameters Type Name Description String dictionaryTable Dictionary table name String dictionaryIdField Dictionary id field String dictionaryCodeField Dictionary code field String dictionaryValue Dictionary code value String source Filter source alias String fieldName Filter field name Exceptions Type Condition XDataRuntimeException Dictionary table name cannot be null or empty string XDataRuntimeException Dictionary id field cannot be null or empty string XDataRuntimeException Dictionary code field cannot be null or empty string XDataRuntimeException Dictionary code value cannot be null or empty string"
  },
  "api/XData.Mapping.DictionaryFilterAttribute.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.html",
    "title": "Class DictionaryFilterAttribute | XData website",
    "keywords": "Class DictionaryFilterAttribute Data object dictionary filter attribute Inheritance Object Attribute FilterBaseAttribute FilterAttribute DictionaryFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class DictionaryFilterAttribute : FilterAttribute Remarks Filter by dictionary code (example: doc_type_id = (select doc_type_id from t_doc_type where code = 'INVOICE') ) WARNING! Dictionary restricted by single valued primary key! WARNING! Dictionary code mast be unique! Examples DictionaryFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\", \"D\") Constructors Name Description DictionaryFilterAttribute(String, String, String, String, String, String) Dictionary filter attribute Properties Name Description DictionaryCode Dictionary code field DictionaryId Dictionary id field DictionaryTable Dictionary table name DictionaryValue Dictionary code value FilterType Filter type IsVariableValue Variable name as filter value TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Dictionary"
  },
  "api/XData.Mapping.DataTableAttribute.TypeId.html": {
    "href": "api/XData.Mapping.DataTableAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.DataTableAttribute.Type.html": {
    "href": "api/XData.Mapping.DataTableAttribute.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Data source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType Table Overrides DataSourceAttribute.Type"
  },
  "api/XData.Mapping.DataTableAttribute.Name.html": {
    "href": "api/XData.Mapping.DataTableAttribute.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Table name Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.DataTableAttribute.Alias.html": {
    "href": "api/XData.Mapping.DataTableAttribute.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Table alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias"
  },
  "api/XData.Mapping.DataTableAttribute.Parent.html": {
    "href": "api/XData.Mapping.DataTableAttribute.Parent.html",
    "title": "Property Parent | XData website",
    "keywords": "Property Parent | Improve this Doc View Source Parent Parent table alias Declaration public string Parent { get; set; } Property Value Type Description String Remarks Updatable tables mast be organized in update hierarchy linked by ParentAlias. Root table of update hierarchy is the data object base source (see BaseSource ) See Also Alias"
  },
  "api/XData.Mapping.DataTableAttribute.-ctor.html": {
    "href": "api/XData.Mapping.DataTableAttribute.-ctor.html",
    "title": "Constructor DataTableAttribute | XData website",
    "keywords": "Constructor DataTableAttribute | Improve this Doc View Source DataTableAttribute(String, String) Data object table attribute Declaration public DataTableAttribute(string name, string alias) Parameters Type Name Description String name Table name String alias Table alias Exceptions Type Condition ArgumentException Table alias cannot be null or empty string XDataRuntimeException Data table alias is null or empty."
  },
  "api/XData.Mapping.DataTableAttribute.html": {
    "href": "api/XData.Mapping.DataTableAttribute.html",
    "title": "Class DataTableAttribute | XData website",
    "keywords": "Class DataTableAttribute Data object table attribute Inheritance Object Attribute DataSourceAttribute DataTableAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class DataTableAttribute : DataSourceAttribute Constructors Name Description DataTableAttribute(String, String) Data object table attribute Properties Name Description Alias Table alias Name Table name Parent Parent table alias Type Data source type TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.DataSourceAttribute.Type.html": {
    "href": "api/XData.Mapping.DataSourceAttribute.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Data source type Declaration public abstract DataSourceType Type { get; } Property Value Type Description DataSourceType"
  },
  "api/XData.Mapping.DataSourceAttribute.Alias.html": {
    "href": "api/XData.Mapping.DataSourceAttribute.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Data source alias Declaration public abstract string Alias { get; protected set; } Property Value Type Description String"
  },
  "api/XData.Mapping.DataSourceAttribute.html": {
    "href": "api/XData.Mapping.DataSourceAttribute.html",
    "title": "Class DataSourceAttribute | XData website",
    "keywords": "Class DataSourceAttribute Base data object source attribute Inheritance Object Attribute DataSourceAttribute DataTableAttribute InnerViewAttribute ProcedureAttribute SubqueryAttribute WithAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public abstract class DataSourceAttribute : Attribute Properties Name Description Alias Data source alias Type Data source type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.DataObjectAttribute.BaseSource.html": {
    "href": "api/XData.Mapping.DataObjectAttribute.BaseSource.html",
    "title": "Property BaseSource | XData website",
    "keywords": "Property BaseSource | Improve this Doc View Source BaseSource Base table alias Declaration public string BaseSource { get; } Property Value Type Description String Remarks Base table is modification allowed data source subtree root of data object See Also Alias Parent"
  },
  "api/XData.Mapping.DataObjectAttribute.Flags.html": {
    "href": "api/XData.Mapping.DataObjectAttribute.Flags.html",
    "title": "Property Flags | XData website",
    "keywords": "Property Flags | Improve this Doc View Source Flags Combination of DataObjectFlag values Declaration public DataStructureFlag Flags { get; set; } Property Value Type Description DataStructureFlag See Also DataStructureFlag"
  },
  "api/XData.Mapping.DataObjectAttribute.Context.html": {
    "href": "api/XData.Mapping.DataObjectAttribute.Context.html",
    "title": "Property Context | XData website",
    "keywords": "Property Context | Improve this Doc View Source Context Context alias Declaration public string Context { get; set; } Property Value Type Description String See Also Context"
  },
  "api/XData.Mapping.DataObjectAttribute.LogicAssemblyName.html": {
    "href": "api/XData.Mapping.DataObjectAttribute.LogicAssemblyName.html",
    "title": "Property LogicAssemblyName | XData website",
    "keywords": "Property LogicAssemblyName | Improve this Doc View Source LogicAssemblyName Data logic assembly name Declaration public string LogicAssemblyName { get; set; } Property Value Type Description String See Also IDataLogic <T>"
  },
  "api/XData.Mapping.DataObjectAttribute.-ctor.html": {
    "href": "api/XData.Mapping.DataObjectAttribute.-ctor.html",
    "title": "Constructor DataObjectAttribute | XData website",
    "keywords": "Constructor DataObjectAttribute | Improve this Doc View Source DataObjectAttribute(String) Data object metadata attribute Declaration public DataObjectAttribute(string baseSource = \"\") Parameters Type Name Description String baseSource Base table alias Remarks If Base table is empty - data object has no base table. WARNING! None based data objects are read only and can not contain any table!"
  },
  "api/XData.Mapping.DataObjectAttribute.html": {
    "href": "api/XData.Mapping.DataObjectAttribute.html",
    "title": "Class DataObjectAttribute | XData website",
    "keywords": "Class DataObjectAttribute Data object metadata attribute Inheritance Object Attribute DataObjectAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class DataObjectAttribute : Attribute Remarks WARNING! Required attribute! Constructors Name Description DataObjectAttribute(String) Data object metadata attribute Properties Name Description BaseSource Base table alias Context Context alias Flags Combination of DataObjectFlag values LogicAssemblyName Data logic assembly name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ConstantFilterAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ConstantFilterAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ConstantFilterAttribute.Name.html": {
    "href": "api/XData.Mapping.ConstantFilterAttribute.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Filter parameter name Declaration public string Name { get; } Property Value Type Description String Remarks No Sql parameter prefix needed"
  },
  "api/XData.Mapping.ConstantFilterAttribute.ConstantValue.html": {
    "href": "api/XData.Mapping.ConstantFilterAttribute.ConstantValue.html",
    "title": "Property ConstantValue | XData website",
    "keywords": "Property ConstantValue | Improve this Doc View Source ConstantValue Filter value Declaration public object ConstantValue { get; } Property Value Type Description Object See Also ConstantType FilterConstantType"
  },
  "api/XData.Mapping.ConstantFilterAttribute.ConstantType.html": {
    "href": "api/XData.Mapping.ConstantFilterAttribute.ConstantType.html",
    "title": "Property ConstantType | XData website",
    "keywords": "Property ConstantType | Improve this Doc View Source ConstantType Filter value type Declaration public FilterConstantType ConstantType { get; set; } Property Value Type Description FilterConstantType See Also FilterConstantType"
  },
  "api/XData.Mapping.ConstantFilterAttribute.Nullable.html": {
    "href": "api/XData.Mapping.ConstantFilterAttribute.Nullable.html",
    "title": "Property Nullable | XData website",
    "keywords": "Property Nullable | Improve this Doc View Source Nullable Filter null value handling mode Declaration public FilterNullable Nullable { get; set; } Property Value Type Description FilterNullable See Also FilterConstantType"
  },
  "api/XData.Mapping.ConstantFilterAttribute.FilterType.html": {
    "href": "api/XData.Mapping.ConstantFilterAttribute.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Constant Overrides FilterBaseAttribute.FilterType"
  },
  "api/XData.Mapping.ConstantFilterAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ConstantFilterAttribute.-ctor.html",
    "title": "Constructor ConstantFilterAttribute | XData website",
    "keywords": "Constructor ConstantFilterAttribute | Improve this Doc View Source ConstantFilterAttribute(String, String, String, Object) Constant filter attribute Declaration public ConstantFilterAttribute(string name, string source, string fieldName, object constant) Parameters Type Name Description String name Filter name String source Filter source alias String fieldName Filter field name Object constant Filter value Exceptions Type Condition XDataRuntimeException Filter name cannot be null or empty string"
  },
  "api/XData.Mapping.ConstantFilterAttribute.html": {
    "href": "api/XData.Mapping.ConstantFilterAttribute.html",
    "title": "Class ConstantFilterAttribute | XData website",
    "keywords": "Class ConstantFilterAttribute Data object constant value filter attribute Inheritance Object Attribute FilterBaseAttribute FilterAttribute ConstantFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ConstantFilterAttribute : FilterAttribute Remarks Filter value can be constant, data object variable value (see Variables ), current date or time Constructors Name Description ConstantFilterAttribute(String, String, String, Object) Constant filter attribute Properties Name Description ConstantType Filter value type ConstantValue Filter value FilterType Filter type Name Filter parameter name Nullable Filter null value handling mode TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ColumnUpdateWithAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ColumnUpdateWithAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ColumnUpdateWithAttribute.PropertyName.html": {
    "href": "api/XData.Mapping.ColumnUpdateWithAttribute.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description String See Also ColumnAttribute"
  },
  "api/XData.Mapping.ColumnUpdateWithAttribute.ExprText.html": {
    "href": "api/XData.Mapping.ColumnUpdateWithAttribute.ExprText.html",
    "title": "Property ExprText | XData website",
    "keywords": "Property ExprText | Improve this Doc View Source ExprText Expression text Declaration public string ExprText { get; } Property Value Type Description String Remarks PlainSql expression text is Sql expression or SqlExpressionAttribute name SubQuery expression text is Alias WARNING! Plain Sql expressions (see ExprType ) can use specific Sql dialect features! Data mapping may be not compatible with other database engines! Use SqlExpressionAttribute instead."
  },
  "api/XData.Mapping.ColumnUpdateWithAttribute.ExprType.html": {
    "href": "api/XData.Mapping.ColumnUpdateWithAttribute.ExprType.html",
    "title": "Property ExprType | XData website",
    "keywords": "Property ExprType | Improve this Doc View Source ExprType Expression type Declaration public DataExpressionType ExprType { get; } Property Value Type Description DataExpressionType Remarks WARNING! Plain Sql expressions can use specific Sql dialect features! Data mapping may be not compatible with other database engines! See Also DataExpressionType"
  },
  "api/XData.Mapping.ColumnUpdateWithAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ColumnUpdateWithAttribute.-ctor.html",
    "title": "Constructor ColumnUpdateWithAttribute | XData website",
    "keywords": "Constructor ColumnUpdateWithAttribute | Improve this Doc View Source ColumnUpdateWithAttribute(String, String, DataExpressionType) Column update source expression attribute Declaration public ColumnUpdateWithAttribute(string propertyName, string exprText, DataExpressionType exprType = DataExpressionType.PlainSql) Parameters Type Name Description String propertyName Property name String exprText Expression text DataExpressionType exprType Expression type Exceptions Type Condition XDataRuntimeException Property name cannot be null or empty string XDataRuntimeException Expression text cannot be null or empty string"
  },
  "api/XData.Mapping.ColumnUpdateWithAttribute.html": {
    "href": "api/XData.Mapping.ColumnUpdateWithAttribute.html",
    "title": "Class ColumnUpdateWithAttribute | XData website",
    "keywords": "Class ColumnUpdateWithAttribute Column update source expression attribute Inheritance Object Attribute ColumnUpdateWithAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ColumnUpdateWithAttribute : Attribute Remarks Used when ColumnAttribute value must to be updated with expression ( PlainSql or SubQuery ) result according ExprType Constructors Name Description ColumnUpdateWithAttribute(String, String, DataExpressionType) Column update source expression attribute Properties Name Description ExprText Expression text ExprType Expression type PropertyName Property name TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ColumnExpressionAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ColumnExpressionAttribute.PropertyName.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description String See Also ColumnAttribute"
  },
  "api/XData.Mapping.ColumnExpressionAttribute.ExprText.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.ExprText.html",
    "title": "Property ExprText | XData website",
    "keywords": "Property ExprText | Improve this Doc View Source ExprText Expression text Declaration public string ExprText { get; } Property Value Type Description String Remarks PlainSql expression text is Sql expression or SqlExpressionAttribute name SubQuery expression text is Alias WARNING! Plain Sql expressions (see ExprType ) can use specific Sql dialect features! Data mapping may be not compatible with other database engines! Use SqlExpressionAttribute instead."
  },
  "api/XData.Mapping.ColumnExpressionAttribute.ExprSize.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.ExprSize.html",
    "title": "Property ExprSize | XData website",
    "keywords": "Property ExprSize | Improve this Doc View Source ExprSize Expression size Declaration public int ExprSize { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.ColumnExpressionAttribute.ExprScale.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.ExprScale.html",
    "title": "Property ExprScale | XData website",
    "keywords": "Property ExprScale | Improve this Doc View Source ExprScale Expression scale Declaration public int ExprScale { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.ColumnExpressionAttribute.ExprType.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.ExprType.html",
    "title": "Property ExprType | XData website",
    "keywords": "Property ExprType | Improve this Doc View Source ExprType Expression type Declaration public DataExpressionType ExprType { get; } Property Value Type Description DataExpressionType Remarks WARNING! Plain Sql expressions can use specific Sql dialect features! Data mapping may be not compatible with other database engines! See Also DataExpressionType"
  },
  "api/XData.Mapping.ColumnExpressionAttribute.DbType.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.DbType.html",
    "title": "Property DbType | XData website",
    "keywords": "Property DbType | Improve this Doc View Source DbType Expression DbType Declaration public DbType DbType { get; } Property Value Type Description DbType"
  },
  "api/XData.Mapping.ColumnExpressionAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.-ctor.html",
    "title": "Constructor ColumnExpressionAttribute | XData website",
    "keywords": "Constructor ColumnExpressionAttribute | Improve this Doc View Source ColumnExpressionAttribute(String, String, DataExpressionType, DbType) Column expression attribute Declaration public ColumnExpressionAttribute(string propertyName, string exprText, DataExpressionType exprType = DataExpressionType.PlainSql, DbType type = null) Parameters Type Name Description String propertyName Property name String exprText Expression text DataExpressionType exprType Expression type DbType type Expression DbType Exceptions Type Condition XDataRuntimeException Property name cannot be null or empty string XDataRuntimeException Expression text cannot be null or empty string"
  },
  "api/XData.Mapping.ColumnExpressionAttribute.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.html",
    "title": "Class ColumnExpressionAttribute | XData website",
    "keywords": "Class ColumnExpressionAttribute Column expression attribute Inheritance Object Attribute ColumnExpressionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ColumnExpressionAttribute : Attribute Remarks Used when ColumnAttribute value is expression ( PlainSql or SubQuery ) according ExprType Constructors Name Description ColumnExpressionAttribute(String, String, DataExpressionType, DbType) Column expression attribute Properties Name Description DbType Expression DbType ExprScale Expression scale ExprSize Expression size ExprText Expression text ExprType Expression type PropertyName Property name TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ColumnDefaultAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ColumnDefaultAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ColumnDefaultAttribute.PropertyName.html": {
    "href": "api/XData.Mapping.ColumnDefaultAttribute.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description String See Also ColumnAttribute"
  },
  "api/XData.Mapping.ColumnDefaultAttribute.DefaultSource.html": {
    "href": "api/XData.Mapping.ColumnDefaultAttribute.DefaultSource.html",
    "title": "Property DefaultSource | XData website",
    "keywords": "Property DefaultSource | Improve this Doc View Source DefaultSource Default value source Declaration public DefaultType DefaultSource { get; } Property Value Type Description DefaultType"
  },
  "api/XData.Mapping.ColumnDefaultAttribute.DefaultValue.html": {
    "href": "api/XData.Mapping.ColumnDefaultAttribute.DefaultValue.html",
    "title": "Property DefaultValue | XData website",
    "keywords": "Property DefaultValue | Improve this Doc View Source DefaultValue Default value Declaration public object DefaultValue { get; } Property Value Type Description Object"
  },
  "api/XData.Mapping.ColumnDefaultAttribute.DefaultFeature.html": {
    "href": "api/XData.Mapping.ColumnDefaultAttribute.DefaultFeature.html",
    "title": "Property DefaultFeature | XData website",
    "keywords": "Property DefaultFeature | Improve this Doc View Source DefaultFeature Default extended features Declaration public DefaultFeature DefaultFeature { get; set; } Property Value Type Description DefaultFeature"
  },
  "api/XData.Mapping.ColumnDefaultAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ColumnDefaultAttribute.-ctor.html",
    "title": "Constructor ColumnDefaultAttribute | XData website",
    "keywords": "Constructor ColumnDefaultAttribute | Improve this Doc View Source ColumnDefaultAttribute(String, DefaultType, Object) Column default value attribute Declaration public ColumnDefaultAttribute(string propertyName, DefaultType source, object val = null) Parameters Type Name Description String propertyName Property name DefaultType source Default value source Object val Default value Exceptions Type Condition XDataRuntimeException Property name cannot be null or empty string"
  },
  "api/XData.Mapping.ColumnDefaultAttribute.html": {
    "href": "api/XData.Mapping.ColumnDefaultAttribute.html",
    "title": "Class ColumnDefaultAttribute | XData website",
    "keywords": "Class ColumnDefaultAttribute Column default value attribute Inheritance Object Attribute ColumnDefaultAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ColumnDefaultAttribute : Attribute Remarks Used to declare default value rule for column Constructors Name Description ColumnDefaultAttribute(String, DefaultType, Object) Column default value attribute Properties Name Description DefaultFeature Default extended features DefaultSource Default value source DefaultValue Default value PropertyName Property name TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DefaultType"
  },
  "api/XData.Mapping.ColumnAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ColumnAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ColumnAttribute.PropertyName.html": {
    "href": "api/XData.Mapping.ColumnAttribute.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.ColumnAttribute.ReferenceSource.html": {
    "href": "api/XData.Mapping.ColumnAttribute.ReferenceSource.html",
    "title": "Property ReferenceSource | XData website",
    "keywords": "Property ReferenceSource | Improve this Doc View Source ReferenceSource Referenced property source alias Declaration public string ReferenceSource { get; set; } Property Value Type Description String"
  },
  "api/XData.Mapping.ColumnAttribute.Reference.html": {
    "href": "api/XData.Mapping.ColumnAttribute.Reference.html",
    "title": "Property Reference | XData website",
    "keywords": "Property Reference | Improve this Doc View Source Reference Referenced property name Declaration public string Reference { get; set; } Property Value Type Description String"
  },
  "api/XData.Mapping.ColumnAttribute.PropertyType.html": {
    "href": "api/XData.Mapping.ColumnAttribute.PropertyType.html",
    "title": "Property PropertyType | XData website",
    "keywords": "Property PropertyType | Improve this Doc View Source PropertyType Property type Declaration public Type PropertyType { get; } Property Value Type Description Type"
  },
  "api/XData.Mapping.ColumnAttribute.Source.html": {
    "href": "api/XData.Mapping.ColumnAttribute.Source.html",
    "title": "Property Source | XData website",
    "keywords": "Property Source | Improve this Doc View Source Source Data source alias Declaration public string Source { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.ColumnAttribute.FieldName.html": {
    "href": "api/XData.Mapping.ColumnAttribute.FieldName.html",
    "title": "Property FieldName | XData website",
    "keywords": "Property FieldName | Improve this Doc View Source FieldName Field name Declaration public string FieldName { get; } Property Value Type Description String"
  },
  "api/XData.Mapping.ColumnAttribute.Flags.html": {
    "href": "api/XData.Mapping.ColumnAttribute.Flags.html",
    "title": "Property Flags | XData website",
    "keywords": "Property Flags | Improve this Doc View Source Flags Property flags Declaration public DataPropertyFlag Flags { get; set; } Property Value Type Description DataPropertyFlag See Also DataPropertyFlag"
  },
  "api/XData.Mapping.ColumnAttribute.Grouping.html": {
    "href": "api/XData.Mapping.ColumnAttribute.Grouping.html",
    "title": "Property Grouping | XData website",
    "keywords": "Property Grouping | Improve this Doc View Source Grouping Grouping mode Declaration public DataGrouping Grouping { get; set; } Property Value Type Description DataGrouping See Also DataGrouping"
  },
  "api/XData.Mapping.ColumnAttribute.GroupOrder.html": {
    "href": "api/XData.Mapping.ColumnAttribute.GroupOrder.html",
    "title": "Property GroupOrder | XData website",
    "keywords": "Property GroupOrder | Improve this Doc View Source GroupOrder Grouping order Declaration public int GroupOrder { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.ColumnAttribute.Hidden.html": {
    "href": "api/XData.Mapping.ColumnAttribute.Hidden.html",
    "title": "Property Hidden | XData website",
    "keywords": "Property Hidden | Improve this Doc View Source Hidden Hidden column flag Declaration public bool Hidden { get; set; } Property Value Type Description Boolean Remarks Used to exclude column from query selected columns Hidden column can be used as: PropertyName , ChildProperty or for grouping (see GroupOrder )"
  },
  "api/XData.Mapping.ColumnAttribute.NativeSqlType.html": {
    "href": "api/XData.Mapping.ColumnAttribute.NativeSqlType.html",
    "title": "Property NativeSqlType | XData website",
    "keywords": "Property NativeSqlType | Improve this Doc View Source NativeSqlType Native SQL type name Declaration public string NativeSqlType { get; set; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter!"
  },
  "api/XData.Mapping.ColumnAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ColumnAttribute.-ctor.html",
    "title": "Constructor ColumnAttribute | XData website",
    "keywords": "Constructor ColumnAttribute | Improve this Doc View Source ColumnAttribute(String, Type, String, String) Column attribute Declaration public ColumnAttribute(string propertyName, Type propertyType, string source = \"\", string fieldName = \"\") Parameters Type Name Description String propertyName Property name Type propertyType Property type String source Source alias String fieldName Field name Exceptions Type Condition XDataRuntimeException Property name cannot be null or empty string XDataRuntimeException Field name cannot be null or empty string XDataRuntimeException Property type cannot be null"
  },
  "api/XData.Mapping.ColumnAttribute.html": {
    "href": "api/XData.Mapping.ColumnAttribute.html",
    "title": "Class ColumnAttribute | XData website",
    "keywords": "Class ColumnAttribute Column mapping attribute Inheritance Object Attribute ColumnAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ColumnAttribute : Attribute Remarks Used to map data without declaring real property This useful for declare Id , introduce \"virtual\" property for PropertyName , ChildProperty or can be used for grouping (see GroupOrder ) Constructors Name Description ColumnAttribute(String, Type, String, String) Column attribute Properties Name Description FieldName Field name Flags Property flags Grouping Grouping mode GroupOrder Grouping order Hidden Hidden column flag NativeSqlType Native SQL type name PropertyName Property name PropertyType Property type Reference Referenced property name ReferenceSource Referenced property source alias Source Data source alias TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ActionAttribute.TypeId.html": {
    "href": "api/XData.Mapping.ActionAttribute.TypeId.html",
    "title": "Property TypeId | XData website",
    "keywords": "Property TypeId | Improve this Doc View Source TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute."
  },
  "api/XData.Mapping.ActionAttribute.ActionType.html": {
    "href": "api/XData.Mapping.ActionAttribute.ActionType.html",
    "title": "Property ActionType | XData website",
    "keywords": "Property ActionType | Improve this Doc View Source ActionType Type of action (see DataActionType) Declaration public DataActionType ActionType { get; } Property Value Type Description DataActionType See Also DataActionType"
  },
  "api/XData.Mapping.ActionAttribute.ActionOrder.html": {
    "href": "api/XData.Mapping.ActionAttribute.ActionOrder.html",
    "title": "Property ActionOrder | XData website",
    "keywords": "Property ActionOrder | Improve this Doc View Source ActionOrder Action execution order Declaration public int ActionOrder { get; } Property Value Type Description Int32"
  },
  "api/XData.Mapping.ActionAttribute.-ctor.html": {
    "href": "api/XData.Mapping.ActionAttribute.-ctor.html",
    "title": "Constructor ActionAttribute | XData website",
    "keywords": "Constructor ActionAttribute | Improve this Doc View Source ActionAttribute(DataActionType, Int32) Data action attribute Declaration public ActionAttribute(DataActionType type, int order = 0) Parameters Type Name Description DataActionType type Type of action (see DataActionType) Int32 order Action execution order"
  },
  "api/XData.Mapping.ActionAttribute.html": {
    "href": "api/XData.Mapping.ActionAttribute.html",
    "title": "Class ActionAttribute | XData website",
    "keywords": "Class ActionAttribute Data action attribute Inheritance Object Attribute ActionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public sealed class ActionAttribute : Attribute Remarks Used to assign one or more DataActionType to IDataLogic<T> action handler Hint: Use ActionOrder to apply execution order of multiple handlers marked ActionAttribute for same DataActionType Hint: Action handlers will executed on server side when using XData Application server Constructors Name Description ActionAttribute(DataActionType, Int32) Data action attribute Properties Name Description ActionOrder Action execution order ActionType Type of action (see DataActionType) TypeId When implemented in a derived class, gets a unique identifier for this Attribute . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping-2.html": {
    "href": "api/XData.Mapping-2.html",
    "title": "Delegate Mapping<TFrom, T> | XData website",
    "keywords": "Delegate Mapping<TFrom, T> Mapping logic delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate void Mapping<in TFrom, T>(TFrom source, ref T result) where TFrom : class where T : class, IDataObject; Parameters Type Name Description TFrom source Source object instance T result Target object instance Type Parameters Name Description TFrom Source object type T Target object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Add<TFrom>(IQueryable<TFrom>, Mapping<TFrom, T>)"
  },
  "api/XData.Log.Write.html": {
    "href": "api/XData.Log.Write.html",
    "title": "Method Write | XData website",
    "keywords": "Method Write | Improve this Doc View Source Write(MessageType, Func<String>, Func<AdditionalInfo>[]) Write message to log Declaration public static void Write(MessageType msgType, Func<string> getMsgText, params Func<AdditionalInfo>[] getInfo) Parameters Type Name Description MessageType msgType Message type Func < String > getMsgText Get message text handler Func < AdditionalInfo >[] getInfo Get additional information handlers"
  },
  "api/XData.Log.html": {
    "href": "api/XData.Log.html",
    "title": "Class Log | XData website",
    "keywords": "Class Log Log helper Inheritance Object Log Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public static class Log Methods Name Description Write(MessageType, Func<String>, Func<AdditionalInfo>[]) Write message to log"
  },
  "api/XData.LockAttachedHandler-1.html": {
    "href": "api/XData.LockAttachedHandler-1.html",
    "title": "Delegate LockAttachedHandler<T> | XData website",
    "keywords": "Delegate LockAttachedHandler<T> Lock object attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool LockAttachedHandler<in T>(T obj) where T : class, IDataObject; Parameters Type Name Description T obj Object instance Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Json.html": {
    "href": "api/XData.Json.html",
    "title": "Namespace XData.Json | XData website",
    "keywords": "Namespace XData.Json Classes JsonDataObjectConverter<T> JsonSettings<T> JSON serialization settings Enums HideFlags Serialization hide flag for properties LinkMode Link serialization mode"
  },
  "api/XData.Json.LinkMode.html": {
    "href": "api/XData.Json.LinkMode.html",
    "title": "Enum LinkMode | XData website",
    "keywords": "Enum LinkMode Link serialization mode Namespace : XData.Json Assembly : XData.docfx.dll Syntax public enum LinkMode Fields Name Description Default Default link mode Source Link is serialized as limited Source object only Value Link is serialized as Value only Extension Methods SerializationExtensions.ToXml<LinkMode>() CollectionsExtensions.SetValue<LinkMode, T>(T) CollectionsExtensions.AsEnum<LinkMode>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<LinkMode, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<LinkMode, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Json.JsonSettings-1.-ctor.html": {
    "href": "api/XData.Json.JsonSettings-1.-ctor.html",
    "title": "Constructor JsonSettings | XData website",
    "keywords": "Constructor JsonSettings | Improve this Doc View Source JsonSettings() Declaration public JsonSettings()"
  },
  "api/XData.Json.JsonSettings-1.Show.html": {
    "href": "api/XData.Json.JsonSettings-1.Show.html",
    "title": "Method Show | XData website",
    "keywords": "Method Show | Improve this Doc View Source Show() Allow properties serialization Declaration public JsonSettings<T> Show() Returns Type Description JsonSettings <T> JSON settings | Improve this Doc View Source Show(String[]) Allow properties serialization Declaration public JsonSettings<T> Show(params string[] properties) Parameters Type Name Description String [] properties Properties names Returns Type Description JsonSettings <T> JSON settings | Improve this Doc View Source Show(Expression<Func<T, Object>>[]) Allow properties serialization Declaration public JsonSettings<T> Show(params Expression<Func<T, object>>[] properties) Parameters Type Name Description Expression < Func <T, Object >>[] properties Properties extensions Returns Type Description JsonSettings <T> JSON settings"
  },
  "api/XData.Json.JsonSettings-1.Hide.html": {
    "href": "api/XData.Json.JsonSettings-1.Hide.html",
    "title": "Method Hide | XData website",
    "keywords": "Method Hide | Improve this Doc View Source Hide() Hide properties from serialization Declaration public JsonSettings<T> Hide() Returns Type Description JsonSettings <T> JSON settings | Improve this Doc View Source Hide(String[]) Hide properties from serialization Declaration public JsonSettings<T> Hide(params string[] properties) Parameters Type Name Description String [] properties Properties names Returns Type Description JsonSettings <T> JSON settings | Improve this Doc View Source Hide(Expression<Func<T, Object>>[]) Allow properties serialization Declaration public JsonSettings<T> Hide(params Expression<Func<T, object>>[] properties) Parameters Type Name Description Expression < Func <T, Object >>[] properties Properties extensions Returns Type Description JsonSettings <T> JSON settings | Improve this Doc View Source Hide(HideFlags) Allow properties serialization Declaration public JsonSettings<T> Hide(HideFlags flags) Parameters Type Name Description HideFlags flags Hide all properties corresponding flags Returns Type Description JsonSettings <T> JSON settings"
  },
  "api/XData.Json.JsonSettings-1.LoadLob.html": {
    "href": "api/XData.Json.JsonSettings-1.LoadLob.html",
    "title": "Method LoadLob | XData website",
    "keywords": "Method LoadLob | Improve this Doc View Source LoadLob() Load large objects Declaration public JsonSettings<T> LoadLob() Returns Type Description JsonSettings <T> JSON settings | Improve this Doc View Source LoadLob(String[]) Load large objects Declaration public JsonSettings<T> LoadLob(params string[] properties) Parameters Type Name Description String [] properties Properties names Returns Type Description JsonSettings <T> JSON settings | Improve this Doc View Source LoadLob(Expression<Func<T, Object>>[]) Load large objects Declaration public JsonSettings<T> LoadLob(params Expression<Func<T, object>>[] properties) Parameters Type Name Description Expression < Func <T, Object >>[] properties Properties extensions Returns Type Description JsonSettings <T> JSON settings"
  },
  "api/XData.Json.JsonSettings-1.LinkMode.html": {
    "href": "api/XData.Json.JsonSettings-1.LinkMode.html",
    "title": "Method LinkMode | XData website",
    "keywords": "Method LinkMode | Improve this Doc View Source LinkMode(LinkMode) Link serialization mode Declaration public JsonSettings<T> LinkMode(LinkMode mode) Parameters Type Name Description LinkMode mode Link serialization mode Returns Type Description JsonSettings <T> JSON settings | Improve this Doc View Source LinkMode(LinkMode, String[]) Link serialization mode Declaration public JsonSettings<T> LinkMode(LinkMode mode, params string[] properties) Parameters Type Name Description LinkMode mode Link serialization mode String [] properties Properties names Returns Type Description JsonSettings <T> JSON settings | Improve this Doc View Source LinkMode(LinkMode, Expression<Func<T, Object>>[]) Link serialization mode Declaration public JsonSettings<T> LinkMode(LinkMode mode, params Expression<Func<T, object>>[] properties) Parameters Type Name Description LinkMode mode Link serialization mode Expression < Func <T, Object >>[] properties Properties extensions Returns Type Description JsonSettings <T> JSON settings"
  },
  "api/XData.Json.JsonSettings-1.html": {
    "href": "api/XData.Json.JsonSettings-1.html",
    "title": "Class JsonSettings<T> | XData website",
    "keywords": "Class JsonSettings<T> JSON serialization settings Inheritance Object JsonSettings<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Json Assembly : XData.docfx.dll Syntax public class JsonSettings<T> where T : class, IDataObject, new() Type Parameters Name Description T Object type Constructors Name Description JsonSettings() Methods Name Description Hide() Hide properties from serialization Hide(Expression<Func<T, Object>>[]) Allow properties serialization Hide(String[]) Hide properties from serialization Hide(HideFlags) Allow properties serialization LinkMode(LinkMode) Link serialization mode LinkMode(LinkMode, Expression<Func<T, Object>>[]) Link serialization mode LinkMode(LinkMode, String[]) Link serialization mode LoadLob() Load large objects LoadLob(Expression<Func<T, Object>>[]) Load large objects LoadLob(String[]) Load large objects Show() Allow properties serialization Show(Expression<Func<T, Object>>[]) Allow properties serialization Show(String[]) Allow properties serialization Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Json.JsonDataObjectConverter-1.WriteJson.html": {
    "href": "api/XData.Json.JsonDataObjectConverter-1.WriteJson.html",
    "title": "Method WriteJson | XData website",
    "keywords": "Method WriteJson | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/XData.Json.JsonDataObjectConverter-1.ReadJson.html": {
    "href": "api/XData.Json.JsonDataObjectConverter-1.ReadJson.html",
    "title": "Method ReadJson | XData website",
    "keywords": "Method ReadJson | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/XData.Json.JsonDataObjectConverter-1.CanConvert.html": {
    "href": "api/XData.Json.JsonDataObjectConverter-1.CanConvert.html",
    "title": "Method CanConvert | XData website",
    "keywords": "Method CanConvert | Improve this Doc View Source CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Returns Type Description Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type)"
  },
  "api/XData.Json.JsonDataObjectConverter-1.html": {
    "href": "api/XData.Json.JsonDataObjectConverter-1.html",
    "title": "Class JsonDataObjectConverter<T> | XData website",
    "keywords": "Class JsonDataObjectConverter<T> Inheritance Object Newtonsoft.Json.JsonConverter JsonDataObjectConverter<T> Inherited Members Newtonsoft.Json.JsonConverter.GetSchema() Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Json Assembly : XData.docfx.dll Syntax public class JsonDataObjectConverter<T> : JsonConverter where T : class, IDataObject Type Parameters Name Description T Methods Name Description CanConvert(Type) ReadJson(JsonReader, Type, Object, JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Json.HideFlags.html": {
    "href": "api/XData.Json.HideFlags.html",
    "title": "Enum HideFlags | XData website",
    "keywords": "Enum HideFlags Serialization hide flag for properties Namespace : XData.Json Assembly : XData.docfx.dll Syntax [Flags] public enum HideFlags Fields Name Description Columns Hide all columns ReadOnly Hide all Read only properties Extension Methods SerializationExtensions.ToXml<HideFlags>() CollectionsExtensions.SetValue<HideFlags, T>(T) CollectionsExtensions.AsEnum<HideFlags>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<HideFlags, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<HideFlags, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IWorkSet.Name.html": {
    "href": "api/XData.IWorkSet.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Work set name Declaration string Name { get; } Property Value Type Description String"
  },
  "api/XData.IWorkSet.Clear.html": {
    "href": "api/XData.IWorkSet.Clear.html",
    "title": "Method Clear | XData website",
    "keywords": "Method Clear | Improve this Doc View Source Clear() Clear work set objects Declaration void Clear()"
  },
  "api/XData.IWorkSet.Submit.html": {
    "href": "api/XData.IWorkSet.Submit.html",
    "title": "Method Submit | XData website",
    "keywords": "Method Submit | Improve this Doc View Source Submit(IDataScope) Submit work set objects Declaration bool Submit(IDataScope dataScope) Parameters Type Name Description IDataScope dataScope Current data scope Returns Type Description Boolean Success flag"
  },
  "api/XData.IWorkSet.html": {
    "href": "api/XData.IWorkSet.html",
    "title": "Interface IWorkSet | XData website",
    "keywords": "Interface IWorkSet Basic work set interface Inherited Members IDisposable.Dispose() Namespace : XData Assembly : XData.WorkSet.docfx.dll Syntax public interface IWorkSet : IDisposable Properties Name Description Name Work set name Methods Name Description Clear() Clear work set objects Submit(IDataScope) Submit work set objects Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also IWorkSet <T>"
  },
  "api/XData.IWorkSet-1.Lock.html": {
    "href": "api/XData.IWorkSet-1.Lock.html",
    "title": "Method Lock | XData website",
    "keywords": "Method Lock | Improve this Doc View Source Lock(IDataScope, Func<T, Boolean>) Try to obtain lock on data object Declaration bool Lock(IDataScope dataScope, Func<T, bool> predicate = null) Parameters Type Name Description IDataScope dataScope Current data scope Func <T, Boolean > predicate Predicate to find specific object Returns Type Description Boolean Lock success flag | Improve this Doc View Source Lock<TKey>(IDataScope, Func<T, Int32, Boolean>, Func<T, TKey>) Try to obtain lock on data object by predicate (using order index) Declaration bool Lock<TKey>(IDataScope dataScope, Func<T, int, bool> predicate, Func<T, TKey> order) where TKey : IComparable Parameters Type Name Description IDataScope dataScope Current data scope Func <T, Int32 , Boolean > predicate Predicate to find specific object Func <T, TKey> order Order statement Returns Type Description Boolean Lock success flag Type Parameters Name Description TKey Order key type | Improve this Doc View Source Lock(IDataScope, Func<T, Int32, Boolean>, Func<T, IComparable>[]) Try to obtain lock on data object by predicate (using order index) Declaration bool Lock(IDataScope dataScope, Func<T, int, bool> predicate, Func<T, IComparable>[] order) Parameters Type Name Description IDataScope dataScope Current data scope Func <T, Int32 , Boolean > predicate Predicate to find specific object Func <T, IComparable >[] order Order statements Returns Type Description Boolean Lock success flag"
  },
  "api/XData.IWorkSet-1.Get.html": {
    "href": "api/XData.IWorkSet-1.Get.html",
    "title": "Method Get | XData website",
    "keywords": "Method Get | Improve this Doc View Source Get(Func<T, Boolean>, WorkState) Get single data object by predicate Declaration T Get(Func<T, bool> predicate = null, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, Boolean > predicate Predicate to find specific object WorkState state Work set state Returns Type Description T Data object | Improve this Doc View Source Get<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, WorkState) Get single data object by predicate (using order index) Declaration T Get<TKey>(Func<T, int, bool> predicate, Func<T, TKey> order, WorkState state = WorkState.Active) where TKey : IComparable Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find specific object Func <T, TKey> order Order statement WorkState state Work set state Returns Type Description T Data object Type Parameters Name Description TKey Order key type | Improve this Doc View Source Get(Func<T, Int32, Boolean>, Func<T, IComparable>[], WorkState) Get single data object by predicate (using order index) Declaration T Get(Func<T, int, bool> predicate, Func<T, IComparable>[] order, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find specific object Func <T, IComparable >[] order Order statements WorkState state Work set state Returns Type Description T Data object"
  },
  "api/XData.IWorkSet-1.Select.html": {
    "href": "api/XData.IWorkSet-1.Select.html",
    "title": "Method Select | XData website",
    "keywords": "Method Select | Improve this Doc View Source Select(WorkState) Retrieve all objects by work set Declaration IEnumerable<T> Select(WorkState state = WorkState.Active) Parameters Type Name Description WorkState state Work set state Returns Type Description IEnumerable <T> Data object sequence | Improve this Doc View Source Select<TRet>(Func<T, TRet>, WorkState) Retrieve all objects by work set and apply selector logic to convert data Declaration IEnumerable<TRet> Select<TRet>(Func<T, TRet> selector, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, TRet> selector Selector convert routine WorkState state Work set state Returns Type Description IEnumerable <TRet> Result object sequence Type Parameters Name Description TRet"
  },
  "api/XData.IWorkSet-1.Find.html": {
    "href": "api/XData.IWorkSet-1.Find.html",
    "title": "Method Find | XData website",
    "keywords": "Method Find | Improve this Doc View Source Find<TRet>(Expression<Func<T, IEnumerable<TRet>>>) Find depended work set Declaration IWorkSet<TRet> Find<TRet>(Expression<Func<T, IEnumerable<TRet>>> child) where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, IEnumerable <TRet>>> child Expression returning parent object property contains depended data object collection Returns Type Description IWorkSet <TRet> Found work set Type Parameters Name Description TRet Depended object type | Improve this Doc View Source Find<TRet>(Func<T, Boolean>, Expression<Func<T, IEnumerable<TRet>>>) Find depended work set Declaration IWorkSet<TRet> Find<TRet>(Func<T, bool> predicate, Expression<Func<T, IEnumerable<TRet>>> child) where TRet : class, IDataObject, new() Parameters Type Name Description Func <T, Boolean > predicate Predicate to find parent object Expression < Func <T, IEnumerable <TRet>>> child Expression returning parent object property contains depended data object collection Returns Type Description IWorkSet <TRet> Found work set Type Parameters Name Description TRet Depended object type | Improve this Doc View Source Find<TRet, TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Expression<Func<T, IEnumerable<TRet>>>) Find depended work set (using order index) Declaration IWorkSet<TRet> Find<TRet, TKey>(Func<T, int, bool> predicate, Func<T, TKey> order, Expression<Func<T, IEnumerable<TRet>>> child) where TRet : class, IDataObject, new() where TKey : IComparable Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find parent object Func <T, TKey> order Order statements Expression < Func <T, IEnumerable <TRet>>> child Expression returning parent object property contains depended data object collection Returns Type Description IWorkSet <TRet> Found work set Type Parameters Name Description TRet Depended object type TKey Order key type | Improve this Doc View Source Find<TRet>(Func<T, Int32, Boolean>, Func<T, IComparable>[], Expression<Func<T, IEnumerable<TRet>>>) Find depended work set (using order index) Declaration IWorkSet<TRet> Find<TRet>(Func<T, int, bool> predicate, Func<T, IComparable>[] order, Expression<Func<T, IEnumerable<TRet>>> child) where TRet : class, IDataObject, new() Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find parent object Func <T, IComparable >[] order Order statements Expression < Func <T, IEnumerable <TRet>>> child Expression returning parent object property contains depended data object collection Returns Type Description IWorkSet <TRet> Found work set Type Parameters Name Description TRet Depended object type"
  },
  "api/XData.IWorkSet-1.Add.html": {
    "href": "api/XData.IWorkSet-1.Add.html",
    "title": "Method Add | XData website",
    "keywords": "Method Add | Improve this Doc View Source Add(Func<T>) Add object to work set collection Declaration T Add(Func<T> data) Parameters Type Name Description Func <T> data Lazy data creator Returns Type Description T Added object"
  },
  "api/XData.IWorkSet-1.Assign.html": {
    "href": "api/XData.IWorkSet-1.Assign.html",
    "title": "Method Assign | XData website",
    "keywords": "Method Assign | Improve this Doc View Source Assign(Func<T, Boolean>, Func<T>, WorkState) Assign single object Declaration T Assign(Func<T, bool> predicate, Func<T> data, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, Boolean > predicate Predicate to find object Func <T> data Lazy data creator WorkState state Work set state Returns Type Description T Assigned object Remarks Used to assign single object and reset depended work sets data changes WARNING! Do not use this method to update data only! All depended work sets will be reseted and data changes are lost! Call Get(Func<T, Boolean>, WorkState) to obtain data object and change it instead! | Improve this Doc View Source Assign<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Func<T>, WorkState) Assign single object Declaration T Assign<TKey>(Func<T, int, bool> predicate, Func<T, TKey> order, Func<T> data, WorkState state = WorkState.Active) where TKey : IComparable Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find object Func <T, TKey> order Order statement Func <T> data Lazy data creator WorkState state Work set state Returns Type Description T Assigned object Type Parameters Name Description TKey Order key type Remarks Used to assign single object and reset depended work sets data changes WARNING! Do not use this method to update data only! All depended work sets will be reseted and data changes are lost! Call Get(Func<T, Boolean>, WorkState) to obtain data object and change it instead! | Improve this Doc View Source Assign(Func<T, Int32, Boolean>, Func<T, IComparable>[], Func<T>, WorkState) Assign single object Declaration T Assign(Func<T, int, bool> predicate, Func<T, IComparable>[] order, Func<T> data, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find object Func <T, IComparable >[] order Order statements Func <T> data Lazy data creator WorkState state Work set state Returns Type Description T Assigned object Remarks Used to assign single object and reset depended work sets data changes WARNING! Do not use this method to update data only! All depended work sets will be reseted and data changes are lost! Call Get(Func<T, Boolean>, WorkState) to obtain data object and change it instead!"
  },
  "api/XData.IWorkSet-1.html": {
    "href": "api/XData.IWorkSet-1.html",
    "title": "Interface IWorkSet<T> | XData website",
    "keywords": "Interface IWorkSet<T> Work set interface Inherited Members IWorkSet.Name IWorkSet.Clear() IWorkSet.Submit(IDataScope) IDisposable.Dispose() Namespace : XData Assembly : XData.WorkSet.docfx.dll Syntax public interface IWorkSet<T> : IWorkSet, IDisposable where T : class, IDataObject, new() Type Parameters Name Description T Data object type Remarks Used to create/modify complex objects Hint: UnitOfWork template Methods Name Description Add(Func<T>) Add object to work set collection Assign(Func<T, Boolean>, Func<T>, WorkState) Assign single object Assign(Func<T, Int32, Boolean>, Func<T, IComparable>[], Func<T>, WorkState) Assign single object Assign<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Func<T>, WorkState) Assign single object Find<TRet>(Func<T, Boolean>, Expression<Func<T, IEnumerable<TRet>>>) Find depended work set Find<TRet>(Func<T, Int32, Boolean>, Func<T, IComparable>[], Expression<Func<T, IEnumerable<TRet>>>) Find depended work set (using order index) Find<TRet>(Expression<Func<T, IEnumerable<TRet>>>) Find depended work set Find<TRet, TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Expression<Func<T, IEnumerable<TRet>>>) Find depended work set (using order index) Get(Func<T, Boolean>, WorkState) Get single data object by predicate Get(Func<T, Int32, Boolean>, Func<T, IComparable>[], WorkState) Get single data object by predicate (using order index) Get<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, WorkState) Get single data object by predicate (using order index) Lock(IDataScope, Func<T, Boolean>) Try to obtain lock on data object Lock(IDataScope, Func<T, Int32, Boolean>, Func<T, IComparable>[]) Try to obtain lock on data object by predicate (using order index) Lock<TKey>(IDataScope, Func<T, Int32, Boolean>, Func<T, TKey>) Try to obtain lock on data object by predicate (using order index) Select(WorkState) Retrieve all objects by work set Select<TRet>(Func<T, TRet>, WorkState) Retrieve all objects by work set and apply selector logic to convert data Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name Clear () Submit ( IDataScope ) Lock<TKey>(IDataScope, Func<T, Int32, Boolean>, Func<T, TKey>) Get<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, WorkState) Select(WorkState) Assign<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Func<T>, WorkState) Find<TRet, TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Expression<Func<T, IEnumerable<TRet>>>) Add(Func<T>) Work"
  },
  "api/XData.ISqlObject.html": {
    "href": "api/XData.ISqlObject.html",
    "title": "Interface ISqlObject | XData website",
    "keywords": "Interface ISqlObject SQL (sub)query part interface Namespace : XData Assembly : XData.docfx.dll Syntax public interface ISqlObject Remarks Mapping object as subquery Hint: Use abstract classes to map subquery Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IRepository.ShowSubtree.html": {
    "href": "api/XData.IRepository.ShowSubtree.html",
    "title": "Property ShowSubtree | XData website",
    "keywords": "Property ShowSubtree | Improve this Doc View Source ShowSubtree Data repository tree modifier Declaration bool ShowSubtree { get; set; } Property Value Type Description Boolean Remarks Used to show/hide subtree related items in slave view when master is tree When ShowSubtree = false - slave contains selected node child items only When ShowSubtree = true - selected node and it's subtree child items Works with DirectLink : External links marked as DirectLink is filled while ShowSubtree is false and omitted otherwise See Also DirectLink"
  },
  "api/XData.IRepository.FixedQuery.html": {
    "href": "api/XData.IRepository.FixedQuery.html",
    "title": "Property FixedQuery | XData website",
    "keywords": "Property FixedQuery | Improve this Doc View Source FixedQuery Data repository fixed query Declaration bool FixedQuery { get; set; } Property Value Type Description Boolean Remarks Used to cache record set once (at first call) and have an access to cached data multiple times Hint: Useful when needed to read the same data multiple times according dynamic rules and all records count approximately equal or less then requests count Examples var q = dataScope.GetRepository<Some>().Where(x => x.SomeField == 1); q.FixedQuery = true; q.FirstOrDefault(x => x.OtherField == 3); //Queried across the cached data"
  },
  "api/XData.IRepository.DetachChild.html": {
    "href": "api/XData.IRepository.DetachChild.html",
    "title": "Method DetachChild | XData website",
    "keywords": "Method DetachChild | Improve this Doc View Source DetachChild<TChild>(String) Detach child repository Declaration void DetachChild<TChild>(string alias = null) where TChild : class, IDataObject, new() Parameters Type Name Description String alias Type Parameters Name Description TChild"
  },
  "api/XData.IRepository.Clear.html": {
    "href": "api/XData.IRepository.Clear.html",
    "title": "Method Clear | XData website",
    "keywords": "Method Clear | Improve this Doc View Source Clear(DataSubmitFlag) Clear repository objects Declaration bool Clear(DataSubmitFlag flag = DataSubmitFlag.None) Parameters Type Name Description DataSubmitFlag flag Returns Type Description Boolean Remarks All objects corresponded current repository limitations will be deleted through single operation WARNING! Trigger logic BeforeDelete and AfterDelete are not used in this case! Use BeforeClear and AfterClear instead!"
  },
  "api/XData.IRepository.CloseChilds.html": {
    "href": "api/XData.IRepository.CloseChilds.html",
    "title": "Method CloseChilds | XData website",
    "keywords": "Method CloseChilds | Improve this Doc View Source CloseChilds() Close child repositories Declaration void CloseChilds()"
  },
  "api/XData.IRepository.Refresh.html": {
    "href": "api/XData.IRepository.Refresh.html",
    "title": "Method Refresh | XData website",
    "keywords": "Method Refresh | Improve this Doc View Source Refresh() Refresh repository data cache Declaration void Refresh()"
  },
  "api/XData.IRepository.GetChild.html": {
    "href": "api/XData.IRepository.GetChild.html",
    "title": "Method GetChild | XData website",
    "keywords": "Method GetChild | Improve this Doc View Source GetChild<TChild>(String, ISecuritySession, Variable[]) Get a child repository Declaration IRepository<TChild> GetChild<TChild>(string alias = null, ISecuritySession security = null, params Variable[] variables) where TChild : class, IDataObject, new() Parameters Type Name Description String alias Child alias ISecuritySession security Security session Variable [] variables Child variables Returns Type Description IRepository <TChild> Repository Type Parameters Name Description TChild Child type Remarks If child repository not exists it will be created and linked to base repository as a child When alias parameter value is not set child object type name used as child repository alias See Also DetachChild<TChild> ( String ) CloseChilds ()"
  },
  "api/XData.IRepository.FindParent.html": {
    "href": "api/XData.IRepository.FindParent.html",
    "title": "Method FindParent | XData website",
    "keywords": "Method FindParent | Improve this Doc View Source FindParent<TParent>(out IRepository<TParent>, String) Find parent repository Declaration bool FindParent<TParent>(out IRepository<TParent> parent, string alias = null) where TParent : class, IDataObject, new() Parameters Type Name Description IRepository <TParent> parent Parent repository String alias Parent repository alias Returns Type Description Boolean Find success Type Parameters Name Description TParent Parent repository type"
  },
  "api/XData.IRepository.Count.html": {
    "href": "api/XData.IRepository.Count.html",
    "title": "Property Count | XData website",
    "keywords": "Property Count | Improve this Doc View Source Count Get repository object count Declaration long Count { get; } Property Value Type Description Int64"
  },
  "api/XData.IRepository.Editable.html": {
    "href": "api/XData.IRepository.Editable.html",
    "title": "Property Editable | XData website",
    "keywords": "Property Editable | Improve this Doc View Source Editable Get editable state of repository objects Declaration bool Editable { get; } Property Value Type Description Boolean"
  },
  "api/XData.IRepository.HasCurrentRecord.html": {
    "href": "api/XData.IRepository.HasCurrentRecord.html",
    "title": "Property HasCurrentRecord | XData website",
    "keywords": "Property HasCurrentRecord | Improve this Doc View Source HasCurrentRecord Check current record is assigned Declaration bool HasCurrentRecord { get; } Property Value Type Description Boolean"
  },
  "api/XData.IRepository.Manual.html": {
    "href": "api/XData.IRepository.Manual.html",
    "title": "Property Manual | XData website",
    "keywords": "Property Manual | Improve this Doc View Source Manual Manual repository flag Declaration bool Manual { get; set; } Property Value Type Description Boolean Remarks Manual repositories can be filled by attached objects only Hint: Use manual repositories to build logic filled repositories Hint: Use manual repositories as mock repositories for testing Hint: Object attaching (see Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) ) set Manual property to True automatically WARNING! Detach objects (see Detach(Predicate<T>) ) NOT set Manual property to False automatically! See Also Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) Detach(Predicate<T>) SetAttachedHandlers(ref T, AttachedHandler<T>[]) SetAttachedHandlers(RepositoryAttachedHandler<T>[])"
  },
  "api/XData.IRepository.html": {
    "href": "api/XData.IRepository.html",
    "title": "Interface IRepository | XData website",
    "keywords": "Interface IRepository Data repository (data object collection) basic interface Inherited Members IDataQuery.Alias IDataQuery.Layer IDataQuery.Context IDataQuery.Variables IDataQuery.Keys IQueryable.ElementType IQueryable.Expression IQueryable.Provider IEnumerable.GetEnumerator() IDisposable.Dispose() Namespace : XData Assembly : XData.docfx.dll Syntax public interface IRepository : IDataQuery, IOrderedQueryable, IQueryable, IEnumerable, IDisposable Properties Name Description Count Get repository object count Editable Get editable state of repository objects FixedQuery Data repository fixed query HasCurrentRecord Check current record is assigned Manual Manual repository flag ShowSubtree Data repository tree modifier Methods Name Description Clear(DataSubmitFlag) Clear repository objects CloseChilds() Close child repositories DetachChild<TChild>(String) Detach child repository FindParent<TParent>(out IRepository<TParent>, String) Find parent repository GetChild<TChild>(String, ISecuritySession, Variable[]) Get a child repository Refresh() Refresh repository data cache Extension Methods DataObjectExtensions.GetParameter<T>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also IRepository <T>"
  },
  "api/XData.IRepository-1.OnInit.html": {
    "href": "api/XData.IRepository-1.OnInit.html",
    "title": "Event OnInit | XData website",
    "keywords": "Event OnInit Event fired when repository is initialized Namespace : XData Assembly : XData.docfx.dll Syntax event InitRepository<T> OnInit Returns Type Description InitRepository <T>"
  },
  "api/XData.IRepository-1.OnInitObject.html": {
    "href": "api/XData.IRepository-1.OnInitObject.html",
    "title": "Event OnInitObject | XData website",
    "keywords": "Event OnInitObject Event fired when object is initialized Namespace : XData Assembly : XData.docfx.dll Syntax event InitObject<T> OnInitObject Returns Type Description InitObject <T>"
  },
  "api/XData.IRepository-1.OnInvalidate.html": {
    "href": "api/XData.IRepository-1.OnInvalidate.html",
    "title": "Event OnInvalidate | XData website",
    "keywords": "Event OnInvalidate Event fired when repository need to be refreshed Namespace : XData Assembly : XData.docfx.dll Syntax event InvalidateRepository<T> OnInvalidate Returns Type Description InvalidateRepository <T>"
  },
  "api/XData.IRepository-1.OnInvalidateObject.html": {
    "href": "api/XData.IRepository-1.OnInvalidateObject.html",
    "title": "Event OnInvalidateObject | XData website",
    "keywords": "Event OnInvalidateObject Event fired when object need to be refreshed Namespace : XData Assembly : XData.docfx.dll Syntax event InvalidateObject<T> OnInvalidateObject Returns Type Description InvalidateObject <T>"
  },
  "api/XData.IRepository-1.OnCurrentObjectChanging.html": {
    "href": "api/XData.IRepository-1.OnCurrentObjectChanging.html",
    "title": "Event OnCurrentObjectChanging | XData website",
    "keywords": "Event OnCurrentObjectChanging Event fired when repository current object changing occurred Namespace : XData Assembly : XData.docfx.dll Syntax event CurrentObjectChanging<T> OnCurrentObjectChanging Returns Type Description CurrentObjectChanging <T>"
  },
  "api/XData.IRepository-1.OnCurrentObjectChanged.html": {
    "href": "api/XData.IRepository-1.OnCurrentObjectChanged.html",
    "title": "Event OnCurrentObjectChanged | XData website",
    "keywords": "Event OnCurrentObjectChanged Event fired when repository current object is changed Namespace : XData Assembly : XData.docfx.dll Syntax event CurrentObjectChanged<T> OnCurrentObjectChanged Returns Type Description CurrentObjectChanged <T>"
  },
  "api/XData.IRepository-1.SetFilterValue.html": {
    "href": "api/XData.IRepository-1.SetFilterValue.html",
    "title": "Method SetFilterValue | XData website",
    "keywords": "Method SetFilterValue | Improve this Doc View Source SetFilterValue(RuntimeFilter, Object) Set metadata defined RuntimeFilter value Declaration IRepository<T> SetFilterValue(RuntimeFilter filter, object val) Parameters Type Name Description RuntimeFilter filter Filter Object val Filter value Returns Type Description IRepository <T> Self repository link Remarks Hint: Set val = null to clear filter Exceptions Type Condition XDataRuntimeException \"filter\" parameter is null. See Also RuntimeFilter Reset() GetFilterValue ( RuntimeFilter )"
  },
  "api/XData.IRepository-1.Reset.html": {
    "href": "api/XData.IRepository-1.Reset.html",
    "title": "Method Reset | XData website",
    "keywords": "Method Reset | Improve this Doc View Source Reset() Reset repository structure and filter values Declaration IRepository<T> Reset() Returns Type Description IRepository <T> Self repository link See Also RuntimeFilter GetFilterValue ( RuntimeFilter ) SetFilterValue(RuntimeFilter, Object)"
  },
  "api/XData.IRepository-1.Clear.html": {
    "href": "api/XData.IRepository-1.Clear.html",
    "title": "Method Clear | XData website",
    "keywords": "Method Clear | Improve this Doc View Source Clear(Expression<Func<T, Boolean>>, DataSubmitFlag) Clear repository objects Declaration bool Clear(Expression<Func<T, bool>> predicate, DataSubmitFlag flag = DataSubmitFlag.None) Parameters Type Name Description Expression < Func <T, Boolean >> predicate DataSubmitFlag flag Returns Type Description Boolean Remarks All objects corresponded current repository limitations will be deleted through single operation WARNING! Trigger logic BeforeDelete and AfterDelete are not used in this case! Use BeforeClear and AfterClear instead!"
  },
  "api/XData.IRepository-1.Submit.html": {
    "href": "api/XData.IRepository-1.Submit.html",
    "title": "Method Submit | XData website",
    "keywords": "Method Submit | Improve this Doc View Source Submit(ref T, DataSubmitFlag) Save single data object changes Declaration bool Submit(ref T obj, DataSubmitFlag flag = DataSubmitFlag.None) Parameters Type Name Description T obj Data object instance DataSubmitFlag flag Submit flag Returns Type Description Boolean Success flag Exceptions Type Condition XDataRuntimeException \"objects\" is null. See Also Submit<T> (T, DataSubmitFlag ) | Improve this Doc View Source Submit(IEnumerable<T>, DataSubmitFlag) Save multiple data objects changes Declaration bool Submit(IEnumerable<T> objects, DataSubmitFlag flag = DataSubmitFlag.None) Parameters Type Name Description IEnumerable <T> objects Data object sequence DataSubmitFlag flag Submit flag Returns Type Description Boolean Success flag Exceptions Type Condition XDataRuntimeException \"objects\" is null or empty sequence. See Also DataSubmitFlag"
  },
  "api/XData.IRepository-1.Refresh.html": {
    "href": "api/XData.IRepository-1.Refresh.html",
    "title": "Method Refresh | XData website",
    "keywords": "Method Refresh | Improve this Doc View Source Refresh(ref T) Refresh object data from database Declaration bool Refresh(ref T obj) Parameters Type Name Description T obj Data object instance Returns Type Description Boolean Success flag Exceptions Type Condition XDataRuntimeException \"obj\" parameter is null. XDataQueryStructureException object not mapped properly. See Also Refresh<T> (T)"
  },
  "api/XData.IRepository-1.New.html": {
    "href": "api/XData.IRepository-1.New.html",
    "title": "Method New | XData website",
    "keywords": "Method New | Improve this Doc View Source New() Get new instance of data object Declaration T New() Returns Type Description T Data object instance Exceptions Type Condition XDataQueryStructureException object not mapped properly. | Improve this Doc View Source New(Action<T>[]) Get new instance of data object Declaration T New(params Action<T>[] init) Parameters Type Name Description Action <T>[] init Data object initialization actions Returns Type Description T Data object instance Exceptions Type Condition XDataQueryStructureException object not mapped properly."
  },
  "api/XData.IRepository-1.Current.html": {
    "href": "api/XData.IRepository-1.Current.html",
    "title": "Property Current | XData website",
    "keywords": "Property Current | Improve this Doc View Source Current Get/set current data object Declaration T Current { get; set; } Property Value Type Description T Current data object instance Exceptions Type Condition XDataQueryStructureException object not mapped properly."
  },
  "api/XData.IRepository-1.Lock.html": {
    "href": "api/XData.IRepository-1.Lock.html",
    "title": "Method Lock | XData website",
    "keywords": "Method Lock | Improve this Doc View Source Lock(T) Lock object in database Declaration bool Lock(T obj) Parameters Type Name Description T obj Data object instance Returns Type Description Boolean Success flag Exceptions Type Condition XDataRuntimeException \"obj\" parameter is null. See Also Lock<T> (T)"
  },
  "api/XData.IRepository-1.Add.html": {
    "href": "api/XData.IRepository-1.Add.html",
    "title": "Method Add | XData website",
    "keywords": "Method Add | Improve this Doc View Source Add<TFrom>(IQueryable<TFrom>, Mapping<TFrom, T>) Copy objects from source repository Declaration bool Add<TFrom>(IQueryable<TFrom> source, Mapping<TFrom, T> mapping = null) where TFrom : class Parameters Type Name Description IQueryable <TFrom> source Source repository Mapping <TFrom, T> mapping Data mapping Returns Type Description Boolean Success flag Type Parameters Name Description TFrom Exceptions Type Condition XDataRuntimeException \"source\" parameter is null. XDataQueryStructureException mapping error. See Also Mapping <TFrom, T>"
  },
  "api/XData.IRepository-1.Execute.html": {
    "href": "api/XData.IRepository-1.Execute.html",
    "title": "Method Execute | XData website",
    "keywords": "Method Execute | Improve this Doc View Source Execute(String, IEnumerable<T>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over object instances Declaration bool Execute(string key, IEnumerable<T> objects, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) Parameters Type Name Description String key Logic key IEnumerable <T> objects Object instances IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag See Also CustomLogic <T> Execute<T> (T, Expression < Func < CustomLogic <T>>>, IDictionary < String , Action < Byte []>>, IDictionary < String , Func < Byte [], Byte []>>) Execute<T>(ICollection<T>, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>)"
  },
  "api/XData.IRepository-1.Attach.html": {
    "href": "api/XData.IRepository-1.Attach.html",
    "title": "Method Attach | XData website",
    "keywords": "Method Attach | Improve this Doc View Source Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) Attach object to repository Declaration IRepository<T> Attach(T obj, DataObjectState state = DataObjectState.Original, IEnumerable<KeyValuePair<string, object>> originalValues = null, params AttachedHandler<T>[] handlers) Parameters Type Name Description T obj Object instance DataObjectState state Object state IEnumerable < KeyValuePair < String , Object >> originalValues Original property values AttachedHandler <T>[] handlers Attached handlers Returns Type Description IRepository <T> Repository Remarks Hint: Object attaching set Manual property to True automatically Hint: The originalValues parameter can contain only necessary not null valued properties Hint: Use SetValue<TKey, T>(TKey, T) to fill originalValues parameter Hint: Use AttachedHandler<T> convert operators to attach object specific handlers (SubmitObjectAttachedHandler<Invoice>)((ref Invoice i, DataSubmitFlag f) => true) WARNING! Use repository SetAttachedHandlers(RepositoryAttachedHandler<T>[]) method to apply same handler for all objects! See Also SetValue<TKey, T> (TKey, T) Detach(Predicate<T>)"
  },
  "api/XData.IRepository-1.AttachNewObjects.html": {
    "href": "api/XData.IRepository-1.AttachNewObjects.html",
    "title": "Method AttachNewObjects | XData website",
    "keywords": "Method AttachNewObjects | Improve this Doc View Source AttachNewObjects(IEnumerable<T>, AttachedHandler<T>[]) Attach object to repository Declaration IEnumerable<T> AttachNewObjects(IEnumerable<T> source, params AttachedHandler<T>[] handlers) Parameters Type Name Description IEnumerable <T> source Object sequence AttachedHandler <T>[] handlers Attached handlers Returns Type Description IEnumerable <T> Repository Remarks Hint: Object attaching set Manual property to True automatically Hint: The originalValues parameter can contain only necessary not null valued properties Hint: Use SetValue<TKey, T>(TKey, T) to fill originalValues parameter Hint: Use AttachedHandler<T> convert operators to attach object specific handlers (SubmitObjectAttachedHandler<Invoice>)((ref Invoice i, DataSubmitFlag f) => true) WARNING! Use repository SetAttachedHandlers(RepositoryAttachedHandler<T>[]) method to apply same handler for all objects! See Also SetValue<TKey, T> (TKey, T) Detach(Predicate<T>)"
  },
  "api/XData.IRepository-1.Detach.html": {
    "href": "api/XData.IRepository-1.Detach.html",
    "title": "Method Detach | XData website",
    "keywords": "Method Detach | Improve this Doc View Source Detach(Predicate<T>) Detach virtual objects from repository Declaration IRepository<T> Detach(Predicate<T> predicate) Parameters Type Name Description Predicate <T> predicate Object search predicate to detach Returns Type Description IRepository <T> Repository See Also Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) Detach(Predicate<T>)"
  },
  "api/XData.IRepository-1.ClearAttachedObjects.html": {
    "href": "api/XData.IRepository-1.ClearAttachedObjects.html",
    "title": "Method ClearAttachedObjects | XData website",
    "keywords": "Method ClearAttachedObjects | Improve this Doc View Source ClearAttachedObjects() Clear attached objects Declaration IRepository<T> ClearAttachedObjects() Returns Type Description IRepository <T> Repository Remarks WARNING! Clear attached objects NOT set Manual property to False automatically!"
  },
  "api/XData.IRepository-1.SetAttachedHandlers.html": {
    "href": "api/XData.IRepository-1.SetAttachedHandlers.html",
    "title": "Method SetAttachedHandlers | XData website",
    "keywords": "Method SetAttachedHandlers | Improve this Doc View Source SetAttachedHandlers(ref T, AttachedHandler<T>[]) Attach extra handlers to single object Declaration void SetAttachedHandlers(ref T obj, params AttachedHandler<T>[] handlers) Parameters Type Name Description T obj Object instance AttachedHandler <T>[] handlers Attached handlers Remarks Hint: Use AttachedHandler<T> convert operators to attach object specific handlers (SubmitObjectAttachedHandler<Invoice>)((ref Invoice i, DataSubmitFlag f) => true) WARNING! Use repository SetAttachedHandlers(RepositoryAttachedHandler<T>[]) method to apply same handler for all objects! See Also Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) SetAttachedHandlers(RepositoryAttachedHandler<T>[]) SetAttachedHandlers<T> (T, AttachedHandler <T>[]) | Improve this Doc View Source SetAttachedHandlers(RepositoryAttachedHandler<T>[]) Attach extra handlers to repository Declaration IRepository<T> SetAttachedHandlers(params RepositoryAttachedHandler<T>[] handlers) Parameters Type Name Description RepositoryAttachedHandler <T>[] handlers Attached handlers Returns Type Description IRepository <T> Repository Remarks Hint: Use RepositoryAttachedHandler<T> convert operators to attach object specific handlers (SubmitObjectAttachedHandler<Invoice>)((ref Invoice i, DataSubmitFlag f) => true)"
  },
  "api/XData.IRepository-1.html": {
    "href": "api/XData.IRepository-1.html",
    "title": "Interface IRepository<T> | XData website",
    "keywords": "Interface IRepository<T> Data repository (data object collection) type specific interface Inherited Members IDataQuery<T>.GetFilterValue(RuntimeFilter) IEnumerable<T>.GetEnumerator() IRepository.ShowSubtree IRepository.FixedQuery IRepository.DetachChild<TChild>(String) IRepository.Clear(DataSubmitFlag) IRepository.CloseChilds() IRepository.Refresh() IRepository.GetChild<TChild>(String, ISecuritySession, Variable[]) IRepository.FindParent<TParent>(IRepository<TParent>, String) IRepository.Count IRepository.Editable IRepository.HasCurrentRecord IRepository.Manual IDataQuery.Alias IDataQuery.Layer IDataQuery.Context IDataQuery.Variables IDataQuery.Keys IQueryable.ElementType IQueryable.Expression IQueryable.Provider IDisposable.Dispose() Namespace : XData Assembly : XData.docfx.dll Syntax public interface IRepository<T> : IDataQuery<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IRepository, IDataQuery, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where T : class, IDataObject Type Parameters Name Description T Remarks Hint: Its possible to use any DI container with XData: // example with Autofac syntax // register Container.Register(() => dataScope.GetRepository<Invoice>()).As<IRepository<Invoice>>(); Container.Register(() => dataScope.GetRepository<Invoice>().GetChild<InvoiceSpec>()).As<IRepository<InvoiceSpec>>(); // resolve var spec = Container.Resolve<IRepository<InvoiceSpec>>(); //spec is linked with Invoice repository as a slave! Properties Name Description Current Get/set current data object Methods Name Description Add<TFrom>(IQueryable<TFrom>, Mapping<TFrom, T>) Copy objects from source repository Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) Attach object to repository AttachNewObjects(IEnumerable<T>, AttachedHandler<T>[]) Attach object to repository Clear(Expression<Func<T, Boolean>>, DataSubmitFlag) Clear repository objects ClearAttachedObjects() Clear attached objects Detach(Predicate<T>) Detach virtual objects from repository Execute(String, IEnumerable<T>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over object instances Lock(T) Lock object in database New() Get new instance of data object New(Action<T>[]) Get new instance of data object Refresh(ref T) Refresh object data from database Reset() Reset repository structure and filter values SetAttachedHandlers(ref T, AttachedHandler<T>[]) Attach extra handlers to single object SetAttachedHandlers(RepositoryAttachedHandler<T>[]) Attach extra handlers to repository SetFilterValue(RuntimeFilter, Object) Set metadata defined RuntimeFilter value Submit(ref T, DataSubmitFlag) Save single data object changes Submit(IEnumerable<T>, DataSubmitFlag) Save multiple data objects changes Events Name Description OnCurrentObjectChanged Event fired when repository current object is changed OnCurrentObjectChanging Event fired when repository current object changing occurred OnInit Event fired when repository is initialized OnInitObject Event fired when object is initialized OnInvalidate Event fired when repository need to be refreshed OnInvalidateObject Event fired when object need to be refreshed Extension Methods DataObjectExtensions.AsString<T>(IQueryable<T>) DataObjectExtensions.GetParameter<T>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder) See Also IDataObject AsString<T> ( IQueryable <T>) GetRepository<T> (T) GetRepository<T>(String, ISecuritySession, Variable[])"
  },
  "api/XData.InvalidateRepository-1.html": {
    "href": "api/XData.InvalidateRepository-1.html",
    "title": "Delegate InvalidateRepository<T> | XData website",
    "keywords": "Delegate InvalidateRepository<T> Refresh repository event delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate void InvalidateRepository<T>(IRepository<T> repository) where T : class, IDataObject; Parameters Type Name Description IRepository <T> repository Repository instance Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also InvalidateRepository OnInvalidate"
  },
  "api/XData.InvalidateObject-1.html": {
    "href": "api/XData.InvalidateObject-1.html",
    "title": "Delegate InvalidateObject<T> | XData website",
    "keywords": "Delegate InvalidateObject<T> Refresh one object event delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate void InvalidateObject<in T>(T obj) where T : class, IDataObject; Parameters Type Name Description T obj Object to refresh Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also InvalidateObject OnInvalidateObject"
  },
  "api/XData.Interfaces.html": {
    "href": "api/XData.Interfaces.html",
    "title": "Namespace XData.Interfaces | XData website",
    "keywords": "Namespace XData.Interfaces Classes AdapterConfig Adapter configuration section ContextConfig Context config section DialectConfig SQL dialect configuration section ProxyConfig Proxy configuration section Interfaces IConfiguration XData configuration ILogWriter XData log writer interface IProxy Data object proxy interface IProxyManager Proxy manager ISecuritySession Security session interface ISequenceNameRule Sequence name rule interface ISqlBuilder SQL builder interface"
  },
  "api/XData.Interfaces.ProxyConfig.Name.html": {
    "href": "api/XData.Interfaces.ProxyConfig.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Proxy name Declaration public string Name { get; set; } Property Value Type Description String Remarks Mast be the same as Name"
  },
  "api/XData.Interfaces.ProxyConfig.EndpointName.html": {
    "href": "api/XData.Interfaces.ProxyConfig.EndpointName.html",
    "title": "Property EndpointName | XData website",
    "keywords": "Property EndpointName | Improve this Doc View Source EndpointName XData application server WCF endpoint name Declaration public string EndpointName { get; set; } Property Value Type Description String"
  },
  "api/XData.Interfaces.ProxyConfig.html": {
    "href": "api/XData.Interfaces.ProxyConfig.html",
    "title": "Class ProxyConfig | XData website",
    "keywords": "Class ProxyConfig Proxy configuration section Inheritance Object ProxyConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public sealed class ProxyConfig Remarks WARNING! All attributes are required! Examples <proxy name=\"TEST\" dialect=\"MSSQL\" endpoint=\"XAppServer\"/> Properties Name Description EndpointName XData application server WCF endpoint name Name Proxy name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name EndpointName"
  },
  "api/XData.Interfaces.ISqlBuilder.GetSelectQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetSelectQuery.html",
    "title": "Method GetSelectQuery | XData website",
    "keywords": "Method GetSelectQuery | Improve this Doc View Source GetSelectQuery(IDataStructure, Boolean, Boolean) Returns query to select data objects Declaration Query GetSelectQuery(IDataStructure structure, bool markProperties = false, bool doNotSkip = false) Parameters Type Name Description IDataStructure structure Structure metadata Boolean markProperties Mark properties with comments Boolean doNotSkip Don't skip sources Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetCountQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetCountQuery.html",
    "title": "Method GetCountQuery | XData website",
    "keywords": "Method GetCountQuery | Improve this Doc View Source GetCountQuery(IDataStructure) Returns query to select count of data objects in repository Declaration Query GetCountQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetInsertQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetInsertQuery.html",
    "title": "Method GetInsertQuery | XData website",
    "keywords": "Method GetInsertQuery | Improve this Doc View Source GetInsertQuery(IDataStructure, IDataObject, String, Boolean) Returns query to insert data object Declaration Query GetInsertQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetUpdateQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetUpdateQuery.html",
    "title": "Method GetUpdateQuery | XData website",
    "keywords": "Method GetUpdateQuery | Improve this Doc View Source GetUpdateQuery(IDataStructure, IDataObject, String, Boolean) Returns query to update data object Declaration Query GetUpdateQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetDeleteQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetDeleteQuery.html",
    "title": "Method GetDeleteQuery | XData website",
    "keywords": "Method GetDeleteQuery | Improve this Doc View Source GetDeleteQuery(IDataStructure, IDataObject, String, Boolean) Returns query to delete data object Declaration Query GetDeleteQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetRefreshQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetRefreshQuery.html",
    "title": "Method GetRefreshQuery | XData website",
    "keywords": "Method GetRefreshQuery | Improve this Doc View Source GetRefreshQuery(IDataStructure) Returns query to refresh single data object Declaration Query GetRefreshQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetClearQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetClearQuery.html",
    "title": "Method GetClearQuery | XData website",
    "keywords": "Method GetClearQuery | Improve this Doc View Source GetClearQuery(IDataStructure) Returns query to clear all repository objects Declaration Query GetClearQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetAnyQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetAnyQuery.html",
    "title": "Method GetAnyQuery | XData website",
    "keywords": "Method GetAnyQuery | Improve this Doc View Source GetAnyQuery(IDataStructure) Returns query to check existence of repository objects Hint: Used in XData LINQ expressions Declaration Query GetAnyQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetAllQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetAllQuery.html",
    "title": "Method GetAllQuery | XData website",
    "keywords": "Method GetAllQuery | Improve this Doc View Source GetAllQuery(IDataStructure) Returns query to check compliance of all repository objects Hint: Used in XData LINQ expressions Declaration Query GetAllQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetLockQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetLockQuery.html",
    "title": "Method GetLockQuery | XData website",
    "keywords": "Method GetLockQuery | Improve this Doc View Source GetLockQuery(IDataStructure) Returns query to lock single data object Declaration Query GetLockQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetAcquireBlobQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetAcquireBlobQuery.html",
    "title": "Method GetAcquireBlobQuery | XData website",
    "keywords": "Method GetAcquireBlobQuery | Improve this Doc View Source GetAcquireBlobQuery(String, String, IEnumerable<String>, IComparable[], String) Returns query to acquire blob data Declaration Query GetAcquireBlobQuery(string table, string column, IEnumerable<string> tablePrimaryKey, IComparable[] primaryKeyValue, string nativeSqlType = null) Parameters Type Name Description String table Table name String column Blob column name IEnumerable < String > tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String nativeSqlType Native SQL type name Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetSaveBlobQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetSaveBlobQuery.html",
    "title": "Method GetSaveBlobQuery | XData website",
    "keywords": "Method GetSaveBlobQuery | Improve this Doc View Source GetSaveBlobQuery(String, String, IEnumerable<String>, IComparable[], ref Byte[], String) Returns query to save blob data Declaration Query GetSaveBlobQuery(string table, string column, IEnumerable<string> tablePrimaryKey, IComparable[] primaryKeyValue, ref byte[] body, string nativeSqlType = null) Parameters Type Name Description String table Table name String column Blob column name IEnumerable < String > tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values Byte [] body Blob body String nativeSqlType Native SQL type name Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetParameterName.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetParameterName.html",
    "title": "Method GetParameterName | XData website",
    "keywords": "Method GetParameterName | Improve this Doc View Source GetParameterName(String) Formats field name as parameter name Declaration string GetParameterName(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description String Parameter name"
  },
  "api/XData.Interfaces.ISqlBuilder.SetQueryParameterValues.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.SetQueryParameterValues.html",
    "title": "Method SetQueryParameterValues | XData website",
    "keywords": "Method SetQueryParameterValues | Improve this Doc View Source SetQueryParameterValues(ref Query, SortedList<String, Object>) Set query parameter values Declaration void SetQueryParameterValues(ref Query query, SortedList<string, object> paramValues) Parameters Type Name Description Query query Query SortedList < String , Object > paramValues Parameter values"
  },
  "api/XData.Interfaces.ISqlBuilder.Init.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.Init.html",
    "title": "Method Init | XData website",
    "keywords": "Method Init | Improve this Doc View Source Init(String, IConfiguration, String) SQL builder initialization Declaration void Init(string context, IConfiguration config, string sequence) Parameters Type Name Description String context IConfiguration config String sequence"
  },
  "api/XData.Interfaces.ISqlBuilder.GetAcquireXmlQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetAcquireXmlQuery.html",
    "title": "Method GetAcquireXmlQuery | XData website",
    "keywords": "Method GetAcquireXmlQuery | Improve this Doc View Source GetAcquireXmlQuery(String, String, String[], IComparable[]) Returns query to acquire XML data Declaration Query GetAcquireXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue) Parameters Type Name Description String table Table name String column XML column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.GetSaveXmlQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetSaveXmlQuery.html",
    "title": "Method GetSaveXmlQuery | XData website",
    "keywords": "Method GetSaveXmlQuery | Improve this Doc View Source GetSaveXmlQuery(String, String, String[], IComparable[], ref String) Returns query to save XML data Declaration Query GetSaveXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue, ref string body) Parameters Type Name Description String table Table name String column XML column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String body Blob body Returns Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.ExtractXmlQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.ExtractXmlQuery.html",
    "title": "Method ExtractXmlQuery | XData website",
    "keywords": "Method ExtractXmlQuery | Improve this Doc View Source ExtractXmlQuery(String, String, String[], IComparable[], String, KeyValuePair<String, String>[]) Returns query to extract XML data by XPath expression Declaration Query ExtractXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue, string path, params KeyValuePair<string, string>[] namespaces) Parameters Type Name Description String table Table name String column XML column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String path XPath expression KeyValuePair < String , String >[] namespaces XPath namespaces Returns Type Description Query XPath result"
  },
  "api/XData.Interfaces.ISqlBuilder.Item.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.Item.html",
    "title": "Property Item | XData website",
    "keywords": "Property Item | Improve this Doc View Source Item[Enum] Predefined queries Declaration Query this[Enum i] { get; } Parameters Type Name Description Enum i Query enumerated index Property Value Type Description Query Query"
  },
  "api/XData.Interfaces.ISqlBuilder.DialectOptions.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.DialectOptions.html",
    "title": "Property DialectOptions | XData website",
    "keywords": "Property DialectOptions | Improve this Doc View Source DialectOptions Dialect options WARNING! Mast to be filled in constructor! Declaration DialectOptions DialectOptions { get; } Property Value Type Description DialectOptions"
  },
  "api/XData.Interfaces.ISqlBuilder.TypeNames.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.TypeNames.html",
    "title": "Property TypeNames | XData website",
    "keywords": "Property TypeNames | Improve this Doc View Source TypeNames List of supported column type names WARNING! Mast to be filled in constructor! Declaration string[] TypeNames { get; } Property Value Type Description String []"
  },
  "api/XData.Interfaces.ISqlBuilder.SqlTypes.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.SqlTypes.html",
    "title": "Property SqlTypes | XData website",
    "keywords": "Property SqlTypes | Improve this Doc View Source SqlTypes List of supported SQL types WARNING! Mast to be filled in constructor! Declaration DbType[] SqlTypes { get; } Property Value Type Description DbType []"
  },
  "api/XData.Interfaces.ISqlBuilder.TypeSynonyms.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.TypeSynonyms.html",
    "title": "Property TypeSynonyms | XData website",
    "keywords": "Property TypeSynonyms | Improve this Doc View Source TypeSynonyms List of supported type synonyms WARNING! Mast to be filled in constructor! Declaration string[] TypeSynonyms { get; } Property Value Type Description String []"
  },
  "api/XData.Interfaces.ISqlBuilder.GetCall.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetCall.html",
    "title": "Method GetCall | XData website",
    "keywords": "Method GetCall | Improve this Doc View Source GetCall(IDataStructure, String) Returns stored procedure call definition Declaration StoredProcedure GetCall(IDataStructure dataStructure, string userName) Parameters Type Name Description IDataStructure dataStructure Structure String userName User name Returns Type Description StoredProcedure Stored procedure definition"
  },
  "api/XData.Interfaces.ISqlBuilder.GetSafeConvertExpression.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetSafeConvertExpression.html",
    "title": "Method GetSafeConvertExpression | XData website",
    "keywords": "Method GetSafeConvertExpression | Improve this Doc View Source GetSafeConvertExpression(Type, Expression, Expression) Safe convert expression Declaration Expression GetSafeConvertExpression(Type type, Expression dataRow, Expression fieldName) Parameters Type Name Description Type type Type of expression Expression dataRow Data row expression Expression fieldName Field name expression Returns Type Description Expression Expression"
  },
  "api/XData.Interfaces.ISqlBuilder.GetBlobSizeQuery.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.GetBlobSizeQuery.html",
    "title": "Method GetBlobSizeQuery | XData website",
    "keywords": "Method GetBlobSizeQuery | Improve this Doc View Source GetBlobSizeQuery(String, String, String[], IComparable[]) Returns query to get Large Object size Declaration Query GetBlobSizeQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue) Parameters Type Name Description String table Table name contained LOB String column LOB column name String [] tablePrimaryKey Primary key column names IComparable [] primaryKeyValue Primary key values Returns Type Description Query Query to get Large Object size"
  },
  "api/XData.Interfaces.ISqlBuilder.ParameterPrefix.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.ParameterPrefix.html",
    "title": "Property ParameterPrefix | XData website",
    "keywords": "Property ParameterPrefix | Improve this Doc View Source ParameterPrefix Parameter prefix in SQL dialect Declaration string ParameterPrefix { get; } Property Value Type Description String"
  },
  "api/XData.Interfaces.ISqlBuilder.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.html",
    "title": "Interface ISqlBuilder | XData website",
    "keywords": "Interface ISqlBuilder SQL builder interface Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public interface ISqlBuilder Properties Name Description DialectOptions Dialect options WARNING! Mast to be filled in constructor! Item[Enum] Predefined queries ParameterPrefix Parameter prefix in SQL dialect SqlTypes List of supported SQL types WARNING! Mast to be filled in constructor! TypeNames List of supported column type names WARNING! Mast to be filled in constructor! TypeSynonyms List of supported type synonyms WARNING! Mast to be filled in constructor! Methods Name Description ExtractXmlQuery(String, String, String[], IComparable[], String, KeyValuePair<String, String>[]) Returns query to extract XML data by XPath expression GetAcquireBlobQuery(String, String, IEnumerable<String>, IComparable[], String) Returns query to acquire blob data GetAcquireXmlQuery(String, String, String[], IComparable[]) Returns query to acquire XML data GetAllQuery(IDataStructure) Returns query to check compliance of all repository objects Hint: Used in XData LINQ expressions GetAnyQuery(IDataStructure) Returns query to check existence of repository objects Hint: Used in XData LINQ expressions GetBlobSizeQuery(String, String, String[], IComparable[]) Returns query to get Large Object size GetCall(IDataStructure, String) Returns stored procedure call definition GetClearQuery(IDataStructure) Returns query to clear all repository objects GetCountQuery(IDataStructure) Returns query to select count of data objects in repository GetDeleteQuery(IDataStructure, IDataObject, String, Boolean) Returns query to delete data object GetInsertQuery(IDataStructure, IDataObject, String, Boolean) Returns query to insert data object GetLockQuery(IDataStructure) Returns query to lock single data object GetParameterName(String) Formats field name as parameter name GetRefreshQuery(IDataStructure) Returns query to refresh single data object GetSafeConvertExpression(Type, Expression, Expression) Safe convert expression GetSaveBlobQuery(String, String, IEnumerable<String>, IComparable[], ref Byte[], String) Returns query to save blob data GetSaveXmlQuery(String, String, String[], IComparable[], ref String) Returns query to save XML data GetSelectQuery(IDataStructure, Boolean, Boolean) Returns query to select data objects GetUpdateQuery(IDataStructure, IDataObject, String, Boolean) Returns query to update data object Init(String, IConfiguration, String) SQL builder initialization SetQueryParameterValues(ref Query, SortedList<String, Object>) Set query parameter values Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.ISequenceNameRule.GetSequenceName.html": {
    "href": "api/XData.Interfaces.ISequenceNameRule.GetSequenceName.html",
    "title": "Method GetSequenceName | XData website",
    "keywords": "Method GetSequenceName | Improve this Doc View Source GetSequenceName(String, String, String) Returns sequence name Declaration string GetSequenceName(string context, string tableName, string columnName) Parameters Type Name Description String context Context name String tableName Table name String columnName Column name Returns Type Description String Sequence name"
  },
  "api/XData.Interfaces.ISequenceNameRule.html": {
    "href": "api/XData.Interfaces.ISequenceNameRule.html",
    "title": "Interface ISequenceNameRule | XData website",
    "keywords": "Interface ISequenceNameRule Sequence name rule interface Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public interface ISequenceNameRule Methods Name Description GetSequenceName(String, String, String) Returns sequence name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.ISecuritySession.Roles.html": {
    "href": "api/XData.Interfaces.ISecuritySession.Roles.html",
    "title": "Property Roles | XData website",
    "keywords": "Property Roles | Improve this Doc View Source Roles Current user roles list Declaration string[] Roles { get; } Property Value Type Description String []"
  },
  "api/XData.Interfaces.ISecuritySession.IsSupervisor.html": {
    "href": "api/XData.Interfaces.ISecuritySession.IsSupervisor.html",
    "title": "Property IsSupervisor | XData website",
    "keywords": "Property IsSupervisor | Improve this Doc View Source IsSupervisor Current user is supervisor flag Declaration bool IsSupervisor { get; } Property Value Type Description Boolean"
  },
  "api/XData.Interfaces.ISecuritySession.UserName.html": {
    "href": "api/XData.Interfaces.ISecuritySession.UserName.html",
    "title": "Property UserName | XData website",
    "keywords": "Property UserName | Improve this Doc View Source UserName Current user name Declaration string UserName { get; } Property Value Type Description String"
  },
  "api/XData.Interfaces.ISecuritySession.GetRestrictedProperties.html": {
    "href": "api/XData.Interfaces.ISecuritySession.GetRestrictedProperties.html",
    "title": "Method GetRestrictedProperties | XData website",
    "keywords": "Method GetRestrictedProperties | Improve this Doc View Source GetRestrictedProperties<T>(String) Returns list of restricted properties for current user Declaration string[] GetRestrictedProperties<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description String [] Properties name list Type Parameters Name Description T Data object type"
  },
  "api/XData.Interfaces.ISecuritySession.FilterGrantedObjects.html": {
    "href": "api/XData.Interfaces.ISecuritySession.FilterGrantedObjects.html",
    "title": "Method FilterGrantedObjects | XData website",
    "keywords": "Method FilterGrantedObjects | Improve this Doc View Source FilterGrantedObjects<T>(String, Expression) Converts initial IQueryable expression filtering granted objects only Declaration Expression FilterGrantedObjects<T>(string context, Expression allDataExpr) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Expression allDataExpr Initial IQueryable expression Returns Type Description Expression Modified IQueryable expression Type Parameters Name Description T Data object type"
  },
  "api/XData.Interfaces.ISecuritySession.GetGrantedActions.html": {
    "href": "api/XData.Interfaces.ISecuritySession.GetGrantedActions.html",
    "title": "Method GetGrantedActions | XData website",
    "keywords": "Method GetGrantedActions | Improve this Doc View Source GetGrantedActions<T>(String) Returns list of granted actions for current user Declaration string[] GetGrantedActions<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description String [] Actions list Type Parameters Name Description T Data object type"
  },
  "api/XData.Interfaces.ISecuritySession.html": {
    "href": "api/XData.Interfaces.ISecuritySession.html",
    "title": "Interface ISecuritySession | XData website",
    "keywords": "Interface ISecuritySession Security session interface Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public interface ISecuritySession Properties Name Description IsSupervisor Current user is supervisor flag Roles Current user roles list UserName Current user name Methods Name Description FilterGrantedObjects<T>(String, Expression) Converts initial IQueryable expression filtering granted objects only GetGrantedActions<T>(String) Returns list of granted actions for current user GetRestrictedProperties<T>(String) Returns list of restricted properties for current user Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.IProxyManager.GetProxy.html": {
    "href": "api/XData.Interfaces.IProxyManager.GetProxy.html",
    "title": "Method GetProxy | XData website",
    "keywords": "Method GetProxy | Improve this Doc View Source GetProxy(String) Returns XAppServer connection proxy object Declaration IProxy GetProxy(string endpointName) Parameters Type Name Description String endpointName Returns Type Description IProxy"
  },
  "api/XData.Interfaces.IProxyManager.GetProxyRepository.html": {
    "href": "api/XData.Interfaces.IProxyManager.GetProxyRepository.html",
    "title": "Method GetProxyRepository | XData website",
    "keywords": "Method GetProxyRepository | Improve this Doc View Source GetProxyRepository<T>(Guid, String, String, ISecuritySession, Variable[]) Returns proxy repository Declaration IRepository<T> GetProxyRepository<T>(Guid layer = default(Guid), string alias = null, string context = null, ISecuritySession security = null, params Variable[] variables) where T : class, IDataObject, new() Parameters Type Name Description Guid layer Repository layer String alias Repository alias String context Repository context ISecuritySession security Repository security context Variable [] variables Repository variables Returns Type Description IRepository <T> Repository Type Parameters Name Description T Repository element type | Improve this Doc View Source GetProxyRepository(Guid, RepositoryState) Returns proxy repository using state Declaration IRepository GetProxyRepository(Guid layer, RepositoryState state) Parameters Type Name Description Guid layer Repository layer RepositoryState state Repository state Returns Type Description IRepository Repository"
  },
  "api/XData.Interfaces.IProxyManager.html": {
    "href": "api/XData.Interfaces.IProxyManager.html",
    "title": "Interface IProxyManager | XData website",
    "keywords": "Interface IProxyManager Proxy manager Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public interface IProxyManager Methods Name Description GetProxy(String) Returns XAppServer connection proxy object GetProxyRepository(Guid, RepositoryState) Returns proxy repository using state GetProxyRepository<T>(Guid, String, String, ISecuritySession, Variable[]) Returns proxy repository Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.IProxy.Close.html": {
    "href": "api/XData.Interfaces.IProxy.Close.html",
    "title": "Method Close | XData website",
    "keywords": "Method Close | Improve this Doc View Source Close(Guid) Close proxy Declaration void Close(Guid layer) Parameters Type Name Description Guid layer Layer to close (Specify Guid.Empty to close all layers)"
  },
  "api/XData.Interfaces.IProxy.html": {
    "href": "api/XData.Interfaces.IProxy.html",
    "title": "Interface IProxy | XData website",
    "keywords": "Interface IProxy Data object proxy interface Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public interface IProxy Methods Name Description Close(Guid) Close proxy Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Proxy"
  },
  "api/XData.Interfaces.ILogWriter.Write.html": {
    "href": "api/XData.Interfaces.ILogWriter.Write.html",
    "title": "Method Write | XData website",
    "keywords": "Method Write | Improve this Doc View Source Write(Exception, Func<AdditionalInfo>[]) Write exception to log Declaration void Write(Exception error, params Func<AdditionalInfo>[] getInfo) Parameters Type Name Description Exception error Error Func < AdditionalInfo >[] getInfo Get additional information handlers | Improve this Doc View Source Write(MessageType, Func<String>, Func<AdditionalInfo>[]) Write message to log Declaration void Write(MessageType msgType, Func<string> getMsgText, params Func<AdditionalInfo>[] getInfo) Parameters Type Name Description MessageType msgType Message type Func < String > getMsgText Get message text handler Func < AdditionalInfo >[] getInfo Get additional information handlers"
  },
  "api/XData.Interfaces.ILogWriter.html": {
    "href": "api/XData.Interfaces.ILogWriter.html",
    "title": "Interface ILogWriter | XData website",
    "keywords": "Interface ILogWriter XData log writer interface Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public interface ILogWriter Methods Name Description Write(Exception, Func<AdditionalInfo>[]) Write exception to log Write(MessageType, Func<String>, Func<AdditionalInfo>[]) Write message to log Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.IConfiguration.DefaultContext.html": {
    "href": "api/XData.Interfaces.IConfiguration.DefaultContext.html",
    "title": "Property DefaultContext | XData website",
    "keywords": "Property DefaultContext | Improve this Doc View Source DefaultContext Default context name Declaration string DefaultContext { get; } Property Value Type Description String Remarks WARNING! Required configuration attribute! See Also Context Context"
  },
  "api/XData.Interfaces.IConfiguration.SecurityContext.html": {
    "href": "api/XData.Interfaces.IConfiguration.SecurityContext.html",
    "title": "Property SecurityContext | XData website",
    "keywords": "Property SecurityContext | Improve this Doc View Source SecurityContext Security context name Declaration string SecurityContext { get; } Property Value Type Description String See Also Context Context"
  },
  "api/XData.Interfaces.IConfiguration.MonitoringContext.html": {
    "href": "api/XData.Interfaces.IConfiguration.MonitoringContext.html",
    "title": "Property MonitoringContext | XData website",
    "keywords": "Property MonitoringContext | Improve this Doc View Source MonitoringContext Health monitoring context name Declaration string MonitoringContext { get; } Property Value Type Description String See Also Context Context"
  },
  "api/XData.Interfaces.IConfiguration.LogWriter.html": {
    "href": "api/XData.Interfaces.IConfiguration.LogWriter.html",
    "title": "Property LogWriter | XData website",
    "keywords": "Property LogWriter | Improve this Doc View Source LogWriter Log writer class name Declaration string LogWriter { get; } Property Value Type Description String"
  },
  "api/XData.Interfaces.IConfiguration.Adapters.html": {
    "href": "api/XData.Interfaces.IConfiguration.Adapters.html",
    "title": "Property Adapters | XData website",
    "keywords": "Property Adapters | Improve this Doc View Source Adapters Registered adapters collection Declaration List<AdapterConfig> Adapters { get; } Property Value Type Description List < AdapterConfig > See Also AdapterConfig"
  },
  "api/XData.Interfaces.IConfiguration.Dialects.html": {
    "href": "api/XData.Interfaces.IConfiguration.Dialects.html",
    "title": "Property Dialects | XData website",
    "keywords": "Property Dialects | Improve this Doc View Source Dialects Registered SQL dialects collection Declaration List<DialectConfig> Dialects { get; } Property Value Type Description List < DialectConfig > See Also DialectConfig"
  },
  "api/XData.Interfaces.IConfiguration.ProxyList.html": {
    "href": "api/XData.Interfaces.IConfiguration.ProxyList.html",
    "title": "Property ProxyList | XData website",
    "keywords": "Property ProxyList | Improve this Doc View Source ProxyList Registered proxy collection Declaration List<ProxyConfig> ProxyList { get; } Property Value Type Description List < ProxyConfig > See Also ProxyConfig"
  },
  "api/XData.Interfaces.IConfiguration.Contexts.html": {
    "href": "api/XData.Interfaces.IConfiguration.Contexts.html",
    "title": "Property Contexts | XData website",
    "keywords": "Property Contexts | Improve this Doc View Source Contexts Registered contexts collection Declaration List<ContextConfig> Contexts { get; } Property Value Type Description List < ContextConfig > See Also ContextConfig"
  },
  "api/XData.Interfaces.IConfiguration.LifeTimeLimit.html": {
    "href": "api/XData.Interfaces.IConfiguration.LifeTimeLimit.html",
    "title": "Property LifeTimeLimit | XData website",
    "keywords": "Property LifeTimeLimit | Improve this Doc View Source LifeTimeLimit XData objects lifetime limit (minutes) Declaration int LifeTimeLimit { get; } Property Value Type Description Int32"
  },
  "api/XData.Interfaces.IConfiguration.html": {
    "href": "api/XData.Interfaces.IConfiguration.html",
    "title": "Interface IConfiguration | XData website",
    "keywords": "Interface IConfiguration XData configuration Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public interface IConfiguration Examples <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> <!-- *** WARNING! configSections section with declaration of \"xdata\" is required and mast be first child section of configuration! --> <configSections> <section name=\"xdata\" type=\"System.Configuration.IgnoreSectionHandler\" /> </configSections> <!-- *** You can configure Your application to direct connect database OR use application server --> <!-- *** Endpoint required using application server only --> <!--<system.serviceModel> <client> <endpoint address=\"net.tcp://localhost:8733/AppServer/\" binding=\"netTcpBinding\" contract=\"XDataProxy.IAppServer\" name=\"XAppServer\" /> </client> </system.serviceModel>--> <!-- *** Connection strings required using direct connect only --> <connectionStrings> <add name=\"TEST\" connectionString=\"Data Source=(local);Initial Catalog=XDataTest;User Id=test;Password=test\" /> </connectionStrings> <!-- *** xdata section (see XDataConfiguration.DefaultContext, XDataConfiguration.LogWriter documentation) --> <xdata default=\"TEST\" log=\"XData.Logging.Trace.TraceWriter, XData.Logging.Trace\"> <!-- *** Specific SQL data access adapter required using direct database access (see XDataConfiguration.Adapters documentation) --> <adapter name=\"MSSQL\" file=\"C:\\Projects\\Net40\\XData\\_Debug\\XMsSqlAdapter.dll\"/> <!-- *** Specific SQL dialect adapter (see XDataConfiguration.Dialects documentation) --> <dialect name=\"MSSQL\" file=\"C:\\Projects\\Net40\\XData\\_Debug\\XMsSqlDialect.dll\"/> <!-- *** Proxy adapter required using application server only --> <!--<adapter name=\"PROXY\" file=\"C:\\XData\\XProxyAdapter.dll\"/>--> <!-- *** Context can be configured by direct or proxy adapter according Your needs (see XDataConfiguration.Contexts, ContextConfig.SequenceNameRule documentation) --> <!--<context name=\"TEST\" adapter=\"PROXY\"/>--> <context name=\"TEST\" adapter=\"MSSQL\" sequence=\"XMyCustomLib.MyDbSequence, XMyCustomLib\"/> <!-- *** Context proxy configuration required using application server only (see XDataConfiguration.ProxyList documentation) --> <!--<proxy name=\"TEST\" adapter=\"MSSQL\" endpoint=\"XAppServer\" />--> </xdata> </configuration> Properties Name Description Adapters Registered adapters collection Contexts Registered contexts collection DefaultContext Default context name Dialects Registered SQL dialects collection LifeTimeLimit XData objects lifetime limit (minutes) LogWriter Log writer class name MonitoringContext Health monitoring context name ProxyList Registered proxy collection SecurityContext Security context name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Adapters Dialects Contexts ProxyList DefaultContext LogWriter"
  },
  "api/XData.Interfaces.DialectConfig.Name.html": {
    "href": "api/XData.Interfaces.DialectConfig.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Adapter name Declaration public string Name { get; set; } Property Value Type Description String Remarks Mast be the same as DialectName"
  },
  "api/XData.Interfaces.DialectConfig.AssemblyName.html": {
    "href": "api/XData.Interfaces.DialectConfig.AssemblyName.html",
    "title": "Property AssemblyName | XData website",
    "keywords": "Property AssemblyName | Improve this Doc View Source AssemblyName Adapter assembly name Declaration public string AssemblyName { get; set; } Property Value Type Description String"
  },
  "api/XData.Interfaces.DialectConfig.Config.html": {
    "href": "api/XData.Interfaces.DialectConfig.Config.html",
    "title": "Property Config | XData website",
    "keywords": "Property Config | Improve this Doc View Source Config Adapter configuration Declaration public IConfiguration Config { get; set; } Property Value Type Description IConfiguration"
  },
  "api/XData.Interfaces.DialectConfig.html": {
    "href": "api/XData.Interfaces.DialectConfig.html",
    "title": "Class DialectConfig | XData website",
    "keywords": "Class DialectConfig SQL dialect configuration section Inheritance Object DialectConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public sealed class DialectConfig Remarks WARNING! All attributes are required! Examples <dialect name=\"MSSQL\" file=\"C:\\XData\\XMsSqlDialect.dll\"/> Properties Name Description AssemblyName Adapter assembly name Config Adapter configuration Name Adapter name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name AssemblyName"
  },
  "api/XData.Interfaces.ContextConfig.Name.html": {
    "href": "api/XData.Interfaces.ContextConfig.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Context name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/XData.Interfaces.ContextConfig.AdapterName.html": {
    "href": "api/XData.Interfaces.ContextConfig.AdapterName.html",
    "title": "Property AdapterName | XData website",
    "keywords": "Property AdapterName | Improve this Doc View Source AdapterName Context adapter name Declaration public string AdapterName { get; set; } Property Value Type Description String Remarks Mast be the same as Name"
  },
  "api/XData.Interfaces.ContextConfig.DialectName.html": {
    "href": "api/XData.Interfaces.ContextConfig.DialectName.html",
    "title": "Property DialectName | XData website",
    "keywords": "Property DialectName | Improve this Doc View Source DialectName Dialect adapter name Declaration public string DialectName { get; set; } Property Value Type Description String Remarks Mast be the same as Name"
  },
  "api/XData.Interfaces.ContextConfig.ConnectionString.html": {
    "href": "api/XData.Interfaces.ContextConfig.ConnectionString.html",
    "title": "Property ConnectionString | XData website",
    "keywords": "Property ConnectionString | Improve this Doc View Source ConnectionString Connection string Declaration public string ConnectionString { get; set; } Property Value Type Description String Remarks Received from ConnectionStrings configuration section by name same as Name"
  },
  "api/XData.Interfaces.ContextConfig.SequenceNameRule.html": {
    "href": "api/XData.Interfaces.ContextConfig.SequenceNameRule.html",
    "title": "Property SequenceNameRule | XData website",
    "keywords": "Property SequenceNameRule | Improve this Doc View Source SequenceNameRule Sequence name rule class name Declaration public string SequenceNameRule { get; set; } Property Value Type Description String"
  },
  "api/XData.Interfaces.ContextConfig.IsDefault.html": {
    "href": "api/XData.Interfaces.ContextConfig.IsDefault.html",
    "title": "Property IsDefault | XData website",
    "keywords": "Property IsDefault | Improve this Doc View Source IsDefault Default context flag Declaration public bool IsDefault { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Interfaces.ContextConfig.ConcurrencyErrorId.html": {
    "href": "api/XData.Interfaces.ContextConfig.ConcurrencyErrorId.html",
    "title": "Property ConcurrencyErrorId | XData website",
    "keywords": "Property ConcurrencyErrorId | Improve this Doc View Source ConcurrencyErrorId Concurrency error id Declaration public string ConcurrencyErrorId { get; set; } Property Value Type Description String"
  },
  "api/XData.Interfaces.ContextConfig.ToString.html": {
    "href": "api/XData.Interfaces.ContextConfig.ToString.html",
    "title": "Method ToString | XData website",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/XData.Interfaces.ContextConfig.html": {
    "href": "api/XData.Interfaces.ContextConfig.html",
    "title": "Class ContextConfig | XData website",
    "keywords": "Class ContextConfig Context config section Inheritance Object ContextConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public sealed class ContextConfig Remarks WARNING! All attributes are required! Examples <context name=\"TEST\" adapter=\"MSSQL\"/> Properties Name Description AdapterName Context adapter name ConcurrencyErrorId Concurrency error id ConnectionString Connection string DialectName Dialect adapter name IsDefault Default context flag Name Context name SequenceNameRule Sequence name rule class name Methods Name Description ToString() Returns a string that represents the current object. Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name AdapterName ConnectionString IsDefault SequenceNameRule"
  },
  "api/XData.Interfaces.AdapterConfig.Name.html": {
    "href": "api/XData.Interfaces.AdapterConfig.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Adapter name Declaration public string Name { get; set; } Property Value Type Description String Remarks Mast be the same as AdapterName"
  },
  "api/XData.Interfaces.AdapterConfig.AssemblyName.html": {
    "href": "api/XData.Interfaces.AdapterConfig.AssemblyName.html",
    "title": "Property AssemblyName | XData website",
    "keywords": "Property AssemblyName | Improve this Doc View Source AssemblyName Adapter assembly name Declaration public string AssemblyName { get; set; } Property Value Type Description String"
  },
  "api/XData.Interfaces.AdapterConfig.Config.html": {
    "href": "api/XData.Interfaces.AdapterConfig.Config.html",
    "title": "Property Config | XData website",
    "keywords": "Property Config | Improve this Doc View Source Config Adapter configuration Declaration public IConfiguration Config { get; set; } Property Value Type Description IConfiguration"
  },
  "api/XData.Interfaces.AdapterConfig.html": {
    "href": "api/XData.Interfaces.AdapterConfig.html",
    "title": "Class AdapterConfig | XData website",
    "keywords": "Class AdapterConfig Adapter configuration section Inheritance Object AdapterConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Interfaces Assembly : XData.docfx.dll Syntax public sealed class AdapterConfig Remarks WARNING! All attributes are required! Examples <adapter name=\"MSSQL\" file=\"C:\\XData\\XMsSqlAdapter.dll\"/> Properties Name Description AssemblyName Adapter assembly name Config Adapter configuration Name Adapter name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name AssemblyName"
  },
  "api/XData.InitRepository-1.html": {
    "href": "api/XData.InitRepository-1.html",
    "title": "Delegate InitRepository<T> | XData website",
    "keywords": "Delegate InitRepository<T> Repository initialization delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate void InitRepository<T>(IRepository<T> repository) where T : class, IDataObject; Parameters Type Name Description IRepository <T> repository Repository instance Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also InitRepository OnInit"
  },
  "api/XData.InitObject-1.html": {
    "href": "api/XData.InitObject-1.html",
    "title": "Delegate InitObject<T> | XData website",
    "keywords": "Delegate InitObject<T> Object instance initialization delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate void InitObject<T>(ref T obj) where T : class, IDataObject; Parameters Type Name Description T obj Object instance Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also InitObject OnInitObject"
  },
  "api/XData.IDataScope.Layer.html": {
    "href": "api/XData.IDataScope.Layer.html",
    "title": "Property Layer | XData website",
    "keywords": "Property Layer | Improve this Doc View Source Layer Data scope layer identity Declaration Guid Layer { get; } Property Value Type Description Guid"
  },
  "api/XData.IDataScope.DefaultContext.html": {
    "href": "api/XData.IDataScope.DefaultContext.html",
    "title": "Property DefaultContext | XData website",
    "keywords": "Property DefaultContext | Improve this Doc View Source DefaultContext Data scope default context Declaration string DefaultContext { get; } Property Value Type Description String"
  },
  "api/XData.IDataScope.Security.html": {
    "href": "api/XData.IDataScope.Security.html",
    "title": "Property Security | XData website",
    "keywords": "Property Security | Improve this Doc View Source Security Security session Declaration ISecuritySession Security { get; } Property Value Type Description ISecuritySession"
  },
  "api/XData.IDataScope.BeginTransaction.html": {
    "href": "api/XData.IDataScope.BeginTransaction.html",
    "title": "Method BeginTransaction | XData website",
    "keywords": "Method BeginTransaction | Improve this Doc View Source BeginTransaction(Boolean, IsolationLevel) Begins single context transaction Declaration ITransaction BeginTransaction(bool read = false, IsolationLevel isolation = null) Parameters Type Name Description Boolean read Read only transaction IsolationLevel isolation Transaction isolation level Returns Type Description ITransaction Transaction wrapper Exceptions Type Condition XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataSqlException SQL exceptions while beginning transaction. See Also ITransaction"
  },
  "api/XData.IDataScope.GetQuery.html": {
    "href": "api/XData.IDataScope.GetQuery.html",
    "title": "Method GetQuery | XData website",
    "keywords": "Method GetQuery | Improve this Doc View Source GetQuery<T>(TextReader, String, ISecuritySession) Get query Declaration IDataQuery<T> GetQuery<T>(TextReader reader, string alias = null, ISecuritySession security = null) where T : class, IDataObject, new() Parameters Type Name Description TextReader reader Serialized data reader String alias Base repository alias ISecuritySession security Security session Returns Type Description IDataQuery <T> Data query Type Parameters Name Description T Data object type Exceptions Type Condition XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataAdapterException Adapter logic error. XDataRuntimeException reader parameter can not be null"
  },
  "api/XData.IDataScope.GetRepository.html": {
    "href": "api/XData.IDataScope.GetRepository.html",
    "title": "Method GetRepository | XData website",
    "keywords": "Method GetRepository | Improve this Doc View Source GetRepository<T>(String, ISecuritySession, Variable[]) Get repository Declaration IRepository<T> GetRepository<T>(string alias = null, ISecuritySession security = null, params Variable[] variables) where T : class, IDataObject, new() Parameters Type Name Description String alias Data object alias ISecuritySession security Security session Variable [] variables Data object variables Returns Type Description IRepository <T> Repository Type Parameters Name Description T Data object type Exceptions Type Condition XDataQueryStructureException no mapping found. XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataAdapterException Custom logic error. | Improve this Doc View Source GetRepository<T>(Variable[]) Get repository Declaration IRepository<T> GetRepository<T>(params Variable[] variables) where T : class, IDataObject, new() Parameters Type Name Description Variable [] variables Data object variables Returns Type Description IRepository <T> Repository Type Parameters Name Description T Data object type Exceptions Type Condition XDataQueryStructureException no mapping found. XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataAdapterException Custom logic error. | Improve this Doc View Source GetRepository<T>(String, Variable[]) Get repository Declaration IRepository<T> GetRepository<T>(string alias = null, params Variable[] variables) where T : class, IDataObject, new() Parameters Type Name Description String alias Data object alias Variable [] variables Data object variables Returns Type Description IRepository <T> Repository Type Parameters Name Description T Data object type Exceptions Type Condition XDataQueryStructureException no mapping found. XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataAdapterException Custom logic error. | Improve this Doc View Source GetRepository<T>(ISecuritySession, Variable[]) Get repository Declaration IRepository<T> GetRepository<T>(ISecuritySession security = null, params Variable[] variables) where T : class, IDataObject, new() Parameters Type Name Description ISecuritySession security Security session Variable [] variables Data object variables Returns Type Description IRepository <T> Repository Type Parameters Name Description T Data object type Exceptions Type Condition XDataQueryStructureException no mapping found. XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataAdapterException Custom logic error. | Improve this Doc View Source GetRepository<T>(TextReader) Get repository Declaration IRepository<T> GetRepository<T>(TextReader reader) where T : class, IDataObject, new() Parameters Type Name Description TextReader reader Serialized data reader Returns Type Description IRepository <T> Repository Type Parameters Name Description T Data object type Exceptions Type Condition XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataAdapterException Adapter logic error. XDataRuntimeException reader parameter can not be null"
  },
  "api/XData.IDataScope.GetDictionaryValue.html": {
    "href": "api/XData.IDataScope.GetDictionaryValue.html",
    "title": "Method GetDictionaryValue | XData website",
    "keywords": "Method GetDictionaryValue | Improve this Doc View Source GetDictionaryValue<T>(Expression<Func<T, Boolean>>, String, ISecuritySession, Variable[]) Returns dictionary value by find expression and cache result Declaration T GetDictionaryValue<T>(Expression<Func<T, bool>> findExpression, string alias = null, ISecuritySession security = null, params Variable[] variables) where T : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, Boolean >> findExpression Expression to find value String alias Repository alias ISecuritySession security Security session Variable [] variables Repository variables Returns Type Description T Dictionary object Type Parameters Name Description T Dictionary type Exceptions Type Condition XDataRuntimeException XDataRuntimeException No original data found for object XDataRuntimeException findExpression parameter is null"
  },
  "api/XData.IDataScope.Reset.html": {
    "href": "api/XData.IDataScope.Reset.html",
    "title": "Method Reset | XData website",
    "keywords": "Method Reset | Improve this Doc View Source Reset() Reset data scope caches Declaration void Reset()"
  },
  "api/XData.IDataScope.GetContext.html": {
    "href": "api/XData.IDataScope.GetContext.html",
    "title": "Method GetContext | XData website",
    "keywords": "Method GetContext | Improve this Doc View Source GetContext() Returns context by name Declaration XDataContext GetContext() Returns Type Description XDataContext Context Exceptions Type Condition XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors."
  },
  "api/XData.IDataScope.FillTable.html": {
    "href": "api/XData.IDataScope.FillTable.html",
    "title": "Method FillTable | XData website",
    "keywords": "Method FillTable | Improve this Doc View Source FillTable(Query, CommandBehavior) Fill DataTable with custom query results Declaration DataTable FillTable(Query query, CommandBehavior behavior = null) Parameters Type Name Description Query query Custom query CommandBehavior behavior Query command behavior Returns Type Description DataTable DataTable"
  },
  "api/XData.IDataScope.ExecuteScalar.html": {
    "href": "api/XData.IDataScope.ExecuteScalar.html",
    "title": "Method ExecuteScalar | XData website",
    "keywords": "Method ExecuteScalar | Improve this Doc View Source ExecuteScalar<TResult>(Query) Execute SQL single value result custom query Declaration TResult ExecuteScalar<TResult>(Query query) Parameters Type Name Description Query query Custom query Returns Type Description TResult Custom query single value result Type Parameters Name Description TResult Result value type"
  },
  "api/XData.IDataScope.ExecuteNonQuery.html": {
    "href": "api/XData.IDataScope.ExecuteNonQuery.html",
    "title": "Method ExecuteNonQuery | XData website",
    "keywords": "Method ExecuteNonQuery | Improve this Doc View Source ExecuteNonQuery(Query) Execute SQL expression custom query with no result set Declaration QueryResult ExecuteNonQuery(Query query) Parameters Type Name Description Query query Custom query Returns Type Description QueryResult Custom query affected rows and out parameters"
  },
  "api/XData.IDataScope.html": {
    "href": "api/XData.IDataScope.html",
    "title": "Interface IDataScope | XData website",
    "keywords": "Interface IDataScope XData operational scope Inherited Members IDisposable.Dispose() Namespace : XData Assembly : XData.docfx.dll Syntax public interface IDataScope : IDisposable Properties Name Description DefaultContext Data scope default context Layer Data scope layer identity Security Security session Methods Name Description BeginTransaction(Boolean, IsolationLevel) Begins single context transaction ExecuteNonQuery(Query) Execute SQL expression custom query with no result set ExecuteScalar<TResult>(Query) Execute SQL single value result custom query FillTable(Query, CommandBehavior) Fill DataTable with custom query results GetContext() Returns context by name GetDictionaryValue<T>(Expression<Func<T, Boolean>>, String, ISecuritySession, Variable[]) Returns dictionary value by find expression and cache result GetQuery<T>(TextReader, String, ISecuritySession) Get query GetRepository<T>(TextReader) Get repository GetRepository<T>(String, ISecuritySession, Variable[]) Get repository GetRepository<T>(String, Variable[]) Get repository GetRepository<T>(ISecuritySession, Variable[]) Get repository GetRepository<T>(Variable[]) Get repository Reset() Reset data scope caches Extension Methods SerializationExtensions.ToXml<T>(T) AsyncExtensions.FillTableAsync(IDataScope, Query, CommandBehavior) AsyncExtensions.ExecuteScalarAsync<TResult>(IDataScope, Query) AsyncExtensions.ExecuteNonQueryAsync(IDataScope, Query) AsyncExtensions.ExecuteSqlBlockAsync(IDataScope, Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) AsyncExtensions.GetSqlBlockDataAsync<T>(IDataScope, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) AsyncExtensions.GetSqlBlockDataAsync<T>(IDataScope, Func<JsonSettings<T>, JsonSettings<T>>, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) AsyncExtensions.FillTableAsync(IDataScope, CancellationToken, Query, CommandBehavior) AsyncExtensions.ExecuteScalarAsync<TResult>(IDataScope, CancellationToken, Query) AsyncExtensions.ExecuteNonQueryAsync(IDataScope, CancellationToken, Query) AsyncExtensions.ExecuteSqlBlockAsync(IDataScope, CancellationToken, Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) AsyncExtensions.GetSqlBlockDataAsync<T>(IDataScope, CancellationToken, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) AsyncExtensions.GetSqlBlockDataAsync<T>(IDataScope, CancellationToken, Func<JsonSettings<T>, JsonSettings<T>>, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.ExecuteSqlBlock(IDataScope, Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) SqlBlockExtensions.GetSqlBlockData<T>(IDataScope, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IDataQuery.Alias.html": {
    "href": "api/XData.IDataQuery.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Data repository alias Declaration string Alias { get; } Property Value Type Description String Remarks Default value is data object type name"
  },
  "api/XData.IDataQuery.Layer.html": {
    "href": "api/XData.IDataQuery.Layer.html",
    "title": "Property Layer | XData website",
    "keywords": "Property Layer | Improve this Doc View Source Layer Data repository layer Declaration Guid Layer { get; } Property Value Type Description Guid Remarks Sharing same layer the data object repositories can interact automatically as parent/child (see ExternalLinkAttribute ) Repositories on different layers but same data object are independent for each other Repositories on same layer based on same data object is the same repository"
  },
  "api/XData.IDataQuery.Context.html": {
    "href": "api/XData.IDataQuery.Context.html",
    "title": "Property Context | XData website",
    "keywords": "Property Context | Improve this Doc View Source Context Data context Declaration string Context { get; } Property Value Type Description String"
  },
  "api/XData.IDataQuery.Variables.html": {
    "href": "api/XData.IDataQuery.Variables.html",
    "title": "Property Variables | XData website",
    "keywords": "Property Variables | Improve this Doc View Source Variables Data query/repository/call result variables Declaration VariableIndexer Variables { get; } Property Value Type Description VariableIndexer Remarks Variable values can be used to set the filter values (query/repository) Variable values can be used in custom logic (repository) Variables is stored in query/repository/call result instance Examples var rep = dataScope.GetRepository<Customer>(variables: new []{\"OurCode\", \"SELF\"}); var newInvoice = dataScope.GetRepository<Invoice>().New(); newInvoice.CustomerFrom += rep.First(x => x.Code.CompareVariable(FilterOperation.Equal, \"SELF\")); See Also Variable GetRepository<T>(String, ISecuritySession, Variable[]) XData.DataObjectExtensions.CompareVariable(XData.IDataQueryInternal,System.Object,XData.FilterOperation,System.String)"
  },
  "api/XData.IDataQuery.Keys.html": {
    "href": "api/XData.IDataQuery.Keys.html",
    "title": "Property Keys | XData website",
    "keywords": "Property Keys | Improve this Doc View Source Keys Data query/repository key properties Declaration string[] Keys { get; } Property Value Type Description String []"
  },
  "api/XData.IDataQuery.html": {
    "href": "api/XData.IDataQuery.html",
    "title": "Interface IDataQuery | XData website",
    "keywords": "Interface IDataQuery Read only data source basic interface Inherited Members IQueryable.ElementType IQueryable.Expression IQueryable.Provider IEnumerable.GetEnumerator() IDisposable.Dispose() Namespace : XData Assembly : XData.docfx.dll Syntax public interface IDataQuery : IOrderedQueryable, IQueryable, IEnumerable, IDisposable Properties Name Description Alias Data repository alias Context Data context Keys Data query/repository key properties Layer Data repository layer Variables Data query/repository/call result variables Extension Methods DataObjectExtensions.GetParameter<T>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IDataQuery-1.SetFilterValue.html": {
    "href": "api/XData.IDataQuery-1.SetFilterValue.html",
    "title": "Method SetFilterValue | XData website",
    "keywords": "Method SetFilterValue | Improve this Doc View Source SetFilterValue(RuntimeFilter, Object) Set metadata defined RuntimeFilter value Declaration IDataQuery<T> SetFilterValue(RuntimeFilter filter, object val) Parameters Type Name Description RuntimeFilter filter Filter Object val Filter value Returns Type Description IDataQuery <T> Self repository link Remarks Hint: Set val = null to clear filter Exceptions Type Condition XDataRuntimeException \"filter\" parameter is null. See Also RuntimeFilter Reset() GetFilterValue ( RuntimeFilter )"
  },
  "api/XData.IDataQuery-1.GetFilterValue.html": {
    "href": "api/XData.IDataQuery-1.GetFilterValue.html",
    "title": "Method GetFilterValue | XData website",
    "keywords": "Method GetFilterValue | Improve this Doc View Source GetFilterValue(RuntimeFilter) Get metadata defined RuntimeFilter value Declaration object GetFilterValue(RuntimeFilter filter) Parameters Type Name Description RuntimeFilter filter Filter Returns Type Description Object Filter value Exceptions Type Condition XDataRuntimeException \"filter\" parameter is null. See Also RuntimeFilter Reset() SetFilterValue(RuntimeFilter, Object)"
  },
  "api/XData.IDataQuery-1.Reset.html": {
    "href": "api/XData.IDataQuery-1.Reset.html",
    "title": "Method Reset | XData website",
    "keywords": "Method Reset | Improve this Doc View Source Reset() Reset repository structure and filter values Declaration IDataQuery<T> Reset() Returns Type Description IDataQuery <T> Self repository link See Also RuntimeFilter GetFilterValue ( RuntimeFilter ) SetFilterValue(RuntimeFilter, Object)"
  },
  "api/XData.IDataQuery-1.html": {
    "href": "api/XData.IDataQuery-1.html",
    "title": "Interface IDataQuery<T> | XData website",
    "keywords": "Interface IDataQuery<T> Specialized read only data source interface Inherited Members IDataQuery.Alias IDataQuery.Layer IDataQuery.Context IDataQuery.Variables IDataQuery.Keys IDisposable.Dispose() IEnumerable<T>.GetEnumerator() IQueryable.ElementType IQueryable.Expression IQueryable.Provider Namespace : XData Assembly : XData.docfx.dll Syntax public interface IDataQuery<T> : IDataQuery, IDisposable, IOrderedQueryable<T>, IOrderedQueryable, IQueryable<T>, IEnumerable<T>, IQueryable, IEnumerable Type Parameters Name Description T Data source type Methods Name Description GetFilterValue(RuntimeFilter) Get metadata defined RuntimeFilter value Reset() Reset repository structure and filter values SetFilterValue(RuntimeFilter, Object) Set metadata defined RuntimeFilter value Extension Methods DataObjectExtensions.GetParameter<T>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.IDataOptions.UseCredentials.html": {
    "href": "api/XData.IDataOptions.UseCredentials.html",
    "title": "Method UseCredentials | XData website",
    "keywords": "Method UseCredentials | Improve this Doc View Source UseCredentials(String, String, Nullable<Boolean>, String, String) Set database credentials Declaration IDataOptions UseCredentials(string dbServer = null, string dbSchema = null, bool? dbIntegratedSecurity = default(bool? ), string dbLogin = null, string dbPassword = null) Parameters Type Name Description String dbServer Server name or URI String dbSchema Database or schema name Nullable < Boolean > dbIntegratedSecurity Use integrated security String dbLogin Database user login String dbPassword Database user password Returns Type Description IDataOptions XData options interface"
  },
  "api/XData.IDataOptions.SetSecurityContext.html": {
    "href": "api/XData.IDataOptions.SetSecurityContext.html",
    "title": "Method SetSecurityContext | XData website",
    "keywords": "Method SetSecurityContext | Improve this Doc View Source SetSecurityContext(String) Set security context (optional, manual configuration) Declaration IDataOptions SetSecurityContext(string securityContext) Parameters Type Name Description String securityContext Security context Returns Type Description IDataOptions XData options interface"
  },
  "api/XData.IDataOptions.SetMonitoringContext.html": {
    "href": "api/XData.IDataOptions.SetMonitoringContext.html",
    "title": "Method SetMonitoringContext | XData website",
    "keywords": "Method SetMonitoringContext | Improve this Doc View Source SetMonitoringContext(String) Set monitoring context (optional, manual configuration) Declaration IDataOptions SetMonitoringContext(string monitoringContext) Parameters Type Name Description String monitoringContext Returns Type Description IDataOptions XData options interface"
  },
  "api/XData.IDataOptions.AddDialect.html": {
    "href": "api/XData.IDataOptions.AddDialect.html",
    "title": "Method AddDialect | XData website",
    "keywords": "Method AddDialect | Improve this Doc View Source AddDialect(String, String, IConfiguration) Add supported SQL dialect description Declaration IDataOptions AddDialect(string name, string assemblyName, IConfiguration options = null) Parameters Type Name Description String name Dialect name String assemblyName Assembly name of dialect plugin IConfiguration options Dialect options (xml) see concrete dialect readme for details Returns Type Description IDataOptions XData options interface"
  },
  "api/XData.IDataOptions.AddAdapter.html": {
    "href": "api/XData.IDataOptions.AddAdapter.html",
    "title": "Method AddAdapter | XData website",
    "keywords": "Method AddAdapter | Improve this Doc View Source AddAdapter(String, String, IConfiguration) Add supported SQL adapter description Declaration IDataOptions AddAdapter(string name, string assemblyName, IConfiguration options = null) Parameters Type Name Description String name Adapter name String assemblyName Assembly name of adapter plugin IConfiguration options Adapter options (xml) see concrete adapter readme for details Returns Type Description IDataOptions XData options interface"
  },
  "api/XData.IDataOptions.AddProxy.html": {
    "href": "api/XData.IDataOptions.AddProxy.html",
    "title": "Method AddProxy | XData website",
    "keywords": "Method AddProxy | Improve this Doc View Source AddProxy(String, String) Add proxy adapter description Declaration IDataOptions AddProxy(string name, string endpoint) Parameters Type Name Description String name Proxy name String endpoint WCF client endpoint name Returns Type Description IDataOptions XData options interface"
  },
  "api/XData.IDataOptions.AddContext.html": {
    "href": "api/XData.IDataOptions.AddContext.html",
    "title": "Method AddContext | XData website",
    "keywords": "Method AddContext | Improve this Doc View Source AddContext(String, String, String, String, Boolean, String, String) Add context description Declaration IDataOptions AddContext(string name, string dialect, string adapter, string connectionString, bool isDefault, string sequence = null, string concurrencyErrorId = null) Parameters Type Name Description String name Context name String dialect Dialect name String adapter Adapter or proxy name String connectionString Connection string Boolean isDefault Default context flag String sequence (optional) Assembly qualified type name implements ISequenceNameRule String concurrencyErrorId (optional) Concurrency error id Returns Type Description IDataOptions XData options interface"
  },
  "api/XData.IDataOptions.SetLifeTmeLimit.html": {
    "href": "api/XData.IDataOptions.SetLifeTmeLimit.html",
    "title": "Method SetLifeTmeLimit | XData website",
    "keywords": "Method SetLifeTmeLimit | Improve this Doc View Source SetLifeTmeLimit(Int32) Set XData cache lifetime limit in seconds Declaration IDataOptions SetLifeTmeLimit(int seconds) Parameters Type Name Description Int32 seconds XData cache lifetime limit Returns Type Description IDataOptions XData options interface"
  },
  "api/XData.IDataOptions.html": {
    "href": "api/XData.IDataOptions.html",
    "title": "Interface IDataOptions | XData website",
    "keywords": "Interface IDataOptions XData options interface Namespace : XData Assembly : XData.docfx.dll Syntax public interface IDataOptions Methods Name Description AddAdapter(String, String, IConfiguration) Add supported SQL adapter description AddContext(String, String, String, String, Boolean, String, String) Add context description AddDialect(String, String, IConfiguration) Add supported SQL dialect description AddProxy(String, String) Add proxy adapter description SetLifeTmeLimit(Int32) Set XData cache lifetime limit in seconds SetMonitoringContext(String) Set monitoring context (optional, manual configuration) SetSecurityContext(String) Set security context (optional, manual configuration) UseCredentials(String, String, Nullable<Boolean>, String, String) Set database credentials Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IDataObject.html": {
    "href": "api/XData.IDataObject.html",
    "title": "Interface IDataObject | XData website",
    "keywords": "Interface IDataObject Data object interface Namespace : XData Assembly : XData.docfx.dll Syntax [JsonConverter(typeof(JsonDataObjectConverter<IDataObject>))] public interface IDataObject : ISqlObject Remarks Mapping domain object to database WARNING! Data object mapping requires DataObjectAttribute ! Hint: Use DataTableAttribute , SubqueryAttribute and InnerViewAttribute to map data object to data sources Hint: Use FilterAttribute 's specific successor to link data sources and apply filters to data Hint: Use ExternalLinkAttribute to declare master/slave relations between repositories Hint: Use Lob to map binary fields [Property(\"scan\", \"SC\", Flags = DataPropertyFlag.OuterFlag)] public Lob Scan { get; set; } Hint: Use Xml to map Xml fields [Property(\"source\", \"SR\", Flags = DataPropertyFlag.OuterFlag)] public Xml Source { get; set; } Hint: Use Link<TVal, TSrc> to map data link [Property(\"name\", \"S\"), DictionaryProperty(\"Name\", \"DocState\"), DictionaryProperty(\"Code\", \"DocStateCode\")] public Link<string, DocState> DocState { get; set; } Hint: Use ColumnAttribute to map data without declaring property (for example to declare Id ) [DataObject(\"S\"), DataTable(\"T_DOC_STATE\", \"S\"), Column(\"DocStateId\", \"doc_state_id\", typeof(long?), \"S\", Flags = DataPropertyFlag.Id)] Hint: Use PropertyExpressionAttribute or ColumnExpressionAttribute to use SQL expression or subquery as property (or mapped column) data source [Property(\"doc_amount\"), PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] public double? DocAmount { get { return this.GetProperty(() => DocAmount); } } Hint: Use PropertyDefaultAttribute or ColumnDefaultAttribute to set default value generation rule to property (or mapped column) [Property(\"doc_date\", \"D\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DocDate { get; set; } Hint: Use ReferenceAttribute to use inner view property in parent data object [PropertyLink(\"HistoryDate\", \"H\")] public DateTime? DocLastChange { get { return this.GetProperty(() => DocLastChange); } } Hint: Declare readonly fields as [PropertyLink(\"HistoryDate\", \"H\")] public DateTime? DocLastChange { get { return this.GetProperty(() => DocLastChange); } } Hint: Declare custom logic functions (see IDataLogic<T> and Execute<T>(ICollection<T>, String, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) ) as //generate unique action key and use it for mark it realization in IDataLogic<Invoice> [CustomAction(\"{ab12d6f0-69d0-4997-bb0b-5f5f7c0581d1}\")] public static CustomLogic<Invoice> TestCustomLogic; //using obj.Execute(() => Invoice.TestCustomLogic); Hint: Variables can be used as temporary values storage // store obj.GetRepository().Variables.Add(\"SomeName\", \"SomeValue\"); // and somewhere you can get it var something = obj.GetRepository().Variables[\"SomeName\"]; Hint: HierarchyAttribute can be used to fill and maintain hierarchy tables automatically // Table T_TEST has parent_id field tree linked to test_id (T_TEST's pk) // Table L_TEST has two fields parent_id and child_id all linked to T_TEST.test_id // Table L_TEST contains all subtree relations inside T_TEST // For example: for T_TEST (test_id, parent_id): (1, null) : (2, 1) : (3, 2) // L_TEST will contain (parent_id, child_id): (1, 1) : (1, 2) : (1, 3) : (2, 2) : (2, 3) : (3, 3) [DataObject(\"T\"), DataTable(\"T_TEST\", \"T\"), Hierarchy(\"T\", \"L_TEST\", \"parent_id\", \"parent_id\", \"child_id\"), Column(\"TestId\", \"test_id\", typeof(long?), \"T\", Flags = DataPropertyFlag.Id)] Examples [DataObject(\"T\"), DataTable(\"T_DOC_TYPE\", \"T\"), Column(\"DocTypeId\", \"doc_type_id\", typeof(long?), \"T\", Flags = DataPropertyFlag.Id)] public class DocType : IDataObject { [Property(\"name\", \"T\")] public string Name { get; set; } [Property(\"code\", \"T\")] public string Code { get; set; } } Extension Methods DataObjectExtensions.Modify<T>(T, Action<T>[]) DataObjectExtensions.GetProperties<T>(T, IEnumerable<String>, DataVersion) DataObjectExtensions.GetProperties<T>(T, String[]) DataObjectExtensions.GetProperties<T>(T, DataVersion, String[]) DataObjectExtensions.IsCleared<T>(T, String) DataObjectExtensions.IsChanged<T>(T, String) DataObjectExtensions.IsChanged<T>(T, Expression<Func<T, Object>>[]) DataObjectExtensions.IsEmpty<T>(T, String) DataObjectExtensions.IsEmpty<T>(T, Expression<Func<T, Object>>) DataObjectExtensions.GetProperty<TRet>(IDataObject, String) DataObjectExtensions.GetContext(IDataObject) DataObjectExtensions.GetLayer(IDataObject) DataObjectExtensions.GetRepositoryAlias(IDataObject) DataObjectExtensions.IsAttached(IDataObject, Type) DataObjectExtensions.GetState<T>(T) DataObjectExtensions.CheckState<T>(T, DataObjectState) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also IRepository <T> IDataLogic <T> CheckState<T> (T, DataObjectState ) SetDeleted<T> (T, Boolean ) Execute<T> (T, Expression < Func < CustomLogic <T>>>, IDictionary < String , Action < Byte []>>, IDictionary < String , Func < Byte [], Byte []>>) Serialize<T> (T) Restore<T> (T, SerializedData ) GetProperties<T> (T, DataVersion , String []) GetProperty<T, TRet> (T, Expression < Func <T, TRet>>, DataVersion ) XData.DataObjectExtensions.GetProperty``1(``0,System.String,XData.DataVersion) GetRepository<T> (T) IsChanged<T> (T, Expression < Func <T, Object >>[]) IsEmpty<T> (T, Expression < Func <T, Object >>) IsCleared<T> (T, String ) SetCurrent<T> (T) Submit<T> (T, DataSubmitFlag ) Lock<T> (T)"
  },
  "api/XData.IDataLogic-1.html": {
    "href": "api/XData.IDataLogic-1.html",
    "title": "Interface IDataLogic<T> | XData website",
    "keywords": "Interface IDataLogic<T> Data logic interface Namespace : XData Assembly : XData.docfx.dll Syntax public interface IDataLogic<T> where T : class, IDataObject Type Parameters Name Description T Remarks Marking interface for classes contains data aware logic of mapped objects Used to divide data aware logic from mapping Hint: Separating mapping and logic to different assemblies allows to run data aware logic on XData application server Hint: Application can use XData application server or direct connect to database depending of configuration (see IConfiguration ) Examples public abstract class InvoiceLogic : IDataLogic<Invoice> { [Action(DataActionType.BeforeClear)] public readonly static RepositoryTrigger<Invoice> ClearHistoryBatch = ((IRepository<Invoice> invoiceRepository, ref DataTriggerFlag flag) => DoSomething()); [CustomAction(\"{ab12d6f0-69d0-4997-bb0b-5f5f7c0581d1}\")] public static readonly CustomLogic<Invoice> TestCustomLogic = (objects => { return DoSomethingElse(); }); } Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also IDataObject InitRepository <T> InvalidateRepository <T> InitObject <T> InvalidateObject <T> Trigger <T> CustomLogic <T>"
  },
  "api/XData.IDataEngine.Configuration.html": {
    "href": "api/XData.IDataEngine.Configuration.html",
    "title": "Property Configuration | XData website",
    "keywords": "Property Configuration | Improve this Doc View Source Configuration XData configuration object Declaration IConfiguration Configuration { get; } Property Value Type Description IConfiguration See Also IConfiguration"
  },
  "api/XData.IDataEngine.NewDataScope.html": {
    "href": "api/XData.IDataEngine.NewDataScope.html",
    "title": "Method NewDataScope | XData website",
    "keywords": "Method NewDataScope | Improve this Doc View Source NewDataScope(String, ISecuritySession) Create new data scope Declaration IDataScope NewDataScope(string defaultContext = null, ISecuritySession security = null) Parameters Type Name Description String defaultContext Default context of scope ISecuritySession security Security session Returns Type Description IDataScope Data scope See Also IDataScope"
  },
  "api/XData.IDataEngine.GetDataScope.html": {
    "href": "api/XData.IDataEngine.GetDataScope.html",
    "title": "Method GetDataScope | XData website",
    "keywords": "Method GetDataScope | Improve this Doc View Source GetDataScope(Guid, String, ISecuritySession, Boolean) Request existing or create data scope Declaration IDataScope GetDataScope(Guid layer, string defaultContext = null, ISecuritySession security = null, bool throwIfNotFound = false) Parameters Type Name Description Guid layer Data scope layer String defaultContext Default context of scope (if nof found) ISecuritySession security Security session Boolean throwIfNotFound Throw an exception when data scope is not found Returns Type Description IDataScope Data scope See Also IDataScope"
  },
  "api/XData.IDataEngine.ResetDictionaryCache.html": {
    "href": "api/XData.IDataEngine.ResetDictionaryCache.html",
    "title": "Method ResetDictionaryCache | XData website",
    "keywords": "Method ResetDictionaryCache | Improve this Doc View Source ResetDictionaryCache<T>() Reset single dictionary cache Declaration void ResetDictionaryCache<T>() where T : class, IDataObject Type Parameters Name Description T Dictionary type See Also GetDictionaryValue<T>(Expression<Func<T, Boolean>>, String, ISecuritySession, Variable[])"
  },
  "api/XData.IDataEngine.ResetAllDictionaries.html": {
    "href": "api/XData.IDataEngine.ResetAllDictionaries.html",
    "title": "Method ResetAllDictionaries | XData website",
    "keywords": "Method ResetAllDictionaries | Improve this Doc View Source ResetAllDictionaries() Reset all dictionaries cache Declaration void ResetAllDictionaries() See Also GetDictionaryValue<T>(Expression<Func<T, Boolean>>, String, ISecuritySession, Variable[])"
  },
  "api/XData.IDataEngine.html": {
    "href": "api/XData.IDataEngine.html",
    "title": "Interface IDataEngine | XData website",
    "keywords": "Interface IDataEngine XData engine interface Namespace : XData Assembly : XData.docfx.dll Syntax public interface IDataEngine Properties Name Description Configuration XData configuration object Methods Name Description GetDataScope(Guid, String, ISecuritySession, Boolean) Request existing or create data scope NewDataScope(String, ISecuritySession) Create new data scope ResetAllDictionaries() Reset all dictionaries cache ResetDictionaryCache<T>() Reset single dictionary cache Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.GetXmlAttachedHandler.html": {
    "href": "api/XData.GetXmlAttachedHandler.html",
    "title": "Delegate GetXmlAttachedHandler | XData website",
    "keywords": "Delegate GetXmlAttachedHandler Get Xml attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool GetXmlAttachedHandler(string property, IDataObject obj, out string xml); Parameters Type Name Description String property Xml property name IDataObject obj Data object String xml Xml string Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.GetLobSizeAttachedHandler.html": {
    "href": "api/XData.GetLobSizeAttachedHandler.html",
    "title": "Delegate GetLobSizeAttachedHandler | XData website",
    "keywords": "Delegate GetLobSizeAttachedHandler Get Lob size attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool GetLobSizeAttachedHandler(string property, IDataObject obj, out long size); Parameters Type Name Description String property Lob property name IDataObject obj Data object Int64 size Lob body size Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.GetLobAttachedHandler.html": {
    "href": "api/XData.GetLobAttachedHandler.html",
    "title": "Delegate GetLobAttachedHandler | XData website",
    "keywords": "Delegate GetLobAttachedHandler Get Lob attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool GetLobAttachedHandler(string property, IDataObject obj, out byte[] body); Parameters Type Name Description String property Lob property name IDataObject obj Data object Byte [] body Lob body Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.FilterType.html": {
    "href": "api/XData.FilterType.html",
    "title": "Enum FilterType | XData website",
    "keywords": "Enum FilterType Filter type Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum FilterType Fields Name Description Constant Constant value filter Dictionary Dictionary link Expression Expression filter InnerViewLink Inner view link Link Inner link Range Range filter Runtime Runtime value filter Subquery Subquery filter SubqueryLink Subquery link See Also Link SubqueryLink InnerViewLink Dictionary Constant Subquery Expression Range Runtime Extension Methods SerializationExtensions.ToXml<FilterType>() CollectionsExtensions.SetValue<FilterType, T>(T) CollectionsExtensions.AsEnum<FilterType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<FilterType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<FilterType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.FilterOperation.html": {
    "href": "api/XData.FilterOperation.html",
    "title": "Enum FilterOperation | XData website",
    "keywords": "Enum FilterOperation Filter operation Namespace : XData Assembly : XData.docfx.dll Syntax public enum FilterOperation Fields Name Description Contains Contains (contains) fulltext filter operation Equal Equal (=) filter operation Exists Exists (exists (...)) filter operation GreaterThan Greater Then (>) filter operation GreaterThanOrEqual Greater Then or Equal (>=) filter operation In In sequence (in (...)) filter operation LessThan Less Then (<) filter operation LessThanOrEqual Less Then or Equal (<=) filter operation Like Like (like) filter operation NotContains Not Contains (not contains) fulltext filter operation NotEqual Not Equal (!=) filter operation NotExists Not Exists (not exists (...)) filter operation NotIn Not In sequence (not in (...)) filter operation NotLike Not Like (not like) filter operation OuterJoin Outer join (outer join) filter operation See Also Operation Operation Equal NotEqual LessThan GreaterThan LessThanOrEqual GreaterThanOrEqual In NotIn Exists NotExists Like NotLike OuterJoin Contains NotContains Extension Methods SerializationExtensions.ToXml<FilterOperation>() CollectionsExtensions.SetValue<FilterOperation, T>(T) CollectionsExtensions.AsEnum<FilterOperation>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<FilterOperation, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<FilterOperation, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.FilterNullable.html": {
    "href": "api/XData.FilterNullable.html",
    "title": "Enum FilterNullable | XData website",
    "keywords": "Enum FilterNullable Filter null value assignment mode Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum FilterNullable Fields Name Description Nullable Null value omit the filter (filter condition will not equated) NullsAllowed Null value is compared separately NullsCompared Null values is compared only NullsNotAllowed Null value is set filter condition to false See Also Nullable Nullable Nullable NullsAllowed NullsNotAllowed Extension Methods SerializationExtensions.ToXml<FilterNullable>() CollectionsExtensions.SetValue<FilterNullable, T>(T) CollectionsExtensions.AsEnum<FilterNullable>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<FilterNullable, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<FilterNullable, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.FilterConstantType.html": {
    "href": "api/XData.FilterConstantType.html",
    "title": "Enum FilterConstantType | XData website",
    "keywords": "Enum FilterConstantType ConstantFilter value mode Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum FilterConstantType Fields Name Description Const Constant value CurrentDate Current date value CurrentDateTime Current date and time value CurrentDateTimeUtc Current date and time UTC value Variable Repository variable value by name See Also ConstantType Const Variable CurrentDate CurrentDateTime CurrentDateTimeUtc Extension Methods SerializationExtensions.ToXml<FilterConstantType>() CollectionsExtensions.SetValue<FilterConstantType, T>(T) CollectionsExtensions.AsEnum<FilterConstantType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<FilterConstantType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<FilterConstantType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.html": {
    "href": "api/XData.Extensions.html",
    "title": "Namespace XData.Extensions | XData website",
    "keywords": "Namespace XData.Extensions Classes CollectionsExtensions Collections extension functions DataObjectQueryableExtensions XData LINQ query extensions ExpressionExtensions Expression extensions GeneralPropertyComparer<T> IndexAttribute Attribute to compare objects by property value Indexer<T> Indexed objects comparer Hint: Objects can be indexed by annotation attribute IndexAttribute JoinedEnumerable Joined enumerable extensions class JoinedEnumerable<T> Helper class to use outer joins TypeComparer Type equality comparer TypeExtensions Type extensions TypeExtensions.DummyType"
  },
  "api/XData.Extensions.TypeExtensions.TryConvert.html": {
    "href": "api/XData.Extensions.TypeExtensions.TryConvert.html",
    "title": "Method TryConvert | XData website",
    "keywords": "Method TryConvert | Improve this Doc View Source TryConvert<T, TResult>(T, Func<T, TResult>) Try to convert value Declaration public static TResult TryConvert<T, TResult>(this T source, Func<T, TResult> convert) where T : class Parameters Type Name Description T source Source value Func <T, TResult> convert Conversion logic Returns Type Description TResult Converted value or default of TResult Type Parameters Name Description T Source type TResult Result type | Improve this Doc View Source TryConvert<T, TResult>(T, Func<T, TResult>, TResult) Try to convert value Declaration public static TResult TryConvert<T, TResult>(this T source, Func<T, TResult> convert, TResult defaultValue) where T : class Parameters Type Name Description T source Source value Func <T, TResult> convert Conversion logic TResult defaultValue Default result value Returns Type Description TResult Converted value or default of TResult Type Parameters Name Description T Source type TResult Result type"
  },
  "api/XData.Extensions.TypeExtensions.ArrayCast.html": {
    "href": "api/XData.Extensions.TypeExtensions.ArrayCast.html",
    "title": "Method ArrayCast | XData website",
    "keywords": "Method ArrayCast | Improve this Doc View Source ArrayCast(Type, ICollection) Cast object array to specific type array Declaration public static object ArrayCast(this Type elementType, ICollection collection) Parameters Type Name Description Type elementType Type of result array elements ICollection collection Source collection Returns Type Description Object Typed array"
  },
  "api/XData.Extensions.TypeExtensions.NullWrap.html": {
    "href": "api/XData.Extensions.TypeExtensions.NullWrap.html",
    "title": "Method NullWrap | XData website",
    "keywords": "Method NullWrap | Improve this Doc View Source NullWrap<T>(T) Null value wrapper Declaration public static T NullWrap<T>(T source) where T : class, new() Parameters Type Name Description T source Source Returns Type Description T Source or empty object of source type Type Parameters Name Description T Source type | Improve this Doc View Source NullWrap<T>(T[]) Null value wrapper Declaration public static T[] NullWrap<T>(T[] source) Parameters Type Name Description T[] source Source array Returns Type Description T[] Source or empty array Type Parameters Name Description T Array element type"
  },
  "api/XData.Extensions.TypeExtensions.InvokeMethod.html": {
    "href": "api/XData.Extensions.TypeExtensions.InvokeMethod.html",
    "title": "Method InvokeMethod | XData website",
    "keywords": "Method InvokeMethod | Improve this Doc View Source InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) Invoke generic method wrapper Declaration public static TRet InvokeMethod<TRet>(this object obj, Type[] types, Expression<Func<TRet>> expr, BindingFlags bindingFlags = BindingFlags.Default) Parameters Type Name Description Object obj Object to invoke method (set null to call static method) Type [] types Generic arguments types array Expression < Func <TRet>> expr Call expression (set generic arguments to any valid types) BindingFlags bindingFlags Binding flags Returns Type Description TRet Call return value Type Parameters Name Description TRet Return value type Exceptions Type Condition XDataRuntimeException | Improve this Doc View Source InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) Invoke generic method wrapper Declaration public static void InvokeMethod(this object obj, Type[] types, Expression<Action> expr, BindingFlags bindingFlags = BindingFlags.Default) Parameters Type Name Description Object obj Object to invoke method (set null to call static method) Type [] types Generic arguments types array Expression < Action > expr Call expression (set generic arguments to any valid types) BindingFlags bindingFlags Binding flags Exceptions Type Condition XDataRuntimeException | Improve this Doc View Source InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) Invoke method with replacing base object type wrapper Declaration public static TRet InvokeMethod<TRet>(this object obj, Expression<Func<TRet>> expr, BindingFlags bindingFlags = BindingFlags.Default) Parameters Type Name Description Object obj Object to invoke method with Expression < Func <TRet>> expr Call expression BindingFlags bindingFlags Binding flags Returns Type Description TRet Call return value Type Parameters Name Description TRet Return value type Exceptions Type Condition XDataRuntimeException | Improve this Doc View Source InvokeMethod(Object, Expression<Action>, BindingFlags) Invoke method with replacing base object type wrapper Declaration public static void InvokeMethod(this object obj, Expression<Action> expr, BindingFlags bindingFlags = BindingFlags.Default) Parameters Type Name Description Object obj Object to invoke method with Expression < Action > expr Call expression BindingFlags bindingFlags Binding flags Exceptions Type Condition XDataRuntimeException"
  },
  "api/XData.Extensions.TypeExtensions.Implements.html": {
    "href": "api/XData.Extensions.TypeExtensions.Implements.html",
    "title": "Method Implements | XData website",
    "keywords": "Method Implements | Improve this Doc View Source Implements<T>(Type, T) Test type implements an interface Declaration public static bool Implements<T>(this Type type, T interfaceType) where T : Type Parameters Type Name Description Type type Type T interfaceType Interface Returns Type Description Boolean Type is implements an interface Type Parameters Name Description T Interface type"
  },
  "api/XData.Extensions.TypeExtensions.ConvertTo.html": {
    "href": "api/XData.Extensions.TypeExtensions.ConvertTo.html",
    "title": "Method ConvertTo | XData website",
    "keywords": "Method ConvertTo | Improve this Doc View Source ConvertTo<T>(Enum) Convert enumeration value to another enumeration by hash code Declaration public static T ConvertTo<T>(this Enum source) Parameters Type Name Description Enum source Source enumeration value Returns Type Description T Target enumeration value Type Parameters Name Description T Target enumeration type"
  },
  "api/XData.Extensions.TypeExtensions.EqualValue.html": {
    "href": "api/XData.Extensions.TypeExtensions.EqualValue.html",
    "title": "Method EqualValue | XData website",
    "keywords": "Method EqualValue | Improve this Doc View Source EqualValue(Enum, Enum) Compare Enumeration values by hash codes Declaration public static bool EqualValue(this Enum source, Enum other) Parameters Type Name Description Enum source Source enumeration value Enum other Other enumeration value Returns Type Description Boolean Values are equal"
  },
  "api/XData.Extensions.TypeExtensions.GetEnumValue.html": {
    "href": "api/XData.Extensions.TypeExtensions.GetEnumValue.html",
    "title": "Method GetEnumValue | XData website",
    "keywords": "Method GetEnumValue | Improve this Doc View Source GetEnumValue(Type, Int64) Returns enum id and value pair for specified id Declaration public static KeyValuePair<long, string>? GetEnumValue(this Type enumType, long id) Parameters Type Name Description Type enumType Enum type Int64 id Enum key Returns Type Description Nullable < KeyValuePair < Int64 , String >> Enum id and value pair"
  },
  "api/XData.Extensions.TypeExtensions.GetLocalizedEnumValue.html": {
    "href": "api/XData.Extensions.TypeExtensions.GetLocalizedEnumValue.html",
    "title": "Method GetLocalizedEnumValue | XData website",
    "keywords": "Method GetLocalizedEnumValue | Improve this Doc View Source GetLocalizedEnumValue(Type, Int64) Returns enum id and localized value pair for specified id Declaration public static KeyValuePair<long, string>? GetLocalizedEnumValue(this Type enumType, long id) Parameters Type Name Description Type enumType Enum type Int64 id Enum key Returns Type Description Nullable < KeyValuePair < Int64 , String >> Enum id and localized value pair"
  },
  "api/XData.Extensions.TypeExtensions.GetLocalizedEnumKeyValuePairs.html": {
    "href": "api/XData.Extensions.TypeExtensions.GetLocalizedEnumKeyValuePairs.html",
    "title": "Method GetLocalizedEnumKeyValuePairs | XData website",
    "keywords": "Method GetLocalizedEnumKeyValuePairs | Improve this Doc View Source GetLocalizedEnumKeyValuePairs(Type) Returns id and name pairs for all enum values Declaration public static IEnumerable<KeyValuePair<long, string>> GetLocalizedEnumKeyValuePairs(this Type enumType) Parameters Type Name Description Type enumType Enum type Returns Type Description IEnumerable < KeyValuePair < Int64 , String >> Sequence of id and name pairs for all enum values"
  },
  "api/XData.Extensions.TypeExtensions.GetEnumKeyValuePairs.html": {
    "href": "api/XData.Extensions.TypeExtensions.GetEnumKeyValuePairs.html",
    "title": "Method GetEnumKeyValuePairs | XData website",
    "keywords": "Method GetEnumKeyValuePairs | Improve this Doc View Source GetEnumKeyValuePairs(Type) Declaration public static IEnumerable<KeyValuePair<long, string>> GetEnumKeyValuePairs(this Type enumType) Parameters Type Name Description Type enumType Returns Type Description IEnumerable < KeyValuePair < Int64 , String >>"
  },
  "api/XData.Extensions.TypeExtensions.ParseEnum.html": {
    "href": "api/XData.Extensions.TypeExtensions.ParseEnum.html",
    "title": "Method ParseEnum | XData website",
    "keywords": "Method ParseEnum | Improve this Doc View Source ParseEnum(Type, String) Returns id for specified enum type and string value Declaration public static long? ParseEnum(this Type enumType, string value) Parameters Type Name Description Type enumType Enum type String value String value of enum Returns Type Description Nullable < Int64 > Enum id"
  },
  "api/XData.Extensions.TypeExtensions.ParseEnumRange.html": {
    "href": "api/XData.Extensions.TypeExtensions.ParseEnumRange.html",
    "title": "Method ParseEnumRange | XData website",
    "keywords": "Method ParseEnumRange | Improve this Doc View Source ParseEnumRange(Type, ICollection<Object>) Parse enum values range Declaration public static object[] ParseEnumRange(this Type enumType, ICollection<object> values) Parameters Type Name Description Type enumType Enum type ICollection < Object > values Enum values range Returns Type Description Object [] Enum id array See Also ParseEnum(Type, String)"
  },
  "api/XData.Extensions.TypeExtensions.ParseType.html": {
    "href": "api/XData.Extensions.TypeExtensions.ParseType.html",
    "title": "Method ParseType | XData website",
    "keywords": "Method ParseType | Improve this Doc View Source ParseType(String) Parse type full name Declaration public static Type ParseType(this string typeFullName) Parameters Type Name Description String typeFullName Returns Type Description Type"
  },
  "api/XData.Extensions.TypeExtensions.GetDefault.html": {
    "href": "api/XData.Extensions.TypeExtensions.GetDefault.html",
    "title": "Method GetDefault | XData website",
    "keywords": "Method GetDefault | Improve this Doc View Source GetDefault<TType>() Get type default value Declaration public static object GetDefault<TType>() Returns Type Description Object Default value Type Parameters Name Description TType Type"
  },
  "api/XData.Extensions.TypeExtensions.IsBasedOn.html": {
    "href": "api/XData.Extensions.TypeExtensions.IsBasedOn.html",
    "title": "Method IsBasedOn | XData website",
    "keywords": "Method IsBasedOn | Improve this Doc View Source IsBasedOn<TType>(Type) Check generic base type Declaration public static bool IsBasedOn<TType>(this Type type) Parameters Type Name Description Type type Generic type Returns Type Description Boolean Generic type is based on TType Type Parameters Name Description TType Base type to check"
  },
  "api/XData.Extensions.TypeExtensions.IsNullable.html": {
    "href": "api/XData.Extensions.TypeExtensions.IsNullable.html",
    "title": "Method IsNullable | XData website",
    "keywords": "Method IsNullable | Improve this Doc View Source IsNullable(Type) Check nullable type Declaration public static bool IsNullable(this Type type) Parameters Type Name Description Type type Type to check Returns Type Description Boolean Type is nullable"
  },
  "api/XData.Extensions.TypeExtensions.IsBinary.html": {
    "href": "api/XData.Extensions.TypeExtensions.IsBinary.html",
    "title": "Method IsBinary | XData website",
    "keywords": "Method IsBinary | Improve this Doc View Source IsBinary(Type) Check Lob type Declaration public static bool IsBinary(this Type type) Parameters Type Name Description Type type Type to check Returns Type Description Boolean Type is binary"
  },
  "api/XData.Extensions.TypeExtensions.IsXml.html": {
    "href": "api/XData.Extensions.TypeExtensions.IsXml.html",
    "title": "Method IsXml | XData website",
    "keywords": "Method IsXml | Improve this Doc View Source IsXml(Type) Check Xml type Declaration public static bool IsXml(this Type type) Parameters Type Name Description Type type Type to check Returns Type Description Boolean Type is binary"
  },
  "api/XData.Extensions.TypeExtensions.IsEnum.html": {
    "href": "api/XData.Extensions.TypeExtensions.IsEnum.html",
    "title": "Method IsEnum | XData website",
    "keywords": "Method IsEnum | Improve this Doc View Source IsEnum(Type) Check Enum type Declaration public static bool IsEnum(this Type type) Parameters Type Name Description Type type Type to check Returns Type Description Boolean Type is binary"
  },
  "api/XData.Extensions.TypeExtensions.GetRealType.html": {
    "href": "api/XData.Extensions.TypeExtensions.GetRealType.html",
    "title": "Method GetRealType | XData website",
    "keywords": "Method GetRealType | Improve this Doc View Source GetRealType(Type) Get Generic base type Declaration public static Type GetRealType(this Type type) Parameters Type Name Description Type type Type Returns Type Description Type Base type"
  },
  "api/XData.Extensions.TypeExtensions.GetGenericMethod.html": {
    "href": "api/XData.Extensions.TypeExtensions.GetGenericMethod.html",
    "title": "Method GetGenericMethod | XData website",
    "keywords": "Method GetGenericMethod | Improve this Doc View Source GetGenericMethod(Type, String, IEnumerable<Type>) Returns generic method with typed arguments Declaration public static MethodInfo GetGenericMethod(this Type type, string name, IEnumerable<Type> parameterTypes) Parameters Type Name Description Type type Method type String name Method name IEnumerable < Type > parameterTypes Parameter types Returns Type Description MethodInfo Reflection method info Exceptions Type Condition XDataRuntimeException Method name can not be null or empty XDataRuntimeException Method parameter types can not be null"
  },
  "api/XData.Extensions.TypeExtensions.html": {
    "href": "api/XData.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | XData website",
    "keywords": "Class TypeExtensions Type extensions Inheritance Object TypeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public static class TypeExtensions Methods Name Description ArrayCast(Type, ICollection) Cast object array to specific type array ConvertTo<T>(Enum) Convert enumeration value to another enumeration by hash code EqualValue(Enum, Enum) Compare Enumeration values by hash codes GetDefault<TType>() Get type default value GetEnumKeyValuePairs(Type) GetEnumValue(Type, Int64) Returns enum id and value pair for specified id GetGenericMethod(Type, String, IEnumerable<Type>) Returns generic method with typed arguments GetLocalizedEnumKeyValuePairs(Type) Returns id and name pairs for all enum values GetLocalizedEnumValue(Type, Int64) Returns enum id and localized value pair for specified id GetRealType(Type) Get Generic base type Implements<T>(Type, T) Test type implements an interface InvokeMethod(Object, Expression<Action>, BindingFlags) Invoke method with replacing base object type wrapper InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) Invoke generic method wrapper InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) Invoke method with replacing base object type wrapper InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) Invoke generic method wrapper IsBasedOn<TType>(Type) Check generic base type IsBinary(Type) Check Lob type IsEnum(Type) Check Enum type IsNullable(Type) Check nullable type IsXml(Type) Check Xml type NullWrap<T>(T) Null value wrapper NullWrap<T>(T[]) Null value wrapper ParseEnum(Type, String) Returns id for specified enum type and string value ParseEnumRange(Type, ICollection<Object>) Parse enum values range ParseType(String) Parse type full name TryConvert<T, TResult>(T, Func<T, TResult>) Try to convert value TryConvert<T, TResult>(T, Func<T, TResult>, TResult) Try to convert value"
  },
  "api/XData.Extensions.TypeExtensions.DummyType.html": {
    "href": "api/XData.Extensions.TypeExtensions.DummyType.html",
    "title": "Class TypeExtensions.DummyType | XData website",
    "keywords": "Class TypeExtensions.DummyType Inheritance Object TypeExtensions.DummyType Implements IDataObject ISqlObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public sealed class DummyType : IDataObject, ISqlObject Extension Methods DataObjectExtensions.Modify<T>(T, Action<T>[]) DataObjectExtensions.GetProperties<T>(T, IEnumerable<String>, DataVersion) DataObjectExtensions.GetProperties<T>(T, String[]) DataObjectExtensions.Refresh<T>(T) DataObjectExtensions.Execute<T>(T, String, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) DataObjectExtensions.Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) DataObjectExtensions.PostData<T>(T, String, Func<Byte[]>) DataObjectExtensions.Callback<T>(T, String, ref Byte[]) DataObjectExtensions.GetProperties<T>(T, DataVersion, String[]) DataObjectExtensions.IsCleared<T>(T, String) DataObjectExtensions.IsChanged<T>(T, String) DataObjectExtensions.IsChanged<T>(T, Expression<Func<T, Object>>[]) DataObjectExtensions.IsEmpty<T>(T, String) DataObjectExtensions.IsEmpty<T>(T, Expression<Func<T, Object>>) DataObjectExtensions.Submit<T>(T, out T, DataSubmitFlag) DataObjectExtensions.Submit<T>(T, Func<JsonSettings<T>, JsonSettings<T>>, out T, DataSubmitFlag) DataObjectExtensions.Submit<T>(T, DataSubmitFlag) DataObjectExtensions.Lock<T>(T) DataObjectExtensions.SetCurrent<T>(T) DataObjectExtensions.GetProperty<TRet>(IDataObject, String) DataObjectExtensions.GetContext(IDataObject) DataObjectExtensions.GetLayer(IDataObject) DataObjectExtensions.GetRepositoryAlias(IDataObject) DataObjectExtensions.GetProperty<T, TRet>(T, Expression<Func<T, TRet>>) DataObjectExtensions.GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) DataObjectExtensions.AssignProperty<T, TValue>(T, String, TValue) DataObjectExtensions.Copy<T>(T, T, String[]) DataObjectExtensions.Copy<T>(T, T, CopyFlag, String[]) DataObjectExtensions.LoadLob<T>(T, Expression<Func<T, Object>>[]) DataObjectExtensions.LoadLob<T>(T) DataObjectExtensions.LoadLob<T>(T, String[]) DataObjectExtensions.WithJsonSettings<T>(T, Func<JsonSettings<T>, JsonSettings<T>>) DataObjectExtensions.GetParameter<T, TRet>(T, String) DataObjectExtensions.GetParameter<T, TRet>(T, Expression<Func<T, TRet>>) DataObjectExtensions.GetResultSet<T, TRes>(T, Expression<Func<T, IEnumerable<TRes>>>) DataObjectExtensions.GetRepository<T>(T) DataObjectExtensions.SetAttachedHandlers<T>(T, AttachedHandler<T>[]) DataObjectExtensions.IsAttached(IDataObject, Type) DataObjectExtensions.GetState<T>(T) DataObjectExtensions.CheckState<T>(T, DataObjectState) DataObjectExtensions.SetDeleted<T>(T, Boolean) SerializationExtensions.ToXml<T>(T) SerializationExtensions.Serialize<T>(T) SerializationExtensions.Restore<T>(T, SerializedData) AsyncExtensions.SubmitAsync<T>(T, DataSubmitFlag) AsyncExtensions.SubmitAndReturnAsync<T>(T, DataSubmitFlag) AsyncExtensions.SubmitAsync<T>(T, CancellationToken, DataSubmitFlag) AsyncExtensions.SubmitAndReturnAsync<T>(T, CancellationToken, DataSubmitFlag) AsyncExtensions.SubmitAndReturnAsync<T>(T, Func<JsonSettings<T>, JsonSettings<T>>, DataSubmitFlag) AsyncExtensions.SubmitAndReturnAsync<T>(T, CancellationToken, Func<JsonSettings<T>, JsonSettings<T>>, DataSubmitFlag) AsyncExtensions.LoadLobAsync<T>(T) AsyncExtensions.LoadLobAsync<T>(T, CancellationToken) AsyncExtensions.LoadLobAsync<T>(T, String[]) AsyncExtensions.LoadLobAsync<T>(T, CancellationToken, String[]) AsyncExtensions.LoadLobAsync<T>(T, Expression<Func<T, Object>>[]) AsyncExtensions.LoadLobAsync<T>(T, CancellationToken, Expression<Func<T, Object>>[]) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.TypeComparer.Instance.html": {
    "href": "api/XData.Extensions.TypeComparer.Instance.html",
    "title": "Property Instance | XData website",
    "keywords": "Property Instance | Improve this Doc View Source Instance Type equality comparer instance Declaration public static TypeComparer Instance { get; } Property Value Type Description TypeComparer"
  },
  "api/XData.Extensions.TypeComparer.Equals.html": {
    "href": "api/XData.Extensions.TypeComparer.Equals.html",
    "title": "Method Equals | XData website",
    "keywords": "Method Equals | Improve this Doc View Source Equals(Type, Type) Determines whether the specified types are equal. Declaration public bool Equals(Type x, Type y) Parameters Type Name Description Type x The first type to compare. Type y The second type to compare. Returns Type Description Boolean true if the specified types are equal; otherwise, false. Implements IEqualityComparer<T>.Equals(T, T)"
  },
  "api/XData.Extensions.TypeComparer.GetHashCode.html": {
    "href": "api/XData.Extensions.TypeComparer.GetHashCode.html",
    "title": "Method GetHashCode | XData website",
    "keywords": "Method GetHashCode | Improve this Doc View Source GetHashCode(Type) Returns a hash code for the specified type. Declaration public int GetHashCode(Type obj) Parameters Type Name Description Type obj The type for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified type. Implements IEqualityComparer<T>.GetHashCode(T)"
  },
  "api/XData.Extensions.TypeComparer.html": {
    "href": "api/XData.Extensions.TypeComparer.html",
    "title": "Class TypeComparer | XData website",
    "keywords": "Class TypeComparer Type equality comparer Inheritance Object TypeComparer Implements IEqualityComparer < Type > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public class TypeComparer : IEqualityComparer<Type> Properties Name Description Instance Type equality comparer instance Methods Name Description Equals(Type, Type) Determines whether the specified types are equal. GetHashCode(Type) Returns a hash code for the specified type. Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.JoinedEnumerable.Inner.html": {
    "href": "api/XData.Extensions.JoinedEnumerable.Inner.html",
    "title": "Method Inner | XData website",
    "keywords": "Method Inner | Improve this Doc View Source Inner<TElement>(IEnumerable<TElement>) Mark enumerable as inner Declaration public static JoinedEnumerable<TElement> Inner<TElement>(this IEnumerable<TElement> source) Parameters Type Name Description IEnumerable <TElement> source Source sequence Returns Type Description JoinedEnumerable <TElement> Joined inner enumerable Type Parameters Name Description TElement Element type See Also Outer<TElement> ( IEnumerable <TElement>) Join<TOuter, TInner, TKey, TResult> ( JoinedEnumerable <TOuter>, IEnumerable <TInner>, Func <TOuter, TKey>, Func <TInner, TKey>, Func <TOuter, TInner, TResult>, IEqualityComparer <TKey>)"
  },
  "api/XData.Extensions.JoinedEnumerable.Outer.html": {
    "href": "api/XData.Extensions.JoinedEnumerable.Outer.html",
    "title": "Method Outer | XData website",
    "keywords": "Method Outer | Improve this Doc View Source Outer<TElement>(IEnumerable<TElement>) Mark enumerable as outer Declaration public static JoinedEnumerable<TElement> Outer<TElement>(this IEnumerable<TElement> source) Parameters Type Name Description IEnumerable <TElement> source Source sequence Returns Type Description JoinedEnumerable <TElement> Joined inner enumerable Type Parameters Name Description TElement Element type See Also Inner<TElement> ( IEnumerable <TElement>) Join<TOuter, TInner, TKey, TResult> ( JoinedEnumerable <TOuter>, IEnumerable <TInner>, Func <TOuter, TKey>, Func <TInner, TKey>, Func <TOuter, TInner, TResult>, IEqualityComparer <TKey>)"
  },
  "api/XData.Extensions.JoinedEnumerable.Join.html": {
    "href": "api/XData.Extensions.JoinedEnumerable.Join.html",
    "title": "Method Join | XData website",
    "keywords": "Method Join | Improve this Doc View Source Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Join extension for Joined enumerable Declaration public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this JoinedEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer = null) Parameters Type Name Description JoinedEnumerable <TOuter> outer Outer enumerable IEnumerable <TInner> inner Inner enumerable Func <TOuter, TKey> outerKeySelector Outer key selector Func <TInner, TKey> innerKeySelector Inner key selector Func <TOuter, TInner, TResult> resultSelector Result selector IEqualityComparer <TKey> comparer Key type comparer Returns Type Description IEnumerable <TResult> Joined sequence Type Parameters Name Description TOuter Outer enumerable type TInner Inner enumerable type TKey Join key type TResult Result sequence type Exceptions Type Condition XDataRuntimeException Argument null See Also Inner<TElement> ( IEnumerable <TElement>) Outer<TElement> ( IEnumerable <TElement>) LeftOuterJoin<TOuter, TInner, TKey, TResult> ( IEnumerable <TOuter>, IEnumerable <TInner>, Func <TOuter, TKey>, Func <TInner, TKey>, Func <TOuter, TInner, TResult>, IEqualityComparer <TKey>) RightOuterJoin<TOuter, TInner, TKey, TResult> ( IEnumerable <TOuter>, IEnumerable <TInner>, Func <TOuter, TKey>, Func <TInner, TKey>, Func <TOuter, TInner, TResult>, IEqualityComparer <TKey>) FullOuterJoin<TOuter, TInner, TKey, TResult> ( IEnumerable <TOuter>, IEnumerable <TInner>, Func <TOuter, TKey>, Func <TInner, TKey>, Func <TOuter, TInner, TResult>, IEqualityComparer <TKey>)"
  },
  "api/XData.Extensions.JoinedEnumerable.LeftOuterJoin.html": {
    "href": "api/XData.Extensions.JoinedEnumerable.LeftOuterJoin.html",
    "title": "Method LeftOuterJoin | XData website",
    "keywords": "Method LeftOuterJoin | Improve this Doc View Source LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Left outer join extension Declaration public static IEnumerable<TResult> LeftOuterJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer = null) Parameters Type Name Description IEnumerable <TOuter> outer Outer enumerable IEnumerable <TInner> inner Inner enumerable Func <TOuter, TKey> outerKeySelector Outer key selector Func <TInner, TKey> innerKeySelector Inner key selector Func <TOuter, TInner, TResult> resultSelector Result selector IEqualityComparer <TKey> comparer Key type comparer Returns Type Description IEnumerable <TResult> Joined sequence Type Parameters Name Description TOuter Outer enumerable type TInner Inner enumerable type TKey Join key type TResult Result sequence type See Also Join<TOuter, TInner, TKey, TResult> ( JoinedEnumerable <TOuter>, IEnumerable <TInner>, Func <TOuter, TKey>, Func <TInner, TKey>, Func <TOuter, TInner, TResult>, IEqualityComparer <TKey>)"
  },
  "api/XData.Extensions.JoinedEnumerable.RightOuterJoin.html": {
    "href": "api/XData.Extensions.JoinedEnumerable.RightOuterJoin.html",
    "title": "Method RightOuterJoin | XData website",
    "keywords": "Method RightOuterJoin | Improve this Doc View Source RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Right outer join extension Declaration public static IEnumerable<TResult> RightOuterJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer = null) Parameters Type Name Description IEnumerable <TOuter> outer Outer enumerable IEnumerable <TInner> inner Inner enumerable Func <TOuter, TKey> outerKeySelector Outer key selector Func <TInner, TKey> innerKeySelector Inner key selector Func <TOuter, TInner, TResult> resultSelector Result selector IEqualityComparer <TKey> comparer Key type comparer Returns Type Description IEnumerable <TResult> Joined sequence Type Parameters Name Description TOuter Outer enumerable type TInner Inner enumerable type TKey Join key type TResult Result sequence type See Also Join<TOuter, TInner, TKey, TResult> ( JoinedEnumerable <TOuter>, IEnumerable <TInner>, Func <TOuter, TKey>, Func <TInner, TKey>, Func <TOuter, TInner, TResult>, IEqualityComparer <TKey>)"
  },
  "api/XData.Extensions.JoinedEnumerable.FullOuterJoin.html": {
    "href": "api/XData.Extensions.JoinedEnumerable.FullOuterJoin.html",
    "title": "Method FullOuterJoin | XData website",
    "keywords": "Method FullOuterJoin | Improve this Doc View Source FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Full outer join extension Declaration public static IEnumerable<TResult> FullOuterJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer = null) Parameters Type Name Description IEnumerable <TOuter> outer Outer enumerable IEnumerable <TInner> inner Inner enumerable Func <TOuter, TKey> outerKeySelector Outer key selector Func <TInner, TKey> innerKeySelector Inner key selector Func <TOuter, TInner, TResult> resultSelector Result selector IEqualityComparer <TKey> comparer Key type comparer Returns Type Description IEnumerable <TResult> Joined sequence Type Parameters Name Description TOuter Outer enumerable type TInner Inner enumerable type TKey Join key type TResult Result sequence type See Also Join<TOuter, TInner, TKey, TResult> ( JoinedEnumerable <TOuter>, IEnumerable <TInner>, Func <TOuter, TKey>, Func <TInner, TKey>, Func <TOuter, TInner, TResult>, IEqualityComparer <TKey>)"
  },
  "api/XData.Extensions.JoinedEnumerable.html": {
    "href": "api/XData.Extensions.JoinedEnumerable.html",
    "title": "Class JoinedEnumerable | XData website",
    "keywords": "Class JoinedEnumerable Joined enumerable extensions class Inheritance Object JoinedEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public static class JoinedEnumerable Methods Name Description FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Full outer join extension Inner<TElement>(IEnumerable<TElement>) Mark enumerable as inner Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Join extension for Joined enumerable LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Left outer join extension Outer<TElement>(IEnumerable<TElement>) Mark enumerable as outer RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Right outer join extension See Also JoinedEnumerable <T>"
  },
  "api/XData.Extensions.JoinedEnumerable-1.IsOuter.html": {
    "href": "api/XData.Extensions.JoinedEnumerable-1.IsOuter.html",
    "title": "Field IsOuter | XData website",
    "keywords": "Field IsOuter Outer joined enumerable Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public bool IsOuter Returns Type Description Boolean"
  },
  "api/XData.Extensions.JoinedEnumerable-1.-ctor.html": {
    "href": "api/XData.Extensions.JoinedEnumerable-1.-ctor.html",
    "title": "Constructor JoinedEnumerable | XData website",
    "keywords": "Constructor JoinedEnumerable | Improve this Doc View Source JoinedEnumerable(IEnumerable<T>) Joined enumerable constructor Declaration public JoinedEnumerable(IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source"
  },
  "api/XData.Extensions.JoinedEnumerable-1.System-Collections-Generic-IEnumerable-T--GetEnumerator.html": {
    "href": "api/XData.Extensions.JoinedEnumerable-1.System-Collections-Generic-IEnumerable-T--GetEnumerator.html",
    "title": "Method IEnumerable<T>.GetEnumerator | XData website",
    "keywords": "Method IEnumerable<T>.GetEnumerator | Improve this Doc View Source IEnumerable<T>.GetEnumerator() Declaration IEnumerator<T> IEnumerable<T>.GetEnumerator() Returns Type Description IEnumerator <T> Implements IEnumerable<T>.GetEnumerator()"
  },
  "api/XData.Extensions.JoinedEnumerable-1.System-Collections-IEnumerable-GetEnumerator.html": {
    "href": "api/XData.Extensions.JoinedEnumerable-1.System-Collections-IEnumerable-GetEnumerator.html",
    "title": "Method IEnumerable.GetEnumerator | XData website",
    "keywords": "Method IEnumerable.GetEnumerator | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEnumerable.GetEnumerator()"
  },
  "api/XData.Extensions.JoinedEnumerable-1.html": {
    "href": "api/XData.Extensions.JoinedEnumerable-1.html",
    "title": "Class JoinedEnumerable<T> | XData website",
    "keywords": "Class JoinedEnumerable<T> Helper class to use outer joins Inheritance Object JoinedEnumerable<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public class JoinedEnumerable<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Element type Constructors Name Description JoinedEnumerable(IEnumerable<T>) Joined enumerable constructor Fields Name Description IsOuter Outer joined enumerable Explicit Interface Implementations Name Description IEnumerable<T>.GetEnumerator() IEnumerable.GetEnumerator() Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Extensions.Indexer-1.GetInstance.html": {
    "href": "api/XData.Extensions.Indexer-1.GetInstance.html",
    "title": "Method GetInstance | XData website",
    "keywords": "Method GetInstance | Improve this Doc View Source GetInstance() Singleton comparer instance Declaration public static Indexer<T> GetInstance() Returns Type Description Indexer <T> Comparer instance"
  },
  "api/XData.Extensions.Indexer-1.-ctor.html": {
    "href": "api/XData.Extensions.Indexer-1.-ctor.html",
    "title": "Constructor Indexer | XData website",
    "keywords": "Constructor Indexer | Improve this Doc View Source Indexer(String) Indexer parametrized constructor Declaration public Indexer(string propertyName) Parameters Type Name Description String propertyName Comparable property name"
  },
  "api/XData.Extensions.Indexer-1.Compare.html": {
    "href": "api/XData.Extensions.Indexer-1.Compare.html",
    "title": "Method Compare | XData website",
    "keywords": "Method Compare | Improve this Doc View Source Compare(T, T) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public int Compare(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description Int32 A signed integer that indicates the relative values of x and y , as shown in the following table.Value Meaning Less than zero x is less than y .Zero x equals y .Greater than zero x is greater than y . Implements IComparer<T>.Compare(T, T) Exceptions Type Condition XDataRuntimeException IndexedAttribute not found"
  },
  "api/XData.Extensions.Indexer-1.Equals.html": {
    "href": "api/XData.Extensions.Indexer-1.Equals.html",
    "title": "Method Equals | XData website",
    "keywords": "Method Equals | Improve this Doc View Source Equals(T, T) Determines whether the specified objects are equal. Declaration public bool Equals(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description Boolean true if the specified objects are equal; otherwise, false. Implements IEqualityComparer<T>.Equals(T, T) Exceptions Type Condition XDataRuntimeException IndexedAttribute not found"
  },
  "api/XData.Extensions.Indexer-1.GetHashCode.html": {
    "href": "api/XData.Extensions.Indexer-1.GetHashCode.html",
    "title": "Method GetHashCode | XData website",
    "keywords": "Method GetHashCode | Improve this Doc View Source GetHashCode(T) Returns a hash code for the specified object. Declaration public int GetHashCode(T obj) Parameters Type Name Description T obj The Object for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified object. Implements IEqualityComparer<T>.GetHashCode(T) Exceptions Type Condition ArgumentNullException The type of obj is a reference type and obj is null. XDataRuntimeException IndexedAttribute not found"
  },
  "api/XData.Extensions.Indexer-1.html": {
    "href": "api/XData.Extensions.Indexer-1.html",
    "title": "Class Indexer<T> | XData website",
    "keywords": "Class Indexer<T> Indexed objects comparer Hint: Objects can be indexed by annotation attribute IndexAttribute Inheritance Object Indexer<T> Implements IComparer <T> IEqualityComparer <T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public class Indexer<T> : IIndexer, IComparer<T>, IEqualityComparer<T> Type Parameters Name Description T Indexed object type Constructors Name Description Indexer(String) Indexer parametrized constructor Methods Name Description Compare(T, T) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Equals(T, T) Determines whether the specified objects are equal. GetHashCode(T) Returns a hash code for the specified object. GetInstance() Singleton comparer instance Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.IndexAttribute.html": {
    "href": "api/XData.Extensions.IndexAttribute.html",
    "title": "Class IndexAttribute | XData website",
    "keywords": "Class IndexAttribute Attribute to compare objects by property value Inheritance Object Attribute IndexAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class IndexAttribute : Attribute Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.GeneralPropertyComparer-1.-ctor.html": {
    "href": "api/XData.Extensions.GeneralPropertyComparer-1.-ctor.html",
    "title": "Constructor GeneralPropertyComparer | XData website",
    "keywords": "Constructor GeneralPropertyComparer | Improve this Doc View Source GeneralPropertyComparer(Func<T, Object>[]) Declaration public GeneralPropertyComparer(Func<T, object>[] expr) Parameters Type Name Description Func <T, Object >[] expr"
  },
  "api/XData.Extensions.GeneralPropertyComparer-1.Equals.html": {
    "href": "api/XData.Extensions.GeneralPropertyComparer-1.Equals.html",
    "title": "Method Equals | XData website",
    "keywords": "Method Equals | Improve this Doc View Source Equals(T, T) Declaration public bool Equals(T left, T right) Parameters Type Name Description T left T right Returns Type Description Boolean Implements IEqualityComparer<T>.Equals(T, T)"
  },
  "api/XData.Extensions.GeneralPropertyComparer-1.GetHashCode.html": {
    "href": "api/XData.Extensions.GeneralPropertyComparer-1.GetHashCode.html",
    "title": "Method GetHashCode | XData website",
    "keywords": "Method GetHashCode | Improve this Doc View Source GetHashCode(T) Declaration public int GetHashCode(T obj) Parameters Type Name Description T obj Returns Type Description Int32 Implements IEqualityComparer<T>.GetHashCode(T)"
  },
  "api/XData.Extensions.GeneralPropertyComparer-1.html": {
    "href": "api/XData.Extensions.GeneralPropertyComparer-1.html",
    "title": "Class GeneralPropertyComparer<T> | XData website",
    "keywords": "Class GeneralPropertyComparer<T> Inheritance Object GeneralPropertyComparer<T> Implements IEqualityComparer <T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public class GeneralPropertyComparer<T> : IEqualityComparer<T> Type Parameters Name Description T Constructors Name Description GeneralPropertyComparer(Func<T, Object>[]) Methods Name Description Equals(T, T) GetHashCode(T) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.ExpressionExtensions.html": {
    "href": "api/XData.Extensions.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions | XData website",
    "keywords": "Class ExpressionExtensions Expression extensions Inheritance Object ExpressionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public static class ExpressionExtensions"
  },
  "api/XData.Extensions.DataObjectQueryableExtensions.Like.html": {
    "href": "api/XData.Extensions.DataObjectQueryableExtensions.Like.html",
    "title": "Method Like | XData website",
    "keywords": "Method Like | Improve this Doc View Source Like(String, String) Like Declaration public static bool Like(this string source, string pattern) Parameters Type Name Description String source Source property String pattern Like pattern Returns Type Description Boolean Like result Exceptions Type Condition XDataRuntimeException Like pattern can not be null or empty See Also Like(String, String, Char) | Improve this Doc View Source Like(String, String, Char) Like Declaration public static bool Like(this string source, string pattern, char escapeChar) Parameters Type Name Description String source Source property String pattern Like pattern Char escapeChar Escape character Returns Type Description Boolean Like result Exceptions Type Condition XDataRuntimeException Like pattern can not be null or empty See Also Like(String, String)"
  },
  "api/XData.Extensions.DataObjectQueryableExtensions.CompareToCurrentDate.html": {
    "href": "api/XData.Extensions.DataObjectQueryableExtensions.CompareToCurrentDate.html",
    "title": "Method CompareToCurrentDate | XData website",
    "keywords": "Method CompareToCurrentDate | Improve this Doc View Source CompareToCurrentDate(DateTime, FilterOperation) Compare value to current date Declaration public static bool CompareToCurrentDate(this DateTime source, FilterOperation operation) Parameters Type Name Description DateTime source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDateTime(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation) | Improve this Doc View Source CompareToCurrentDate(Nullable<DateTime>, FilterOperation) Compare value to current date Declaration public static bool CompareToCurrentDate(this DateTime? source, FilterOperation operation) Parameters Type Name Description Nullable < DateTime > source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTime(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation)"
  },
  "api/XData.Extensions.DataObjectQueryableExtensions.CompareToCurrentDateTime.html": {
    "href": "api/XData.Extensions.DataObjectQueryableExtensions.CompareToCurrentDateTime.html",
    "title": "Method CompareToCurrentDateTime | XData website",
    "keywords": "Method CompareToCurrentDateTime | Improve this Doc View Source CompareToCurrentDateTime(DateTime, FilterOperation) Compare value to current date and time Declaration public static bool CompareToCurrentDateTime(this DateTime source, FilterOperation operation) Parameters Type Name Description DateTime source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation) | Improve this Doc View Source CompareToCurrentDateTime(Nullable<DateTime>, FilterOperation) Compare value to current date and time Declaration public static bool CompareToCurrentDateTime(this DateTime? source, FilterOperation operation) Parameters Type Name Description Nullable < DateTime > source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTime(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation)"
  },
  "api/XData.Extensions.DataObjectQueryableExtensions.CompareToCurrentDateTimeUtc.html": {
    "href": "api/XData.Extensions.DataObjectQueryableExtensions.CompareToCurrentDateTimeUtc.html",
    "title": "Method CompareToCurrentDateTimeUtc | XData website",
    "keywords": "Method CompareToCurrentDateTimeUtc | Improve this Doc View Source CompareToCurrentDateTimeUtc(DateTime, FilterOperation) Compare value to current date and time UTC Declaration public static bool CompareToCurrentDateTimeUtc(this DateTime source, FilterOperation operation) Parameters Type Name Description DateTime source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTime(DateTime, FilterOperation) | Improve this Doc View Source CompareToCurrentDateTimeUtc(Nullable<DateTime>, FilterOperation) Compare value to current date and time UTC Declaration public static bool CompareToCurrentDateTimeUtc(this DateTime? source, FilterOperation operation) Parameters Type Name Description Nullable < DateTime > source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTime(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation)"
  },
  "api/XData.Extensions.DataObjectQueryableExtensions.CompareVariable.html": {
    "href": "api/XData.Extensions.DataObjectQueryableExtensions.CompareVariable.html",
    "title": "Method CompareVariable | XData website",
    "keywords": "Method CompareVariable | Improve this Doc View Source CompareVariable(Object, FilterOperation, String) Compare value to variable value WARNING! Method accessible only in XData LINQ expressions! Declaration public static bool CompareVariable(this object source, FilterOperation operation, string variableName) Parameters Type Name Description Object source Source property FilterOperation operation Comparison operation String variableName Variable name Returns Type Description Boolean Comparison result Exceptions Type Condition XDataRuntimeException Function is accessible in XData LINQ expressions only"
  },
  "api/XData.Extensions.DataObjectQueryableExtensions.html": {
    "href": "api/XData.Extensions.DataObjectQueryableExtensions.html",
    "title": "Class DataObjectQueryableExtensions | XData website",
    "keywords": "Class DataObjectQueryableExtensions XData LINQ query extensions Inheritance Object DataObjectQueryableExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public static class DataObjectQueryableExtensions Methods Name Description CompareToCurrentDate(DateTime, FilterOperation) Compare value to current date CompareToCurrentDate(Nullable<DateTime>, FilterOperation) Compare value to current date CompareToCurrentDateTime(DateTime, FilterOperation) Compare value to current date and time CompareToCurrentDateTime(Nullable<DateTime>, FilterOperation) Compare value to current date and time CompareToCurrentDateTimeUtc(DateTime, FilterOperation) Compare value to current date and time UTC CompareToCurrentDateTimeUtc(Nullable<DateTime>, FilterOperation) Compare value to current date and time UTC CompareVariable(Object, FilterOperation, String) Compare value to variable value WARNING! Method accessible only in XData LINQ expressions! Like(String, String) Like Like(String, String, Char) Like"
  },
  "api/XData.Extensions.CollectionsExtensions.GetOrAdd.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.GetOrAdd.html",
    "title": "Method GetOrAdd | XData website",
    "keywords": "Method GetOrAdd | Improve this Doc View Source GetOrAdd<T>(IList<T>, Func<T, Boolean>, Func<T>) Returns first found element by predicate or add selector result and return it Declaration public static T GetOrAdd<T>(this IList<T> list, Func<T, bool> predicate, Func<T> selector) Parameters Type Name Description IList <T> list List Func <T, Boolean > predicate Find element predicate Func <T> selector Create element logic Returns Type Description T Found or crested element Type Parameters Name Description T Element type Exceptions Type Condition XDataRuntimeException Argument is null"
  },
  "api/XData.Extensions.CollectionsExtensions.Clear.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.Clear.html",
    "title": "Method Clear | XData website",
    "keywords": "Method Clear | Improve this Doc View Source Clear<T>(List<T>, Action<T>) Clear list content with action call on every element Declaration public static void Clear<T>(this List<T> list, Action<T> action) Parameters Type Name Description List <T> list List Action <T> action Action Type Parameters Name Description T List element type"
  },
  "api/XData.Extensions.CollectionsExtensions.RemoveAll.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.RemoveAll.html",
    "title": "Method RemoveAll | XData website",
    "keywords": "Method RemoveAll | Improve this Doc View Source RemoveAll<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, Func<TKey, Boolean>) Remove all elements matched predicate Declaration public static void RemoveAll<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> collection, Func<TKey, bool> predicate) Parameters Type Name Description ConcurrentDictionary <TKey, TValue> collection Concurrent dictionary Func <TKey, Boolean > predicate Filtering predicate Type Parameters Name Description TKey Key type TValue Value type"
  },
  "api/XData.Extensions.CollectionsExtensions.ToSortedSet.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.ToSortedSet.html",
    "title": "Method ToSortedSet | XData website",
    "keywords": "Method ToSortedSet | Improve this Doc View Source ToSortedSet<T>(IEnumerable<T>, IComparer<T>) ToSortedSet helper Declaration public static SortedSet<T> ToSortedSet<T>(this IEnumerable<T> source, IComparer<T> comparer = null) Parameters Type Name Description IEnumerable <T> source Source sequence IComparer <T> comparer Source type comparer Returns Type Description SortedSet <T> Typed SortedSet Type Parameters Name Description T SortedSet type Remarks If comparer is not set GetInstance() used WARNING! To use Indexer<T> one of IComparable<T> properties of source type mast be marked by IndexAttribute"
  },
  "api/XData.Extensions.CollectionsExtensions.HasSameValuesAs.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.HasSameValuesAs.html",
    "title": "Method HasSameValuesAs | XData website",
    "keywords": "Method HasSameValuesAs | Improve this Doc View Source HasSameValuesAs<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) Dictionary comparison test Declaration public static bool HasSameValuesAs<TKey, TValue>(this IDictionary<TKey, TValue> source, IDictionary<TKey, TValue> other) where TValue : IEquatable<TValue> Parameters Type Name Description IDictionary <TKey, TValue> source Source dictionary IDictionary <TKey, TValue> other Matched dictionary Returns Type Description Boolean Type Parameters Name Description TKey Type of dictionary key TValue Type of dictionary value | Improve this Doc View Source HasSameValuesAs<TKey, TValue>(ICollection<KeyValuePair<TKey, TValue>>, ICollection<KeyValuePair<TKey, TValue>>) Dictionary comparison test Declaration public static bool HasSameValuesAs<TKey, TValue>(this ICollection<KeyValuePair<TKey, TValue>> source, ICollection<KeyValuePair<TKey, TValue>> other) where TValue : IComparable Parameters Type Name Description ICollection < KeyValuePair <TKey, TValue>> source Source dictionary ICollection < KeyValuePair <TKey, TValue>> other Matched dictionary Returns Type Description Boolean Type Parameters Name Description TKey Type of dictionary key TValue Type of dictionary value | Improve this Doc View Source HasSameValuesAs(ICollection<TaggedValue>, ICollection<TaggedValue>) Dictionary comparison test Declaration public static bool HasSameValuesAs(this ICollection<TaggedValue> source, ICollection<TaggedValue> other) Parameters Type Name Description ICollection < TaggedValue > source Source dictionary ICollection < TaggedValue > other Matched dictionary Returns Type Description Boolean"
  },
  "api/XData.Extensions.CollectionsExtensions.TryGetValue.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.TryGetValue.html",
    "title": "Method TryGetValue | XData website",
    "keywords": "Method TryGetValue | Improve this Doc View Source TryGetValue<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, TKey) Try get value helper Declaration public static object TryGetValue<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, TKey key) where TKey : IEquatable<TKey> Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source Sequence of key value pairs TKey key Key value Returns Type Description Object Type Parameters Name Description TKey Key type TValue Value type"
  },
  "api/XData.Extensions.CollectionsExtensions.ToDictionary.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.ToDictionary.html",
    "title": "Method ToDictionary | XData website",
    "keywords": "Method ToDictionary | Improve this Doc View Source ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ToDictionary helper Declaration public static Dictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> pairs) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> pairs KeyValuePair collection Returns Type Description Dictionary <TKey, TValue> Typed Dictionary Type Parameters Name Description TKey Dictionary key type TValue Dictionary value type | Improve this Doc View Source ToDictionary<TKey, TValue>(IEnumerable<IGrouping<TKey, TValue>>) ToDictionary groupings helper Declaration public static Dictionary<TKey, List<TValue>> ToDictionary<TKey, TValue>(this IEnumerable<IGrouping<TKey, TValue>> groupings) Parameters Type Name Description IEnumerable < IGrouping <TKey, TValue>> groupings Groupings Returns Type Description Dictionary <TKey, List <TValue>> Typed Dictionary Type Parameters Name Description TKey Dictionary key type TValue Dictionary value type"
  },
  "api/XData.Extensions.CollectionsExtensions.ToSortedList.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.ToSortedList.html",
    "title": "Method ToSortedList | XData website",
    "keywords": "Method ToSortedList | Improve this Doc View Source ToSortedList<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ToSortedList helper Declaration public static SortedList<TKey, TValue> ToSortedList<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> pairs) where TKey : IComparable Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> pairs KeyValuePair collection Returns Type Description SortedList <TKey, TValue> Typed SortedList Type Parameters Name Description TKey Dictionary key type TValue Dictionary value type | Improve this Doc View Source ToSortedList<TKey, TValue>(IEnumerable<IGrouping<TKey, TValue>>) ToSortedList groupings helper Declaration public static SortedList<TKey, List<TValue>> ToSortedList<TKey, TValue>(this IEnumerable<IGrouping<TKey, TValue>> groupings) where TKey : IComparable Parameters Type Name Description IEnumerable < IGrouping <TKey, TValue>> groupings Groupings Returns Type Description SortedList <TKey, List <TValue>> Typed SortedList Type Parameters Name Description TKey SortedList key type TValue SortedList value type"
  },
  "api/XData.Extensions.CollectionsExtensions.IsEmpty.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.IsEmpty.html",
    "title": "Method IsEmpty | XData website",
    "keywords": "Method IsEmpty | Improve this Doc View Source IsEmpty(ICollection<IComparable>) IComparable array IsEmpty helper Declaration public static bool IsEmpty(this ICollection<IComparable> fields) Parameters Type Name Description ICollection < IComparable > fields Array of values Returns Type Description Boolean Any of fields is null or DBNull"
  },
  "api/XData.Extensions.CollectionsExtensions.SetValue.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.SetValue.html",
    "title": "Method SetValue | XData website",
    "keywords": "Method SetValue | Improve this Doc View Source SetValue<TKey, T>(TKey, T) Named value pair builder Declaration public static KeyValuePair<TKey, T> SetValue<TKey, T>(this TKey name, T value) Parameters Type Name Description TKey name Name T value Value Returns Type Description KeyValuePair <TKey, T> Named value pair Type Parameters Name Description TKey Key type T Value type"
  },
  "api/XData.Extensions.CollectionsExtensions.AsEnum.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.AsEnum.html",
    "title": "Method AsEnum | XData website",
    "keywords": "Method AsEnum | Improve this Doc View Source AsEnum<T>(T) Returns single item enumerable Declaration public static IEnumerable<T> AsEnum<T>(this T item) Parameters Type Name Description T item Item Returns Type Description IEnumerable <T> Single item enumerable Type Parameters Name Description T Item type"
  },
  "api/XData.Extensions.CollectionsExtensions.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.html",
    "title": "Class CollectionsExtensions | XData website",
    "keywords": "Class CollectionsExtensions Collections extension functions Inheritance Object CollectionsExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.docfx.dll Syntax public static class CollectionsExtensions Methods Name Description AsEnum<T>(T) Returns single item enumerable Clear<T>(List<T>, Action<T>) Clear list content with action call on every element GetOrAdd<T>(IList<T>, Func<T, Boolean>, Func<T>) Returns first found element by predicate or add selector result and return it HasSameValuesAs(ICollection<TaggedValue>, ICollection<TaggedValue>) Dictionary comparison test HasSameValuesAs<TKey, TValue>(ICollection<KeyValuePair<TKey, TValue>>, ICollection<KeyValuePair<TKey, TValue>>) Dictionary comparison test HasSameValuesAs<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) Dictionary comparison test IsEmpty(ICollection<IComparable>) IComparable array IsEmpty helper RemoveAll<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, Func<TKey, Boolean>) Remove all elements matched predicate SetValue<TKey, T>(TKey, T) Named value pair builder ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ToDictionary helper ToDictionary<TKey, TValue>(IEnumerable<IGrouping<TKey, TValue>>) ToDictionary groupings helper ToSortedList<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ToSortedList helper ToSortedList<TKey, TValue>(IEnumerable<IGrouping<TKey, TValue>>) ToSortedList groupings helper ToSortedSet<T>(IEnumerable<T>, IComparer<T>) ToSortedSet helper TryGetValue<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, TKey) Try get value helper"
  },
  "api/XData.ExecuteAttachedHandler-1.html": {
    "href": "api/XData.ExecuteAttachedHandler-1.html",
    "title": "Delegate ExecuteAttachedHandler<T> | XData website",
    "keywords": "Delegate ExecuteAttachedHandler<T> Execute attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool ExecuteAttachedHandler<in T>(string key, IEnumerable<T> objects) where T : class, IDataObject; Parameters Type Name Description String key Custom logic key IEnumerable <T> objects Object sequence Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.html": {
    "href": "api/XData.Exceptions.html",
    "title": "Namespace XData.Exceptions | XData website",
    "keywords": "Namespace XData.Exceptions Classes AdditionalInfo Exception and log additional info XDataAdapterException Adapter exception XDataConcurrencyException Concurrency exception XDataConfigurationException XData configuration exception XDataException Base XData exception class XDataExceptionAttribute XData exception attribute XDataQueryStructureException Query structure build failed XDataRuntimeException XData runtime exception XDataSecurityException XData security related exception XDataSqlException SQL exception Enums XDataAdapterExceptionType XData adapter exception types XDataConfigurationExceptionType XData configuration exception types XDataQueryStructureExceptionType Query structure exception types XDataRuntimeExceptionType XData runtime exception type"
  },
  "api/XData.Exceptions.XDataSqlException.Query.html": {
    "href": "api/XData.Exceptions.XDataSqlException.Query.html",
    "title": "Property Query | XData website",
    "keywords": "Property Query | Improve this Doc View Source Query Query Declaration public Query Query { get; } Property Value Type Description Query"
  },
  "api/XData.Exceptions.XDataSqlException.-ctor.html": {
    "href": "api/XData.Exceptions.XDataSqlException.-ctor.html",
    "title": "Constructor XDataSqlException | XData website",
    "keywords": "Constructor XDataSqlException | Improve this Doc View Source XDataSqlException(Exception, Query) SQL exception Declaration public XDataSqlException(Exception exception, Query query) Parameters Type Name Description Exception exception Inner exception Query query Query | Improve this Doc View Source XDataSqlException(Exception, Query, AdditionalInfo[]) SQL exception Declaration public XDataSqlException(Exception exception, Query query, params AdditionalInfo[] addInfo) Parameters Type Name Description Exception exception Inner exception Query query Query AdditionalInfo [] addInfo Additional information | Improve this Doc View Source XDataSqlException(Exception, AdditionalInfo[]) SQL exception Declaration public XDataSqlException(Exception exception, params AdditionalInfo[] addInfo) Parameters Type Name Description Exception exception Inner exception AdditionalInfo [] addInfo Additional information"
  },
  "api/XData.Exceptions.XDataSqlException.html": {
    "href": "api/XData.Exceptions.XDataSqlException.html",
    "title": "Class XDataSqlException | XData website",
    "keywords": "Class XDataSqlException SQL exception Inheritance Object XDataException XDataSqlException Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public sealed class XDataSqlException : XDataException Constructors Name Description XDataSqlException(Exception, Query) SQL exception XDataSqlException(Exception, Query, AdditionalInfo[]) SQL exception XDataSqlException(Exception, AdditionalInfo[]) SQL exception Properties Name Description Query Query Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataSecurityException.DetailsInfo.html": {
    "href": "api/XData.Exceptions.XDataSecurityException.DetailsInfo.html",
    "title": "Property DetailsInfo | XData website",
    "keywords": "Property DetailsInfo | Improve this Doc View Source DetailsInfo Exception details info Declaration public string DetailsInfo { get; } Property Value Type Description String"
  },
  "api/XData.Exceptions.XDataSecurityException.DataObjectType.html": {
    "href": "api/XData.Exceptions.XDataSecurityException.DataObjectType.html",
    "title": "Property DataObjectType | XData website",
    "keywords": "Property DataObjectType | Improve this Doc View Source DataObjectType Data object type Declaration public Type DataObjectType { get; } Property Value Type Description Type"
  },
  "api/XData.Exceptions.XDataSecurityException.-ctor.html": {
    "href": "api/XData.Exceptions.XDataSecurityException.-ctor.html",
    "title": "Constructor XDataSecurityException | XData website",
    "keywords": "Constructor XDataSecurityException | Improve this Doc View Source XDataSecurityException(String, Type) XData security exception Declaration public XDataSecurityException(string details, Type dataObjectType) Parameters Type Name Description String details Exception details info Type dataObjectType Data object type | Improve this Doc View Source XDataSecurityException(String, Type, AdditionalInfo[]) XData security exception Declaration public XDataSecurityException(string details, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description String details Exception details info Type dataObjectType Data object type AdditionalInfo [] addInfo Additional info | Improve this Doc View Source XDataSecurityException(String) XData security exception Declaration public XDataSecurityException(string details) Parameters Type Name Description String details Exception details info | Improve this Doc View Source XDataSecurityException(String, Exception) XData security exception Declaration public XDataSecurityException(string details, Exception exception) Parameters Type Name Description String details Exception details info Exception exception Inner exception | Improve this Doc View Source XDataSecurityException(String, Exception, Type, AdditionalInfo[]) XData security exception Declaration public XDataSecurityException(string details, Exception exception, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description String details Exception details info Exception exception Inner exception Type dataObjectType Data object type AdditionalInfo [] addInfo Additional information | Improve this Doc View Source XDataSecurityException(String, Exception, Type) XData security exception Declaration public XDataSecurityException(string details, Exception exception, Type dataObjectType) Parameters Type Name Description String details Exception details info Exception exception Inner exception Type dataObjectType Data object type"
  },
  "api/XData.Exceptions.XDataSecurityException.html": {
    "href": "api/XData.Exceptions.XDataSecurityException.html",
    "title": "Class XDataSecurityException | XData website",
    "keywords": "Class XDataSecurityException XData security related exception Inheritance Object XDataException XDataSecurityException Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public class XDataSecurityException : XDataException Constructors Name Description XDataSecurityException(String) XData security exception XDataSecurityException(String, Exception) XData security exception XDataSecurityException(String, Exception, Type) XData security exception XDataSecurityException(String, Exception, Type, AdditionalInfo[]) XData security exception XDataSecurityException(String, Type) XData security exception XDataSecurityException(String, Type, AdditionalInfo[]) XData security exception Properties Name Description DataObjectType Data object type DetailsInfo Exception details info Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataRuntimeExceptionType.html": {
    "href": "api/XData.Exceptions.XDataRuntimeExceptionType.html",
    "title": "Enum XDataRuntimeExceptionType | XData website",
    "keywords": "Enum XDataRuntimeExceptionType XData runtime exception type Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public enum XDataRuntimeExceptionType Fields Name Description ArgumentError Argument error AssemblyNotFoundError Assembly not found by path AttachedHandlersNotFoundError Attached handlers collection not found CustomActionAttributeNotFoundError CustomActionAttribute not found CustomLogicError Custom logic error DataConversionError Data conversion error DataMappingAttributeNotFoundError Data mapping attribute not found DataMappingError Data mapping error FunctionLockedError Function is locked GetIndexedAttributeError IndexedAttribute not found GetOriginalDataError Original data not found GetPropertyValueError Property not found GetRepositoryError Object not attached to repository GetSerializedDataFieldError SerializedData field not found GetStateError Object state not found PropertyIsReadOnlyError Property is read only RepositoryIsReadOnlyError Repository marked as read only ServerCallError XData Application Server call error SessionCreationFailedError Application server session creation failed SessionNotFoundError Application server session not found TypeLoadingError Type loading error TypeNotFoundError Type not found in assembly WorkSetError Work set data access error Extension Methods SerializationExtensions.ToXml<XDataRuntimeExceptionType>() CollectionsExtensions.SetValue<XDataRuntimeExceptionType, T>(T) CollectionsExtensions.AsEnum<XDataRuntimeExceptionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<XDataRuntimeExceptionType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<XDataRuntimeExceptionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataRuntimeException.Type.html": {
    "href": "api/XData.Exceptions.XDataRuntimeException.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Type of exception Declaration public XDataRuntimeExceptionType Type { get; } Property Value Type Description XDataRuntimeExceptionType"
  },
  "api/XData.Exceptions.XDataRuntimeException.DetailsInfo.html": {
    "href": "api/XData.Exceptions.XDataRuntimeException.DetailsInfo.html",
    "title": "Property DetailsInfo | XData website",
    "keywords": "Property DetailsInfo | Improve this Doc View Source DetailsInfo Exception details info Declaration public string DetailsInfo { get; } Property Value Type Description String"
  },
  "api/XData.Exceptions.XDataRuntimeException.DataObjectType.html": {
    "href": "api/XData.Exceptions.XDataRuntimeException.DataObjectType.html",
    "title": "Property DataObjectType | XData website",
    "keywords": "Property DataObjectType | Improve this Doc View Source DataObjectType Data object type Declaration public Type DataObjectType { get; } Property Value Type Description Type"
  },
  "api/XData.Exceptions.XDataRuntimeException.-ctor.html": {
    "href": "api/XData.Exceptions.XDataRuntimeException.-ctor.html",
    "title": "Constructor XDataRuntimeException | XData website",
    "keywords": "Constructor XDataRuntimeException | Improve this Doc View Source XDataRuntimeException(XDataRuntimeExceptionType, String, Type) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, string details, Type dataObjectType) Parameters Type Name Description XDataRuntimeExceptionType type Exception type String details Exception details info Type dataObjectType Data object type | Improve this Doc View Source XDataRuntimeException(XDataRuntimeExceptionType, String, Type, AdditionalInfo[]) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, string details, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description XDataRuntimeExceptionType type Exception type String details Exception details info Type dataObjectType Data object type AdditionalInfo [] addInfo Additional info | Improve this Doc View Source XDataRuntimeException(XDataRuntimeExceptionType, String) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, string details) Parameters Type Name Description XDataRuntimeExceptionType type Exception type String details Exception details info | Improve this Doc View Source XDataRuntimeException(XDataRuntimeExceptionType, Type) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, Type dataObjectType) Parameters Type Name Description XDataRuntimeExceptionType type Exception type Type dataObjectType Data object type | Improve this Doc View Source XDataRuntimeException(XDataRuntimeExceptionType, Exception) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, Exception exception) Parameters Type Name Description XDataRuntimeExceptionType type Exception type Exception exception Inner exception | Improve this Doc View Source XDataRuntimeException(XDataRuntimeExceptionType, Exception, Type, AdditionalInfo[]) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, Exception exception, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description XDataRuntimeExceptionType type Exception type Exception exception Inner exception Type dataObjectType Data object type AdditionalInfo [] addInfo Additional information | Improve this Doc View Source XDataRuntimeException(XDataRuntimeExceptionType, Exception, Type) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, Exception exception, Type dataObjectType) Parameters Type Name Description XDataRuntimeExceptionType type Exception type Exception exception Inner exception Type dataObjectType Data object type | Improve this Doc View Source XDataRuntimeException(XDataRuntimeExceptionType) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type) Parameters Type Name Description XDataRuntimeExceptionType type Exception type"
  },
  "api/XData.Exceptions.XDataRuntimeException.html": {
    "href": "api/XData.Exceptions.XDataRuntimeException.html",
    "title": "Class XDataRuntimeException | XData website",
    "keywords": "Class XDataRuntimeException XData runtime exception Inheritance Object XDataException XDataRuntimeException Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public class XDataRuntimeException : XDataException Constructors Name Description XDataRuntimeException(XDataRuntimeExceptionType) XData runtime exception XDataRuntimeException(XDataRuntimeExceptionType, Exception) XData runtime exception XDataRuntimeException(XDataRuntimeExceptionType, Exception, Type) XData runtime exception XDataRuntimeException(XDataRuntimeExceptionType, Exception, Type, AdditionalInfo[]) XData runtime exception XDataRuntimeException(XDataRuntimeExceptionType, String) XData runtime exception XDataRuntimeException(XDataRuntimeExceptionType, String, Type) XData runtime exception XDataRuntimeException(XDataRuntimeExceptionType, String, Type, AdditionalInfo[]) XData runtime exception XDataRuntimeException(XDataRuntimeExceptionType, Type) XData runtime exception Properties Name Description DataObjectType Data object type DetailsInfo Exception details info Type Type of exception Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataQueryStructureExceptionType.html": {
    "href": "api/XData.Exceptions.XDataQueryStructureExceptionType.html",
    "title": "Enum XDataQueryStructureExceptionType | XData website",
    "keywords": "Enum XDataQueryStructureExceptionType Query structure exception types Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public enum XDataQueryStructureExceptionType Fields Name Description AddTreeFilterError Tree filter (START WITH) generation failed AddTreeLinkError Tree link (CONNECT BY PRIOR) filter generation failed CallNonProcedureBasedStructureError Call of non procedure based structure DictionaryTableHasComplexPrimaryKeyError Dictionary table has complex primary key DictionaryTableHasNoPrimaryKeyError Dictionary table has no primary key EmptyQueryError Empty query text generated error FieldNotFoundError Field not found FilterCombinationNotFoundError Filter combination not found FindPropertyError Property not found error GetParentStructureError Parent structure type not found error HierarchyOnComplexPrimaryKeyTableError Table with hierarchy has complex primary key HierarchyOnNoPrimaryKeyTableError Table with hierarchy has no primary key IdPropertyNotFoundError Id property not found InnerViewNotFoundError No inner view found for alias LinkedPropertyNotFoundError Linked property not found LinkToProcedureFoundError SQL stored procedure can not be linked LinqExpressionCannotBeParsedError LINQ expression can not be parsed LinqExpressionHasUnknownMethodError LINQ expression contains unknown method error LinqExpressionHasUnsupportedMethodError LINQ expression contains unsupported method LinqExpressionHasUnsupportedMethodParametersError LINQ expression contains unsupported method parameter count error LinqExpressionHasUnsupportedTypeError LINQ expression contains unsupported in this case expression type NoDataSourceMappingFoundError Data source mapping not found NoElementsAtPositionError Sequence contains no elements at position error NoElementsError Sequence contains no elements error NoMappingFoundError No mapping found for data object NoneBasedObjectHasTablesError Can't build data object based on NONE table contains other tables error NoPropertyMappingFoundError Property mapping not found NoSelectedFieldsFoundError Selected fields list is empty error PropertyEnumValueNotFoundError Property enum values not found PropertyNotFoundError Property not found (or not mapped) ResultSetMappingExpressionError SQL stored procedure / function result set expression mapping used ResultSetNotRegisteredError Result set not registered RuntimeFilterUsedInsideDynamicQuery Runtime filter used inside dynamic query SubqueryAliasDuplicatedError Subquery alias duplicated SubqueryNotFoundError No subquery found for alias TableNotFoundError Table source not found WrongDataSourceTypeError Wrong data source type used Extension Methods SerializationExtensions.ToXml<XDataQueryStructureExceptionType>() CollectionsExtensions.SetValue<XDataQueryStructureExceptionType, T>(T) CollectionsExtensions.AsEnum<XDataQueryStructureExceptionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<XDataQueryStructureExceptionType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<XDataQueryStructureExceptionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataQueryStructureException.Type.html": {
    "href": "api/XData.Exceptions.XDataQueryStructureException.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Type of exception Declaration public XDataQueryStructureExceptionType Type { get; } Property Value Type Description XDataQueryStructureExceptionType"
  },
  "api/XData.Exceptions.XDataQueryStructureException.DetailsInfo.html": {
    "href": "api/XData.Exceptions.XDataQueryStructureException.DetailsInfo.html",
    "title": "Property DetailsInfo | XData website",
    "keywords": "Property DetailsInfo | Improve this Doc View Source DetailsInfo Exception details info Declaration public string DetailsInfo { get; } Property Value Type Description String"
  },
  "api/XData.Exceptions.XDataQueryStructureException.DataObjectType.html": {
    "href": "api/XData.Exceptions.XDataQueryStructureException.DataObjectType.html",
    "title": "Property DataObjectType | XData website",
    "keywords": "Property DataObjectType | Improve this Doc View Source DataObjectType Data object type Declaration public Type DataObjectType { get; } Property Value Type Description Type"
  },
  "api/XData.Exceptions.XDataQueryStructureException.-ctor.html": {
    "href": "api/XData.Exceptions.XDataQueryStructureException.-ctor.html",
    "title": "Constructor XDataQueryStructureException | XData website",
    "keywords": "Constructor XDataQueryStructureException | Improve this Doc View Source XDataQueryStructureException(XDataQueryStructureExceptionType, String) Query structure build failed Declaration public XDataQueryStructureException(XDataQueryStructureExceptionType type, string details) Parameters Type Name Description XDataQueryStructureExceptionType type Query structure exception type String details Error details | Improve this Doc View Source XDataQueryStructureException(XDataQueryStructureExceptionType, Type) Query structure build failed Declaration public XDataQueryStructureException(XDataQueryStructureExceptionType type, Type dataObjectType) Parameters Type Name Description XDataQueryStructureExceptionType type Query structure exception type Type dataObjectType Data object type | Improve this Doc View Source XDataQueryStructureException(XDataQueryStructureExceptionType, String, Type) Query structure build failed Declaration public XDataQueryStructureException(XDataQueryStructureExceptionType type, string details, Type dataObjectType) Parameters Type Name Description XDataQueryStructureExceptionType type Query structure exception type String details Error details Type dataObjectType Data object type | Improve this Doc View Source XDataQueryStructureException(XDataQueryStructureExceptionType, String, Type, AdditionalInfo[]) Query structure build failed Declaration public XDataQueryStructureException(XDataQueryStructureExceptionType type, string details, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description XDataQueryStructureExceptionType type Query structure exception type String details Error details Type dataObjectType Data object type AdditionalInfo [] addInfo Additional information Exceptions Type Condition NotImplementedException"
  },
  "api/XData.Exceptions.XDataQueryStructureException.html": {
    "href": "api/XData.Exceptions.XDataQueryStructureException.html",
    "title": "Class XDataQueryStructureException | XData website",
    "keywords": "Class XDataQueryStructureException Query structure build failed Inheritance Object XDataException XDataQueryStructureException Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public class XDataQueryStructureException : XDataException Constructors Name Description XDataQueryStructureException(XDataQueryStructureExceptionType, String) Query structure build failed XDataQueryStructureException(XDataQueryStructureExceptionType, String, Type) Query structure build failed XDataQueryStructureException(XDataQueryStructureExceptionType, String, Type, AdditionalInfo[]) Query structure build failed XDataQueryStructureException(XDataQueryStructureExceptionType, Type) Query structure build failed Properties Name Description DataObjectType Data object type DetailsInfo Exception details info Type Type of exception Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataExceptionAttribute.html": {
    "href": "api/XData.Exceptions.XDataExceptionAttribute.html",
    "title": "Class XDataExceptionAttribute | XData website",
    "keywords": "Class XDataExceptionAttribute XData exception attribute Inheritance Object Attribute XDataExceptionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public class XDataExceptionAttribute : Attribute Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataException.-ctor.html": {
    "href": "api/XData.Exceptions.XDataException.-ctor.html",
    "title": "Constructor XDataException | XData website",
    "keywords": "Constructor XDataException | Improve this Doc View Source XDataException(String) Base XData exception class constructor Declaration protected XDataException(string message) Parameters Type Name Description String message | Improve this Doc View Source XDataException(String, Exception) Base XData exception class constructor Declaration protected XDataException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api/XData.Exceptions.XDataException.html": {
    "href": "api/XData.Exceptions.XDataException.html",
    "title": "Class XDataException | XData website",
    "keywords": "Class XDataException Base XData exception class Inheritance Object XDataException XDataAdapterException XDataConcurrencyException XDataConfigurationException XDataQueryStructureException XDataRuntimeException XDataSecurityException XDataSqlException Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public abstract class XDataException : ApplicationException Constructors Name Description XDataException(String) Base XData exception class constructor XDataException(String, Exception) Base XData exception class constructor Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataConfigurationExceptionType.html": {
    "href": "api/XData.Exceptions.XDataConfigurationExceptionType.html",
    "title": "Enum XDataConfigurationExceptionType | XData website",
    "keywords": "Enum XDataConfigurationExceptionType XData configuration exception types Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public enum XDataConfigurationExceptionType Fields Name Description AdapterAssemblyNotFoundError Adapter assembly not found AdapterNotConfiguredError Data adapter not configured ConfigurationFileLoadError Configuration file load error ConfigurationFileSaveError Configuration file save error ConfigurationXmlReadError Configuration xml read error ConnectionStringHasWrongFormatError Connection string has wrong format ContextNotConfiguredError Data context not configured DefaultContextNotFoundError Default data context is not found ProxyNotConfiguredError Proxy not configured Extension Methods SerializationExtensions.ToXml<XDataConfigurationExceptionType>() CollectionsExtensions.SetValue<XDataConfigurationExceptionType, T>(T) CollectionsExtensions.AsEnum<XDataConfigurationExceptionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<XDataConfigurationExceptionType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<XDataConfigurationExceptionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataConfigurationException.Type.html": {
    "href": "api/XData.Exceptions.XDataConfigurationException.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Type of exception Declaration public XDataConfigurationExceptionType Type { get; } Property Value Type Description XDataConfigurationExceptionType"
  },
  "api/XData.Exceptions.XDataConfigurationException.DetailsInfo.html": {
    "href": "api/XData.Exceptions.XDataConfigurationException.DetailsInfo.html",
    "title": "Property DetailsInfo | XData website",
    "keywords": "Property DetailsInfo | Improve this Doc View Source DetailsInfo Exception details info Declaration public string DetailsInfo { get; } Property Value Type Description String"
  },
  "api/XData.Exceptions.XDataConfigurationException.-ctor.html": {
    "href": "api/XData.Exceptions.XDataConfigurationException.-ctor.html",
    "title": "Constructor XDataConfigurationException | XData website",
    "keywords": "Constructor XDataConfigurationException | Improve this Doc View Source XDataConfigurationException(XDataConfigurationExceptionType) Query structure build failed Declaration public XDataConfigurationException(XDataConfigurationExceptionType type) Parameters Type Name Description XDataConfigurationExceptionType type Query structure exception type | Improve this Doc View Source XDataConfigurationException(XDataConfigurationExceptionType, String) Query structure build failed Declaration public XDataConfigurationException(XDataConfigurationExceptionType type, string details) Parameters Type Name Description XDataConfigurationExceptionType type Query structure exception type String details Error details | Improve this Doc View Source XDataConfigurationException(XDataConfigurationExceptionType, String, Exception) Query structure build failed Declaration public XDataConfigurationException(XDataConfigurationExceptionType type, string details, Exception inner) Parameters Type Name Description XDataConfigurationExceptionType type Query structure exception type String details Error details Exception inner Inner exception"
  },
  "api/XData.Exceptions.XDataConfigurationException.html": {
    "href": "api/XData.Exceptions.XDataConfigurationException.html",
    "title": "Class XDataConfigurationException | XData website",
    "keywords": "Class XDataConfigurationException XData configuration exception Inheritance Object XDataException XDataConfigurationException Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public class XDataConfigurationException : XDataException Constructors Name Description XDataConfigurationException(XDataConfigurationExceptionType) Query structure build failed XDataConfigurationException(XDataConfigurationExceptionType, String) Query structure build failed XDataConfigurationException(XDataConfigurationExceptionType, String, Exception) Query structure build failed Properties Name Description DetailsInfo Exception details info Type Type of exception Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataConcurrencyException.Query.html": {
    "href": "api/XData.Exceptions.XDataConcurrencyException.Query.html",
    "title": "Property Query | XData website",
    "keywords": "Property Query | Improve this Doc View Source Query Query Declaration public Query Query { get; } Property Value Type Description Query"
  },
  "api/XData.Exceptions.XDataConcurrencyException.-ctor.html": {
    "href": "api/XData.Exceptions.XDataConcurrencyException.-ctor.html",
    "title": "Constructor XDataConcurrencyException | XData website",
    "keywords": "Constructor XDataConcurrencyException | Improve this Doc View Source XDataConcurrencyException(Exception, Query) Concurrency exception Declaration public XDataConcurrencyException(Exception exception, Query query) Parameters Type Name Description Exception exception Inner exception Query query Query | Improve this Doc View Source XDataConcurrencyException(String) Concurrency exception Declaration public XDataConcurrencyException(string exception) Parameters Type Name Description String exception Exception text | Improve this Doc View Source XDataConcurrencyException(Exception, AdditionalInfo[]) Concurrency exception Declaration public XDataConcurrencyException(Exception exception, params AdditionalInfo[] addInfo) Parameters Type Name Description Exception exception Inner exception AdditionalInfo [] addInfo Additional information"
  },
  "api/XData.Exceptions.XDataConcurrencyException.html": {
    "href": "api/XData.Exceptions.XDataConcurrencyException.html",
    "title": "Class XDataConcurrencyException | XData website",
    "keywords": "Class XDataConcurrencyException Concurrency exception Inheritance Object XDataException XDataConcurrencyException Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public sealed class XDataConcurrencyException : XDataException Constructors Name Description XDataConcurrencyException(Exception, Query) Concurrency exception XDataConcurrencyException(Exception, AdditionalInfo[]) Concurrency exception XDataConcurrencyException(String) Concurrency exception Properties Name Description Query Query Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataAdapterExceptionType.html": {
    "href": "api/XData.Exceptions.XDataAdapterExceptionType.html",
    "title": "Enum XDataAdapterExceptionType | XData website",
    "keywords": "Enum XDataAdapterExceptionType XData adapter exception types Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public enum XDataAdapterExceptionType Fields Name Description AdapterClassNotFoundError Adapter class not found AdapterConstructorFailedError Adapter constructor failed ComplexPrimaryKeyNotSupportedError Complex primary key is not supported in this case FunctionIsNotSupportedError Function is not supported GetSqlSyntaxTemplateError SQL syntax not provided by adapter error SqlBlockProceduralSyntaxNotSupportedError SQL block procedural syntax is not supported SqlBuilderClassNotFoundError Sql builder class not found SqlBuilderConstructorFailedError Sql builder constructor failed SyntaxNotSupportedError SQL syntax construction is not supported TypeNotSupportedError Data type is not supported Extension Methods SerializationExtensions.ToXml<XDataAdapterExceptionType>() CollectionsExtensions.SetValue<XDataAdapterExceptionType, T>(T) CollectionsExtensions.AsEnum<XDataAdapterExceptionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<XDataAdapterExceptionType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<XDataAdapterExceptionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataAdapterException.Type.html": {
    "href": "api/XData.Exceptions.XDataAdapterException.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Adapter exception type Declaration public XDataAdapterExceptionType Type { get; } Property Value Type Description XDataAdapterExceptionType"
  },
  "api/XData.Exceptions.XDataAdapterException.FilePath.html": {
    "href": "api/XData.Exceptions.XDataAdapterException.FilePath.html",
    "title": "Property FilePath | XData website",
    "keywords": "Property FilePath | Improve this Doc View Source FilePath Adapter file path Declaration public string FilePath { get; } Property Value Type Description String"
  },
  "api/XData.Exceptions.XDataAdapterException.Details.html": {
    "href": "api/XData.Exceptions.XDataAdapterException.Details.html",
    "title": "Property Details | XData website",
    "keywords": "Property Details | Improve this Doc View Source Details Exception details Declaration public string Details { get; } Property Value Type Description String"
  },
  "api/XData.Exceptions.XDataAdapterException.AdapterType.html": {
    "href": "api/XData.Exceptions.XDataAdapterException.AdapterType.html",
    "title": "Property AdapterType | XData website",
    "keywords": "Property AdapterType | Improve this Doc View Source AdapterType Adapter type Declaration public Type AdapterType { get; } Property Value Type Description Type"
  },
  "api/XData.Exceptions.XDataAdapterException.-ctor.html": {
    "href": "api/XData.Exceptions.XDataAdapterException.-ctor.html",
    "title": "Constructor XDataAdapterException | XData website",
    "keywords": "Constructor XDataAdapterException | Improve this Doc View Source XDataAdapterException(XDataAdapterExceptionType, String) Adapter exception Declaration public XDataAdapterException(XDataAdapterExceptionType type, string path) Parameters Type Name Description XDataAdapterExceptionType type Exception type String path Adapter file path | Improve this Doc View Source XDataAdapterException(XDataAdapterExceptionType, String, Type) Adapter exception Declaration public XDataAdapterException(XDataAdapterExceptionType type, string details, Type adapterType) Parameters Type Name Description XDataAdapterExceptionType type Exception type String details Exception details Type adapterType Adapter type | Improve this Doc View Source XDataAdapterException(XDataAdapterExceptionType, Type) Adapter exception Declaration public XDataAdapterException(XDataAdapterExceptionType type, Type adapterType) Parameters Type Name Description XDataAdapterExceptionType type Exception type Type adapterType Adapter type"
  },
  "api/XData.Exceptions.XDataAdapterException.html": {
    "href": "api/XData.Exceptions.XDataAdapterException.html",
    "title": "Class XDataAdapterException | XData website",
    "keywords": "Class XDataAdapterException Adapter exception Inheritance Object XDataException XDataAdapterException Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public class XDataAdapterException : XDataException Constructors Name Description XDataAdapterException(XDataAdapterExceptionType, String) Adapter exception XDataAdapterException(XDataAdapterExceptionType, String, Type) Adapter exception XDataAdapterException(XDataAdapterExceptionType, Type) Adapter exception Properties Name Description AdapterType Adapter type Details Exception details FilePath Adapter file path Type Adapter exception type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.AdditionalInfo.Name.html": {
    "href": "api/XData.Exceptions.AdditionalInfo.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Additional info name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/XData.Exceptions.AdditionalInfo.Value.html": {
    "href": "api/XData.Exceptions.AdditionalInfo.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Additional info value Declaration public string Value { get; set; } Property Value Type Description String"
  },
  "api/XData.Exceptions.AdditionalInfo.op_Implicit.html": {
    "href": "api/XData.Exceptions.AdditionalInfo.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(String[] to AdditionalInfo) Exception additional info Declaration public static implicit operator AdditionalInfo(string[] source) Parameters Type Name Description String [] source Source string array Returns Type Description AdditionalInfo Exception additional info | Improve this Doc View Source Implicit(KeyValuePair<String, String> to AdditionalInfo) Exception additional info Declaration public static implicit operator AdditionalInfo(KeyValuePair<string, string> source) Parameters Type Name Description KeyValuePair < String , String > source Source key value pair Returns Type Description AdditionalInfo Exception additional info"
  },
  "api/XData.Exceptions.AdditionalInfo.html": {
    "href": "api/XData.Exceptions.AdditionalInfo.html",
    "title": "Class AdditionalInfo | XData website",
    "keywords": "Class AdditionalInfo Exception and log additional info Inheritance Object AdditionalInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Exceptions Assembly : XData.docfx.dll Syntax public sealed class AdditionalInfo Properties Name Description Name Additional info name Value Additional info value Operators Name Description Implicit(KeyValuePair<String, String> to AdditionalInfo) Exception additional info Implicit(String[] to AdditionalInfo) Exception additional info Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DialectOptions.html": {
    "href": "api/XData.DialectOptions.html",
    "title": "Enum DialectOptions | XData website",
    "keywords": "Enum DialectOptions SQL dialect options SequenceRequired WithSupported ReturningInResult StoredProceduresSupported ScalarFunctionsSupported TableFunctionsSupported ObjectParametersSupported TableParametersSupported ScalarFunctionsOutParametersAllowed TableOutParametersAllowed MultipleRecordsetProceduresSupported Namespace : XData Assembly : XData.docfx.dll Syntax [Flags] public enum DialectOptions Fields Name Description CheckConcurrencySupport Concurrency check supported ClearByRowIdArrays Clear statement used row id arrays InternalErrorCatch Concurrency SQL errors are catched and jammed in provider MultipleRecordsetProceduresSupported Multiple record set stored procedures are supported None No specific SQL dialect options declared ObjectParametersSupported User defined objects (UDT) are supported as procedure/function parameter types RegisterRecordsetRequired Output record set registering is required ReturningInResult Insert returned identity value as query result RowIteratorSupported Row iterator is supported SafeTypeConvert Safe type conversion required ScalarFunctionsOutParametersAllowed Scalar-valued SQL functions OUT parameters are supported ScalarFunctionsSupported Scalar-valued SQL functions are supported SequenceRequired Sequence is required to auto increment fields SequenceSupported Sequences are supported StoredProcedureResultAsExecuteScalar SQL function result value returned as Execute scalar result StoredProcedureResultFetch Stored procedure results fetched by multiple reader execute StoredProceduresSupported SQL stored procedures are supported TableFunctionsSupported Table-valued SQL functions are supported TableOutParametersAllowed Table types are supported as procedure/function OUT parameter types TableParametersSupported Table types are supported as procedure/function parameter types TempTableNotSupported Temp Table is not supported UdtAsReturnValueSupported SQL function can return UDT or Arrays WithInsideSubqueryNotSupported Common-Table-Expression (WITH) queries not supported inside subqueries WithSupported Common-Table-Expression (WITH) queries are supported WithUnionNotSupported Common-Table-Expression (WITH) recursive queries combination with UNION operation not supported XmlSourceSupported XML data source is supported Extension Methods SerializationExtensions.ToXml<DialectOptions>() CollectionsExtensions.SetValue<DialectOptions, T>(T) CollectionsExtensions.AsEnum<DialectOptions>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DialectOptions, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DialectOptions, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DefaultType.html": {
    "href": "api/XData.DefaultType.html",
    "title": "Enum DefaultType | XData website",
    "keywords": "Enum DefaultType Default value type Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum DefaultType Fields Name Description AutoIncrement Auto increment value as default Const Constant value as default CurrentDate Current date CurrentDateTime Current date and time CurrentDateTimeUtc Current date and time UTC NewGuid New GUID as default None No default value UserName Current user name Variable Variable value as default See Also DefaultSource DefaultSource None CurrentDate CurrentDateTime CurrentDateTimeUtc Variable Const AutoIncrement Extension Methods SerializationExtensions.ToXml<DefaultType>() CollectionsExtensions.SetValue<DefaultType, T>(T) CollectionsExtensions.AsEnum<DefaultType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DefaultType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DefaultType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DefaultFeature.html": {
    "href": "api/XData.DefaultFeature.html",
    "title": "Enum DefaultFeature | XData website",
    "keywords": "Enum DefaultFeature Default value features Namespace : XData Assembly : XData.docfx.dll Syntax [Flags] public enum DefaultFeature Fields Name Description SkipWhenAssigned Skip insert into table when PK value assigned explicitly UpdateWhenAssigned Change insert operation over table to update when PK value assigned explicitly UseOnInsert Use default value on insert (by default, always applied) UseOnUpdate Use default value on update Extension Methods SerializationExtensions.ToXml<DefaultFeature>() CollectionsExtensions.SetValue<DefaultFeature, T>(T) CollectionsExtensions.AsEnum<DefaultFeature>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DefaultFeature, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DefaultFeature, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DateDiffKind.html": {
    "href": "api/XData.DateDiffKind.html",
    "title": "Enum DateDiffKind | XData website",
    "keywords": "Enum DateDiffKind Date difference kind Namespace : XData Assembly : XData.docfx.dll Syntax public enum DateDiffKind Fields Name Description Days Date difference in month days DaysTotal Date difference in days Hours Date difference in hours Minutes Date difference in minutes Months Date difference in months Seconds Date difference in seconds Years Date difference in years Extension Methods SerializationExtensions.ToXml<DateDiffKind>() CollectionsExtensions.SetValue<DateDiffKind, T>(T) CollectionsExtensions.AsEnum<DateDiffKind>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DateDiffKind, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DateDiffKind, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataVersion.html": {
    "href": "api/XData.DataVersion.html",
    "title": "Enum DataVersion | XData website",
    "keywords": "Enum DataVersion Version of data Namespace : XData Assembly : XData.docfx.dll Syntax public enum DataVersion Fields Name Description Actual Actual data version Original Original data version See Also GetProperties<T> (T, DataVersion , String []) GetProperties<T> (T, IEnumerable < String >, DataVersion ) GetProperty<T, TRet> (T, Expression < Func <T, TRet>>, DataVersion ) XData.DataObjectExtensions.GetProperty``1(``0,System.String,XData.DataVersion) Actual Original Extension Methods SerializationExtensions.ToXml<DataVersion>() CollectionsExtensions.SetValue<DataVersion, T>(T) CollectionsExtensions.AsEnum<DataVersion>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataVersion, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataVersion, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataTriggerFlag.html": {
    "href": "api/XData.DataTriggerFlag.html",
    "title": "Enum DataTriggerFlag | XData website",
    "keywords": "Enum DataTriggerFlag Data trigger result flags Namespace : XData Assembly : XData.docfx.dll Syntax [Flags] public enum DataTriggerFlag Fields Name Description None Standard trigger result Refresh Refresh representation layer flag Skip Skip standard submitting See Also Trigger <T> RepositoryTrigger <T> None Skip Refresh Extension Methods SerializationExtensions.ToXml<DataTriggerFlag>() CollectionsExtensions.SetValue<DataTriggerFlag, T>(T) CollectionsExtensions.AsEnum<DataTriggerFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataTriggerFlag, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataTriggerFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSubmitFlag.html": {
    "href": "api/XData.DataSubmitFlag.html",
    "title": "Enum DataSubmitFlag | XData website",
    "keywords": "Enum DataSubmitFlag Data submit options Namespace : XData Assembly : XData.docfx.dll Syntax [Flags] [DataContract] public enum DataSubmitFlag Fields Name Description Cascade Cascade submit IgnoreConcurrency Ignore concurrency conflicts None Standard submit Silent Silent submit See Also Submit(ref T, DataSubmitFlag) Submit(IEnumerable<T>, DataSubmitFlag) None Silent Cascade Extension Methods SerializationExtensions.ToXml<DataSubmitFlag>() CollectionsExtensions.SetValue<DataSubmitFlag, T>(T) CollectionsExtensions.AsEnum<DataSubmitFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataSubmitFlag, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataSubmitFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataStructureFlag.html": {
    "href": "api/XData.DataStructureFlag.html",
    "title": "Enum DataStructureFlag | XData website",
    "keywords": "Enum DataStructureFlag Data object structure flags Namespace : XData Assembly : XData.docfx.dll Syntax [Flags] public enum DataStructureFlag Fields Name Description Grouping Grouped Data object None Common editable Data object ReadOnly Read only Data object Tree Tree organized Data object See Also Flags None Tree Grouping ReadOnly Extension Methods SerializationExtensions.ToXml<DataStructureFlag>() CollectionsExtensions.SetValue<DataStructureFlag, T>(T) CollectionsExtensions.AsEnum<DataStructureFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataStructureFlag, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataStructureFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSourceType.html": {
    "href": "api/XData.DataSourceType.html",
    "title": "Enum DataSourceType | XData website",
    "keywords": "Enum DataSourceType Data source type Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum DataSourceType Fields Name Description InnerView Inner view Procedure SQL Stored procedure or Function Subquery Subquery Table Table TempTable Temporary table WithSubquery Common-Table-Expression (WITH) Subquery XmlSource XML data source See Also Table Subquery InnerView Procedure Extension Methods SerializationExtensions.ToXml<DataSourceType>() CollectionsExtensions.SetValue<DataSourceType, T>(T) CollectionsExtensions.AsEnum<DataSourceType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataSourceType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataSourceType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.html": {
    "href": "api/XData.DataSource.Structure.html",
    "title": "Namespace XData.DataSource.Structure | XData website",
    "keywords": "Namespace XData.DataSource.Structure Classes DataQueryState Data query state DataStructureState Data structure state Field Field object FilterCombinationState Filter combination state FilterName FilterName helper class to initialize named RuntimeFilter FilterState Filter state info Grouping Grouping element Hierarchy Hierarchy Order Order by element RepositoryState Repository state RuntimeFilter Runtime value filter Structs SelectedField Selected field description TaggedValue Named value Interfaces IConstantFilter Constant value filter interface IDataSource Data object source IDataStructure Data object structure IDictionaryFilter Dictionary filter interface IExpressionFilter Expression filter interface IExternalLink External link interface IField Field interface IFilter Filter interface IFilterCombination Filter combination interface IInnerLink Link interface IInnerViewLink Inner view link interface INamedFilter Named filter interface IOptionalFilter Optional filter interface Hint: Optional filters can rise flag to skip their sources if no value assigned in runtime or their subquery is skipped by other optional filters IProcedure Procedure based structure IRangeFilter Range filter interface IRuntimeFilter Runtime filter interface ISqlPart Subquery base interface ISubqueryFilter Subquery filter interface ISubqueryLink Subquery link interface ITable Table ITableLike Temporary table ITempTable IXmlSource XML data source"
  },
  "api/XData.DataSource.Structure.TaggedValue.Key.html": {
    "href": "api/XData.DataSource.Structure.TaggedValue.Key.html",
    "title": "Property Key | XData website",
    "keywords": "Property Key | Improve this Doc View Source Key Name Declaration [DataMember] public string Key { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.TaggedValue.Value.html": {
    "href": "api/XData.DataSource.Structure.TaggedValue.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Value Declaration [DataMember] public object Value { get; set; } Property Value Type Description Object"
  },
  "api/XData.DataSource.Structure.TaggedValue.html": {
    "href": "api/XData.DataSource.Structure.TaggedValue.html",
    "title": "Struct TaggedValue | XData website",
    "keywords": "Struct TaggedValue Named value Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax [DataContract] public struct TaggedValue Properties Name Description Key Name Value Value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.SelectedField.Field.html": {
    "href": "api/XData.DataSource.Structure.SelectedField.Field.html",
    "title": "Field Field | XData website",
    "keywords": "Field Field Field description Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public readonly IField Field Returns Type Description IField"
  },
  "api/XData.DataSource.Structure.SelectedField.Alias.html": {
    "href": "api/XData.DataSource.Structure.SelectedField.Alias.html",
    "title": "Field Alias | XData website",
    "keywords": "Field Alias Alias Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public readonly string Alias Returns Type Description String"
  },
  "api/XData.DataSource.Structure.SelectedField.FieldName.html": {
    "href": "api/XData.DataSource.Structure.SelectedField.FieldName.html",
    "title": "Field FieldName | XData website",
    "keywords": "Field FieldName Full field name Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public readonly string FieldName Returns Type Description String"
  },
  "api/XData.DataSource.Structure.SelectedField.Property.html": {
    "href": "api/XData.DataSource.Structure.SelectedField.Property.html",
    "title": "Field Property | XData website",
    "keywords": "Field Property Property name Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public readonly string Property Returns Type Description String"
  },
  "api/XData.DataSource.Structure.SelectedField.-ctor.html": {
    "href": "api/XData.DataSource.Structure.SelectedField.-ctor.html",
    "title": "Constructor SelectedField | XData website",
    "keywords": "Constructor SelectedField | Improve this Doc View Source SelectedField(IField, String, String, String) Selected field constructor Declaration public SelectedField(IField field, string alias, string fieldName, string property = null) Parameters Type Name Description IField field Field object String alias Source alias String fieldName Field name String property Property name"
  },
  "api/XData.DataSource.Structure.SelectedField.html": {
    "href": "api/XData.DataSource.Structure.SelectedField.html",
    "title": "Struct SelectedField | XData website",
    "keywords": "Struct SelectedField Selected field description Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public struct SelectedField Constructors Name Description SelectedField(IField, String, String, String) Selected field constructor Fields Name Description Alias Alias Field Field description FieldName Full field name Property Property name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.Name.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Filter name Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.Operation.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.Operation.html",
    "title": "Property Operation | XData website",
    "keywords": "Property Operation | Improve this Doc View Source Operation Filter operation Declaration public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.Nullable.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.Nullable.html",
    "title": "Property Nullable | XData website",
    "keywords": "Property Nullable | Improve this Doc View Source Nullable Filter null value handling Declaration public FilterNullable Nullable { get; set; } Property Value Type Description FilterNullable"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.PrimaryFilter.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.PrimaryFilter.html",
    "title": "Property PrimaryFilter | XData website",
    "keywords": "Property PrimaryFilter | Improve this Doc View Source PrimaryFilter Primary filter flag Declaration public bool PrimaryFilter { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.Combination.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.Combination.html",
    "title": "Property Combination | XData website",
    "keywords": "Property Combination | Improve this Doc View Source Combination Filter combination name Declaration public string Combination { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.PropertyName.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.-ctor.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.-ctor.html",
    "title": "Constructor RuntimeFilter | XData website",
    "keywords": "Constructor RuntimeFilter | Improve this Doc View Source RuntimeFilter(String, String) Runtime filter constructor Declaration public RuntimeFilter(string propertyName, string filterName = null) Parameters Type Name Description String propertyName Filter property name String filterName Filter name"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.op_Implicit.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(FilterName to RuntimeFilter) Cast operator for named runtime filter Declaration public static implicit operator RuntimeFilter(FilterName filterName) Parameters Type Name Description FilterName filterName Filter name Returns Type Description RuntimeFilter | Improve this Doc View Source Implicit(String to RuntimeFilter) Cast operator for runtime filter based on property Declaration public static implicit operator RuntimeFilter(string propertyName) Parameters Type Name Description String propertyName Property name Returns Type Description RuntimeFilter"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.html",
    "title": "Class RuntimeFilter | XData website",
    "keywords": "Class RuntimeFilter Runtime value filter Inheritance Object RuntimeFilter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public sealed class RuntimeFilter Constructors Name Description RuntimeFilter(String, String) Runtime filter constructor Properties Name Description Combination Filter combination name Name Filter name Nullable Filter null value handling Operation Filter operation PrimaryFilter Primary filter flag PropertyName Property name Operators Name Description Implicit(String to RuntimeFilter) Cast operator for runtime filter based on property Implicit(FilterName to RuntimeFilter) Cast operator for named runtime filter Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.RepositoryState.Alias.html": {
    "href": "api/XData.DataSource.Structure.RepositoryState.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Alias Declaration [DataMember] public string Alias { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.RepositoryState.Fixed.html": {
    "href": "api/XData.DataSource.Structure.RepositoryState.Fixed.html",
    "title": "Property Fixed | XData website",
    "keywords": "Property Fixed | Improve this Doc View Source Fixed Fixed query flag Declaration [DataMember] public bool Fixed { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.RepositoryState.ShowSubtree.html": {
    "href": "api/XData.DataSource.Structure.RepositoryState.ShowSubtree.html",
    "title": "Property ShowSubtree | XData website",
    "keywords": "Property ShowSubtree | Improve this Doc View Source ShowSubtree Show subtree flag Declaration [DataMember] public bool ShowSubtree { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.RepositoryState.SecuritySessionClass.html": {
    "href": "api/XData.DataSource.Structure.RepositoryState.SecuritySessionClass.html",
    "title": "Property SecuritySessionClass | XData website",
    "keywords": "Property SecuritySessionClass | Improve this Doc View Source SecuritySessionClass Security session class Declaration [DataMember] public string SecuritySessionClass { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.RepositoryState.UserName.html": {
    "href": "api/XData.DataSource.Structure.RepositoryState.UserName.html",
    "title": "Property UserName | XData website",
    "keywords": "Property UserName | Improve this Doc View Source UserName Security user name Declaration [DataMember] public string UserName { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.RepositoryState.SecurityRoles.html": {
    "href": "api/XData.DataSource.Structure.RepositoryState.SecurityRoles.html",
    "title": "Property SecurityRoles | XData website",
    "keywords": "Property SecurityRoles | Improve this Doc View Source SecurityRoles Security session roles Declaration [DataMember] public string[] SecurityRoles { get; set; } Property Value Type Description String []"
  },
  "api/XData.DataSource.Structure.RepositoryState.IsSupervisor.html": {
    "href": "api/XData.DataSource.Structure.RepositoryState.IsSupervisor.html",
    "title": "Property IsSupervisor | XData website",
    "keywords": "Property IsSupervisor | Improve this Doc View Source IsSupervisor Security session supervisor flag Declaration [DataMember] public bool IsSupervisor { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.RepositoryState.html": {
    "href": "api/XData.DataSource.Structure.RepositoryState.html",
    "title": "Class RepositoryState | XData website",
    "keywords": "Class RepositoryState Repository state Inheritance Object DataQueryState RepositoryState Inherited Members DataQueryState.AssemblyName DataQueryState.ElementType DataQueryState.Context DataQueryState.Structure DataQueryState.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax [DataContract] public sealed class RepositoryState : DataQueryState Properties Name Description Alias Alias Fixed Fixed query flag IsSupervisor Security session supervisor flag SecurityRoles Security session roles SecuritySessionClass Security session class ShowSubtree Show subtree flag UserName Security user name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.Order.PropertyOwnerType.html": {
    "href": "api/XData.DataSource.Structure.Order.PropertyOwnerType.html",
    "title": "Property PropertyOwnerType | XData website",
    "keywords": "Property PropertyOwnerType | Improve this Doc View Source PropertyOwnerType Property owner type name Declaration [DataMember] public string PropertyOwnerType { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Order.SourceAlias.html": {
    "href": "api/XData.DataSource.Structure.Order.SourceAlias.html",
    "title": "Property SourceAlias | XData website",
    "keywords": "Property SourceAlias | Improve this Doc View Source SourceAlias Source alias Declaration [DataMember] public string SourceAlias { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Order.FieldName.html": {
    "href": "api/XData.DataSource.Structure.Order.FieldName.html",
    "title": "Property FieldName | XData website",
    "keywords": "Property FieldName | Improve this Doc View Source FieldName Field name Declaration [DataMember] public string FieldName { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Order.Descending.html": {
    "href": "api/XData.DataSource.Structure.Order.Descending.html",
    "title": "Property Descending | XData website",
    "keywords": "Property Descending | Improve this Doc View Source Descending Descending flag Declaration [DataMember] public bool Descending { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.Order.Equals.html": {
    "href": "api/XData.DataSource.Structure.Order.Equals.html",
    "title": "Method Equals | XData website",
    "keywords": "Method Equals | Improve this Doc View Source Equals(Order) Order equality check Declaration public bool Equals(Order other) Parameters Type Name Description Order other Order instance to compare Returns Type Description Boolean Instances are contains the same data Implements IEquatable<T>.Equals(T)"
  },
  "api/XData.DataSource.Structure.Order.html": {
    "href": "api/XData.DataSource.Structure.Order.html",
    "title": "Class Order | XData website",
    "keywords": "Class Order Order by element Inheritance Object Order Implements IEquatable < Order > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax [DataContract] public sealed class Order : IEquatable<Order> Properties Name Description Descending Descending flag FieldName Field name PropertyOwnerType Property owner type name SourceAlias Source alias Methods Name Description Equals(Order) Order equality check Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IXmlSource.RootXPath.html": {
    "href": "api/XData.DataSource.Structure.IXmlSource.RootXPath.html",
    "title": "Property RootXPath | XData website",
    "keywords": "Property RootXPath | Improve this Doc View Source RootXPath Table name Declaration string RootXPath { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IXmlSource.html": {
    "href": "api/XData.DataSource.Structure.IXmlSource.html",
    "title": "Interface IXmlSource | XData website",
    "keywords": "Interface IXmlSource XML data source Inherited Members ITableLike.Name ITableLike.Fields IDataSource.SourceType IDataSource.Alias IDataSource.IsBase IDataSource.GetFields() IDataSource.GetFields(Type) IDataSource.GetField(String, String, String) IDataSource.GetField(String, String, String, String) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IXmlSource : ITableLike, IDataSource, ICloneable Properties Name Description RootXPath Table name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.ITempTable.html": {
    "href": "api/XData.DataSource.Structure.ITempTable.html",
    "title": "Interface ITempTable | XData website",
    "keywords": "Interface ITempTable Inherited Members ITableLike.Name ITableLike.Fields IDataSource.SourceType IDataSource.Alias IDataSource.IsBase IDataSource.GetFields() IDataSource.GetFields(Type) IDataSource.GetField(String, String, String) IDataSource.GetField(String, String, String, String) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface ITempTable : ITableLike, IDataSource, ICloneable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.ITableLike.Name.html": {
    "href": "api/XData.DataSource.Structure.ITableLike.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Table name Declaration string Name { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.ITableLike.Fields.html": {
    "href": "api/XData.DataSource.Structure.ITableLike.Fields.html",
    "title": "Property Fields | XData website",
    "keywords": "Property Fields | Improve this Doc View Source Fields Fields Declaration SortedSet<IField> Fields { get; } Property Value Type Description SortedSet < IField >"
  },
  "api/XData.DataSource.Structure.ITableLike.html": {
    "href": "api/XData.DataSource.Structure.ITableLike.html",
    "title": "Interface ITableLike | XData website",
    "keywords": "Interface ITableLike Temporary table Inherited Members IDataSource.SourceType IDataSource.Alias IDataSource.IsBase IDataSource.GetFields() IDataSource.GetFields(Type) IDataSource.GetField(String, String, String) IDataSource.GetField(String, String, String, String) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface ITableLike : IDataSource, ICloneable Properties Name Description Fields Fields Name Table name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.ITable.ParentAlias.html": {
    "href": "api/XData.DataSource.Structure.ITable.ParentAlias.html",
    "title": "Property ParentAlias | XData website",
    "keywords": "Property ParentAlias | Improve this Doc View Source ParentAlias Parent table alias Declaration string ParentAlias { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.ITable.Hint.html": {
    "href": "api/XData.DataSource.Structure.ITable.Hint.html",
    "title": "Property Hint | XData website",
    "keywords": "Property Hint | Improve this Doc View Source Hint Table hint Declaration HintInfo[] Hint { get; } Property Value Type Description HintInfo []"
  },
  "api/XData.DataSource.Structure.ITable.Hierarchies.html": {
    "href": "api/XData.DataSource.Structure.ITable.Hierarchies.html",
    "title": "Property Hierarchies | XData website",
    "keywords": "Property Hierarchies | Improve this Doc View Source Hierarchies Hierarchies Declaration List<Hierarchy> Hierarchies { get; } Property Value Type Description List < Hierarchy >"
  },
  "api/XData.DataSource.Structure.ITable.html": {
    "href": "api/XData.DataSource.Structure.ITable.html",
    "title": "Interface ITable | XData website",
    "keywords": "Interface ITable Table Inherited Members ITableLike.Name ITableLike.Fields IDataSource.SourceType IDataSource.Alias IDataSource.IsBase IDataSource.GetFields() IDataSource.GetFields(Type) IDataSource.GetField(String, String, String) IDataSource.GetField(String, String, String, String) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface ITable : ITableLike, IDataSource, ICloneable Properties Name Description Hierarchies Hierarchies Hint Table hint ParentAlias Parent table alias Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.ISubqueryLink.LinkedType.html": {
    "href": "api/XData.DataSource.Structure.ISubqueryLink.LinkedType.html",
    "title": "Property LinkedType | XData website",
    "keywords": "Property LinkedType | Improve this Doc View Source LinkedType Linked type full name Declaration string LinkedType { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.ISubqueryLink.html": {
    "href": "api/XData.DataSource.Structure.ISubqueryLink.html",
    "title": "Interface ISubqueryLink | XData website",
    "keywords": "Interface ISubqueryLink Subquery link interface Inherited Members IInnerLink.LinkedSourceAlias IInnerLink.LinkedField IInnerLink.GetIsLink() IInnerLink.GetAliases() IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface ISubqueryLink : IInnerLink, IOptionalFilter, IFilter, ICloneable Properties Name Description LinkedType Linked type full name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.ISubqueryFilter.SubqueryAlias.html": {
    "href": "api/XData.DataSource.Structure.ISubqueryFilter.SubqueryAlias.html",
    "title": "Property SubqueryAlias | XData website",
    "keywords": "Property SubqueryAlias | Improve this Doc View Source SubqueryAlias Subquery alias Declaration string SubqueryAlias { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.ISubqueryFilter.html": {
    "href": "api/XData.DataSource.Structure.ISubqueryFilter.html",
    "title": "Interface ISubqueryFilter | XData website",
    "keywords": "Interface ISubqueryFilter Subquery filter interface Inherited Members IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface ISubqueryFilter : IOptionalFilter, IFilter, ICloneable Properties Name Description SubqueryAlias Subquery alias Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.ISqlPart.ObjectType.html": {
    "href": "api/XData.DataSource.Structure.ISqlPart.ObjectType.html",
    "title": "Property ObjectType | XData website",
    "keywords": "Property ObjectType | Improve this Doc View Source ObjectType Subquery object type name Declaration string ObjectType { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.ISqlPart.Structure.html": {
    "href": "api/XData.DataSource.Structure.ISqlPart.Structure.html",
    "title": "Property Structure | XData website",
    "keywords": "Property Structure | Improve this Doc View Source Structure Subquery structure Declaration IDataStructure Structure { get; } Property Value Type Description IDataStructure"
  },
  "api/XData.DataSource.Structure.ISqlPart.Dynamic.html": {
    "href": "api/XData.DataSource.Structure.ISqlPart.Dynamic.html",
    "title": "Property Dynamic | XData website",
    "keywords": "Property Dynamic | Improve this Doc View Source Dynamic Subquery dynamic flag Declaration bool Dynamic { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.ISqlPart.FindTempTables.html": {
    "href": "api/XData.DataSource.Structure.ISqlPart.FindTempTables.html",
    "title": "Method FindTempTables | XData website",
    "keywords": "Method FindTempTables | Improve this Doc View Source FindTempTables() Find temporary tables recursive Declaration IEnumerable<ITempTable> FindTempTables() Returns Type Description IEnumerable < ITempTable > Found temporary tables sequence"
  },
  "api/XData.DataSource.Structure.ISqlPart.html": {
    "href": "api/XData.DataSource.Structure.ISqlPart.html",
    "title": "Interface ISqlPart | XData website",
    "keywords": "Interface ISqlPart Subquery base interface Inherited Members IDataSource.SourceType IDataSource.Alias IDataSource.IsBase IDataSource.GetFields() IDataSource.GetFields(Type) IDataSource.GetField(String, String, String) IDataSource.GetField(String, String, String, String) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface ISqlPart : IDataSource, ICloneable Properties Name Description Dynamic Subquery dynamic flag ObjectType Subquery object type name Structure Subquery structure Methods Name Description FindTempTables() Find temporary tables recursive Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IRuntimeFilter.Nullable.html": {
    "href": "api/XData.DataSource.Structure.IRuntimeFilter.Nullable.html",
    "title": "Property Nullable | XData website",
    "keywords": "Property Nullable | Improve this Doc View Source Nullable Null value handling Declaration FilterNullable Nullable { get; } Property Value Type Description FilterNullable"
  },
  "api/XData.DataSource.Structure.IRuntimeFilter.GetCaption.html": {
    "href": "api/XData.DataSource.Structure.IRuntimeFilter.GetCaption.html",
    "title": "Method GetCaption | XData website",
    "keywords": "Method GetCaption | Improve this Doc View Source GetCaption() Filter caption Declaration string GetCaption() Returns Type Description String"
  },
  "api/XData.DataSource.Structure.IRuntimeFilter.html": {
    "href": "api/XData.DataSource.Structure.IRuntimeFilter.html",
    "title": "Interface IRuntimeFilter | XData website",
    "keywords": "Interface IRuntimeFilter Runtime filter interface Inherited Members INamedFilter.Name IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IRuntimeFilter : INamedFilter, IOptionalFilter, IFilter, ICloneable Properties Name Description Nullable Null value handling Methods Name Description GetCaption() Filter caption Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IRangeFilter.RangeValues.html": {
    "href": "api/XData.DataSource.Structure.IRangeFilter.RangeValues.html",
    "title": "Property RangeValues | XData website",
    "keywords": "Property RangeValues | Improve this Doc View Source RangeValues Range values Declaration object[] RangeValues { get; } Property Value Type Description Object []"
  },
  "api/XData.DataSource.Structure.IRangeFilter.html": {
    "href": "api/XData.DataSource.Structure.IRangeFilter.html",
    "title": "Interface IRangeFilter | XData website",
    "keywords": "Interface IRangeFilter Range filter interface Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IRangeFilter : IFilter, ICloneable Properties Name Description RangeValues Range values Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IProcedure.ProcedureType.html": {
    "href": "api/XData.DataSource.Structure.IProcedure.ProcedureType.html",
    "title": "Property ProcedureType | XData website",
    "keywords": "Property ProcedureType | Improve this Doc View Source ProcedureType SQL stored procedure/function type Declaration ProcedureType ProcedureType { get; } Property Value Type Description ProcedureType See Also ProcedureType"
  },
  "api/XData.DataSource.Structure.IProcedure.Name.html": {
    "href": "api/XData.DataSource.Structure.IProcedure.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name SQL stored procedure/function full qualified name Declaration string Name { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IProcedure.DefaultResultSet.html": {
    "href": "api/XData.DataSource.Structure.IProcedure.DefaultResultSet.html",
    "title": "Property DefaultResultSet | XData website",
    "keywords": "Property DefaultResultSet | Improve this Doc View Source DefaultResultSet SQL stored procedure/function default result set name Declaration string DefaultResultSet { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IProcedure.Hint.html": {
    "href": "api/XData.DataSource.Structure.IProcedure.Hint.html",
    "title": "Property Hint | XData website",
    "keywords": "Property Hint | Improve this Doc View Source Hint SQL stored procedure/function hint Declaration HintInfo Hint { get; } Property Value Type Description HintInfo"
  },
  "api/XData.DataSource.Structure.IProcedure.Parameters.html": {
    "href": "api/XData.DataSource.Structure.IProcedure.Parameters.html",
    "title": "Property Parameters | XData website",
    "keywords": "Property Parameters | Improve this Doc View Source Parameters SQL stored procedure/function parameters descriptions Declaration IEnumerable<IParameterDescription> Parameters { get; } Property Value Type Description IEnumerable < IParameterDescription >"
  },
  "api/XData.DataSource.Structure.IProcedure.CallBased.html": {
    "href": "api/XData.DataSource.Structure.IProcedure.CallBased.html",
    "title": "Property CallBased | XData website",
    "keywords": "Property CallBased | Improve this Doc View Source CallBased SQL procedure/function is call based Declaration bool CallBased { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IProcedure.html": {
    "href": "api/XData.DataSource.Structure.IProcedure.html",
    "title": "Interface IProcedure | XData website",
    "keywords": "Interface IProcedure Procedure based structure Inherited Members IDataSource.SourceType IDataSource.Alias IDataSource.IsBase IDataSource.GetFields() IDataSource.GetFields(Type) IDataSource.GetField(String, String, String) IDataSource.GetField(String, String, String, String) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IProcedure : IDataSource, ICloneable Properties Name Description CallBased SQL procedure/function is call based DefaultResultSet SQL stored procedure/function default result set name Hint SQL stored procedure/function hint Name SQL stored procedure/function full qualified name Parameters SQL stored procedure/function parameters descriptions ProcedureType SQL stored procedure/function type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IOptionalFilter.Primary.html": {
    "href": "api/XData.DataSource.Structure.IOptionalFilter.Primary.html",
    "title": "Property Primary | XData website",
    "keywords": "Property Primary | Improve this Doc View Source Primary Primary filter flag Declaration bool Primary { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IOptionalFilter.html": {
    "href": "api/XData.DataSource.Structure.IOptionalFilter.html",
    "title": "Interface IOptionalFilter | XData website",
    "keywords": "Interface IOptionalFilter Optional filter interface Hint: Optional filters can rise flag to skip their sources if no value assigned in runtime or their subquery is skipped by other optional filters Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IOptionalFilter : IFilter, ICloneable Properties Name Description Primary Primary filter flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.INamedFilter.Name.html": {
    "href": "api/XData.DataSource.Structure.INamedFilter.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Filter name Declaration string Name { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.INamedFilter.html": {
    "href": "api/XData.DataSource.Structure.INamedFilter.html",
    "title": "Interface INamedFilter | XData website",
    "keywords": "Interface INamedFilter Named filter interface Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface INamedFilter : IFilter, ICloneable Properties Name Description Name Filter name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IInnerViewLink.LinkedAlias.html": {
    "href": "api/XData.DataSource.Structure.IInnerViewLink.LinkedAlias.html",
    "title": "Property LinkedAlias | XData website",
    "keywords": "Property LinkedAlias | Improve this Doc View Source LinkedAlias Linked source alias Declaration string LinkedAlias { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IInnerViewLink.html": {
    "href": "api/XData.DataSource.Structure.IInnerViewLink.html",
    "title": "Interface IInnerViewLink | XData website",
    "keywords": "Interface IInnerViewLink Inner view link interface Inherited Members IInnerLink.LinkedSourceAlias IInnerLink.LinkedField IInnerLink.GetIsLink() IInnerLink.GetAliases() IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IInnerViewLink : IInnerLink, IOptionalFilter, IFilter, ICloneable Properties Name Description LinkedAlias Linked source alias Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IInnerLink.LinkedSourceAlias.html": {
    "href": "api/XData.DataSource.Structure.IInnerLink.LinkedSourceAlias.html",
    "title": "Property LinkedSourceAlias | XData website",
    "keywords": "Property LinkedSourceAlias | Improve this Doc View Source LinkedSourceAlias Linked source alias Declaration string LinkedSourceAlias { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IInnerLink.LinkedField.html": {
    "href": "api/XData.DataSource.Structure.IInnerLink.LinkedField.html",
    "title": "Property LinkedField | XData website",
    "keywords": "Property LinkedField | Improve this Doc View Source LinkedField Linked field Declaration string LinkedField { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IInnerLink.GetIsLink.html": {
    "href": "api/XData.DataSource.Structure.IInnerLink.GetIsLink.html",
    "title": "Method GetIsLink | XData website",
    "keywords": "Method GetIsLink | Improve this Doc View Source GetIsLink() Link flag Declaration bool GetIsLink() Returns Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IInnerLink.GetAliases.html": {
    "href": "api/XData.DataSource.Structure.IInnerLink.GetAliases.html",
    "title": "Method GetAliases | XData website",
    "keywords": "Method GetAliases | Improve this Doc View Source GetAliases() Link aliases Declaration string[] GetAliases() Returns Type Description String []"
  },
  "api/XData.DataSource.Structure.IInnerLink.html": {
    "href": "api/XData.DataSource.Structure.IInnerLink.html",
    "title": "Interface IInnerLink | XData website",
    "keywords": "Interface IInnerLink Link interface Inherited Members IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IInnerLink : IOptionalFilter, IFilter, ICloneable Properties Name Description LinkedField Linked field LinkedSourceAlias Linked source alias Methods Name Description GetAliases() Link aliases GetIsLink() Link flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IFilterCombination.Name.html": {
    "href": "api/XData.DataSource.Structure.IFilterCombination.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Filter combination name Declaration string Name { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IFilterCombination.Filters.html": {
    "href": "api/XData.DataSource.Structure.IFilterCombination.Filters.html",
    "title": "Property Filters | XData website",
    "keywords": "Property Filters | Improve this Doc View Source Filters Filters Declaration List<IFilter> Filters { get; } Property Value Type Description List < IFilter >"
  },
  "api/XData.DataSource.Structure.IFilterCombination.FilterCombinations.html": {
    "href": "api/XData.DataSource.Structure.IFilterCombination.FilterCombinations.html",
    "title": "Property FilterCombinations | XData website",
    "keywords": "Property FilterCombinations | Improve this Doc View Source FilterCombinations Child combinations Declaration List<IFilterCombination> FilterCombinations { get; } Property Value Type Description List < IFilterCombination >"
  },
  "api/XData.DataSource.Structure.IFilterCombination.Combination.html": {
    "href": "api/XData.DataSource.Structure.IFilterCombination.Combination.html",
    "title": "Property Combination | XData website",
    "keywords": "Property Combination | Improve this Doc View Source Combination Logical combination Declaration Combination Combination { get; } Property Value Type Description Combination"
  },
  "api/XData.DataSource.Structure.IFilterCombination.GetPrimaryFilters.html": {
    "href": "api/XData.DataSource.Structure.IFilterCombination.GetPrimaryFilters.html",
    "title": "Method GetPrimaryFilters | XData website",
    "keywords": "Method GetPrimaryFilters | Improve this Doc View Source GetPrimaryFilters() Returns primary filters Declaration List<IOptionalFilter> GetPrimaryFilters() Returns Type Description List < IOptionalFilter > Primary filters list"
  },
  "api/XData.DataSource.Structure.IFilterCombination.GetLinks.html": {
    "href": "api/XData.DataSource.Structure.IFilterCombination.GetLinks.html",
    "title": "Method GetLinks | XData website",
    "keywords": "Method GetLinks | Improve this Doc View Source GetLinks(String[], Boolean) Returns links Declaration IEnumerable<IInnerLink> GetLinks(string[] aliases, bool exact) Parameters Type Name Description String [] aliases Array of source aliases Boolean exact Exact comparison flag Returns Type Description IEnumerable < IInnerLink > Links sequence | Improve this Doc View Source GetLinks(String) Returns links Declaration IEnumerable<IInnerLink> GetLinks(string alias) Parameters Type Name Description String alias Source alias Returns Type Description IEnumerable < IInnerLink > Links sequence | Improve this Doc View Source GetLinks(IDataStructure, String) Returns links Declaration IEnumerable<IInnerLink> GetLinks(IDataStructure structure, string alias) Parameters Type Name Description IDataStructure structure Structure String alias Source alias Returns Type Description IEnumerable < IInnerLink > Links sequence"
  },
  "api/XData.DataSource.Structure.IFilterCombination.GetValueFilters.html": {
    "href": "api/XData.DataSource.Structure.IFilterCombination.GetValueFilters.html",
    "title": "Method GetValueFilters | XData website",
    "keywords": "Method GetValueFilters | Improve this Doc View Source GetValueFilters() Return value filters list Declaration IEnumerable<IFilter> GetValueFilters() Returns Type Description IEnumerable < IFilter > Value filters list"
  },
  "api/XData.DataSource.Structure.IFilterCombination.html": {
    "href": "api/XData.DataSource.Structure.IFilterCombination.html",
    "title": "Interface IFilterCombination | XData website",
    "keywords": "Interface IFilterCombination Filter combination interface Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IFilterCombination : ICloneable Properties Name Description Combination Logical combination FilterCombinations Child combinations Filters Filters Name Filter combination name Methods Name Description GetLinks(String) Returns links GetLinks(String[], Boolean) Returns links GetLinks(IDataStructure, String) Returns links GetPrimaryFilters() Returns primary filters GetValueFilters() Return value filters list Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IFilter.FilterType.html": {
    "href": "api/XData.DataSource.Structure.IFilter.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration FilterType FilterType { get; } Property Value Type Description FilterType"
  },
  "api/XData.DataSource.Structure.IFilter.SourceAlias.html": {
    "href": "api/XData.DataSource.Structure.IFilter.SourceAlias.html",
    "title": "Property SourceAlias | XData website",
    "keywords": "Property SourceAlias | Improve this Doc View Source SourceAlias Source alias Declaration string SourceAlias { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IFilter.Field.html": {
    "href": "api/XData.DataSource.Structure.IFilter.Field.html",
    "title": "Property Field | XData website",
    "keywords": "Property Field | Improve this Doc View Source Field Field name Declaration string Field { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IFilter.Operation.html": {
    "href": "api/XData.DataSource.Structure.IFilter.Operation.html",
    "title": "Property Operation | XData website",
    "keywords": "Property Operation | Improve this Doc View Source Operation Filter operation Declaration FilterOperation Operation { get; } Property Value Type Description FilterOperation"
  },
  "api/XData.DataSource.Structure.IFilter.html": {
    "href": "api/XData.DataSource.Structure.IFilter.html",
    "title": "Interface IFilter | XData website",
    "keywords": "Interface IFilter Filter interface Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IFilter : ICloneable Properties Name Description Field Field name FilterType Filter type Operation Filter operation SourceAlias Source alias Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IField.Name.html": {
    "href": "api/XData.DataSource.Structure.IField.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Property name Declaration string Name { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IField.IsTablePk.html": {
    "href": "api/XData.DataSource.Structure.IField.IsTablePk.html",
    "title": "Property IsTablePk | XData website",
    "keywords": "Property IsTablePk | Improve this Doc View Source IsTablePk Table primary key flag Declaration bool IsTablePk { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IField.IsAutoIncrement.html": {
    "href": "api/XData.DataSource.Structure.IField.IsAutoIncrement.html",
    "title": "Property IsAutoIncrement | XData website",
    "keywords": "Property IsAutoIncrement | Improve this Doc View Source IsAutoIncrement Auto increment field flag Declaration bool IsAutoIncrement { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IField.IsSelectable.html": {
    "href": "api/XData.DataSource.Structure.IField.IsSelectable.html",
    "title": "Property IsSelectable | XData website",
    "keywords": "Property IsSelectable | Improve this Doc View Source IsSelectable Selectable flag Declaration bool IsSelectable { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IField.SqlType.html": {
    "href": "api/XData.DataSource.Structure.IField.SqlType.html",
    "title": "Property SqlType | XData website",
    "keywords": "Property SqlType | Improve this Doc View Source SqlType SQL type Declaration DbType SqlType { get; } Property Value Type Description DbType"
  },
  "api/XData.DataSource.Structure.IField.FieldName.html": {
    "href": "api/XData.DataSource.Structure.IField.FieldName.html",
    "title": "Property FieldName | XData website",
    "keywords": "Property FieldName | Improve this Doc View Source FieldName Field name Declaration string FieldName { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IField.Flags.html": {
    "href": "api/XData.DataSource.Structure.IField.Flags.html",
    "title": "Property Flags | XData website",
    "keywords": "Property Flags | Improve this Doc View Source Flags Flags Declaration DataPropertyFlag Flags { get; set; } Property Value Type Description DataPropertyFlag"
  },
  "api/XData.DataSource.Structure.IField.DefaultType.html": {
    "href": "api/XData.DataSource.Structure.IField.DefaultType.html",
    "title": "Property DefaultType | XData website",
    "keywords": "Property DefaultType | Improve this Doc View Source DefaultType Default source Declaration DefaultType DefaultType { get; } Property Value Type Description DefaultType"
  },
  "api/XData.DataSource.Structure.IField.DefaultValue.html": {
    "href": "api/XData.DataSource.Structure.IField.DefaultValue.html",
    "title": "Property DefaultValue | XData website",
    "keywords": "Property DefaultValue | Improve this Doc View Source DefaultValue Default value Declaration object DefaultValue { get; } Property Value Type Description Object"
  },
  "api/XData.DataSource.Structure.IField.DefaultFeature.html": {
    "href": "api/XData.DataSource.Structure.IField.DefaultFeature.html",
    "title": "Property DefaultFeature | XData website",
    "keywords": "Property DefaultFeature | Improve this Doc View Source DefaultFeature Default extended features Declaration DefaultFeature DefaultFeature { get; } Property Value Type Description DefaultFeature"
  },
  "api/XData.DataSource.Structure.IField.EnumValues.html": {
    "href": "api/XData.DataSource.Structure.IField.EnumValues.html",
    "title": "Property EnumValues | XData website",
    "keywords": "Property EnumValues | Improve this Doc View Source EnumValues Enumeration values Declaration KeyValuePair<long, string>[] EnumValues { get; set; } Property Value Type Description KeyValuePair < Int64 , String >[]"
  },
  "api/XData.DataSource.Structure.IField.ExprType.html": {
    "href": "api/XData.DataSource.Structure.IField.ExprType.html",
    "title": "Property ExprType | XData website",
    "keywords": "Property ExprType | Improve this Doc View Source ExprType Expression type Declaration DataExpressionType ExprType { get; } Property Value Type Description DataExpressionType"
  },
  "api/XData.DataSource.Structure.IField.ExprText.html": {
    "href": "api/XData.DataSource.Structure.IField.ExprText.html",
    "title": "Property ExprText | XData website",
    "keywords": "Property ExprText | Improve this Doc View Source ExprText Expression text Declaration string ExprText { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IField.UpdateWithExprType.html": {
    "href": "api/XData.DataSource.Structure.IField.UpdateWithExprType.html",
    "title": "Property UpdateWithExprType | XData website",
    "keywords": "Property UpdateWithExprType | Improve this Doc View Source UpdateWithExprType Update source expression type Declaration DataExpressionType UpdateWithExprType { get; } Property Value Type Description DataExpressionType"
  },
  "api/XData.DataSource.Structure.IField.UpdateWithExprText.html": {
    "href": "api/XData.DataSource.Structure.IField.UpdateWithExprText.html",
    "title": "Property UpdateWithExprText | XData website",
    "keywords": "Property UpdateWithExprText | Improve this Doc View Source UpdateWithExprText Update source expression text Declaration string UpdateWithExprText { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IField.ExprSize.html": {
    "href": "api/XData.DataSource.Structure.IField.ExprSize.html",
    "title": "Property ExprSize | XData website",
    "keywords": "Property ExprSize | Improve this Doc View Source ExprSize Expression size Declaration int ExprSize { get; } Property Value Type Description Int32"
  },
  "api/XData.DataSource.Structure.IField.ExprScale.html": {
    "href": "api/XData.DataSource.Structure.IField.ExprScale.html",
    "title": "Property ExprScale | XData website",
    "keywords": "Property ExprScale | Improve this Doc View Source ExprScale Expression scale Declaration int ExprScale { get; } Property Value Type Description Int32"
  },
  "api/XData.DataSource.Structure.IField.NativeSqlType.html": {
    "href": "api/XData.DataSource.Structure.IField.NativeSqlType.html",
    "title": "Property NativeSqlType | XData website",
    "keywords": "Property NativeSqlType | Improve this Doc View Source NativeSqlType Native SQL type name Declaration string NativeSqlType { get; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter!"
  },
  "api/XData.DataSource.Structure.IField.XPath.html": {
    "href": "api/XData.DataSource.Structure.IField.XPath.html",
    "title": "Property XPath | XData website",
    "keywords": "Property XPath | Improve this Doc View Source XPath XML property value XPath Declaration string XPath { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IField.html": {
    "href": "api/XData.DataSource.Structure.IField.html",
    "title": "Interface IField | XData website",
    "keywords": "Interface IField Field interface Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IField : ICloneable Properties Name Description DefaultFeature Default extended features DefaultType Default source DefaultValue Default value EnumValues Enumeration values ExprScale Expression scale ExprSize Expression size ExprText Expression text ExprType Expression type FieldName Field name Flags Flags IsAutoIncrement Auto increment field flag IsSelectable Selectable flag IsTablePk Table primary key flag Name Property name NativeSqlType Native SQL type name SqlType SQL type UpdateWithExprText Update source expression text UpdateWithExprType Update source expression type XPath XML property value XPath Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IExternalLink.ChildType.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.ChildType.html",
    "title": "Property ChildType | XData website",
    "keywords": "Property ChildType | Improve this Doc View Source ChildType Child type Declaration Type ChildType { get; } Property Value Type Description Type"
  },
  "api/XData.DataSource.Structure.IExternalLink.ChildLinkType.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.ChildLinkType.html",
    "title": "Property ChildLinkType | XData website",
    "keywords": "Property ChildLinkType | Improve this Doc View Source ChildLinkType Child link type Declaration Type ChildLinkType { get; } Property Value Type Description Type"
  },
  "api/XData.DataSource.Structure.IExternalLink.ChildProperty.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.ChildProperty.html",
    "title": "Property ChildProperty | XData website",
    "keywords": "Property ChildProperty | Improve this Doc View Source ChildProperty Child property Declaration string ChildProperty { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IExternalLink.FilterName.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.FilterName.html",
    "title": "Property FilterName | XData website",
    "keywords": "Property FilterName | Improve this Doc View Source FilterName Filter name Declaration string FilterName { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IExternalLink.PropertyName.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.PropertyName.html",
    "title": "Property PropertyName | XData website",
    "keywords": "Property PropertyName | Improve this Doc View Source PropertyName Property name Declaration string PropertyName { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IExternalLink.MasterRefresh.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.MasterRefresh.html",
    "title": "Property MasterRefresh | XData website",
    "keywords": "Property MasterRefresh | Improve this Doc View Source MasterRefresh Master refresh flag Declaration bool MasterRefresh { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IExternalLink.DirectLink.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.DirectLink.html",
    "title": "Property DirectLink | XData website",
    "keywords": "Property DirectLink | Improve this Doc View Source DirectLink Direct link flag Declaration bool DirectLink { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IExternalLink.Operation.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.Operation.html",
    "title": "Property Operation | XData website",
    "keywords": "Property Operation | Improve this Doc View Source Operation Filter operation Declaration FilterOperation Operation { get; } Property Value Type Description FilterOperation"
  },
  "api/XData.DataSource.Structure.IExternalLink.Nullable.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.Nullable.html",
    "title": "Property Nullable | XData website",
    "keywords": "Property Nullable | Improve this Doc View Source Nullable Null value handling Declaration FilterNullable Nullable { get; } Property Value Type Description FilterNullable"
  },
  "api/XData.DataSource.Structure.IExternalLink.PrimaryFilter.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.PrimaryFilter.html",
    "title": "Property PrimaryFilter | XData website",
    "keywords": "Property PrimaryFilter | Improve this Doc View Source PrimaryFilter Primary filter flag Declaration bool PrimaryFilter { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IExternalLink.Combination.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.Combination.html",
    "title": "Property Combination | XData website",
    "keywords": "Property Combination | Improve this Doc View Source Combination Filter combination name Declaration string Combination { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IExternalLink.TreeFilter.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.TreeFilter.html",
    "title": "Property TreeFilter | XData website",
    "keywords": "Property TreeFilter | Improve this Doc View Source TreeFilter Tree filter flag Declaration bool TreeFilter { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IExternalLink.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.html",
    "title": "Interface IExternalLink | XData website",
    "keywords": "Interface IExternalLink External link interface Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IExternalLink : ICloneable Properties Name Description ChildLinkType Child link type ChildProperty Child property ChildType Child type Combination Filter combination name DirectLink Direct link flag FilterName Filter name MasterRefresh Master refresh flag Nullable Null value handling Operation Filter operation PrimaryFilter Primary filter flag PropertyName Property name TreeFilter Tree filter flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IExpressionFilter.ExprText.html": {
    "href": "api/XData.DataSource.Structure.IExpressionFilter.ExprText.html",
    "title": "Property ExprText | XData website",
    "keywords": "Property ExprText | Improve this Doc View Source ExprText Expression text Declaration string ExprText { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IExpressionFilter.IteratorFilter.html": {
    "href": "api/XData.DataSource.Structure.IExpressionFilter.IteratorFilter.html",
    "title": "Property IteratorFilter | XData website",
    "keywords": "Property IteratorFilter | Improve this Doc View Source IteratorFilter Iterator filter flag Declaration bool IteratorFilter { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IExpressionFilter.html": {
    "href": "api/XData.DataSource.Structure.IExpressionFilter.html",
    "title": "Interface IExpressionFilter | XData website",
    "keywords": "Interface IExpressionFilter Expression filter interface Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IExpressionFilter : IFilter, ICloneable Properties Name Description ExprText Expression text IteratorFilter Iterator filter flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IDictionaryFilter.DictionaryTableName.html": {
    "href": "api/XData.DataSource.Structure.IDictionaryFilter.DictionaryTableName.html",
    "title": "Property DictionaryTableName | XData website",
    "keywords": "Property DictionaryTableName | Improve this Doc View Source DictionaryTableName Dictionary table name Declaration string DictionaryTableName { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IDictionaryFilter.DictionaryId.html": {
    "href": "api/XData.DataSource.Structure.IDictionaryFilter.DictionaryId.html",
    "title": "Property DictionaryId | XData website",
    "keywords": "Property DictionaryId | Improve this Doc View Source DictionaryId Dictionary id field Declaration string DictionaryId { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IDictionaryFilter.DictionaryCode.html": {
    "href": "api/XData.DataSource.Structure.IDictionaryFilter.DictionaryCode.html",
    "title": "Property DictionaryCode | XData website",
    "keywords": "Property DictionaryCode | Improve this Doc View Source DictionaryCode Dictionary code field Declaration string DictionaryCode { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IDictionaryFilter.DictionaryValue.html": {
    "href": "api/XData.DataSource.Structure.IDictionaryFilter.DictionaryValue.html",
    "title": "Property DictionaryValue | XData website",
    "keywords": "Property DictionaryValue | Improve this Doc View Source DictionaryValue Dictionary search value Declaration string DictionaryValue { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IDictionaryFilter.IsVariableValue.html": {
    "href": "api/XData.DataSource.Structure.IDictionaryFilter.IsVariableValue.html",
    "title": "Property IsVariableValue | XData website",
    "keywords": "Property IsVariableValue | Improve this Doc View Source IsVariableValue Dictionary search value is variable name flag Declaration bool IsVariableValue { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IDictionaryFilter.html": {
    "href": "api/XData.DataSource.Structure.IDictionaryFilter.html",
    "title": "Interface IDictionaryFilter | XData website",
    "keywords": "Interface IDictionaryFilter Dictionary filter interface Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IDictionaryFilter : IFilter, ICloneable Properties Name Description DictionaryCode Dictionary code field DictionaryId Dictionary id field DictionaryTableName Dictionary table name DictionaryValue Dictionary search value IsVariableValue Dictionary search value is variable name flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IDataStructure.Context.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.Context.html",
    "title": "Property Context | XData website",
    "keywords": "Property Context | Improve this Doc View Source Context Data structure context Declaration string Context { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IDataStructure.ObjectType.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.ObjectType.html",
    "title": "Property ObjectType | XData website",
    "keywords": "Property ObjectType | Improve this Doc View Source ObjectType Structure data object type Declaration Type ObjectType { get; } Property Value Type Description Type"
  },
  "api/XData.DataSource.Structure.IDataStructure.Inverse.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.Inverse.html",
    "title": "Property Inverse | XData website",
    "keywords": "Property Inverse | Improve this Doc View Source Inverse Structure filters inverse flag Declaration bool Inverse { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IDataStructure.Distinct.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.Distinct.html",
    "title": "Property Distinct | XData website",
    "keywords": "Property Distinct | Improve this Doc View Source Distinct Structure distinct values flag Declaration bool Distinct { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IDataStructure.ReverseOrder.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.ReverseOrder.html",
    "title": "Property ReverseOrder | XData website",
    "keywords": "Property ReverseOrder | Improve this Doc View Source ReverseOrder Structure reversion order flag Declaration bool ReverseOrder { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IDataStructure.Flags.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.Flags.html",
    "title": "Property Flags | XData website",
    "keywords": "Property Flags | Improve this Doc View Source Flags Data object flags Declaration DataStructureFlag Flags { get; } Property Value Type Description DataStructureFlag"
  },
  "api/XData.DataSource.Structure.IDataStructure.BaseSource.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.BaseSource.html",
    "title": "Property BaseSource | XData website",
    "keywords": "Property BaseSource | Improve this Doc View Source BaseSource Base source Declaration ITableLike BaseSource { get; } Property Value Type Description ITableLike"
  },
  "api/XData.DataSource.Structure.IDataStructure.Sources.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.Sources.html",
    "title": "Property Sources | XData website",
    "keywords": "Property Sources | Improve this Doc View Source Sources Sources Declaration SortedSet<IDataSource> Sources { get; } Property Value Type Description SortedSet < IDataSource >"
  },
  "api/XData.DataSource.Structure.IDataStructure.StructureType.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.StructureType.html",
    "title": "Property StructureType | XData website",
    "keywords": "Property StructureType | Improve this Doc View Source StructureType Structure type full name Declaration string StructureType { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IDataStructure.RootFilterCombination.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.RootFilterCombination.html",
    "title": "Property RootFilterCombination | XData website",
    "keywords": "Property RootFilterCombination | Improve this Doc View Source RootFilterCombination Structure root filter combination Declaration IFilterCombination RootFilterCombination { get; } Property Value Type Description IFilterCombination"
  },
  "api/XData.DataSource.Structure.IDataStructure.FilterValues.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.FilterValues.html",
    "title": "Property FilterValues | XData website",
    "keywords": "Property FilterValues | Improve this Doc View Source FilterValues Runtime filter values Declaration SortedList<string, object> FilterValues { get; } Property Value Type Description SortedList < String , Object >"
  },
  "api/XData.DataSource.Structure.IDataStructure.OrderBy.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.OrderBy.html",
    "title": "Property OrderBy | XData website",
    "keywords": "Property OrderBy | Improve this Doc View Source OrderBy Order by list Declaration List<Order> OrderBy { get; } Property Value Type Description List < Order >"
  },
  "api/XData.DataSource.Structure.IDataStructure.GroupBy.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.GroupBy.html",
    "title": "Property GroupBy | XData website",
    "keywords": "Property GroupBy | Improve this Doc View Source GroupBy Group by list Declaration List<Grouping> GroupBy { get; } Property Value Type Description List < Grouping >"
  },
  "api/XData.DataSource.Structure.IDataStructure.Skip.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.Skip.html",
    "title": "Property Skip | XData website",
    "keywords": "Property Skip | Improve this Doc View Source Skip Skip objects count Declaration int? Skip { get; } Property Value Type Description Nullable < Int32 >"
  },
  "api/XData.DataSource.Structure.IDataStructure.Limit.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.Limit.html",
    "title": "Property Limit | XData website",
    "keywords": "Property Limit | Improve this Doc View Source Limit Limit objects count Declaration int? Limit { get; } Property Value Type Description Nullable < Int32 >"
  },
  "api/XData.DataSource.Structure.IDataStructure.UnionCombination.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.UnionCombination.html",
    "title": "Property UnionCombination | XData website",
    "keywords": "Property UnionCombination | Improve this Doc View Source UnionCombination Data object structure combination Declaration DataCombination UnionCombination { get; } Property Value Type Description DataCombination"
  },
  "api/XData.DataSource.Structure.IDataStructure.IsSubquery.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.IsSubquery.html",
    "title": "Property IsSubquery | XData website",
    "keywords": "Property IsSubquery | Improve this Doc View Source IsSubquery Subquery flag Declaration bool IsSubquery { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IDataStructure.IsUnion.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.IsUnion.html",
    "title": "Property IsUnion | XData website",
    "keywords": "Property IsUnion | Improve this Doc View Source IsUnion Combined structure flag Declaration bool IsUnion { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IDataStructure.IsReadOnly.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.IsReadOnly.html",
    "title": "Property IsReadOnly | XData website",
    "keywords": "Property IsReadOnly | Improve this Doc View Source IsReadOnly Read only structure flag Declaration bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IDataStructure.Parameters.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.Parameters.html",
    "title": "Property Parameters | XData website",
    "keywords": "Property Parameters | Improve this Doc View Source Parameters Stored procedure parameters definitions Declaration List<IParameterDescription> Parameters { get; } Property Value Type Description List < IParameterDescription >"
  },
  "api/XData.DataSource.Structure.IDataStructure.ResultSets.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.ResultSets.html",
    "title": "Property ResultSets | XData website",
    "keywords": "Property ResultSets | Improve this Doc View Source ResultSets Stored procedure result sets Declaration IResultSetDescription[] ResultSets { get; } Property Value Type Description IResultSetDescription []"
  },
  "api/XData.DataSource.Structure.IDataStructure.GetField.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.GetField.html",
    "title": "Method GetField | XData website",
    "keywords": "Method GetField | Improve this Doc View Source GetField(String, String, out String, out String) Returns field Declaration IField GetField(string sourceAlias, string fieldName, out string alias, out string fullName) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name String alias Relative alias String fullName Relative full name of field Returns Type Description IField Field object"
  },
  "api/XData.DataSource.Structure.IDataStructure.GetVariableValue.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.GetVariableValue.html",
    "title": "Method GetVariableValue | XData website",
    "keywords": "Method GetVariableValue | Improve this Doc View Source GetVariableValue(String) Returns variable value Declaration object GetVariableValue(string variableName) Parameters Type Name Description String variableName Variable name Returns Type Description Object Variable value"
  },
  "api/XData.DataSource.Structure.IDataStructure.FillSkippedSources.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.FillSkippedSources.html",
    "title": "Method FillSkippedSources | XData website",
    "keywords": "Method FillSkippedSources | Improve this Doc View Source FillSkippedSources(SortedList<String, Object>, out ICollection<String>) Fill skipped sources list Declaration bool FillSkippedSources(SortedList<string, object> filterValues, out ICollection<string> skipped) Parameters Type Name Description SortedList < String , Object > filterValues Filter values ICollection < String > skipped Returned skipped sources list Returns Type Description Boolean Structure skipped flag"
  },
  "api/XData.DataSource.Structure.IDataStructure.GetFields.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.GetFields.html",
    "title": "Method GetFields | XData website",
    "keywords": "Method GetFields | Improve this Doc View Source GetFields() Returns selectable fields Declaration IEnumerable<SelectedField> GetFields() Returns Type Description IEnumerable < SelectedField > Selectable fields sequence"
  },
  "api/XData.DataSource.Structure.IDataStructure.GetPrimaryKey.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.GetPrimaryKey.html",
    "title": "Method GetPrimaryKey | XData website",
    "keywords": "Method GetPrimaryKey | Improve this Doc View Source GetPrimaryKey() Returns data object unique key fields Declaration IEnumerable<SelectedField> GetPrimaryKey() Returns Type Description IEnumerable < SelectedField > Unique key fields sequence"
  },
  "api/XData.DataSource.Structure.IDataStructure.IsOuterJoined.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.IsOuterJoined.html",
    "title": "Method IsOuterJoined | XData website",
    "keywords": "Method IsOuterJoined | Improve this Doc View Source IsOuterJoined(String, String) Check source is outer joined to parent Declaration bool IsOuterJoined(string alias, string parentAlias) Parameters Type Name Description String alias Checked source alias String parentAlias Parent source alias Returns Type Description Boolean Outer joined flag"
  },
  "api/XData.DataSource.Structure.IDataStructure.GetParent.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.GetParent.html",
    "title": "Method GetParent | XData website",
    "keywords": "Method GetParent | Improve this Doc View Source GetParent(String) Returns parent structure by object type Declaration IDataStructure GetParent(string parentType) Parameters Type Name Description String parentType Parent object type Returns Type Description IDataStructure Structure"
  },
  "api/XData.DataSource.Structure.IDataStructure.Hint.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.Hint.html",
    "title": "Property Hint | XData website",
    "keywords": "Property Hint | Improve this Doc View Source Hint Query hints Declaration HintInfo[] Hint { get; set; } Property Value Type Description HintInfo []"
  },
  "api/XData.DataSource.Structure.IDataStructure.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.html",
    "title": "Interface IDataStructure | XData website",
    "keywords": "Interface IDataStructure Data object structure Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IDataStructure Properties Name Description BaseSource Base source Context Data structure context Distinct Structure distinct values flag FilterValues Runtime filter values Flags Data object flags GroupBy Group by list Hint Query hints Inverse Structure filters inverse flag IsReadOnly Read only structure flag IsSubquery Subquery flag IsUnion Combined structure flag Limit Limit objects count ObjectType Structure data object type OrderBy Order by list Parameters Stored procedure parameters definitions ResultSets Stored procedure result sets ReverseOrder Structure reversion order flag RootFilterCombination Structure root filter combination Skip Skip objects count Sources Sources StructureType Structure type full name UnionCombination Data object structure combination Methods Name Description FillSkippedSources(SortedList<String, Object>, out ICollection<String>) Fill skipped sources list GetField(String, String, out String, out String) Returns field GetFields() Returns selectable fields GetParent(String) Returns parent structure by object type GetPrimaryKey() Returns data object unique key fields GetVariableValue(String) Returns variable value IsOuterJoined(String, String) Check source is outer joined to parent Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IDataSource.SourceType.html": {
    "href": "api/XData.DataSource.Structure.IDataSource.SourceType.html",
    "title": "Property SourceType | XData website",
    "keywords": "Property SourceType | Improve this Doc View Source SourceType Source type Declaration DataSourceType SourceType { get; } Property Value Type Description DataSourceType"
  },
  "api/XData.DataSource.Structure.IDataSource.Alias.html": {
    "href": "api/XData.DataSource.Structure.IDataSource.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Source alias Declaration string Alias { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.IDataSource.IsBase.html": {
    "href": "api/XData.DataSource.Structure.IDataSource.IsBase.html",
    "title": "Property IsBase | XData website",
    "keywords": "Property IsBase | Improve this Doc View Source IsBase Base table flag Declaration bool IsBase { get; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.IDataSource.GetFields.html": {
    "href": "api/XData.DataSource.Structure.IDataSource.GetFields.html",
    "title": "Method GetFields | XData website",
    "keywords": "Method GetFields | Improve this Doc View Source GetFields() Returns selected fields Declaration IEnumerable<SelectedField> GetFields() Returns Type Description IEnumerable < SelectedField > Selected fields list | Improve this Doc View Source GetFields(Type) Returns selected fields of subquery with type Declaration IEnumerable<SelectedField> GetFields(Type type) Parameters Type Name Description Type type Returns Type Description IEnumerable < SelectedField > Selected fields list"
  },
  "api/XData.DataSource.Structure.IDataSource.GetField.html": {
    "href": "api/XData.DataSource.Structure.IDataSource.GetField.html",
    "title": "Method GetField | XData website",
    "keywords": "Method GetField | Improve this Doc View Source GetField(String, out String, out String) Returns property field Declaration IField GetField(string propertyName, out string alias, out string fieldName) Parameters Type Name Description String propertyName Property name String alias Relative source alias String fieldName Relative field full name Returns Type Description IField Field object | Improve this Doc View Source GetField(String, String, out String, out String) Returns property field Declaration IField GetField(string sourceAlias, string fieldName, out string alias, out string fullName) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name String alias Relative source alias String fullName Relative field full name Returns Type Description IField Field object"
  },
  "api/XData.DataSource.Structure.IDataSource.html": {
    "href": "api/XData.DataSource.Structure.IDataSource.html",
    "title": "Interface IDataSource | XData website",
    "keywords": "Interface IDataSource Data object source Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IDataSource : ICloneable Properties Name Description Alias Source alias IsBase Base table flag SourceType Source type Methods Name Description GetField(String, String, out String, out String) Returns property field GetField(String, out String, out String) Returns property field GetFields() Returns selected fields GetFields(Type) Returns selected fields of subquery with type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IConstantFilter.ConstantValue.html": {
    "href": "api/XData.DataSource.Structure.IConstantFilter.ConstantValue.html",
    "title": "Property ConstantValue | XData website",
    "keywords": "Property ConstantValue | Improve this Doc View Source ConstantValue Constant value Declaration object ConstantValue { get; } Property Value Type Description Object"
  },
  "api/XData.DataSource.Structure.IConstantFilter.ConstantType.html": {
    "href": "api/XData.DataSource.Structure.IConstantFilter.ConstantType.html",
    "title": "Property ConstantType | XData website",
    "keywords": "Property ConstantType | Improve this Doc View Source ConstantType Constant value type Declaration FilterConstantType ConstantType { get; } Property Value Type Description FilterConstantType"
  },
  "api/XData.DataSource.Structure.IConstantFilter.Nullable.html": {
    "href": "api/XData.DataSource.Structure.IConstantFilter.Nullable.html",
    "title": "Property Nullable | XData website",
    "keywords": "Property Nullable | Improve this Doc View Source Nullable Constant value null value handling mode Declaration FilterNullable Nullable { get; } Property Value Type Description FilterNullable"
  },
  "api/XData.DataSource.Structure.IConstantFilter.html": {
    "href": "api/XData.DataSource.Structure.IConstantFilter.html",
    "title": "Interface IConstantFilter | XData website",
    "keywords": "Interface IConstantFilter Constant value filter interface Inherited Members INamedFilter.Name IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public interface IConstantFilter : INamedFilter, IFilter, ICloneable Properties Name Description ConstantType Constant value type ConstantValue Constant value Nullable Constant value null value handling mode Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.Hierarchy.Name.html": {
    "href": "api/XData.DataSource.Structure.Hierarchy.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Hierarchy table name Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Hierarchy.Parent.html": {
    "href": "api/XData.DataSource.Structure.Hierarchy.Parent.html",
    "title": "Property Parent | XData website",
    "keywords": "Property Parent | Improve this Doc View Source Parent Parent link field Declaration public string Parent { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Hierarchy.LinkParent.html": {
    "href": "api/XData.DataSource.Structure.Hierarchy.LinkParent.html",
    "title": "Property LinkParent | XData website",
    "keywords": "Property LinkParent | Improve this Doc View Source LinkParent Hierarchy table parent link Declaration public string LinkParent { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Hierarchy.LinkChild.html": {
    "href": "api/XData.DataSource.Structure.Hierarchy.LinkChild.html",
    "title": "Property LinkChild | XData website",
    "keywords": "Property LinkChild | Improve this Doc View Source LinkChild Hierarchy table child link Declaration public string LinkChild { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Hierarchy.-ctor.html": {
    "href": "api/XData.DataSource.Structure.Hierarchy.-ctor.html",
    "title": "Constructor Hierarchy | XData website",
    "keywords": "Constructor Hierarchy | Improve this Doc View Source Hierarchy(String, String, String, String) Hierarchy constructor Declaration public Hierarchy(string name, string parent, string linkParent, string linkChild) Parameters Type Name Description String name Hierarchy table name String parent Parent link field String linkParent Hierarchy table parent link String linkChild Hierarchy table child link"
  },
  "api/XData.DataSource.Structure.Hierarchy.html": {
    "href": "api/XData.DataSource.Structure.Hierarchy.html",
    "title": "Class Hierarchy | XData website",
    "keywords": "Class Hierarchy Hierarchy Inheritance Object Hierarchy Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public sealed class Hierarchy Constructors Name Description Hierarchy(String, String, String, String) Hierarchy constructor Properties Name Description LinkChild Hierarchy table child link LinkParent Hierarchy table parent link Name Hierarchy table name Parent Parent link field Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.Grouping.PropertyOwnerType.html": {
    "href": "api/XData.DataSource.Structure.Grouping.PropertyOwnerType.html",
    "title": "Property PropertyOwnerType | XData website",
    "keywords": "Property PropertyOwnerType | Improve this Doc View Source PropertyOwnerType Property owner type name Declaration [DataMember] public string PropertyOwnerType { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Grouping.SourceAlias.html": {
    "href": "api/XData.DataSource.Structure.Grouping.SourceAlias.html",
    "title": "Property SourceAlias | XData website",
    "keywords": "Property SourceAlias | Improve this Doc View Source SourceAlias Source alias Declaration [DataMember] public string SourceAlias { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Grouping.FieldName.html": {
    "href": "api/XData.DataSource.Structure.Grouping.FieldName.html",
    "title": "Property FieldName | XData website",
    "keywords": "Property FieldName | Improve this Doc View Source FieldName Field name Declaration [DataMember] public string FieldName { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Grouping.GroupFunction.html": {
    "href": "api/XData.DataSource.Structure.Grouping.GroupFunction.html",
    "title": "Property GroupFunction | XData website",
    "keywords": "Property GroupFunction | Improve this Doc View Source GroupFunction Group function Declaration [DataMember] public DataGrouping GroupFunction { get; set; } Property Value Type Description DataGrouping"
  },
  "api/XData.DataSource.Structure.Grouping.GroupOrder.html": {
    "href": "api/XData.DataSource.Structure.Grouping.GroupOrder.html",
    "title": "Property GroupOrder | XData website",
    "keywords": "Property GroupOrder | Improve this Doc View Source GroupOrder Group function Declaration [DataMember] public int GroupOrder { get; set; } Property Value Type Description Int32"
  },
  "api/XData.DataSource.Structure.Grouping.Equals.html": {
    "href": "api/XData.DataSource.Structure.Grouping.Equals.html",
    "title": "Method Equals | XData website",
    "keywords": "Method Equals | Improve this Doc View Source Equals(Grouping) Grouping equality check Declaration public bool Equals(Grouping other) Parameters Type Name Description Grouping other Grouping instance to compare Returns Type Description Boolean Instances are contains the same data Implements IEquatable<T>.Equals(T)"
  },
  "api/XData.DataSource.Structure.Grouping.html": {
    "href": "api/XData.DataSource.Structure.Grouping.html",
    "title": "Class Grouping | XData website",
    "keywords": "Class Grouping Grouping element Inheritance Object Grouping Implements IEquatable < Grouping > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax [DataContract] public sealed class Grouping : IEquatable<Grouping> Properties Name Description FieldName Field name GroupFunction Group function GroupOrder Group function PropertyOwnerType Property owner type name SourceAlias Source alias Methods Name Description Equals(Grouping) Grouping equality check Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.FilterState.Clone.html": {
    "href": "api/XData.DataSource.Structure.FilterState.Clone.html",
    "title": "Method Clone | XData website",
    "keywords": "Method Clone | Improve this Doc View Source Clone() Clone filter state Declaration public object Clone() Returns Type Description Object Empty filter state"
  },
  "api/XData.DataSource.Structure.FilterState.FilterType.html": {
    "href": "api/XData.DataSource.Structure.FilterState.FilterType.html",
    "title": "Property FilterType | XData website",
    "keywords": "Property FilterType | Improve this Doc View Source FilterType Filter type Declaration [DataMember] public FilterType FilterType { get; set; } Property Value Type Description FilterType Implements IFilter.FilterType"
  },
  "api/XData.DataSource.Structure.FilterState.SourceAlias.html": {
    "href": "api/XData.DataSource.Structure.FilterState.SourceAlias.html",
    "title": "Property SourceAlias | XData website",
    "keywords": "Property SourceAlias | Improve this Doc View Source SourceAlias Filter field source alias Declaration [DataMember] public string SourceAlias { get; set; } Property Value Type Description String Implements IFilter.SourceAlias"
  },
  "api/XData.DataSource.Structure.FilterState.Field.html": {
    "href": "api/XData.DataSource.Structure.FilterState.Field.html",
    "title": "Property Field | XData website",
    "keywords": "Property Field | Improve this Doc View Source Field Filter field name Declaration [DataMember] public string Field { get; set; } Property Value Type Description String Implements IFilter.Field"
  },
  "api/XData.DataSource.Structure.FilterState.Operation.html": {
    "href": "api/XData.DataSource.Structure.FilterState.Operation.html",
    "title": "Property Operation | XData website",
    "keywords": "Property Operation | Improve this Doc View Source Operation Filter operation Declaration [DataMember] public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation Implements IFilter.Operation"
  },
  "api/XData.DataSource.Structure.FilterState.Primary.html": {
    "href": "api/XData.DataSource.Structure.FilterState.Primary.html",
    "title": "Property Primary | XData website",
    "keywords": "Property Primary | Improve this Doc View Source Primary Primary filter flag Declaration [DataMember] public bool Primary { get; set; } Property Value Type Description Boolean Implements IOptionalFilter.Primary"
  },
  "api/XData.DataSource.Structure.FilterState.LinkedSourceAlias.html": {
    "href": "api/XData.DataSource.Structure.FilterState.LinkedSourceAlias.html",
    "title": "Property LinkedSourceAlias | XData website",
    "keywords": "Property LinkedSourceAlias | Improve this Doc View Source LinkedSourceAlias Linked source alias Declaration [DataMember] public string LinkedSourceAlias { get; set; } Property Value Type Description String Implements IInnerLink.LinkedSourceAlias"
  },
  "api/XData.DataSource.Structure.FilterState.LinkedField.html": {
    "href": "api/XData.DataSource.Structure.FilterState.LinkedField.html",
    "title": "Property LinkedField | XData website",
    "keywords": "Property LinkedField | Improve this Doc View Source LinkedField Linked field name Declaration [DataMember] public string LinkedField { get; set; } Property Value Type Description String Implements IInnerLink.LinkedField"
  },
  "api/XData.DataSource.Structure.FilterState.GetIsLink.html": {
    "href": "api/XData.DataSource.Structure.FilterState.GetIsLink.html",
    "title": "Method GetIsLink | XData website",
    "keywords": "Method GetIsLink | Improve this Doc View Source GetIsLink() Filter link flag Declaration public bool GetIsLink() Returns Type Description Boolean Implements IInnerLink.GetIsLink()"
  },
  "api/XData.DataSource.Structure.FilterState.GetAliases.html": {
    "href": "api/XData.DataSource.Structure.FilterState.GetAliases.html",
    "title": "Method GetAliases | XData website",
    "keywords": "Method GetAliases | Improve this Doc View Source GetAliases() Link aliases Declaration public string[] GetAliases() Returns Type Description String [] Implements IInnerLink.GetAliases()"
  },
  "api/XData.DataSource.Structure.FilterState.LinkedType.html": {
    "href": "api/XData.DataSource.Structure.FilterState.LinkedType.html",
    "title": "Property LinkedType | XData website",
    "keywords": "Property LinkedType | Improve this Doc View Source LinkedType Linked subquery type name Declaration [DataMember] public string LinkedType { get; set; } Property Value Type Description String Implements ISubqueryLink.LinkedType"
  },
  "api/XData.DataSource.Structure.FilterState.LinkedAlias.html": {
    "href": "api/XData.DataSource.Structure.FilterState.LinkedAlias.html",
    "title": "Property LinkedAlias | XData website",
    "keywords": "Property LinkedAlias | Improve this Doc View Source LinkedAlias Linked subquery source alias Declaration [DataMember] public string LinkedAlias { get; set; } Property Value Type Description String Implements IInnerViewLink.LinkedAlias"
  },
  "api/XData.DataSource.Structure.FilterState.DictionaryTableName.html": {
    "href": "api/XData.DataSource.Structure.FilterState.DictionaryTableName.html",
    "title": "Property DictionaryTableName | XData website",
    "keywords": "Property DictionaryTableName | Improve this Doc View Source DictionaryTableName Dictionary table name Declaration [DataMember] public string DictionaryTableName { get; set; } Property Value Type Description String Implements IDictionaryFilter.DictionaryTableName"
  },
  "api/XData.DataSource.Structure.FilterState.DictionaryId.html": {
    "href": "api/XData.DataSource.Structure.FilterState.DictionaryId.html",
    "title": "Property DictionaryId | XData website",
    "keywords": "Property DictionaryId | Improve this Doc View Source DictionaryId Dictionary filter id column name Declaration [DataMember] public string DictionaryId { get; set; } Property Value Type Description String Implements IDictionaryFilter.DictionaryId"
  },
  "api/XData.DataSource.Structure.FilterState.DictionaryCode.html": {
    "href": "api/XData.DataSource.Structure.FilterState.DictionaryCode.html",
    "title": "Property DictionaryCode | XData website",
    "keywords": "Property DictionaryCode | Improve this Doc View Source DictionaryCode Dictionary filter code column name Declaration [DataMember] public string DictionaryCode { get; set; } Property Value Type Description String Implements IDictionaryFilter.DictionaryCode"
  },
  "api/XData.DataSource.Structure.FilterState.DictionaryValue.html": {
    "href": "api/XData.DataSource.Structure.FilterState.DictionaryValue.html",
    "title": "Property DictionaryValue | XData website",
    "keywords": "Property DictionaryValue | Improve this Doc View Source DictionaryValue Dictionary value Declaration [DataMember] public string DictionaryValue { get; set; } Property Value Type Description String Implements IDictionaryFilter.DictionaryValue"
  },
  "api/XData.DataSource.Structure.FilterState.IsVariableValue.html": {
    "href": "api/XData.DataSource.Structure.FilterState.IsVariableValue.html",
    "title": "Property IsVariableValue | XData website",
    "keywords": "Property IsVariableValue | Improve this Doc View Source IsVariableValue Dictionary filter value is variable flag Declaration [DataMember] public bool IsVariableValue { get; set; } Property Value Type Description Boolean Implements IDictionaryFilter.IsVariableValue"
  },
  "api/XData.DataSource.Structure.FilterState.SubqueryAlias.html": {
    "href": "api/XData.DataSource.Structure.FilterState.SubqueryAlias.html",
    "title": "Property SubqueryAlias | XData website",
    "keywords": "Property SubqueryAlias | Improve this Doc View Source SubqueryAlias Filter subquery alias Declaration [DataMember] public string SubqueryAlias { get; set; } Property Value Type Description String Implements ISubqueryFilter.SubqueryAlias"
  },
  "api/XData.DataSource.Structure.FilterState.ExprText.html": {
    "href": "api/XData.DataSource.Structure.FilterState.ExprText.html",
    "title": "Property ExprText | XData website",
    "keywords": "Property ExprText | Improve this Doc View Source ExprText Expression filter text Declaration [DataMember] public string ExprText { get; set; } Property Value Type Description String Implements IExpressionFilter.ExprText"
  },
  "api/XData.DataSource.Structure.FilterState.IteratorFilter.html": {
    "href": "api/XData.DataSource.Structure.FilterState.IteratorFilter.html",
    "title": "Property IteratorFilter | XData website",
    "keywords": "Property IteratorFilter | Improve this Doc View Source IteratorFilter Iterator filter flag Declaration [DataMember] public bool IteratorFilter { get; set; } Property Value Type Description Boolean Implements IExpressionFilter.IteratorFilter"
  },
  "api/XData.DataSource.Structure.FilterState.RangeValues.html": {
    "href": "api/XData.DataSource.Structure.FilterState.RangeValues.html",
    "title": "Property RangeValues | XData website",
    "keywords": "Property RangeValues | Improve this Doc View Source RangeValues Range filter values Declaration [DataMember] public object[] RangeValues { get; set; } Property Value Type Description Object [] Implements IRangeFilter.RangeValues"
  },
  "api/XData.DataSource.Structure.FilterState.Name.html": {
    "href": "api/XData.DataSource.Structure.FilterState.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Filter name Declaration [DataMember] public string Name { get; set; } Property Value Type Description String Implements INamedFilter.Name"
  },
  "api/XData.DataSource.Structure.FilterState.ConstantValue.html": {
    "href": "api/XData.DataSource.Structure.FilterState.ConstantValue.html",
    "title": "Property ConstantValue | XData website",
    "keywords": "Property ConstantValue | Improve this Doc View Source ConstantValue Filter constant value Declaration [DataMember] public object ConstantValue { get; set; } Property Value Type Description Object Implements IConstantFilter.ConstantValue"
  },
  "api/XData.DataSource.Structure.FilterState.ConstantType.html": {
    "href": "api/XData.DataSource.Structure.FilterState.ConstantType.html",
    "title": "Property ConstantType | XData website",
    "keywords": "Property ConstantType | Improve this Doc View Source ConstantType Constant type Declaration [DataMember] public FilterConstantType ConstantType { get; set; } Property Value Type Description FilterConstantType Implements IConstantFilter.ConstantType"
  },
  "api/XData.DataSource.Structure.FilterState.Combination.html": {
    "href": "api/XData.DataSource.Structure.FilterState.Combination.html",
    "title": "Property Combination | XData website",
    "keywords": "Property Combination | Improve this Doc View Source Combination Parent filter combination name Declaration [DataMember] public string Combination { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.FilterState.Nullable.html": {
    "href": "api/XData.DataSource.Structure.FilterState.Nullable.html",
    "title": "Property Nullable | XData website",
    "keywords": "Property Nullable | Improve this Doc View Source Nullable Filter null value handling type Declaration [DataMember] public FilterNullable Nullable { get; set; } Property Value Type Description FilterNullable Implements IConstantFilter.Nullable IRuntimeFilter.Nullable"
  },
  "api/XData.DataSource.Structure.FilterState.Dynamic.html": {
    "href": "api/XData.DataSource.Structure.FilterState.Dynamic.html",
    "title": "Property Dynamic | XData website",
    "keywords": "Property Dynamic | Improve this Doc View Source Dynamic Filter dynamic flag Declaration [DataMember] public bool Dynamic { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.FilterState.GetCaption.html": {
    "href": "api/XData.DataSource.Structure.FilterState.GetCaption.html",
    "title": "Method GetCaption | XData website",
    "keywords": "Method GetCaption | Improve this Doc View Source GetCaption() Filter caption Declaration public string GetCaption() Returns Type Description String Implements IRuntimeFilter.GetCaption()"
  },
  "api/XData.DataSource.Structure.FilterState.Equals.html": {
    "href": "api/XData.DataSource.Structure.FilterState.Equals.html",
    "title": "Method Equals | XData website",
    "keywords": "Method Equals | Improve this Doc View Source Equals(FilterState) FilterState equality check Declaration public bool Equals(FilterState other) Parameters Type Name Description FilterState other FilterState instance to compare Returns Type Description Boolean Instances are contains the same data Implements IEquatable<T>.Equals(T)"
  },
  "api/XData.DataSource.Structure.FilterState.html": {
    "href": "api/XData.DataSource.Structure.FilterState.html",
    "title": "Class FilterState | XData website",
    "keywords": "Class FilterState Filter state info Inheritance Object FilterState Implements ISubqueryLink IInnerViewLink IInnerLink IDictionaryFilter ISubqueryFilter IExpressionFilter IRangeFilter IConstantFilter IRuntimeFilter INamedFilter IOptionalFilter IFilter ICloneable IEquatable < FilterState > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax [DataContract] public sealed class FilterState : ISubqueryLink, IInnerViewLink, IInnerLink, IDictionaryFilter, ISubqueryFilter, IExpressionFilter, IRangeFilter, IConstantFilter, IRuntimeFilter, INamedFilter, IOptionalFilter, IFilter, ICloneable, IEquatable<FilterState> Properties Name Description Combination Parent filter combination name ConstantType Constant type ConstantValue Filter constant value DictionaryCode Dictionary filter code column name DictionaryId Dictionary filter id column name DictionaryTableName Dictionary table name DictionaryValue Dictionary value Dynamic Filter dynamic flag ExprText Expression filter text Field Filter field name FilterType Filter type IsVariableValue Dictionary filter value is variable flag IteratorFilter Iterator filter flag LinkedAlias Linked subquery source alias LinkedField Linked field name LinkedSourceAlias Linked source alias LinkedType Linked subquery type name Name Filter name Nullable Filter null value handling type Operation Filter operation Primary Primary filter flag RangeValues Range filter values SourceAlias Filter field source alias SubqueryAlias Filter subquery alias Methods Name Description Clone() Clone filter state Equals(FilterState) FilterState equality check GetAliases() Link aliases GetCaption() Filter caption GetIsLink() Filter link flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.FilterName.Name.html": {
    "href": "api/XData.DataSource.Structure.FilterName.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Filter name Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.FilterName.-ctor.html": {
    "href": "api/XData.DataSource.Structure.FilterName.-ctor.html",
    "title": "Constructor FilterName | XData website",
    "keywords": "Constructor FilterName | Improve this Doc View Source FilterName(String) FilterName constructor Declaration public FilterName(string name) Parameters Type Name Description String name"
  },
  "api/XData.DataSource.Structure.FilterName.html": {
    "href": "api/XData.DataSource.Structure.FilterName.html",
    "title": "Class FilterName | XData website",
    "keywords": "Class FilterName FilterName helper class to initialize named RuntimeFilter Inheritance Object FilterName Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax public class FilterName Constructors Name Description FilterName(String) FilterName constructor Properties Name Description Name Filter name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.FilterCombinationState.Combination.html": {
    "href": "api/XData.DataSource.Structure.FilterCombinationState.Combination.html",
    "title": "Property Combination | XData website",
    "keywords": "Property Combination | Improve this Doc View Source Combination Combination Declaration [DataMember] public Combination Combination { get; set; } Property Value Type Description Combination"
  },
  "api/XData.DataSource.Structure.FilterCombinationState.Filters.html": {
    "href": "api/XData.DataSource.Structure.FilterCombinationState.Filters.html",
    "title": "Property Filters | XData website",
    "keywords": "Property Filters | Improve this Doc View Source Filters Filter states Declaration [DataMember] public FilterState[] Filters { get; set; } Property Value Type Description FilterState []"
  },
  "api/XData.DataSource.Structure.FilterCombinationState.FilterCombinations.html": {
    "href": "api/XData.DataSource.Structure.FilterCombinationState.FilterCombinations.html",
    "title": "Property FilterCombinations | XData website",
    "keywords": "Property FilterCombinations | Improve this Doc View Source FilterCombinations Nested filter combinations Declaration [DataMember] public FilterCombinationState[] FilterCombinations { get; set; } Property Value Type Description FilterCombinationState []"
  },
  "api/XData.DataSource.Structure.FilterCombinationState.Equals.html": {
    "href": "api/XData.DataSource.Structure.FilterCombinationState.Equals.html",
    "title": "Method Equals | XData website",
    "keywords": "Method Equals | Improve this Doc View Source Equals(FilterCombinationState) FilterCombinationState equality check Declaration public bool Equals(FilterCombinationState other) Parameters Type Name Description FilterCombinationState other FilterCombinationState instance to compare Returns Type Description Boolean Instances are contains the same data Implements IEquatable<T>.Equals(T)"
  },
  "api/XData.DataSource.Structure.FilterCombinationState.html": {
    "href": "api/XData.DataSource.Structure.FilterCombinationState.html",
    "title": "Class FilterCombinationState | XData website",
    "keywords": "Class FilterCombinationState Filter combination state Inheritance Object FilterCombinationState Implements IEquatable < FilterCombinationState > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax [DataContract] public sealed class FilterCombinationState : IEquatable<FilterCombinationState> Properties Name Description Combination Combination FilterCombinations Nested filter combinations Filters Filter states Methods Name Description Equals(FilterCombinationState) FilterCombinationState equality check Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.Field.Name.html": {
    "href": "api/XData.DataSource.Structure.Field.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Property name Declaration [DataMember] public string Name { get; set; } Property Value Type Description String Implements IField.Name"
  },
  "api/XData.DataSource.Structure.Field.IsTablePk.html": {
    "href": "api/XData.DataSource.Structure.Field.IsTablePk.html",
    "title": "Property IsTablePk | XData website",
    "keywords": "Property IsTablePk | Improve this Doc View Source IsTablePk Table primary key flag Declaration [DataMember] public bool IsTablePk { get; set; } Property Value Type Description Boolean Implements IField.IsTablePk"
  },
  "api/XData.DataSource.Structure.Field.IsAutoIncrement.html": {
    "href": "api/XData.DataSource.Structure.Field.IsAutoIncrement.html",
    "title": "Property IsAutoIncrement | XData website",
    "keywords": "Property IsAutoIncrement | Improve this Doc View Source IsAutoIncrement Autoincrement field flag Declaration [DataMember] public bool IsAutoIncrement { get; set; } Property Value Type Description Boolean Implements IField.IsAutoIncrement"
  },
  "api/XData.DataSource.Structure.Field.IsSelectable.html": {
    "href": "api/XData.DataSource.Structure.Field.IsSelectable.html",
    "title": "Property IsSelectable | XData website",
    "keywords": "Property IsSelectable | Improve this Doc View Source IsSelectable Selectable flag Declaration [DataMember] public bool IsSelectable { get; set; } Property Value Type Description Boolean Implements IField.IsSelectable"
  },
  "api/XData.DataSource.Structure.Field.SqlType.html": {
    "href": "api/XData.DataSource.Structure.Field.SqlType.html",
    "title": "Property SqlType | XData website",
    "keywords": "Property SqlType | Improve this Doc View Source SqlType Sql type Declaration [DataMember] public DbType SqlType { get; set; } Property Value Type Description DbType Implements IField.SqlType"
  },
  "api/XData.DataSource.Structure.Field.FieldName.html": {
    "href": "api/XData.DataSource.Structure.Field.FieldName.html",
    "title": "Property FieldName | XData website",
    "keywords": "Property FieldName | Improve this Doc View Source FieldName Field name Declaration [DataMember] public string FieldName { get; set; } Property Value Type Description String Implements IField.FieldName"
  },
  "api/XData.DataSource.Structure.Field.Flags.html": {
    "href": "api/XData.DataSource.Structure.Field.Flags.html",
    "title": "Property Flags | XData website",
    "keywords": "Property Flags | Improve this Doc View Source Flags Flags Declaration [DataMember] public DataPropertyFlag Flags { get; set; } Property Value Type Description DataPropertyFlag Implements IField.Flags"
  },
  "api/XData.DataSource.Structure.Field.DefaultType.html": {
    "href": "api/XData.DataSource.Structure.Field.DefaultType.html",
    "title": "Property DefaultType | XData website",
    "keywords": "Property DefaultType | Improve this Doc View Source DefaultType Default source Declaration [DataMember] public DefaultType DefaultType { get; set; } Property Value Type Description DefaultType Implements IField.DefaultType"
  },
  "api/XData.DataSource.Structure.Field.DefaultValue.html": {
    "href": "api/XData.DataSource.Structure.Field.DefaultValue.html",
    "title": "Property DefaultValue | XData website",
    "keywords": "Property DefaultValue | Improve this Doc View Source DefaultValue Default value Declaration [DataMember] public object DefaultValue { get; set; } Property Value Type Description Object Implements IField.DefaultValue"
  },
  "api/XData.DataSource.Structure.Field.DefaultFeature.html": {
    "href": "api/XData.DataSource.Structure.Field.DefaultFeature.html",
    "title": "Property DefaultFeature | XData website",
    "keywords": "Property DefaultFeature | Improve this Doc View Source DefaultFeature Always use the default value (also when updating) Declaration [DataMember] public DefaultFeature DefaultFeature { get; set; } Property Value Type Description DefaultFeature Implements IField.DefaultFeature"
  },
  "api/XData.DataSource.Structure.Field.EnumValues.html": {
    "href": "api/XData.DataSource.Structure.Field.EnumValues.html",
    "title": "Property EnumValues | XData website",
    "keywords": "Property EnumValues | Improve this Doc View Source EnumValues Enumeration values Declaration [DataMember] public KeyValuePair<long, string>[] EnumValues { get; set; } Property Value Type Description KeyValuePair < Int64 , String >[] Implements IField.EnumValues"
  },
  "api/XData.DataSource.Structure.Field.ExprType.html": {
    "href": "api/XData.DataSource.Structure.Field.ExprType.html",
    "title": "Property ExprType | XData website",
    "keywords": "Property ExprType | Improve this Doc View Source ExprType Expression type Declaration [DataMember] public DataExpressionType ExprType { get; set; } Property Value Type Description DataExpressionType Implements IField.ExprType"
  },
  "api/XData.DataSource.Structure.Field.ExprText.html": {
    "href": "api/XData.DataSource.Structure.Field.ExprText.html",
    "title": "Property ExprText | XData website",
    "keywords": "Property ExprText | Improve this Doc View Source ExprText Expression text Declaration [DataMember] public string ExprText { get; set; } Property Value Type Description String Implements IField.ExprText"
  },
  "api/XData.DataSource.Structure.Field.UpdateWithExprType.html": {
    "href": "api/XData.DataSource.Structure.Field.UpdateWithExprType.html",
    "title": "Property UpdateWithExprType | XData website",
    "keywords": "Property UpdateWithExprType | Improve this Doc View Source UpdateWithExprType Update source expression type Declaration [DataMember] public DataExpressionType UpdateWithExprType { get; set; } Property Value Type Description DataExpressionType Implements IField.UpdateWithExprType"
  },
  "api/XData.DataSource.Structure.Field.UpdateWithExprText.html": {
    "href": "api/XData.DataSource.Structure.Field.UpdateWithExprText.html",
    "title": "Property UpdateWithExprText | XData website",
    "keywords": "Property UpdateWithExprText | Improve this Doc View Source UpdateWithExprText Update source expression text Declaration [DataMember] public string UpdateWithExprText { get; set; } Property Value Type Description String Implements IField.UpdateWithExprText"
  },
  "api/XData.DataSource.Structure.Field.ExprSize.html": {
    "href": "api/XData.DataSource.Structure.Field.ExprSize.html",
    "title": "Property ExprSize | XData website",
    "keywords": "Property ExprSize | Improve this Doc View Source ExprSize Expression size Declaration [DataMember] public int ExprSize { get; set; } Property Value Type Description Int32 Implements IField.ExprSize"
  },
  "api/XData.DataSource.Structure.Field.ExprScale.html": {
    "href": "api/XData.DataSource.Structure.Field.ExprScale.html",
    "title": "Property ExprScale | XData website",
    "keywords": "Property ExprScale | Improve this Doc View Source ExprScale Expression scale Declaration [DataMember] public int ExprScale { get; set; } Property Value Type Description Int32 Implements IField.ExprScale"
  },
  "api/XData.DataSource.Structure.Field.UdtTypeName.html": {
    "href": "api/XData.DataSource.Structure.Field.UdtTypeName.html",
    "title": "Property UdtTypeName | XData website",
    "keywords": "Property UdtTypeName | Improve this Doc View Source UdtTypeName User defined type (UDT) name for field Declaration [DataMember] public string UdtTypeName { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Field.UdtElementTypeName.html": {
    "href": "api/XData.DataSource.Structure.Field.UdtElementTypeName.html",
    "title": "Property UdtElementTypeName | XData website",
    "keywords": "Property UdtElementTypeName | Improve this Doc View Source UdtElementTypeName User defined type (UDT) element type name for field Declaration [DataMember] public string UdtElementTypeName { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.Field.IsArray.html": {
    "href": "api/XData.DataSource.Structure.Field.IsArray.html",
    "title": "Property IsArray | XData website",
    "keywords": "Property IsArray | Improve this Doc View Source IsArray User defined type (UDT) collection is VARARRAY for field Declaration public bool IsArray { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.Field.UdtMappedType.html": {
    "href": "api/XData.DataSource.Structure.Field.UdtMappedType.html",
    "title": "Property UdtMappedType | XData website",
    "keywords": "Property UdtMappedType | Improve this Doc View Source UdtMappedType User defined type (UDT) mapped type for field Declaration [DataMember] public Type UdtMappedType { get; set; } Property Value Type Description Type"
  },
  "api/XData.DataSource.Structure.Field.NativeSqlType.html": {
    "href": "api/XData.DataSource.Structure.Field.NativeSqlType.html",
    "title": "Property NativeSqlType | XData website",
    "keywords": "Property NativeSqlType | Improve this Doc View Source NativeSqlType Native SQL type name Declaration [DataMember] public string NativeSqlType { get; set; } Property Value Type Description String Implements IField.NativeSqlType Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter!"
  },
  "api/XData.DataSource.Structure.Field.XPath.html": {
    "href": "api/XData.DataSource.Structure.Field.XPath.html",
    "title": "Property XPath | XData website",
    "keywords": "Property XPath | Improve this Doc View Source XPath XML field value XPath Declaration [DataMember] public string XPath { get; set; } Property Value Type Description String Implements IField.XPath Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter!"
  },
  "api/XData.DataSource.Structure.Field.Clone.html": {
    "href": "api/XData.DataSource.Structure.Field.Clone.html",
    "title": "Method Clone | XData website",
    "keywords": "Method Clone | Improve this Doc View Source Clone() Creates a new object that is a copy of the current instance. Declaration public object Clone() Returns Type Description Object A new object that is a copy of this instance."
  },
  "api/XData.DataSource.Structure.Field.html": {
    "href": "api/XData.DataSource.Structure.Field.html",
    "title": "Class Field | XData website",
    "keywords": "Class Field Field object Inheritance Object Field Implements IField ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax [DataContract] public class Field : IField, ICloneable Properties Name Description DefaultFeature Always use the default value (also when updating) DefaultType Default source DefaultValue Default value EnumValues Enumeration values ExprScale Expression scale ExprSize Expression size ExprText Expression text ExprType Expression type FieldName Field name Flags Flags IsArray User defined type (UDT) collection is VARARRAY for field IsAutoIncrement Autoincrement field flag IsSelectable Selectable flag IsTablePk Table primary key flag Name Property name NativeSqlType Native SQL type name SqlType Sql type UdtElementTypeName User defined type (UDT) element type name for field UdtMappedType User defined type (UDT) mapped type for field UdtTypeName User defined type (UDT) name for field UpdateWithExprText Update source expression text UpdateWithExprType Update source expression type XPath XML field value XPath Methods Name Description Clone() Creates a new object that is a copy of the current instance. Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.DataStructureState.Context.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Context.html",
    "title": "Property Context | XData website",
    "keywords": "Property Context | Improve this Doc View Source Context Structure context Declaration [DataMember] public string Context { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.DataStructureState.StructureType.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.StructureType.html",
    "title": "Property StructureType | XData website",
    "keywords": "Property StructureType | Improve this Doc View Source StructureType Structure type name Declaration [DataMember] public string StructureType { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.DataStructureState.Union.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Union.html",
    "title": "Property Union | XData website",
    "keywords": "Property Union | Improve this Doc View Source Union Union combination Declaration [DataMember] public DataCombination Union { get; set; } Property Value Type Description DataCombination"
  },
  "api/XData.DataSource.Structure.DataStructureState.Distinct.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Distinct.html",
    "title": "Property Distinct | XData website",
    "keywords": "Property Distinct | Improve this Doc View Source Distinct Distinct flag Declaration [DataMember] public bool Distinct { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.DataStructureState.Reverse.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Reverse.html",
    "title": "Property Reverse | XData website",
    "keywords": "Property Reverse | Improve this Doc View Source Reverse Reverse order flag Declaration [DataMember] public bool Reverse { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.DataStructureState.Skip.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Skip.html",
    "title": "Property Skip | XData website",
    "keywords": "Property Skip | Improve this Doc View Source Skip Skip count Declaration [DataMember] public int Skip { get; set; } Property Value Type Description Int32"
  },
  "api/XData.DataSource.Structure.DataStructureState.Limit.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Limit.html",
    "title": "Property Limit | XData website",
    "keywords": "Property Limit | Improve this Doc View Source Limit Limit count Declaration [DataMember] public int Limit { get; set; } Property Value Type Description Int32"
  },
  "api/XData.DataSource.Structure.DataStructureState.SourceTypeType.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.SourceTypeType.html",
    "title": "Property SourceTypeType | XData website",
    "keywords": "Property SourceTypeType | Improve this Doc View Source SourceTypeType Source type Declaration [DataMember] public DataSourceType SourceTypeType { get; set; } Property Value Type Description DataSourceType"
  },
  "api/XData.DataSource.Structure.DataStructureState.Alias.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Alias.html",
    "title": "Property Alias | XData website",
    "keywords": "Property Alias | Improve this Doc View Source Alias Subquery alias Declaration [DataMember] public string Alias { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.DataStructureState.Sources.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Sources.html",
    "title": "Property Sources | XData website",
    "keywords": "Property Sources | Improve this Doc View Source Sources Dynamic sources states Declaration [DataMember] public DataStructureState[] Sources { get; set; } Property Value Type Description DataStructureState []"
  },
  "api/XData.DataSource.Structure.DataStructureState.Filters.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Filters.html",
    "title": "Property Filters | XData website",
    "keywords": "Property Filters | Improve this Doc View Source Filters Filter combinations Declaration [DataMember] public FilterCombinationState Filters { get; set; } Property Value Type Description FilterCombinationState"
  },
  "api/XData.DataSource.Structure.DataStructureState.OrderBy.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.OrderBy.html",
    "title": "Property OrderBy | XData website",
    "keywords": "Property OrderBy | Improve this Doc View Source OrderBy Order Declaration [DataMember] public Order[] OrderBy { get; set; } Property Value Type Description Order []"
  },
  "api/XData.DataSource.Structure.DataStructureState.Grouping.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Grouping.html",
    "title": "Property Grouping | XData website",
    "keywords": "Property Grouping | Improve this Doc View Source Grouping Grouping Declaration [DataMember] public Grouping[] Grouping { get; set; } Property Value Type Description Grouping []"
  },
  "api/XData.DataSource.Structure.DataStructureState.FilterValues.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.FilterValues.html",
    "title": "Property FilterValues | XData website",
    "keywords": "Property FilterValues | Improve this Doc View Source FilterValues Filter values Declaration [DataMember] public TaggedValue[] FilterValues { get; set; } Property Value Type Description TaggedValue []"
  },
  "api/XData.DataSource.Structure.DataStructureState.Variables.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Variables.html",
    "title": "Property Variables | XData website",
    "keywords": "Property Variables | Improve this Doc View Source Variables Variables Declaration [DataMember] public TaggedValue[] Variables { get; set; } Property Value Type Description TaggedValue []"
  },
  "api/XData.DataSource.Structure.DataStructureState.Name.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Table name Declaration [DataMember] public string Name { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.DataStructureState.IsReadOnly.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.IsReadOnly.html",
    "title": "Property IsReadOnly | XData website",
    "keywords": "Property IsReadOnly | Improve this Doc View Source IsReadOnly Read only flag Declaration [DataMember] public bool IsReadOnly { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.DataSource.Structure.DataStructureState.Equals.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.Equals.html",
    "title": "Method Equals | XData website",
    "keywords": "Method Equals | Improve this Doc View Source Equals(DataStructureState) DataStructureState equality check Declaration public bool Equals(DataStructureState other) Parameters Type Name Description DataStructureState other DataStructureState instance to compare Returns Type Description Boolean Instances are contains the same data Implements IEquatable<T>.Equals(T)"
  },
  "api/XData.DataSource.Structure.DataStructureState.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.html",
    "title": "Class DataStructureState | XData website",
    "keywords": "Class DataStructureState Data structure state Inheritance Object DataStructureState Implements IEquatable < DataStructureState > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax [DataContract] public sealed class DataStructureState : IEquatable<DataStructureState> Properties Name Description Alias Subquery alias Context Structure context Distinct Distinct flag Filters Filter combinations FilterValues Filter values Grouping Grouping IsReadOnly Read only flag Limit Limit count Name Table name OrderBy Order Reverse Reverse order flag Skip Skip count Sources Dynamic sources states SourceTypeType Source type StructureType Structure type name Union Union combination Variables Variables Methods Name Description Equals(DataStructureState) DataStructureState equality check Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.DataQueryState.AssemblyName.html": {
    "href": "api/XData.DataSource.Structure.DataQueryState.AssemblyName.html",
    "title": "Property AssemblyName | XData website",
    "keywords": "Property AssemblyName | Improve this Doc View Source AssemblyName Element type assembly name Declaration [DataMember] public string AssemblyName { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.DataQueryState.ElementType.html": {
    "href": "api/XData.DataSource.Structure.DataQueryState.ElementType.html",
    "title": "Property ElementType | XData website",
    "keywords": "Property ElementType | Improve this Doc View Source ElementType Element type name Declaration [DataMember] public string ElementType { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.DataQueryState.Context.html": {
    "href": "api/XData.DataSource.Structure.DataQueryState.Context.html",
    "title": "Property Context | XData website",
    "keywords": "Property Context | Improve this Doc View Source Context Context Declaration [DataMember] public string Context { get; set; } Property Value Type Description String"
  },
  "api/XData.DataSource.Structure.DataQueryState.Structure.html": {
    "href": "api/XData.DataSource.Structure.DataQueryState.Structure.html",
    "title": "Property Structure | XData website",
    "keywords": "Property Structure | Improve this Doc View Source Structure DataStructure Declaration [DataMember] public DataStructureState Structure { get; set; } Property Value Type Description DataStructureState"
  },
  "api/XData.DataSource.Structure.DataQueryState.ToString.html": {
    "href": "api/XData.DataSource.Structure.DataQueryState.ToString.html",
    "title": "Method ToString | XData website",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString()"
  },
  "api/XData.DataSource.Structure.DataQueryState.html": {
    "href": "api/XData.DataSource.Structure.DataQueryState.html",
    "title": "Class DataQueryState | XData website",
    "keywords": "Class DataQueryState Data query state Inheritance Object DataQueryState RepositoryState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.DataSource.Structure Assembly : XData.docfx.dll Syntax [DataContract] public class DataQueryState Properties Name Description AssemblyName Element type assembly name Context Context ElementType Element type name Structure DataStructure Methods Name Description ToString() Returns a String that represents the current Object . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataPropertyFlag.html": {
    "href": "api/XData.DataPropertyFlag.html",
    "title": "Enum DataPropertyFlag | XData website",
    "keywords": "Enum DataPropertyFlag Data object property flags Namespace : XData Assembly : XData.docfx.dll Syntax [Flags] [DataContract] public enum DataPropertyFlag Fields Name Description ConcurrencyToken Data object concurrency token field flag Id Data object unique key part None Common data property OuterFlag Outer joined information filled flag See Also Flags Flags None Id OuterFlag Extension Methods SerializationExtensions.ToXml<DataPropertyFlag>() CollectionsExtensions.SetValue<DataPropertyFlag, T>(T) CollectionsExtensions.AsEnum<DataPropertyFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataPropertyFlag, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataPropertyFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataObjectState.html": {
    "href": "api/XData.DataObjectState.html",
    "title": "Enum DataObjectState | XData website",
    "keywords": "Enum DataObjectState Data object instance state Namespace : XData Assembly : XData.docfx.dll Syntax [Flags] [DataContract] public enum DataObjectState Fields Name Description Changed Original data values are changed Deleted Instance is marked for delete Ghost Instance is deleted New New instance flag Original Original data values has no changes See Also GetState<T> (T) CheckState<T> (T, DataObjectState ) SetDeleted<T> (T, Boolean ) Original New Changed Deleted Ghost Extension Methods SerializationExtensions.ToXml<DataObjectState>() CollectionsExtensions.SetValue<DataObjectState, T>(T) CollectionsExtensions.AsEnum<DataObjectState>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataObjectState, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataObjectState, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataObjectExtensions.Refresh.html": {
    "href": "api/XData.DataObjectExtensions.Refresh.html",
    "title": "Method Refresh | XData website",
    "keywords": "Method Refresh | Improve this Doc View Source Refresh<T>(IRepository<T>) Refresh repository data Declaration public static IRepository<T> Refresh<T>(this IRepository<T> source) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> source Repository Returns Type Description IRepository <T> Repository Type Parameters Name Description T Data object type | Improve this Doc View Source Refresh<T>(T) Refresh single data object from database Declaration public static bool Refresh<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type"
  },
  "api/XData.DataObjectExtensions.SubquerySources.html": {
    "href": "api/XData.DataObjectExtensions.SubquerySources.html",
    "title": "Field SubquerySources | XData website",
    "keywords": "Field SubquerySources Data sources types interpretable as sub queries Namespace : XData Assembly : XData.docfx.dll Syntax public static readonly DataSourceType[] SubquerySources Returns Type Description DataSourceType []"
  },
  "api/XData.DataObjectExtensions.Modify.html": {
    "href": "api/XData.DataObjectExtensions.Modify.html",
    "title": "Method Modify | XData website",
    "keywords": "Method Modify | Improve this Doc View Source Modify<T>(T, Action<T>[]) Data object modification wrapper Declaration public static T Modify<T>(this T obj, params Action<T>[] actions) where T : class, IDataObject Parameters Type Name Description T obj Data object Action <T>[] actions Modification actions Returns Type Description T Modified data object Type Parameters Name Description T Data object type | Improve this Doc View Source Modify(Xml, Action<XDocument>) Xml field modify Declaration public static Xml Modify(this Xml source, Action<XDocument> action) Parameters Type Name Description Xml source Source document Action < XDocument > action Modify action Returns Type Description Xml Modified xml Examples invoice.Source.Modify(doc => doc.Element(\"invoice\").Attribute(\"state\").Value = \"ACTIVE\"); Exceptions Type Condition XDataRuntimeException Modify logic error See Also Xml Modify(Lob, Action<Byte[]>) | Improve this Doc View Source Modify(Lob, Action<Byte[]>) Lob field modify Declaration public static Lob Modify(this Lob source, Action<byte[]> action) Parameters Type Name Description Lob source Source Lob Action < Byte []> action Modify action Returns Type Description Lob Modified Lob Exceptions Type Condition XDataRuntimeException Modify logic error See Also Lob Modify(Xml, Action<XDocument>)"
  },
  "api/XData.DataObjectExtensions.GetProperties.html": {
    "href": "api/XData.DataObjectExtensions.GetProperties.html",
    "title": "Method GetProperties | XData website",
    "keywords": "Method GetProperties | Improve this Doc View Source GetProperties<T>(T, IEnumerable<String>, DataVersion) Returns properties values Declaration public static IEnumerable<KeyValuePair<string, object>> GetProperties<T>(this T obj, IEnumerable<string> props, DataVersion version = DataVersion.Actual) where T : class, IDataObject Parameters Type Name Description T obj Data object instance IEnumerable < String > props Properties sequence DataVersion version Data version Returns Type Description IEnumerable < KeyValuePair < String , Object >> Sequence of name value pairs Type Parameters Name Description T Data object type Remarks Hint: To get a single property value use GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) function. Exceptions Type Condition XDataRuntimeException Properties sequence is null | Improve this Doc View Source GetProperties<T>(T, String[]) Returns properties values Hint: To get a single property value use GetProperty function. Declaration public static IEnumerable<KeyValuePair<string, object>> GetProperties<T>(this T obj, params string[] props) where T : class, IDataObject Parameters Type Name Description T obj Data object instance String [] props Properties array Returns Type Description IEnumerable < KeyValuePair < String , Object >> Sequence of name value pairs Type Parameters Name Description T Data object type Remarks Hint: To get a single property value use GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) function. | Improve this Doc View Source GetProperties<T>(T, DataVersion, String[]) Returns properties values Declaration public static IEnumerable<KeyValuePair<string, object>> GetProperties<T>(this T obj, DataVersion version = DataVersion.Actual, params string[] props) where T : class, IDataObject Parameters Type Name Description T obj Data object instance DataVersion version Data version String [] props Properties array Returns Type Description IEnumerable < KeyValuePair < String , Object >> Sequence of name value pairs Type Parameters Name Description T Data object type Remarks Hint: To get a single property value use GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) function."
  },
  "api/XData.DataObjectExtensions.AsString.html": {
    "href": "api/XData.DataObjectExtensions.AsString.html",
    "title": "Method AsString | XData website",
    "keywords": "Method AsString | Improve this Doc View Source AsString<T>(IQueryable<T>) Repository select query text Declaration public static string AsString<T>(this IQueryable<T> queryable) where T : class, IDataObject Parameters Type Name Description IQueryable <T> queryable Queryable source of data object Returns Type Description String Repository Type Parameters Name Description T Data object type Remarks WARNING! High resource utilization! Use it for debug only!"
  },
  "api/XData.DataObjectExtensions.Execute.html": {
    "href": "api/XData.DataObjectExtensions.Execute.html",
    "title": "Method Execute | XData website",
    "keywords": "Method Execute | Improve this Doc View Source Execute<T>(ICollection<T>, String, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over array of objects Declaration public static bool Execute<T>(this ICollection<T> objects, string key, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) where T : class, IDataObject, new() Parameters Type Name Description ICollection <T> objects Collection of objects String key Action key IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type Remarks Hint: When using XData application server custom logic will executed on server side Exceptions Type Condition XDataRuntimeException Object repository is detached See Also Execute<T>(ICollection<T>, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) | Improve this Doc View Source Execute<T>(ICollection<T>, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over array of objects Declaration public static bool Execute<T>(this ICollection<T> objects, Expression<Func<CustomLogic<T>>> routine, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) where T : class, IDataObject, new() Parameters Type Name Description ICollection <T> objects Collection of objects Expression < Func < CustomLogic <T>>> routine Action field name expression Example: () => SomeCustomActionField IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type Remarks Hint: When using XData application server custom logic will executed on server side Exceptions Type Condition XDataRuntimeException Action field name expression is null XDataRuntimeException CustomActionAttribute not found for expression specified field See Also Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) | Improve this Doc View Source Execute<T>(T, String, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over single object Declaration public static bool Execute<T>(this T obj, string key, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance String key Action key IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type Remarks Hint: When using XData application server custom logic will executed on server side Exceptions Type Condition XDataRuntimeException Object repository is detached See Also Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) | Improve this Doc View Source Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over single object Declaration public static bool Execute<T>(this T obj, Expression<Func<CustomLogic<T>>> routine, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Expression < Func < CustomLogic <T>>> routine Action field name expression Example: () => SomeCustomActionField IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type Remarks Hint: When using XData application server custom logic will executed on server side Exceptions Type Condition XDataRuntimeException Action field expression is null XDataRuntimeException CustomActionAttribute not found for expression specified field See Also Execute<T>(ICollection<T>, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>)"
  },
  "api/XData.DataObjectExtensions.PostData.html": {
    "href": "api/XData.DataObjectExtensions.PostData.html",
    "title": "Method PostData | XData website",
    "keywords": "Method PostData | Improve this Doc View Source PostData<T>(T, String, Func<Byte[]>) Post data to client Declaration public static void PostData<T>(this T obj, string message, Func<byte[]> data) where T : class, IDataObject, new() Parameters Type Name Description T obj Object context String message Message name Func < Byte []> data Data to post Type Parameters Name Description T Data object type"
  },
  "api/XData.DataObjectExtensions.Callback.html": {
    "href": "api/XData.DataObjectExtensions.Callback.html",
    "title": "Method Callback | XData website",
    "keywords": "Method Callback | Improve this Doc View Source Callback<T>(T, String, ref Byte[]) Callback to client Declaration public static bool Callback<T>(this T obj, string message, ref byte[] data) where T : class, IDataObject, new() Parameters Type Name Description T obj Object context String message Message name Byte [] data Data to post Returns Type Description Boolean Type Parameters Name Description T Data object type"
  },
  "api/XData.DataObjectExtensions.IsCleared.html": {
    "href": "api/XData.DataObjectExtensions.IsCleared.html",
    "title": "Method IsCleared | XData website",
    "keywords": "Method IsCleared | Improve this Doc View Source IsCleared<T>(T, String) Test property value is cleared Declaration public static bool IsCleared<T>(this T obj, string prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance String prop Property name Returns Type Description Boolean Property is cleared Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty"
  },
  "api/XData.DataObjectExtensions.IsChanged.html": {
    "href": "api/XData.DataObjectExtensions.IsChanged.html",
    "title": "Method IsChanged | XData website",
    "keywords": "Method IsChanged | Improve this Doc View Source IsChanged<T>(T, String) Test property value is assigned Declaration public static bool IsChanged<T>(this T obj, string prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance String prop Property name Returns Type Description Boolean Property is changed Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty | Improve this Doc View Source IsChanged<T>(T, Expression<Func<T, Object>>[]) Test property value is assigned Declaration public static bool IsChanged<T>(this T obj, params Expression<Func<T, object>>[] prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance Expression < Func <T, Object >>[] prop Property name expression Example: x => x.SomePropertyName Returns Type Description Boolean Property is changed Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name expression can not be null"
  },
  "api/XData.DataObjectExtensions.IsEmpty.html": {
    "href": "api/XData.DataObjectExtensions.IsEmpty.html",
    "title": "Method IsEmpty | XData website",
    "keywords": "Method IsEmpty | Improve this Doc View Source IsEmpty<T>(T, String) Test property value is empty Declaration public static bool IsEmpty<T>(this T obj, string prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance String prop Property name Returns Type Description Boolean Property is empty Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty | Improve this Doc View Source IsEmpty<T>(T, Expression<Func<T, Object>>) Test property value is empty Declaration public static bool IsEmpty<T>(this T obj, Expression<Func<T, object>> prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance Expression < Func <T, Object >> prop Property name expression Example: x => x.SomePropertyName Returns Type Description Boolean Property is empty Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name expression can not be null"
  },
  "api/XData.DataObjectExtensions.Submit.html": {
    "href": "api/XData.DataObjectExtensions.Submit.html",
    "title": "Method Submit | XData website",
    "keywords": "Method Submit | Improve this Doc View Source Submit<T>(T, out T, DataSubmitFlag) Submit data object changes Declaration public static bool Submit<T>(this T obj, out T res, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance T res Submitted object DataSubmitFlag flag Submit flag Returns Type Description Boolean Submit success Type Parameters Name Description T Data object type See Also Submit(ref T, DataSubmitFlag) | Improve this Doc View Source Submit<T>(T, Func<JsonSettings<T>, JsonSettings<T>>, out T, DataSubmitFlag) Submit data object changes Declaration public static bool Submit<T>(this T obj, Func<JsonSettings<T>, JsonSettings<T>> settings, out T res, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings T res Submitted object DataSubmitFlag flag Submit flag Returns Type Description Boolean Submit success Type Parameters Name Description T Data object type See Also Submit(ref T, DataSubmitFlag) | Improve this Doc View Source Submit<T>(T, DataSubmitFlag) Submit data object changes Declaration public static bool Submit<T>(this T obj, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance DataSubmitFlag flag Submit flag Returns Type Description Boolean Submit success Type Parameters Name Description T Data object type See Also Submit(ref T, DataSubmitFlag)"
  },
  "api/XData.DataObjectExtensions.ToArray.html": {
    "href": "api/XData.DataObjectExtensions.ToArray.html",
    "title": "Method ToArray | XData website",
    "keywords": "Method ToArray | Improve this Doc View Source ToArray<T>(IEnumerable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Returns array of data objects with JSON serialization settings applied Declaration public static T[] ToArray<T>(this IEnumerable<T> sourceEnumerable, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IEnumerable <T> sourceEnumerable Source object sequence Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description T[] Array of data objects with JSON serialization settings applied Type Parameters Name Description T Object type"
  },
  "api/XData.DataObjectExtensions.Lock.html": {
    "href": "api/XData.DataObjectExtensions.Lock.html",
    "title": "Method Lock | XData website",
    "keywords": "Method Lock | Improve this Doc View Source Lock<T>(T) Lock object in database Declaration public static bool Lock<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Returns Type Description Boolean Lock success Type Parameters Name Description T Data object type See Also Lock(T)"
  },
  "api/XData.DataObjectExtensions.SetCurrent.html": {
    "href": "api/XData.DataObjectExtensions.SetCurrent.html",
    "title": "Method SetCurrent | XData website",
    "keywords": "Method SetCurrent | Improve this Doc View Source SetCurrent<T>(T) Set object as repository current Declaration public static void SetCurrent<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Type Parameters Name Description T Data object type See Also Current"
  },
  "api/XData.DataObjectExtensions.GetProperty.html": {
    "href": "api/XData.DataObjectExtensions.GetProperty.html",
    "title": "Method GetProperty | XData website",
    "keywords": "Method GetProperty | Improve this Doc View Source GetProperty<TRet>(IDataObject, String) Returns single property value Declaration public static TRet GetProperty<TRet>(this IDataObject obj, string prop) Parameters Type Name Description IDataObject obj Data object instance String prop Property name Returns Type Description TRet Property value Type Parameters Name Description TRet Property type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty See Also GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) | Improve this Doc View Source GetProperty<T, TRet>(T, Expression<Func<T, TRet>>) Returns property value Declaration public static TRet GetProperty<T, TRet>(this T obj, Expression<Func<T, TRet>> prop) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Expression < Func <T, TRet>> prop Property name expression: x => x.SomePropertyName Returns Type Description TRet Property value Type Parameters Name Description T Data object type TRet Property type Exceptions Type Condition XDataRuntimeException Property name expression can not be null | Improve this Doc View Source GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) Returns property value Declaration public static TRet GetProperty<T, TRet>(this T obj, Expression<Func<T, TRet>> prop, DataVersion version) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Expression < Func <T, TRet>> prop Property name expression: x => x.SomePropertyName DataVersion version Data version Returns Type Description TRet Property value Type Parameters Name Description T Data object type TRet Property type Exceptions Type Condition XDataRuntimeException Property name expression can not be null"
  },
  "api/XData.DataObjectExtensions.GetContext.html": {
    "href": "api/XData.DataObjectExtensions.GetContext.html",
    "title": "Method GetContext | XData website",
    "keywords": "Method GetContext | Improve this Doc View Source GetContext(IDataObject) Returns context name for object Declaration public static string GetContext(this IDataObject obj) Parameters Type Name Description IDataObject obj Data object Returns Type Description String Context name Exceptions Type Condition XDataRuntimeException"
  },
  "api/XData.DataObjectExtensions.GetLayer.html": {
    "href": "api/XData.DataObjectExtensions.GetLayer.html",
    "title": "Method GetLayer | XData website",
    "keywords": "Method GetLayer | Improve this Doc View Source GetLayer(IDataObject) Returns repository layer for object Declaration public static Guid GetLayer(this IDataObject obj) Parameters Type Name Description IDataObject obj Data object Returns Type Description Guid Repository layer Exceptions Type Condition XDataRuntimeException"
  },
  "api/XData.DataObjectExtensions.GetRepositoryAlias.html": {
    "href": "api/XData.DataObjectExtensions.GetRepositoryAlias.html",
    "title": "Method GetRepositoryAlias | XData website",
    "keywords": "Method GetRepositoryAlias | Improve this Doc View Source GetRepositoryAlias(IDataObject) Returns object's repository alias Declaration public static string GetRepositoryAlias(this IDataObject obj) Parameters Type Name Description IDataObject obj Data object Returns Type Description String Repository alias Exceptions Type Condition XDataRuntimeException"
  },
  "api/XData.DataObjectExtensions.AssignProperty.html": {
    "href": "api/XData.DataObjectExtensions.AssignProperty.html",
    "title": "Method AssignProperty | XData website",
    "keywords": "Method AssignProperty | Improve this Doc View Source AssignProperty<T, TValue>(T, String, TValue) Assign property value Declaration public static bool AssignProperty<T, TValue>(this T obj, string prop, TValue value) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance String prop Property name TValue value Property value Returns Type Description Boolean Property value changed Type Parameters Name Description T Data object type TValue Data property type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty"
  },
  "api/XData.DataObjectExtensions.Apply.html": {
    "href": "api/XData.DataObjectExtensions.Apply.html",
    "title": "Method Apply | XData website",
    "keywords": "Method Apply | Improve this Doc View Source Apply<T>(IRepository<T>, T, ApplyFlag, String[]) Find object and apply changes from detached object Declaration public static T Apply<T>(this IRepository<T> repository, T source, ApplyFlag flags, params string[] properties) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> repository Repository T source Source detached object ApplyFlag flags Apply behaviour flags String [] properties Properties to copy Returns Type Description T Changed target object Type Parameters Name Description T Object type | Improve this Doc View Source Apply<T>(IRepository<T>, T, String[]) Find object and apply changes from detached object Declaration public static T Apply<T>(this IRepository<T> repository, T source, params string[] properties) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> repository Repository T source Source detached object String [] properties Properties to copy Returns Type Description T Changed target object Type Parameters Name Description T Object type"
  },
  "api/XData.DataObjectExtensions.Copy.html": {
    "href": "api/XData.DataObjectExtensions.Copy.html",
    "title": "Method Copy | XData website",
    "keywords": "Method Copy | Improve this Doc View Source Copy<T>(T, T, String[]) Copy detached object info Declaration public static T Copy<T>(this T target, T source, params string[] properties) where T : class, IDataObject, new() Parameters Type Name Description T target Target object attached to repository T source Source detached object String [] properties Properties to copy Returns Type Description T Changed target object Type Parameters Name Description T Object type | Improve this Doc View Source Copy<T>(T, T, CopyFlag, String[]) Copy detached object info Declaration public static T Copy<T>(this T target, T source, CopyFlag flags, params string[] properties) where T : class, IDataObject, new() Parameters Type Name Description T target Target object attached to repository T source Source detached object CopyFlag flags Apply behaviour flags String [] properties Properties to copy Returns Type Description T Changed target object Type Parameters Name Description T Object type"
  },
  "api/XData.DataObjectExtensions.Find.html": {
    "href": "api/XData.DataObjectExtensions.Find.html",
    "title": "Method Find | XData website",
    "keywords": "Method Find | Improve this Doc View Source Find<T>(IRepository<T>, T, Boolean) Find detached object in repository Declaration public static T Find<T>(this IRepository<T> repository, T source, bool ignoreConcurrency = false) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> repository Repository T source Detached object Boolean ignoreConcurrency Find ignore concurrency token value (optional) default = false Returns Type Description T Found object Type Parameters Name Description T Object type"
  },
  "api/XData.DataObjectExtensions.LoadLob.html": {
    "href": "api/XData.DataObjectExtensions.LoadLob.html",
    "title": "Method LoadLob | XData website",
    "keywords": "Method LoadLob | Improve this Doc View Source LoadLob<T>(T, Expression<Func<T, Object>>[]) Load Lob and Xml field values of data object Declaration public static T LoadLob<T>(this T obj, params Expression<Func<T, object>>[] properties) where T : class, IDataObject, new() Parameters Type Name Description T obj Object Expression < Func <T, Object >>[] properties Properties expressions Returns Type Description T Enriched object Type Parameters Name Description T Object type | Improve this Doc View Source LoadLob<T>(T) Load Lob and Xml field values of data object Declaration public static T LoadLob<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Object Returns Type Description T Enriched object Type Parameters Name Description T Object type | Improve this Doc View Source LoadLob<T>(T, String[]) Load Lob and Xml field values of data object Declaration public static T LoadLob<T>(this T obj, params string[] properties) where T : class, IDataObject, new() Parameters Type Name Description T obj Object String [] properties Properties extensions Returns Type Description T Enriched object Type Parameters Name Description T Object type"
  },
  "api/XData.DataObjectExtensions.WithJsonSettings.html": {
    "href": "api/XData.DataObjectExtensions.WithJsonSettings.html",
    "title": "Method WithJsonSettings | XData website",
    "keywords": "Method WithJsonSettings | Improve this Doc View Source WithJsonSettings<T>(T, Func<JsonSettings<T>, JsonSettings<T>>) Apply custom JSON serialization settings to single object Declaration public static T WithJsonSettings<T>(this T obj, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description T obj Object to apply serialization settings Func < JsonSettings <T>, JsonSettings <T>> settings Serialization settings fill routine Returns Type Description T Object with custom serialization settings Type Parameters Name Description T ObjectType | Improve this Doc View Source WithJsonSettings<T>(ICollection<T>, Func<JsonSettings<T>, JsonSettings<T>>) Apply custom JSON serialization settings to collection Declaration public static ICollection<T> WithJsonSettings<T>(this ICollection<T> collection, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description ICollection <T> collection Collection to apply serialization settings Func < JsonSettings <T>, JsonSettings <T>> settings Serialization settings fill routine Returns Type Description ICollection <T> Collection with custom serialization settings Type Parameters Name Description T ObjectType"
  },
  "api/XData.DataObjectExtensions.GetParameter.html": {
    "href": "api/XData.DataObjectExtensions.GetParameter.html",
    "title": "Method GetParameter | XData website",
    "keywords": "Method GetParameter | Improve this Doc View Source GetParameter<T, TRet>(T, String) Returns SQL procedure/function out parameter value Declaration public static TRet GetParameter<T, TRet>(this T obj, string param) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance String param Parameter name Returns Type Description TRet Parameter value Type Parameters Name Description T Data object type TRet Parameter type Exceptions Type Condition XDataRuntimeException Parameter name can not be null or empty See Also GetParameter<T, TRet>(T, Expression<Func<T, TRet>>) | Improve this Doc View Source GetParameter<T, TRet>(T, Expression<Func<T, TRet>>) Returns SQL procedure/function out parameter value Declaration public static TRet GetParameter<T, TRet>(this T obj, Expression<Func<T, TRet>> param) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Expression < Func <T, TRet>> param Parameter name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description TRet Parameter value Type Parameters Name Description T Data object type TRet Parameter type Exceptions Type Condition XDataRuntimeException Parameter name expression can not be null | Improve this Doc View Source GetParameter<T, TRet>(IDataQuery<T>, Expression<Func<T, TRet>>) Returns SQL procedure/function out parameter value Declaration public static TRet GetParameter<T, TRet>(this IDataQuery<T> query, Expression<Func<T, TRet>> param) where T : class, new() Parameters Type Name Description IDataQuery <T> query Data query Expression < Func <T, TRet>> param Parameter name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description TRet Parameter value Type Parameters Name Description T Data object type TRet Parameter type Exceptions Type Condition XDataRuntimeException Parameter name expression can not be null | Improve this Doc View Source GetParameter<T>(IDataQuery, String) Returns SQL procedure/function out parameter value Declaration public static T GetParameter<T>(this IDataQuery query, string param) Parameters Type Name Description IDataQuery query Data query String param Parameter name Returns Type Description T Parameter value Type Parameters Name Description T Exceptions Type Condition XDataRuntimeException Parameter name can not be null or empty See Also GetParameter<T, TRet>(IDataQuery<T>, Expression<Func<T, TRet>>)"
  },
  "api/XData.DataObjectExtensions.GetResultSet.html": {
    "href": "api/XData.DataObjectExtensions.GetResultSet.html",
    "title": "Method GetResultSet | XData website",
    "keywords": "Method GetResultSet | Improve this Doc View Source GetResultSet<T, TRes>(T, Expression<Func<T, IEnumerable<TRes>>>) Returns SQL procedure/function result set Declaration public static IEnumerable<TRes> GetResultSet<T, TRes>(this T obj, Expression<Func<T, IEnumerable<TRes>>> resultSetName) where T : class, IDataObject, new() where TRes : class Parameters Type Name Description T obj Data object instance Expression < Func <T, IEnumerable <TRes>>> resultSetName Result set name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description IEnumerable <TRes> Result set object sequence Type Parameters Name Description T Data object type TRes Result set object type Exceptions Type Condition XDataRuntimeException Result set name expression can not be null | Improve this Doc View Source GetResultSet<TRes>(IDataQuery, String) Returns SQL procedure/function result set Declaration public static IEnumerable<TRes> GetResultSet<TRes>(this IDataQuery query, string resultSetName) where TRes : class Parameters Type Name Description IDataQuery query Data query String resultSetName Result set name name Returns Type Description IEnumerable <TRes> Parameter value Type Parameters Name Description TRes Result set object type Exceptions Type Condition XDataRuntimeException Result set name can not be null or empty See Also GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) | Improve this Doc View Source GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) Returns SQL procedure/function result set Declaration public static IEnumerable<TRes> GetResultSet<TRes>(this IDataQuery query, Expression<Func<IEnumerable<TRes>>> resultSetName) where TRes : class Parameters Type Name Description IDataQuery query Data query Expression < Func < IEnumerable <TRes>>> resultSetName Result set name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description IEnumerable <TRes> Result set object sequence Type Parameters Name Description TRes Result set object type Exceptions Type Condition XDataRuntimeException Result set name expression can not be null See Also GetResultSet<TRes>(IDataQuery, String) | Improve this Doc View Source GetResultSet<T, TRes>(IRepository<T>, Expression<Func<T, IEnumerable<TRes>>>) Returns SQL procedure/function result set Declaration public static IEnumerable<TRes> GetResultSet<T, TRes>(this IRepository<T> repository, Expression<Func<T, IEnumerable<TRes>>> resultSetName) where T : class, IDataObject, new() where TRes : class Parameters Type Name Description IRepository <T> repository Data object repository Expression < Func <T, IEnumerable <TRes>>> resultSetName Result set name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description IEnumerable <TRes> Result set object sequence Type Parameters Name Description T Object type TRes Result set object type Exceptions Type Condition XDataRuntimeException Result set name expression can not be null See Also GetResultSet<TRes>(IDataQuery, String)"
  },
  "api/XData.DataObjectExtensions.SetFilterValue.html": {
    "href": "api/XData.DataObjectExtensions.SetFilterValue.html",
    "title": "Method SetFilterValue | XData website",
    "keywords": "Method SetFilterValue | Improve this Doc View Source SetFilterValue<T, TRes>(IRepository<T>, Expression<Func<T, TRes>>, TRes) Set value to dynamically created runtime filter Declaration public static IRepository<T> SetFilterValue<T, TRes>(this IRepository<T> repository, Expression<Func<T, TRes>> propertyExpression, TRes filterValue) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> repository Repository Expression < Func <T, TRes>> propertyExpression Property name expression TRes filterValue Filter value Returns Type Description IRepository <T> Repository Type Parameters Name Description T Repository data object type TRes Property type"
  },
  "api/XData.DataObjectExtensions.FindMemberExpression.html": {
    "href": "api/XData.DataObjectExtensions.FindMemberExpression.html",
    "title": "Method FindMemberExpression | XData website",
    "keywords": "Method FindMemberExpression | Improve this Doc View Source FindMemberExpression(Expression) Property name expression parse helper Declaration public static MemberExpression FindMemberExpression(Expression e) Parameters Type Name Description Expression e Property name expression: x => x.SomePropertyName Returns Type Description MemberExpression Property name Exceptions Type Condition XDataRuntimeException Property name expression can not be null XDataRuntimeException Expression has a wrong expression type"
  },
  "api/XData.DataObjectExtensions.GetRepository.html": {
    "href": "api/XData.DataObjectExtensions.GetRepository.html",
    "title": "Method GetRepository | XData website",
    "keywords": "Method GetRepository | Improve this Doc View Source GetRepository<T>(T) Returns object repository Declaration public static IRepository<T> GetRepository<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Returns Type Description IRepository <T> Object repository Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Object repository is detached"
  },
  "api/XData.DataObjectExtensions.SetVar.html": {
    "href": "api/XData.DataObjectExtensions.SetVar.html",
    "title": "Method SetVar | XData website",
    "keywords": "Method SetVar | Improve this Doc View Source SetVar<T>(String, T) Set variable value Declaration public static Variable SetVar<T>(this string name, T value) Parameters Type Name Description String name Variable name T value Variable value Returns Type Description Variable Variable Type Parameters Name Description T Value type"
  },
  "api/XData.DataObjectExtensions.SetAttachedHandlers.html": {
    "href": "api/XData.DataObjectExtensions.SetAttachedHandlers.html",
    "title": "Method SetAttachedHandlers | XData website",
    "keywords": "Method SetAttachedHandlers | Improve this Doc View Source SetAttachedHandlers<T>(T, AttachedHandler<T>[]) Attach extra handlers to object instance Declaration public static void SetAttachedHandlers<T>(this T obj, params AttachedHandler<T>[] handlers) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance AttachedHandler <T>[] handlers Handlers Type Parameters Name Description T Data object type"
  },
  "api/XData.DataObjectExtensions.IsAttached.html": {
    "href": "api/XData.DataObjectExtensions.IsAttached.html",
    "title": "Method IsAttached | XData website",
    "keywords": "Method IsAttached | Improve this Doc View Source IsAttached(IDataObject, Type) Check data object is attached Declaration public static bool IsAttached(this IDataObject obj, Type type) Parameters Type Name Description IDataObject obj Data object instance Type type Data object type Returns Type Description Boolean Object is attached Exceptions Type Condition XDataRuntimeException Object is detached"
  },
  "api/XData.DataObjectExtensions.GetState.html": {
    "href": "api/XData.DataObjectExtensions.GetState.html",
    "title": "Method GetState | XData website",
    "keywords": "Method GetState | Improve this Doc View Source GetState<T>(T) Returns state of object Declaration public static DataObjectState GetState<T>(this T obj) where T : class, IDataObject Parameters Type Name Description T obj Data object instance Returns Type Description DataObjectState Object state flags combination(see DataObjectState) Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException No state attached to object See Also CheckState<T> (T, DataObjectState ) SetDeleted<T> (T, Boolean )"
  },
  "api/XData.DataObjectExtensions.CheckState.html": {
    "href": "api/XData.DataObjectExtensions.CheckState.html",
    "title": "Method CheckState | XData website",
    "keywords": "Method CheckState | Improve this Doc View Source CheckState<T>(T, DataObjectState) Checks object for state Declaration public static bool CheckState<T>(this T obj, DataObjectState state) where T : class, IDataObject Parameters Type Name Description T obj Data object instance DataObjectState state State Returns Type Description Boolean Object has desired state flag Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException No state attached to object See Also GetState<T> (T) SetDeleted<T> (T, Boolean )"
  },
  "api/XData.DataObjectExtensions.SetDeleted.html": {
    "href": "api/XData.DataObjectExtensions.SetDeleted.html",
    "title": "Method SetDeleted | XData website",
    "keywords": "Method SetDeleted | Improve this Doc View Source SetDeleted<T>(T, Boolean) Set deleted state to object Declaration public static T SetDeleted<T>(this T obj, bool setState) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Boolean setState Set or remove DataObjectState.Deleted state flag Returns Type Description T Object marked as deleted/restored Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException No state attached to object See Also CheckState<T> (T, DataObjectState ) GetState<T> (T) | Improve this Doc View Source SetDeleted<T>(ICollection<T>, Boolean) Set deleted state to each object in collection Declaration public static ICollection<T> SetDeleted<T>(this ICollection<T> collection, bool setState) where T : class, IDataObject, new() Parameters Type Name Description ICollection <T> collection Data object collection Boolean setState Set or remove DataObjectState.Deleted state flag Returns Type Description ICollection <T> Collection of objects marked as deleted/restored Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException No state attached to object See Also CheckState<T> (T, DataObjectState ) GetState<T> (T)"
  },
  "api/XData.DataObjectExtensions.html": {
    "href": "api/XData.DataObjectExtensions.html",
    "title": "Class DataObjectExtensions | XData website",
    "keywords": "Class DataObjectExtensions IDataObject extension functions Inheritance Object DataObjectExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public static class DataObjectExtensions Fields Name Description SubquerySources Data sources types interpretable as sub queries Methods Name Description Apply<T>(IRepository<T>, T, String[]) Find object and apply changes from detached object Apply<T>(IRepository<T>, T, ApplyFlag, String[]) Find object and apply changes from detached object AssignProperty<T, TValue>(T, String, TValue) Assign property value AsString<T>(IQueryable<T>) Repository select query text Callback<T>(T, String, ref Byte[]) Callback to client CheckState<T>(T, DataObjectState) Checks object for state Copy<T>(T, T, String[]) Copy detached object info Copy<T>(T, T, CopyFlag, String[]) Copy detached object info Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over single object Execute<T>(T, String, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over single object Execute<T>(ICollection<T>, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over array of objects Execute<T>(ICollection<T>, String, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over array of objects Find<T>(IRepository<T>, T, Boolean) Find detached object in repository FindMemberExpression(Expression) Property name expression parse helper GetContext(IDataObject) Returns context name for object GetLayer(IDataObject) Returns repository layer for object GetParameter<T>(IDataQuery, String) Returns SQL procedure/function out parameter value GetParameter<T, TRet>(T, Expression<Func<T, TRet>>) Returns SQL procedure/function out parameter value GetParameter<T, TRet>(T, String) Returns SQL procedure/function out parameter value GetParameter<T, TRet>(IDataQuery<T>, Expression<Func<T, TRet>>) Returns SQL procedure/function out parameter value GetProperties<T>(T, IEnumerable<String>, DataVersion) Returns properties values GetProperties<T>(T, String[]) Returns properties values Hint: To get a single property value use GetProperty function. GetProperties<T>(T, DataVersion, String[]) Returns properties values GetProperty<TRet>(IDataObject, String) Returns single property value GetProperty<T, TRet>(T, Expression<Func<T, TRet>>) Returns property value GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) Returns property value GetRepository<T>(T) Returns object repository GetRepositoryAlias(IDataObject) Returns object's repository alias GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) Returns SQL procedure/function result set GetResultSet<TRes>(IDataQuery, String) Returns SQL procedure/function result set GetResultSet<T, TRes>(T, Expression<Func<T, IEnumerable<TRes>>>) Returns SQL procedure/function result set GetResultSet<T, TRes>(IRepository<T>, Expression<Func<T, IEnumerable<TRes>>>) Returns SQL procedure/function result set GetState<T>(T) Returns state of object IsAttached(IDataObject, Type) Check data object is attached IsChanged<T>(T, Expression<Func<T, Object>>[]) Test property value is assigned IsChanged<T>(T, String) Test property value is assigned IsCleared<T>(T, String) Test property value is cleared IsEmpty<T>(T, Expression<Func<T, Object>>) Test property value is empty IsEmpty<T>(T, String) Test property value is empty LoadLob<T>(T) Load Lob and Xml field values of data object LoadLob<T>(T, Expression<Func<T, Object>>[]) Load Lob and Xml field values of data object LoadLob<T>(T, String[]) Load Lob and Xml field values of data object Lock<T>(T) Lock object in database Modify(Lob, Action<Byte[]>) Lob field modify Modify(Xml, Action<XDocument>) Xml field modify Modify<T>(T, Action<T>[]) Data object modification wrapper PostData<T>(T, String, Func<Byte[]>) Post data to client Refresh<T>(T) Refresh single data object from database Refresh<T>(IRepository<T>) Refresh repository data SetAttachedHandlers<T>(T, AttachedHandler<T>[]) Attach extra handlers to object instance SetCurrent<T>(T) Set object as repository current SetDeleted<T>(T, Boolean) Set deleted state to object SetDeleted<T>(ICollection<T>, Boolean) Set deleted state to each object in collection SetFilterValue<T, TRes>(IRepository<T>, Expression<Func<T, TRes>>, TRes) Set value to dynamically created runtime filter SetVar<T>(String, T) Set variable value Submit<T>(T, out T, DataSubmitFlag) Submit data object changes Submit<T>(T, Func<JsonSettings<T>, JsonSettings<T>>, out T, DataSubmitFlag) Submit data object changes Submit<T>(T, DataSubmitFlag) Submit data object changes ToArray<T>(IEnumerable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Returns array of data objects with JSON serialization settings applied WithJsonSettings<T>(T, Func<JsonSettings<T>, JsonSettings<T>>) Apply custom JSON serialization settings to single object WithJsonSettings<T>(ICollection<T>, Func<JsonSettings<T>, JsonSettings<T>>) Apply custom JSON serialization settings to collection"
  },
  "api/XData.DataGrouping.html": {
    "href": "api/XData.DataGrouping.html",
    "title": "Enum DataGrouping | XData website",
    "keywords": "Enum DataGrouping Data aggregation function Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum DataGrouping Fields Name Description Avg Avg() Count Count() Max Max() Min Min() None No aggregate function applied Sum Sum() See Also Grouping Grouping Grouping None Count Sum Max Min Avg Extension Methods SerializationExtensions.ToXml<DataGrouping>() CollectionsExtensions.SetValue<DataGrouping, T>(T) CollectionsExtensions.AsEnum<DataGrouping>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataGrouping, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataGrouping, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataExpressionType.html": {
    "href": "api/XData.DataExpressionType.html",
    "title": "Enum DataExpressionType | XData website",
    "keywords": "Enum DataExpressionType Expression type Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum DataExpressionType Fields Name Description LinqExpression LINQ-style defined expression PlainSql Plain SQL expression SubQuery Subquery expression See Also ExprType ExprType PlainSql SubQuery Extension Methods SerializationExtensions.ToXml<DataExpressionType>() CollectionsExtensions.SetValue<DataExpressionType, T>(T) CollectionsExtensions.AsEnum<DataExpressionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataExpressionType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataExpressionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataCombination.html": {
    "href": "api/XData.DataCombination.html",
    "title": "Enum DataCombination | XData website",
    "keywords": "Enum DataCombination Data set combination modes Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum DataCombination Fields Name Description Except EXCEPT(MINUS) Intersect INTERSECT None Data object not use combination Union UNION UnionAll UNION ALL See Also None Union UnionAll Except Intersect Extension Methods SerializationExtensions.ToXml<DataCombination>() CollectionsExtensions.SetValue<DataCombination, T>(T) CollectionsExtensions.AsEnum<DataCombination>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataCombination, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataCombination, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.html": {
    "href": "api/XData.Database.html",
    "title": "Namespace XData.Database | XData website",
    "keywords": "Namespace XData.Database Classes FieldInfo Field information TableInfo Table information XDataContext Data context Provides database adapter and SQL builder access Interfaces ITransaction Transaction wrapper interface Enums DataQueries Static adapter queries enumeration"
  },
  "api/XData.Database.XDataContext.Name.html": {
    "href": "api/XData.Database.XDataContext.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Context name Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.Database.XDataContext.DatabaseAdapter.html": {
    "href": "api/XData.Database.XDataContext.DatabaseAdapter.html",
    "title": "Property DatabaseAdapter | XData website",
    "keywords": "Property DatabaseAdapter | Improve this Doc View Source DatabaseAdapter Database adapter Declaration public IDatabaseAdapter DatabaseAdapter { get; } Property Value Type Description IDatabaseAdapter"
  },
  "api/XData.Database.XDataContext.Proxy.html": {
    "href": "api/XData.Database.XDataContext.Proxy.html",
    "title": "Property Proxy | XData website",
    "keywords": "Property Proxy | Improve this Doc View Source Proxy Remote proxy Declaration public IProxy Proxy { get; } Property Value Type Description IProxy"
  },
  "api/XData.Database.XDataContext.DatabaseDialect.html": {
    "href": "api/XData.Database.XDataContext.DatabaseDialect.html",
    "title": "Property DatabaseDialect | XData website",
    "keywords": "Property DatabaseDialect | Improve this Doc View Source DatabaseDialect SQL builder Declaration public ISqlBuilder DatabaseDialect { get; } Property Value Type Description ISqlBuilder"
  },
  "api/XData.Database.XDataContext.DialectName.html": {
    "href": "api/XData.Database.XDataContext.DialectName.html",
    "title": "Property DialectName | XData website",
    "keywords": "Property DialectName | Improve this Doc View Source DialectName SQL dialect name Declaration public string DialectName { get; } Property Value Type Description String"
  },
  "api/XData.Database.XDataContext.DialectOptions.html": {
    "href": "api/XData.Database.XDataContext.DialectOptions.html",
    "title": "Property DialectOptions | XData website",
    "keywords": "Property DialectOptions | Improve this Doc View Source DialectOptions Dialect options supported by context Declaration public DialectOptions DialectOptions { get; } Property Value Type Description DialectOptions"
  },
  "api/XData.Database.XDataContext.ConcurrencyErrorId.html": {
    "href": "api/XData.Database.XDataContext.ConcurrencyErrorId.html",
    "title": "Property ConcurrencyErrorId | XData website",
    "keywords": "Property ConcurrencyErrorId | Improve this Doc View Source ConcurrencyErrorId Concurrency error id Declaration public string ConcurrencyErrorId { get; } Property Value Type Description String"
  },
  "api/XData.Database.XDataContext.ConnectionInfo.html": {
    "href": "api/XData.Database.XDataContext.ConnectionInfo.html",
    "title": "Property ConnectionInfo | XData website",
    "keywords": "Property ConnectionInfo | Improve this Doc View Source ConnectionInfo Context connection information Declaration public XConnectionInfo ConnectionInfo { get; } Property Value Type Description XConnectionInfo"
  },
  "api/XData.Database.XDataContext.html": {
    "href": "api/XData.Database.XDataContext.html",
    "title": "Class XDataContext | XData website",
    "keywords": "Class XDataContext Data context Provides database adapter and SQL builder access Inheritance Object XDataContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database Assembly : XData.docfx.dll Syntax public sealed class XDataContext Properties Name Description ConcurrencyErrorId Concurrency error id ConnectionInfo Context connection information DatabaseAdapter Database adapter DatabaseDialect SQL builder DialectName SQL dialect name DialectOptions Dialect options supported by context Name Context name Proxy Remote proxy Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.TableInfo.Name.html": {
    "href": "api/XData.Database.TableInfo.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Table name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/XData.Database.TableInfo.Fields.html": {
    "href": "api/XData.Database.TableInfo.Fields.html",
    "title": "Property Fields | XData website",
    "keywords": "Property Fields | Improve this Doc View Source Fields Table fields Declaration public List<FieldInfo> Fields { get; set; } Property Value Type Description List < FieldInfo >"
  },
  "api/XData.Database.TableInfo.Equals.html": {
    "href": "api/XData.Database.TableInfo.Equals.html",
    "title": "Method Equals | XData website",
    "keywords": "Method Equals | Improve this Doc View Source Equals(TableInfo) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(TableInfo other) Parameters Type Name Description TableInfo other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T>.Equals(T)"
  },
  "api/XData.Database.TableInfo.ToString.html": {
    "href": "api/XData.Database.TableInfo.ToString.html",
    "title": "Method ToString | XData website",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/XData.Database.TableInfo.Clone.html": {
    "href": "api/XData.Database.TableInfo.Clone.html",
    "title": "Method Clone | XData website",
    "keywords": "Method Clone | Improve this Doc View Source Clone() Creates a new object that is a copy of the current instance. Declaration public object Clone() Returns Type Description Object A new object that is a copy of this instance."
  },
  "api/XData.Database.TableInfo.RefreshFields.html": {
    "href": "api/XData.Database.TableInfo.RefreshFields.html",
    "title": "Method RefreshFields | XData website",
    "keywords": "Method RefreshFields | Improve this Doc View Source RefreshFields(String, IConfiguration) Refresh table info Declaration public TableInfo RefreshFields(string context, IConfiguration cfg = null) Parameters Type Name Description String context Context name IConfiguration cfg Configuration Returns Type Description TableInfo Refreshed table info"
  },
  "api/XData.Database.TableInfo.html": {
    "href": "api/XData.Database.TableInfo.html",
    "title": "Class TableInfo | XData website",
    "keywords": "Class TableInfo Table information Inheritance Object TableInfo Implements IEquatable < TableInfo > ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database Assembly : XData.docfx.dll Syntax public class TableInfo : IEquatable<TableInfo>, ICloneable Properties Name Description Fields Table fields Name Table name Methods Name Description Clone() Creates a new object that is a copy of the current instance. Equals(TableInfo) Indicates whether the current object is equal to another object of the same type. RefreshFields(String, IConfiguration) Refresh table info ToString() Returns a string that represents the current object. Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.html": {
    "href": "api/XData.Database.SqlBlock.html",
    "title": "Namespace XData.Database.SqlBlock | XData website",
    "keywords": "Namespace XData.Database.SqlBlock Classes SqlBlockExtensions Sql block extensions SqlType SQL block variable/constant/parameter type description Interfaces IBlockQueryAdapter SQL block query structure adapter IBlockQueryDescription Base SQL block query description interface IBlockQueryDescription<T> SQL block query description interface IBlockQueryStructure SQL block query structure interface IExpressionMergeAdapter Expression structure adapter for SQL block queries ILoopVariableAdapter<T> Loop variables mapping adapter IMergeAdapter Merge role structure adapter IPropertyMergeAdapter Dynamic structure adapter for SQL block queries ISqlBlock SQL block definition interface ISqlBlockAdapter SQL block adapter ISqlBlockAdapter<T> Adapter of SQL block returning data ISqlParam SQL block parameter interface ISqlParamAdapter Adapter to describe SQL block parameters ISqlTableAdapter ISqlValue SQL block variable/parameter/constant value description ISqlValueAdapter SQL value description adapter Delegates SqlBlockDefinition SQL block definition expression type SqlBlockDefinition<T> SQL block definition expression type"
  },
  "api/XData.Database.SqlBlock.SqlType.DbType.html": {
    "href": "api/XData.Database.SqlBlock.SqlType.DbType.html",
    "title": "Property DbType | XData website",
    "keywords": "Property DbType | Improve this Doc View Source DbType Database type Declaration public DbType DbType { get; set; } Property Value Type Description DbType"
  },
  "api/XData.Database.SqlBlock.SqlType.Length.html": {
    "href": "api/XData.Database.SqlBlock.SqlType.Length.html",
    "title": "Property Length | XData website",
    "keywords": "Property Length | Improve this Doc View Source Length Value type length Declaration public int Length { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Database.SqlBlock.SqlType.Scale.html": {
    "href": "api/XData.Database.SqlBlock.SqlType.Scale.html",
    "title": "Property Scale | XData website",
    "keywords": "Property Scale | Improve this Doc View Source Scale Value type scale Declaration public int Scale { get; set; } Property Value Type Description Int32"
  },
  "api/XData.Database.SqlBlock.SqlType.NativeSqlType.html": {
    "href": "api/XData.Database.SqlBlock.SqlType.NativeSqlType.html",
    "title": "Property NativeSqlType | XData website",
    "keywords": "Property NativeSqlType | Improve this Doc View Source NativeSqlType Value type native name Declaration public string NativeSqlType { get; set; } Property Value Type Description String"
  },
  "api/XData.Database.SqlBlock.SqlType.html": {
    "href": "api/XData.Database.SqlBlock.SqlType.html",
    "title": "Class SqlType | XData website",
    "keywords": "Class SqlType SQL block variable/constant/parameter type description Inheritance Object SqlType Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public class SqlType Properties Name Description DbType Database type Length Value type length NativeSqlType Value type native name Scale Value type scale Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.ExecuteSqlBlock.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.ExecuteSqlBlock.html",
    "title": "Method ExecuteSqlBlock | XData website",
    "keywords": "Method ExecuteSqlBlock | Improve this Doc View Source ExecuteSqlBlock(IDataScope, Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Execute SQL block Declaration public static QueryResult ExecuteSqlBlock(this IDataScope dataScope, Expression<SqlBlockDefinition> block, params Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters) Parameters Type Name Description IDataScope dataScope Data scope Expression < SqlBlockDefinition > block Sql block structure Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Sql block parameters Returns Type Description QueryResult SQL block executed over database"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.GetSqlBlockData.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.GetSqlBlockData.html",
    "title": "Method GetSqlBlockData | XData website",
    "keywords": "Method GetSqlBlockData | Improve this Doc View Source GetSqlBlockData<T>(IDataScope, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Select SQL block data Declaration public static IEnumerable<T> GetSqlBlockData<T>(this IDataScope dataScope, Expression<SqlBlockDefinition<T>> block, params Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters) where T : class, new() Parameters Type Name Description IDataScope dataScope Data scope layer Expression < SqlBlockDefinition <T>> block Sql block structure Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Sql block parameters Returns Type Description IEnumerable <T> SQL block data selected and mapped Type Parameters Name Description T SQL block result mapped type"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.Exists.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.Exists.html",
    "title": "Method Exists | XData website",
    "keywords": "Method Exists | Improve this Doc View Source Exists(IBlockQueryAdapter, String) Exists Declaration public static bool Exists(this IBlockQueryAdapter adapter, string subQueryAlias) Parameters Type Name Description IBlockQueryAdapter adapter Source query structure adapter String subQueryAlias Subquery alias Returns Type Description Boolean Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.Case.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.Case.html",
    "title": "Method Case | XData website",
    "keywords": "Method Case | Improve this Doc View Source Case<T, TResult>(IBlockQueryAdapter, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, TResult>>, TaggedExpression<T, TResult>[]) Case Declaration public static TResult Case<T, TResult>(this IBlockQueryAdapter adapter, Expression<Func<IBlockQueryAdapter, T>> expression, Expression<Func<IBlockQueryAdapter, TResult>> elseValue, params TaggedExpression<T, TResult>[] switchValues) Parameters Type Name Description IBlockQueryAdapter adapter Source query structure adapter Expression < Func < IBlockQueryAdapter , T>> expression Case expression Expression < Func < IBlockQueryAdapter , TResult>> elseValue Else value TaggedExpression <T, TResult>[] switchValues Case switch values Returns Type Description TResult Case result Type Parameters Name Description T SQL case source data mapped type TResult SQL case result mapped type Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.DateDiff.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.DateDiff.html",
    "title": "Method DateDiff | XData website",
    "keywords": "Method DateDiff | Improve this Doc View Source DateDiff<T>(IBlockQueryAdapter, Expression<Func<IBlockQueryAdapter, DateTime>>, Expression<Func<IBlockQueryAdapter, DateTime>>, DateDiffKind) Dates difference Declaration public static T DateDiff<T>(this IBlockQueryAdapter adapter, Expression<Func<IBlockQueryAdapter, DateTime>> finalDate, Expression<Func<IBlockQueryAdapter, DateTime>> startDate, DateDiffKind kind) Parameters Type Name Description IBlockQueryAdapter adapter Source query structure adapter Expression < Func < IBlockQueryAdapter , DateTime >> finalDate Final date Expression < Func < IBlockQueryAdapter , DateTime >> startDate Start date DateDiffKind kind Dates differences kind Returns Type Description T Dates difference Type Parameters Name Description T SQL function DateDiff result data mapped type Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.HasFlag.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.HasFlag.html",
    "title": "Method HasFlag | XData website",
    "keywords": "Method HasFlag | Improve this Doc View Source HasFlag<T>(IBlockQueryAdapter, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, T>>) Bit mask has flag Declaration public static T HasFlag<T>(this IBlockQueryAdapter adapter, Expression<Func<IBlockQueryAdapter, T>> expression, Expression<Func<IBlockQueryAdapter, T>> flagValue, Expression<Func<IBlockQueryAdapter, T>> trueValue, Expression<Func<IBlockQueryAdapter, T>> falseValue) Parameters Type Name Description IBlockQueryAdapter adapter Source query structure adapter Expression < Func < IBlockQueryAdapter , T>> expression Expression to test Expression < Func < IBlockQueryAdapter , T>> flagValue Flag value Expression < Func < IBlockQueryAdapter , T>> trueValue Result if flag exists Expression < Func < IBlockQueryAdapter , T>> falseValue Result if flag not exists Returns Type Description T Bit mask has flag than trueValue else falseValue Type Parameters Name Description T SQL bitmask flag test result data mapped type Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.SetExpression.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.SetExpression.html",
    "title": "Method SetExpression | XData website",
    "keywords": "Method SetExpression | Improve this Doc View Source SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) Set expression to tag Declaration public static TaggedExpression<TTag, TResult> SetExpression<TTag, TResult>(this TTag key, Expression<Func<IBlockQueryAdapter, TResult>> expression) Parameters Type Name Description TTag key Tag value Expression < Func < IBlockQueryAdapter , TResult>> expression Expression Returns Type Description TaggedExpression <TTag, TResult> Tagged expression Type Parameters Name Description TTag Tag type TResult Expression result"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.SqlFn.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.SqlFn.html",
    "title": "Method SqlFn | XData website",
    "keywords": "Method SqlFn | Improve this Doc View Source SqlFn<TResult>(IBlockQueryAdapter, String, Expression<Func<IBlockQueryAdapter, Object>>[]) SQL function call Declaration public static TResult SqlFn<TResult>(this IBlockQueryAdapter adapter, string name, params Expression<Func<IBlockQueryAdapter, object>>[] parameters) Parameters Type Name Description IBlockQueryAdapter adapter Source query structure adapter String name SQL function full qualified name Expression < Func < IBlockQueryAdapter , Object >>[] parameters Function parameters descriptions Returns Type Description TResult Function call result Type Parameters Name Description TResult SQL function result mapped type Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.SqlParam.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.SqlParam.html",
    "title": "Method SqlParam | XData website",
    "keywords": "Method SqlParam | Improve this Doc View Source SqlParam<TResult>(IBlockQueryAdapter, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) SQL parameter definition Declaration public static TResult SqlParam<TResult>(this IBlockQueryAdapter adapter, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) Parameters Type Name Description IBlockQueryAdapter adapter Query structure adapter String binding Parameter data binding name DbType type Parameter database type Expression < Func < IProcedureParameterAdapter , IProcedureParameterFlag >>[] attributes Parameter mapping attributes Returns Type Description TResult Parameter Type Parameters Name Description TResult Parameter mapped type Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.SqlExpr.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.SqlExpr.html",
    "title": "Method SqlExpr | XData website",
    "keywords": "Method SqlExpr | Improve this Doc View Source SqlExpr<TResult>(IBlockQueryAdapter, String, Expression<Func<IBlockQueryAdapter, TResult>>[]) Plain SQL expression with XData LINQ expression placeholders Declaration public static TResult SqlExpr<TResult>(this IBlockQueryAdapter adapter, string format, params Expression<Func<IBlockQueryAdapter, TResult>>[] expressions) Parameters Type Name Description IBlockQueryAdapter adapter Source query structure adapter String format SQL expression body in Format(String, Object[]) style Expression < Func < IBlockQueryAdapter , TResult>>[] expressions XData LINQ parameter expressions Returns Type Description TResult SQL expression result Type Parameters Name Description TResult SQL expression result mapped type Remarks WARNING! Plain SQL expressions can use specific SQL dialect features! Data mapping may be not compatible with other database engines! Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only"
  },
  "api/XData.Database.SqlBlock.SqlBlockExtensions.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockExtensions.html",
    "title": "Class SqlBlockExtensions | XData website",
    "keywords": "Class SqlBlockExtensions Sql block extensions Inheritance Object SqlBlockExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public static class SqlBlockExtensions Methods Name Description Case<T, TResult>(IBlockQueryAdapter, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, TResult>>, TaggedExpression<T, TResult>[]) Case DateDiff<T>(IBlockQueryAdapter, Expression<Func<IBlockQueryAdapter, DateTime>>, Expression<Func<IBlockQueryAdapter, DateTime>>, DateDiffKind) Dates difference ExecuteSqlBlock(IDataScope, Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Execute SQL block Exists(IBlockQueryAdapter, String) Exists GetSqlBlockData<T>(IDataScope, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Select SQL block data HasFlag<T>(IBlockQueryAdapter, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, T>>) Bit mask has flag SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) Set expression to tag SqlExpr<TResult>(IBlockQueryAdapter, String, Expression<Func<IBlockQueryAdapter, TResult>>[]) Plain SQL expression with XData LINQ expression placeholders SqlFn<TResult>(IBlockQueryAdapter, String, Expression<Func<IBlockQueryAdapter, Object>>[]) SQL function call SqlParam<TResult>(IBlockQueryAdapter, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) SQL parameter definition"
  },
  "api/XData.Database.SqlBlock.SqlBlockDefinition.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockDefinition.html",
    "title": "Delegate SqlBlockDefinition | XData website",
    "keywords": "Delegate SqlBlockDefinition SQL block definition expression type Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public delegate ISqlBlock SqlBlockDefinition(ISqlBlockAdapter adapter); Parameters Type Name Description ISqlBlockAdapter adapter SQL block adapter interface Returns Type Description ISqlBlock SQL block definition Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.SqlBlockDefinition-1.html": {
    "href": "api/XData.Database.SqlBlock.SqlBlockDefinition-1.html",
    "title": "Delegate SqlBlockDefinition<T> | XData website",
    "keywords": "Delegate SqlBlockDefinition<T> SQL block definition expression type Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public delegate ISqlBlock SqlBlockDefinition<T>(ISqlBlockAdapter<T> adapter) where T : class, new(); Parameters Type Name Description ISqlBlockAdapter <T> adapter SQL block adapter typed interface Returns Type Description ISqlBlock SQL block definition Type Parameters Name Description T SQL block result mapped type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.ISqlValueAdapter.Var.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValueAdapter.Var.html",
    "title": "Method Var | XData website",
    "keywords": "Method Var | Improve this Doc View Source Var<T>(String, SqlType, Expression<Action<ISqlTableAdapter>>[]) SQL variable value Declaration ISqlValue Var<T>(string name, SqlType type, params Expression<Action<ISqlTableAdapter>>[] fields) Parameters Type Name Description String name Variable name SqlType type Variable type Expression < Action < ISqlTableAdapter >>[] fields Table variable fields description Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Variable mapped type | Improve this Doc View Source Var<T>(String, DbType) SQL variable value Declaration ISqlValue Var<T>(string name, DbType dbType) Parameters Type Name Description String name Variable name DbType dbType Database type Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Variable mapped type | Improve this Doc View Source Var<T>(String, DbType, Int32) SQL variable value Declaration ISqlValue Var<T>(string name, DbType dbType, int length) Parameters Type Name Description String name Variable name DbType dbType Database type Int32 length Database type length Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Variable mapped type | Improve this Doc View Source Var<T>(String, DbType, Int32, Int32) SQL variable value Declaration ISqlValue Var<T>(string name, DbType dbType, int length, int scale) Parameters Type Name Description String name Variable name DbType dbType Database type Int32 length Database type length Int32 scale Database type scale Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Variable mapped type | Improve this Doc View Source Var<T>(String, DbType, String) Sql variable value Declaration ISqlValue Var<T>(string name, DbType dbType, string nativeSqlType) Parameters Type Name Description String name Variable name DbType dbType Database type String nativeSqlType Native database type name Returns Type Description ISqlValue Sql value description Type Parameters Name Description T Variable mapped type | Improve this Doc View Source Var<T>(String, DbType, String, Int32) SQL variable value Declaration ISqlValue Var<T>(string name, DbType dbType, string nativeSqlType, int length) Parameters Type Name Description String name Variable name DbType dbType Database type String nativeSqlType Native database type name Int32 length Database type length Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Variable mapped type | Improve this Doc View Source Var<T>(String, DbType, String, Int32, Int32) SQL variable value Declaration ISqlValue Var<T>(string name, DbType dbType, string nativeSqlType, int length, int scale) Parameters Type Name Description String name Variable name DbType dbType Database type String nativeSqlType Native database type name Int32 length Database type length Int32 scale Database type scale Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Variable mapped type | Improve this Doc View Source Var<T>(String, DbType, String, SqlType[]) SQL variable value Declaration ISqlValue Var<T>(string name, DbType dbType, string nativeSqlType, SqlType[] elementTypes) Parameters Type Name Description String name Variable name DbType dbType Database type String nativeSqlType Native database type name SqlType [] elementTypes UDT elements descriptions Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Variable mapped type"
  },
  "api/XData.Database.SqlBlock.ISqlValueAdapter.Const.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValueAdapter.Const.html",
    "title": "Method Const | XData website",
    "keywords": "Method Const | Improve this Doc View Source Const<T>(T, DbType) SQL constant value Declaration ISqlValue Const<T>(T value, DbType dbType) Parameters Type Name Description T value Constant value DbType dbType Constant DbType Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Constant mapped type"
  },
  "api/XData.Database.SqlBlock.ISqlValueAdapter.Data.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValueAdapter.Data.html",
    "title": "Method Data | XData website",
    "keywords": "Method Data | Improve this Doc View Source Data<T>(String) Data value Declaration ISqlValue Data<T>(string name) Parameters Type Name Description String name Data column name Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Data column type"
  },
  "api/XData.Database.SqlBlock.ISqlValueAdapter.Param.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValueAdapter.Param.html",
    "title": "Method Param | XData website",
    "keywords": "Method Param | Improve this Doc View Source Param<T>(String, DbType) Parameter value Declaration ISqlValue Param<T>(string name, DbType dbType) Parameters Type Name Description String name Parameter name DbType dbType Parameter DbType Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Parameter mapped type"
  },
  "api/XData.Database.SqlBlock.ISqlValueAdapter.SqlExpr.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValueAdapter.SqlExpr.html",
    "title": "Method SqlExpr | XData website",
    "keywords": "Method SqlExpr | Improve this Doc View Source SqlExpr<T>(Expression<Func<IBlockQueryAdapter, T>>, DbType) Sql expression value Declaration ISqlValue SqlExpr<T>(Expression<Func<IBlockQueryAdapter, T>> expr, DbType dbType) Parameters Type Name Description Expression < Func < IBlockQueryAdapter , T>> expr Expression definition DbType dbType Sql expression DbType Returns Type Description ISqlValue Sql value description Type Parameters Name Description T Expression result mapped type"
  },
  "api/XData.Database.SqlBlock.ISqlValueAdapter.Subquery.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValueAdapter.Subquery.html",
    "title": "Method Subquery | XData website",
    "keywords": "Method Subquery | Improve this Doc View Source Subquery<T>(Expression<Func<IQueryStructure, IQueryStructure>>, DbType, Expression<Func<IBlockQueryAdapter, T>>) Single column subquery as value Declaration ISqlValue Subquery<T>(Expression<Func<IQueryStructure, IQueryStructure>> query, DbType dbType, Expression<Func<IBlockQueryAdapter, T>> field) Parameters Type Name Description Expression < Func < IQueryStructure , IQueryStructure >> query Query structure DbType dbType Single column subquery result DbType Expression < Func < IBlockQueryAdapter , T>> field Result field Returns Type Description ISqlValue SQL value description Type Parameters Name Description T Value mapped type"
  },
  "api/XData.Database.SqlBlock.ISqlValueAdapter.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValueAdapter.html",
    "title": "Interface ISqlValueAdapter | XData website",
    "keywords": "Interface ISqlValueAdapter SQL value description adapter Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface ISqlValueAdapter Methods Name Description Const<T>(T, DbType) SQL constant value Data<T>(String) Data value Param<T>(String, DbType) Parameter value SqlExpr<T>(Expression<Func<IBlockQueryAdapter, T>>, DbType) Sql expression value Subquery<T>(Expression<Func<IQueryStructure, IQueryStructure>>, DbType, Expression<Func<IBlockQueryAdapter, T>>) Single column subquery as value Var<T>(String, DbType) SQL variable value Var<T>(String, DbType, Int32) SQL variable value Var<T>(String, DbType, Int32, Int32) SQL variable value Var<T>(String, DbType, String) Sql variable value Var<T>(String, DbType, String, Int32) SQL variable value Var<T>(String, DbType, String, Int32, Int32) SQL variable value Var<T>(String, DbType, String, SqlType[]) SQL variable value Var<T>(String, SqlType, Expression<Action<ISqlTableAdapter>>[]) SQL variable value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.ISqlValue.SetTable.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValue.SetTable.html",
    "title": "Method SetTable | XData website",
    "keywords": "Method SetTable | Improve this Doc View Source SetTable<T>(Expression<Func<IBlockQueryStructure, T>>) Set table SQL value Declaration ISqlValue SetTable<T>(Expression<Func<IBlockQueryStructure, T>> value) Parameters Type Name Description Expression < Func < IBlockQueryStructure , T>> value Value expression Returns Type Description ISqlValue SQL value Type Parameters Name Description T Value type"
  },
  "api/XData.Database.SqlBlock.ISqlValue.Set.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValue.Set.html",
    "title": "Method Set | XData website",
    "keywords": "Method Set | Improve this Doc View Source Set<T>(Expression<Func<ISqlValueAdapter, T>>) Set scalar SQL value Declaration ISqlValue Set<T>(Expression<Func<ISqlValueAdapter, T>> value) Parameters Type Name Description Expression < Func < ISqlValueAdapter , T>> value Value expression Returns Type Description ISqlValue SQL value Type Parameters Name Description T Value type"
  },
  "api/XData.Database.SqlBlock.ISqlValue.html": {
    "href": "api/XData.Database.SqlBlock.ISqlValue.html",
    "title": "Interface ISqlValue | XData website",
    "keywords": "Interface ISqlValue SQL block variable/parameter/constant value description Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface ISqlValue Methods Name Description Set<T>(Expression<Func<ISqlValueAdapter, T>>) Set scalar SQL value SetTable<T>(Expression<Func<IBlockQueryStructure, T>>) Set table SQL value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.ISqlTableAdapter.Field.html": {
    "href": "api/XData.Database.SqlBlock.ISqlTableAdapter.Field.html",
    "title": "Method Field | XData website",
    "keywords": "Method Field | Improve this Doc View Source Field(String, SqlType) Declaration void Field(string fieldName, SqlType sqlType) Parameters Type Name Description String fieldName SqlType sqlType | Improve this Doc View Source Field(String, DbType) Declaration void Field(string fieldName, DbType dbType) Parameters Type Name Description String fieldName DbType dbType | Improve this Doc View Source Field(String, DbType, Int32) Declaration void Field(string fieldName, DbType dbType, int length) Parameters Type Name Description String fieldName DbType dbType Int32 length | Improve this Doc View Source Field(String, DbType, String) Declaration void Field(string fieldName, DbType dbType, string nativeSqlType) Parameters Type Name Description String fieldName DbType dbType String nativeSqlType | Improve this Doc View Source Field(String, DbType, String, Int32) Declaration void Field(string fieldName, DbType dbType, string nativeSqlType, int length) Parameters Type Name Description String fieldName DbType dbType String nativeSqlType Int32 length"
  },
  "api/XData.Database.SqlBlock.ISqlTableAdapter.html": {
    "href": "api/XData.Database.SqlBlock.ISqlTableAdapter.html",
    "title": "Interface ISqlTableAdapter | XData website",
    "keywords": "Interface ISqlTableAdapter Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface ISqlTableAdapter Methods Name Description Field(String, DbType) Field(String, DbType, Int32) Field(String, DbType, String) Field(String, DbType, String, Int32) Field(String, SqlType) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.ISqlParamAdapter.Param.html": {
    "href": "api/XData.Database.SqlBlock.ISqlParamAdapter.Param.html",
    "title": "Method Param | XData website",
    "keywords": "Method Param | Improve this Doc View Source Param<T>(String, SqlType) SQL block parameter Declaration ISqlParam Param<T>(string name, SqlType type) Parameters Type Name Description String name Parameter name SqlType type Parameter type Returns Type Description ISqlParam SQL block parameter description Type Parameters Name Description T Parameter mapped type | Improve this Doc View Source Param<T>(String, DbType) SQL block parameter Declaration ISqlParam Param<T>(string name, DbType dbType) Parameters Type Name Description String name Parameter name DbType dbType Parameter database type Returns Type Description ISqlParam SQL block parameter description Type Parameters Name Description T Parameter mapped type | Improve this Doc View Source Param<T>(String, DbType, Int32) SQL block parameter Declaration ISqlParam Param<T>(string name, DbType dbType, int length) Parameters Type Name Description String name Parameter name DbType dbType Parameter database type Int32 length Parameter length Returns Type Description ISqlParam SQL block parameter description Type Parameters Name Description T Parameter mapped typ | Improve this Doc View Source Param<T>(String, DbType, String) SQL block parameter Declaration ISqlParam Param<T>(string name, DbType dbType, string nativeSqlType) Parameters Type Name Description String name Parameter name DbType dbType Parameter database type String nativeSqlType Parameter native SQL type Returns Type Description ISqlParam SQL block parameter description Type Parameters Name Description T Parameter mapped typ | Improve this Doc View Source Param<T>(String, DbType, String, Int32) SQL block parameter Declaration ISqlParam Param<T>(string name, DbType dbType, string nativeSqlType, int length) Parameters Type Name Description String name Parameter name DbType dbType Parameter database type String nativeSqlType Parameter native SQL type Int32 length Parameter length Returns Type Description ISqlParam SQL block parameter description Type Parameters Name Description T Parameter mapped typ"
  },
  "api/XData.Database.SqlBlock.ISqlParamAdapter.html": {
    "href": "api/XData.Database.SqlBlock.ISqlParamAdapter.html",
    "title": "Interface ISqlParamAdapter | XData website",
    "keywords": "Interface ISqlParamAdapter Adapter to describe SQL block parameters Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface ISqlParamAdapter Methods Name Description Param<T>(String, DbType) SQL block parameter Param<T>(String, DbType, Int32) SQL block parameter Param<T>(String, DbType, String) SQL block parameter Param<T>(String, DbType, String, Int32) SQL block parameter Param<T>(String, SqlType) SQL block parameter Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.ISqlParam.Set.html": {
    "href": "api/XData.Database.SqlBlock.ISqlParam.Set.html",
    "title": "Method Set | XData website",
    "keywords": "Method Set | Improve this Doc View Source Set<T>(T) Set SQL block parameter value Declaration ISqlParam Set<T>(T value) Parameters Type Name Description T value Parameter value Returns Type Description ISqlParam SQL block parameter Type Parameters Name Description T Type of parameter value"
  },
  "api/XData.Database.SqlBlock.ISqlParam.html": {
    "href": "api/XData.Database.SqlBlock.ISqlParam.html",
    "title": "Interface ISqlParam | XData website",
    "keywords": "Interface ISqlParam SQL block parameter interface Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface ISqlParam Methods Name Description Set<T>(T) Set SQL block parameter value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.Block.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.Block.html",
    "title": "Method Block | XData website",
    "keywords": "Method Block | Improve this Doc View Source Block(Expression<Func<ISqlBlockAdapter, ISqlBlock>>[]) Complex SQL block fences BEGIN...END Declaration ISqlBlock Block(params Expression<Func<ISqlBlockAdapter, ISqlBlock>>[] blocks) Parameters Type Name Description Expression < Func < ISqlBlockAdapter , ISqlBlock >>[] blocks Contained SQL blocks Returns Type Description ISqlBlock SQL block description See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) | Improve this Doc View Source Block<T>(Expression<Func<ISqlBlockAdapter<T>, ISqlBlock>>[]) Complex SQL block fences BEGIN...END Declaration ISqlBlock Block<T>(params Expression<Func<ISqlBlockAdapter<T>, ISqlBlock>>[] blocks) where T : class, new() Parameters Type Name Description Expression < Func < ISqlBlockAdapter <T>, ISqlBlock >>[] blocks Contained SQL blocks Returns Type Description ISqlBlock SQL block description Type Parameters Name Description T Returned object type See Also GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) | Improve this Doc View Source Block(String) Custom SQL block Declaration ISqlBlock Block(string customSqlBlock) Parameters Type Name Description String customSqlBlock Custom SQL block code Returns Type Description ISqlBlock SQL block description See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.Declare.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.Declare.html",
    "title": "Method Declare | XData website",
    "keywords": "Method Declare | Improve this Doc View Source Declare(Expression<Func<ISqlValueAdapter, ISqlValue>>[]) Declare variables SQL block Declaration ISqlBlock Declare(params Expression<Func<ISqlValueAdapter, ISqlValue>>[] variables) Parameters Type Name Description Expression < Func < ISqlValueAdapter , ISqlValue >>[] variables Variable declaration descriptions Returns Type Description ISqlBlock SQL block description See Also SetVar ( Expression < Func < ISqlValueAdapter , ISqlValue >>[]) SetVar<T> ( Expression < Func < IBlockQueryStructure , IBlockQueryDescription <T>>>, Expression < Func < ISqlValueAdapter , ISqlValue >>[]) ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.SetVar.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.SetVar.html",
    "title": "Method SetVar | XData website",
    "keywords": "Method SetVar | Improve this Doc View Source SetVar(Expression<Func<ISqlValueAdapter, ISqlValue>>[]) SQL variables initialization SQL block Declaration ISqlBlock SetVar(params Expression<Func<ISqlValueAdapter, ISqlValue>>[] variables) Parameters Type Name Description Expression < Func < ISqlValueAdapter , ISqlValue >>[] variables Variable value descriptions Returns Type Description ISqlBlock SQL block description See Also Declare ( Expression < Func < ISqlValueAdapter , ISqlValue >>[]) ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) | Improve this Doc View Source SetVar<T>(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) SQL variables initialization using SELECT... INTO statement SQL block Declaration ISqlBlock SetVar<T>(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>> selectQuery, params Expression<Func<ISqlValueAdapter, ISqlValue>>[] variables) where T : class Parameters Type Name Description Expression < Func < IBlockQueryStructure , IBlockQueryDescription <T>>> selectQuery Query description used as data source Expression < Func < ISqlValueAdapter , ISqlValue >>[] variables Variable value descriptions Returns Type Description ISqlBlock SQL block description Type Parameters Name Description T See Also Declare ( Expression < Func < ISqlValueAdapter , ISqlValue >>[]) ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.Update.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.Update.html",
    "title": "Method Update | XData website",
    "keywords": "Method Update | Improve this Doc View Source Update<T>(String, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) UPDATE SQL block Declaration ISqlBlock Update<T>(string alias, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>> updateQuery, params Expression<Func<ISqlValueAdapter, ISqlValue>>[] expressions) where T : class Parameters Type Name Description String alias Data table alias used to update data Expression < Func < IBlockQueryStructure , IBlockQueryDescription <T>>> updateQuery SQL block query description Expression < Func < ISqlValueAdapter , ISqlValue >>[] expressions Values update description Returns Type Description ISqlBlock SQL block description Type Parameters Name Description T See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.Insert.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.Insert.html",
    "title": "Method Insert | XData website",
    "keywords": "Method Insert | Improve this Doc View Source Insert(String, ICollection<String>, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) Single INSERT INTO...VALUES SQL block Declaration ISqlBlock Insert(string tableName, ICollection<string> fields, params Expression<Func<ISqlValueAdapter, ISqlValue>>[] expressions) Parameters Type Name Description String tableName Table to insert ICollection < String > fields Fields to insert Expression < Func < ISqlValueAdapter , ISqlValue >>[] expressions Values to insert description Use same order of values as specified by fields parameter Returns Type Description ISqlBlock SQL block description See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) | Improve this Doc View Source Insert(String, ICollection<String>, DataTable, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) INSERT INTO...VALUES(...),VALUES(...)... SQL block Declaration ISqlBlock Insert(string tableName, ICollection<string> fields, DataTable data, params Expression<Func<ISqlValueAdapter, ISqlValue>>[] expressions) Parameters Type Name Description String tableName Table to insert ICollection < String > fields Fields to insert DataTable data Data table filled by data Access data by Data<T>(String) method inside expressions Expression < Func < ISqlValueAdapter , ISqlValue >>[] expressions Values to insert description Use same order of values as specified by fields parameter Returns Type Description ISqlBlock SQL block description See Also Data<T>(String) ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) | Improve this Doc View Source Insert<T>(String, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>) INSERT INTO... SELECT SQL block Declaration ISqlBlock Insert<T>(string tableName, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>> selectQuery) where T : class Parameters Type Name Description String tableName Table to insert Expression < Func < IBlockQueryStructure , IBlockQueryDescription <T>>> selectQuery Select query description Use same fields order as in fields parameter Returns Type Description ISqlBlock SQL block description Type Parameters Name Description T See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.Delete.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.Delete.html",
    "title": "Method Delete | XData website",
    "keywords": "Method Delete | Improve this Doc View Source Delete(String, Expression<Func<IQueryStructure, IQueryStructure>>) DELETE SQL block Declaration ISqlBlock Delete(string tableAlias, Expression<Func<IQueryStructure, IQueryStructure>> deleteStructure) Parameters Type Name Description String tableAlias Table to delete alias Same as described inside deleteStructure Expression < Func < IQueryStructure , IQueryStructure >> deleteStructure Delete query structure Returns Type Description ISqlBlock SQL block description See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.Merge.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.Merge.html",
    "title": "Method Merge | XData website",
    "keywords": "Method Merge | Improve this Doc View Source Merge<T>(String, ICollection<String>, String, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, String) MERGE SQL block Declaration ISqlBlock Merge<T>(string tableName, ICollection<string> fields, string targetAlias, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>> selectQuery, string dataAlias) where T : class Parameters Type Name Description String tableName Table name to merge with ICollection < String > fields Merge fields String targetAlias Target table alias Expression < Func < IBlockQueryStructure , IBlockQueryDescription <T>>> selectQuery Data source query description Use Link(String) , Update(String) and Insert(String) structure flags to set merge role of data source columns String dataAlias Data source alias Returns Type Description ISqlBlock SQL block description Type Parameters Name Description T See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.If.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.If.html",
    "title": "Method If | XData website",
    "keywords": "Method If | Improve this Doc View Source If(Expression<Func<ISqlValueAdapter, ISqlValue>>, Expression<Func<ISqlValueAdapter, ISqlValue>>, FilterOperation, Expression<Func<ISqlBlockAdapter, ISqlBlock>>[]) IF SQL block Declaration ISqlBlock If(Expression<Func<ISqlValueAdapter, ISqlValue>> check, Expression<Func<ISqlValueAdapter, ISqlValue>> value, FilterOperation oper, params Expression<Func<ISqlBlockAdapter, ISqlBlock>>[] parts) Parameters Type Name Description Expression < Func < ISqlValueAdapter , ISqlValue >> check SQL value to check Expression < Func < ISqlValueAdapter , ISqlValue >> value SQL value to compare with check Can be null to describe IS NULL or NOT IS NULL comparisons FilterOperation oper Comparision operation Expression < Func < ISqlBlockAdapter , ISqlBlock >>[] parts True-part SQL block and (optionally) false-part SQL block Returns Type Description ISqlBlock SQL block description See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) | Improve this Doc View Source If(Expression<Func<IQueryStructure, IQueryStructure>>, FilterOperation, Expression<Func<ISqlBlockAdapter, ISqlBlock>>[]) IF [NOT] EXISTS(...) SQL block Declaration ISqlBlock If(Expression<Func<IQueryStructure, IQueryStructure>> existsStructure, FilterOperation oper, params Expression<Func<ISqlBlockAdapter, ISqlBlock>>[] parts) Parameters Type Name Description Expression < Func < IQueryStructure , IQueryStructure >> existsStructure Exists select structure FilterOperation oper Comparision operation ( Exists or NotExists only) Expression < Func < ISqlBlockAdapter , ISqlBlock >>[] parts True-part SQL block and (optionally) false-part SQL block Returns Type Description ISqlBlock SQL block description See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.ForEach.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.ForEach.html",
    "title": "Method ForEach | XData website",
    "keywords": "Method ForEach | Improve this Doc View Source ForEach<T>(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, String, Expression<Func<ISqlBlockAdapter, ISqlBlock>>, Expression<Action<ILoopVariableAdapter<T>>>[]) Cursor iteration SQL block Declaration ISqlBlock ForEach<T>(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>> selectQuery, string cursorName, Expression<Func<ISqlBlockAdapter, ISqlBlock>> body, params Expression<Action<ILoopVariableAdapter<T>>>[] mapping) where T : class Parameters Type Name Description Expression < Func < IBlockQueryStructure , IBlockQueryDescription <T>>> selectQuery Cursor query description String cursorName Cursor name Expression < Func < ISqlBlockAdapter , ISqlBlock >> body Loop body SQL block Expression < Action < ILoopVariableAdapter <T>>>[] mapping Loop variables mapping Returns Type Description ISqlBlock SQL block description Type Parameters Name Description T Cursor mapped type See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter.html",
    "title": "Interface ISqlBlockAdapter | XData website",
    "keywords": "Interface ISqlBlockAdapter SQL block adapter Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface ISqlBlockAdapter Methods Name Description Block(Expression<Func<ISqlBlockAdapter, ISqlBlock>>[]) Complex SQL block fences BEGIN...END Block(String) Custom SQL block Block<T>(Expression<Func<ISqlBlockAdapter<T>, ISqlBlock>>[]) Complex SQL block fences BEGIN...END Declare(Expression<Func<ISqlValueAdapter, ISqlValue>>[]) Declare variables SQL block Delete(String, Expression<Func<IQueryStructure, IQueryStructure>>) DELETE SQL block ForEach<T>(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, String, Expression<Func<ISqlBlockAdapter, ISqlBlock>>, Expression<Action<ILoopVariableAdapter<T>>>[]) Cursor iteration SQL block If(Expression<Func<ISqlValueAdapter, ISqlValue>>, Expression<Func<ISqlValueAdapter, ISqlValue>>, FilterOperation, Expression<Func<ISqlBlockAdapter, ISqlBlock>>[]) IF SQL block If(Expression<Func<IQueryStructure, IQueryStructure>>, FilterOperation, Expression<Func<ISqlBlockAdapter, ISqlBlock>>[]) IF [NOT] EXISTS(...) SQL block Insert(String, ICollection<String>, DataTable, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) INSERT INTO...VALUES(...),VALUES(...)... SQL block Insert(String, ICollection<String>, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) Single INSERT INTO...VALUES SQL block Insert<T>(String, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>) INSERT INTO... SELECT SQL block Merge<T>(String, ICollection<String>, String, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, String) MERGE SQL block SetVar(Expression<Func<ISqlValueAdapter, ISqlValue>>[]) SQL variables initialization SQL block SetVar<T>(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) SQL variables initialization using SELECT... INTO statement SQL block Update<T>(String, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) UPDATE SQL block Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter-1.Return.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter-1.Return.html",
    "title": "Method Return | XData website",
    "keywords": "Method Return | Improve this Doc View Source Return(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>) Returning data out of sql block Declaration ISqlBlock Return(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>> selectQuery) Parameters Type Name Description Expression < Func < IBlockQueryStructure , IBlockQueryDescription <T>>> selectQuery Select query description Returns Type Description ISqlBlock SQL block description See Also GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.ISqlBlockAdapter-1.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlockAdapter-1.html",
    "title": "Interface ISqlBlockAdapter<T> | XData website",
    "keywords": "Interface ISqlBlockAdapter<T> Adapter of SQL block returning data Inherited Members ISqlBlockAdapter.Block(Expression<Func<ISqlBlockAdapter, ISqlBlock>>[]) ISqlBlockAdapter.Block<T>(Expression<Func<ISqlBlockAdapter<T>, ISqlBlock>>[]) ISqlBlockAdapter.Block(String) ISqlBlockAdapter.Declare(Expression<Func<ISqlValueAdapter, ISqlValue>>[]) ISqlBlockAdapter.SetVar(Expression<Func<ISqlValueAdapter, ISqlValue>>[]) ISqlBlockAdapter.SetVar<T>(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) ISqlBlockAdapter.Update<T>(String, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) ISqlBlockAdapter.Insert(String, ICollection<String>, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) ISqlBlockAdapter.Insert(String, ICollection<String>, DataTable, Expression<Func<ISqlValueAdapter, ISqlValue>>[]) ISqlBlockAdapter.Insert<T>(String, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>) ISqlBlockAdapter.Delete(String, Expression<Func<IQueryStructure, IQueryStructure>>) ISqlBlockAdapter.Merge<T>(String, ICollection<String>, String, Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, String) ISqlBlockAdapter.If(Expression<Func<ISqlValueAdapter, ISqlValue>>, Expression<Func<ISqlValueAdapter, ISqlValue>>, FilterOperation, Expression<Func<ISqlBlockAdapter, ISqlBlock>>[]) ISqlBlockAdapter.If(Expression<Func<IQueryStructure, IQueryStructure>>, FilterOperation, Expression<Func<ISqlBlockAdapter, ISqlBlock>>[]) ISqlBlockAdapter.ForEach<T>(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>, String, Expression<Func<ISqlBlockAdapter, ISqlBlock>>, Expression<Action<ILoopVariableAdapter<T>>>[]) Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface ISqlBlockAdapter<T> : ISqlBlockAdapter where T : class, new() Type Parameters Name Description T Returned data type Methods Name Description Return(Expression<Func<IBlockQueryStructure, IBlockQueryDescription<T>>>) Returning data out of sql block Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.ISqlBlock.html": {
    "href": "api/XData.Database.SqlBlock.ISqlBlock.html",
    "title": "Interface ISqlBlock | XData website",
    "keywords": "Interface ISqlBlock SQL block definition interface Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface ISqlBlock Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.IPropertyMergeAdapter.html": {
    "href": "api/XData.Database.SqlBlock.IPropertyMergeAdapter.html",
    "title": "Interface IPropertyMergeAdapter | XData website",
    "keywords": "Interface IPropertyMergeAdapter Dynamic structure adapter for SQL block queries Inherited Members IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() IMergeAdapter.Link(String) IMergeAdapter.Link() IMergeAdapter.Update(String) IMergeAdapter.Update() IMergeAdapter.Insert(String) IMergeAdapter.Insert() Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface IPropertyMergeAdapter : IPropertyMappingAdapter, IMergeAdapter Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.IMergeAdapter.Link.html": {
    "href": "api/XData.Database.SqlBlock.IMergeAdapter.Link.html",
    "title": "Method Link | XData website",
    "keywords": "Method Link | Improve this Doc View Source Link(String) SQL value linked to field on merge Declaration IStructureFlag Link(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description IStructureFlag Structure flag | Improve this Doc View Source Link() SQL value linked to field on merge Declaration IStructureFlag Link() Returns Type Description IStructureFlag Structure flag"
  },
  "api/XData.Database.SqlBlock.IMergeAdapter.Update.html": {
    "href": "api/XData.Database.SqlBlock.IMergeAdapter.Update.html",
    "title": "Method Update | XData website",
    "keywords": "Method Update | Improve this Doc View Source Update(String) SQL value is used to update field on merge Declaration IStructureFlag Update(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description IStructureFlag Structure flag | Improve this Doc View Source Update() SQL value is used to update field on merge Declaration IStructureFlag Update() Returns Type Description IStructureFlag Structure flag"
  },
  "api/XData.Database.SqlBlock.IMergeAdapter.Insert.html": {
    "href": "api/XData.Database.SqlBlock.IMergeAdapter.Insert.html",
    "title": "Method Insert | XData website",
    "keywords": "Method Insert | Improve this Doc View Source Insert(String) SQL value is used to insert into field on merge Declaration IStructureFlag Insert(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description IStructureFlag Structure flag | Improve this Doc View Source Insert() SQL value is used to insert into field on merge Declaration IStructureFlag Insert() Returns Type Description IStructureFlag Structure flag"
  },
  "api/XData.Database.SqlBlock.IMergeAdapter.html": {
    "href": "api/XData.Database.SqlBlock.IMergeAdapter.html",
    "title": "Interface IMergeAdapter | XData website",
    "keywords": "Interface IMergeAdapter Merge role structure adapter Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface IMergeAdapter Methods Name Description Insert() SQL value is used to insert into field on merge Insert(String) SQL value is used to insert into field on merge Link() SQL value linked to field on merge Link(String) SQL value linked to field on merge Update() SQL value is used to update field on merge Update(String) SQL value is used to update field on merge Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.ILoopVariableAdapter-1.Map.html": {
    "href": "api/XData.Database.SqlBlock.ILoopVariableAdapter-1.Map.html",
    "title": "Method Map | XData website",
    "keywords": "Method Map | Improve this Doc View Source Map<TVal>(String, Expression<Func<T, TVal>>) Loop variable mapping expression Declaration void Map<TVal>(string variable, Expression<Func<T, TVal>> mapping) Parameters Type Name Description String variable Variable name Expression < Func <T, TVal>> mapping Mapped cursor property expression Type Parameters Name Description TVal See Also ForEach<T> ( Expression < Func < IBlockQueryStructure , IBlockQueryDescription <T>>>, String , Expression < Func < ISqlBlockAdapter , ISqlBlock >>, Expression < Action < ILoopVariableAdapter <T>>>[])"
  },
  "api/XData.Database.SqlBlock.ILoopVariableAdapter-1.html": {
    "href": "api/XData.Database.SqlBlock.ILoopVariableAdapter-1.html",
    "title": "Interface ILoopVariableAdapter<T> | XData website",
    "keywords": "Interface ILoopVariableAdapter<T> Loop variables mapping adapter Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface ILoopVariableAdapter<T> Type Parameters Name Description T Loop cursor type Methods Name Description Map<TVal>(String, Expression<Func<T, TVal>>) Loop variable mapping expression Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.IExpressionMergeAdapter.html": {
    "href": "api/XData.Database.SqlBlock.IExpressionMergeAdapter.html",
    "title": "Interface IExpressionMergeAdapter | XData website",
    "keywords": "Interface IExpressionMergeAdapter Expression structure adapter for SQL block queries Inherited Members IExpressionPropertyAdapter.Size(Int32) IExpressionPropertyAdapter.Size(Int32, Int32) IExpressionPropertyAdapter.NativeSqlType(String) IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() IMergeAdapter.Link(String) IMergeAdapter.Link() IMergeAdapter.Update(String) IMergeAdapter.Update() IMergeAdapter.Insert(String) IMergeAdapter.Insert() Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface IExpressionMergeAdapter : IExpressionPropertyAdapter, IPropertyMappingAdapter, IMergeAdapter Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.IBlockQueryStructure.VarName.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryStructure.VarName.html",
    "title": "Method VarName | XData website",
    "keywords": "Method VarName | Improve this Doc View Source VarName(String) Variable name with prefix Declaration string VarName(string variable) Parameters Type Name Description String variable Variable name Returns Type Description String Variable name with prefix See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.IBlockQueryStructure.GetStructure.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryStructure.GetStructure.html",
    "title": "Method GetStructure | XData website",
    "keywords": "Method GetStructure | Improve this Doc View Source GetStructure(String, Expression<Func<IQueryStructure, IQueryStructure>>) Returns SQL block query structure Declaration IBlockQueryStructure GetStructure(string baseTableAlias, Expression<Func<IQueryStructure, IQueryStructure>> query) Parameters Type Name Description String baseTableAlias Expression < Func < IQueryStructure , IQueryStructure >> query Returns Type Description IBlockQueryStructure SQL block query structure See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) | Improve this Doc View Source GetStructure<T>(String, Expression<Func<IQueryStructure, IQueryStructure>>) Returns SQL block query structure Declaration IBlockQueryStructure GetStructure<T>(string baseTableAlias, Expression<Func<IQueryStructure, IQueryStructure>> query) where T : class, IDataObject, new() Parameters Type Name Description String baseTableAlias Expression < Func < IQueryStructure , IQueryStructure >> query Returns Type Description IBlockQueryStructure SQL block query structure Type Parameters Name Description T Base data object type See Also ExecuteSqlBlock ( IDataScope , Expression < SqlBlockDefinition >, Expression < Func < ISqlParamAdapter , ISqlParam >>[]) GetSqlBlockData<T> ( IDataScope , Expression < SqlBlockDefinition <T>>, Expression < Func < ISqlParamAdapter , ISqlParam >>[])"
  },
  "api/XData.Database.SqlBlock.IBlockQueryStructure.Select.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryStructure.Select.html",
    "title": "Method Select | XData website",
    "keywords": "Method Select | Improve this Doc View Source Select<TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) SQL block query result mapping Declaration IBlockQueryDescription<TResult> Select<TResult>(Expression<Func<IBlockQueryAdapter, TResult>> mapper) where TResult : class Parameters Type Name Description Expression < Func < IBlockQueryAdapter , TResult>> mapper Mapping expression Returns Type Description IBlockQueryDescription <TResult> Dynamic query description Type Parameters Name Description TResult Dynamic query result type See Also GetStructure(String, Expression<Func<IQueryStructure, IQueryStructure>>)"
  },
  "api/XData.Database.SqlBlock.IBlockQueryStructure.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryStructure.html",
    "title": "Interface IBlockQueryStructure | XData website",
    "keywords": "Interface IBlockQueryStructure SQL block query structure interface Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface IBlockQueryStructure Methods Name Description GetStructure(String, Expression<Func<IQueryStructure, IQueryStructure>>) Returns SQL block query structure GetStructure<T>(String, Expression<Func<IQueryStructure, IQueryStructure>>) Returns SQL block query structure Select<TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) SQL block query result mapping VarName(String) Variable name with prefix Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.IBlockQueryDescription.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryDescription.html",
    "title": "Interface IBlockQueryDescription | XData website",
    "keywords": "Interface IBlockQueryDescription Base SQL block query description interface Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface IBlockQueryDescription Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.IBlockQueryDescription-1.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryDescription-1.html",
    "title": "Interface IBlockQueryDescription<T> | XData website",
    "keywords": "Interface IBlockQueryDescription<T> SQL block query description interface Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface IBlockQueryDescription<T> : IBlockQueryDescription Type Parameters Name Description T SQL block query row mapped type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.SqlBlock.IBlockQueryAdapter.Field.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryAdapter.Field.html",
    "title": "Method Field | XData website",
    "keywords": "Method Field | Improve this Doc View Source Field<TValue>(String, String, Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(string sourceAlias, string fieldName, params Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name Expression < Func < IPropertyMergeAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! | Improve this Doc View Source Field<TValue>(Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(params Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description Expression < Func < IPropertyMergeAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only!"
  },
  "api/XData.Database.SqlBlock.IBlockQueryAdapter.Expr.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryAdapter.Expr.html",
    "title": "Method Expr | XData website",
    "keywords": "Method Expr | Improve this Doc View Source Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IExpressionMergeAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IExpressionMergeAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name DataExpressionType type Expression source type String exprText Expression text DbType dbType Expression database type Expression < Func < IExpressionMergeAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only! | Improve this Doc View Source Expr<TValue>(String, Expression<Func<IBlockQueryAdapter, TValue>>, DbType, Expression<Func<IExpressionMergeAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, Expression<Func<IBlockQueryAdapter, TValue>> expr, DbType dbType, params Expression<Func<IExpressionMergeAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name Expression < Func < IBlockQueryAdapter , TValue>> expr Expression DbType dbType Expression database type Expression < Func < IExpressionMergeAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only!"
  },
  "api/XData.Database.SqlBlock.IBlockQueryAdapter.Ref.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryAdapter.Ref.html",
    "title": "Method Ref | XData website",
    "keywords": "Method Ref | Improve this Doc View Source Ref<TValue>(String, String, Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue>(string sourceAlias, string property, params Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Referenced property subquery alias String property Referenced property name Expression < Func < IPropertyMergeAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type Remarks WARNING! Can be used in dynamic query mapping only! | Improve this Doc View Source Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[] attributes) where TDobj : class Parameters Type Name Description String sourceAlias Referenced property subquery alias Expression < Func <TDobj, Object >> property Referenced property name Expression < Func < IPropertyMergeAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type TDobj Referenced inner view type Remarks WARNING! Can be used in dynamic query mapping only!"
  },
  "api/XData.Database.SqlBlock.IBlockQueryAdapter.Val.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryAdapter.Val.html",
    "title": "Method Val | XData website",
    "keywords": "Method Val | Improve this Doc View Source Val<TValue>(Expression<Func<ISqlValueAdapter, ISqlValue>>, Expression<Func<IMergeAdapter, IStructureFlag>>[]) SQL block variable/constant/parameter value mapping Declaration TValue Val<TValue>(Expression<Func<ISqlValueAdapter, ISqlValue>> value, params Expression<Func<IMergeAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description Expression < Func < ISqlValueAdapter , ISqlValue >> value SQL block value mapping expression Expression < Func < IMergeAdapter , IStructureFlag >>[] attributes Merge roles structure flags Returns Type Description TValue Value Type Parameters Name Description TValue Value type"
  },
  "api/XData.Database.SqlBlock.IBlockQueryAdapter.CastTo.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryAdapter.CastTo.html",
    "title": "Method CastTo | XData website",
    "keywords": "Method CastTo | Improve this Doc View Source CastTo<T>() Type cast modifier Declaration IBlockQueryAdapter CastTo<T>() Returns Type Description IBlockQueryAdapter Type Parameters Name Description T Type to cast"
  },
  "api/XData.Database.SqlBlock.IBlockQueryAdapter.html": {
    "href": "api/XData.Database.SqlBlock.IBlockQueryAdapter.html",
    "title": "Interface IBlockQueryAdapter | XData website",
    "keywords": "Interface IBlockQueryAdapter SQL block query structure adapter Namespace : XData.Database.SqlBlock Assembly : XData.docfx.dll Syntax public interface IBlockQueryAdapter Methods Name Description CastTo<T>() Type cast modifier Expr<TValue>(String, Expression<Func<IBlockQueryAdapter, TValue>>, DbType, Expression<Func<IExpressionMergeAdapter, IStructureFlag>>[]) SQL expression mapping Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IExpressionMergeAdapter, IStructureFlag>>[]) SQL expression mapping Field<TValue>(Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[]) Field mapping Field<TValue>(String, String, Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[]) Field mapping Ref<TValue>(String, String, Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[]) Inner view property reference mapping Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IPropertyMergeAdapter, IStructureFlag>>[]) Inner view property reference mapping Val<TValue>(Expression<Func<ISqlValueAdapter, ISqlValue>>, Expression<Func<IMergeAdapter, IStructureFlag>>[]) SQL block variable/constant/parameter value mapping Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.Exists(IBlockQueryAdapter, String) SqlBlockExtensions.Case<T, TResult>(IBlockQueryAdapter, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, TResult>>, TaggedExpression<T, TResult>[]) SqlBlockExtensions.DateDiff<T>(IBlockQueryAdapter, Expression<Func<IBlockQueryAdapter, DateTime>>, Expression<Func<IBlockQueryAdapter, DateTime>>, DateDiffKind) SqlBlockExtensions.HasFlag<T>(IBlockQueryAdapter, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, T>>, Expression<Func<IBlockQueryAdapter, T>>) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) SqlBlockExtensions.SqlFn<TResult>(IBlockQueryAdapter, String, Expression<Func<IBlockQueryAdapter, Object>>[]) SqlBlockExtensions.SqlParam<TResult>(IBlockQueryAdapter, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) SqlBlockExtensions.SqlExpr<TResult>(IBlockQueryAdapter, String, Expression<Func<IBlockQueryAdapter, TResult>>[]) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.ITransaction.Commit.html": {
    "href": "api/XData.Database.ITransaction.Commit.html",
    "title": "Method Commit | XData website",
    "keywords": "Method Commit | Improve this Doc View Source Commit() Commit transaction Declaration bool Commit() Returns Type Description Boolean Success flag"
  },
  "api/XData.Database.ITransaction.html": {
    "href": "api/XData.Database.ITransaction.html",
    "title": "Interface ITransaction | XData website",
    "keywords": "Interface ITransaction Transaction wrapper interface Inherited Members IDisposable.Dispose() Namespace : XData.Database Assembly : XData.docfx.dll Syntax public interface ITransaction : IDisposable Methods Name Description Commit() Commit transaction Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.FieldInfo.Name.html": {
    "href": "api/XData.Database.FieldInfo.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Field name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/XData.Database.FieldInfo.Type.html": {
    "href": "api/XData.Database.FieldInfo.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Field type Declaration public DbType Type { get; set; } Property Value Type Description DbType"
  },
  "api/XData.Database.FieldInfo.IsPk.html": {
    "href": "api/XData.Database.FieldInfo.IsPk.html",
    "title": "Property IsPk | XData website",
    "keywords": "Property IsPk | Improve this Doc View Source IsPk Primary key flag Declaration public bool IsPk { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Database.FieldInfo.IsAutoIncrement.html": {
    "href": "api/XData.Database.FieldInfo.IsAutoIncrement.html",
    "title": "Property IsAutoIncrement | XData website",
    "keywords": "Property IsAutoIncrement | Improve this Doc View Source IsAutoIncrement Auto increment flag Declaration public bool IsAutoIncrement { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Database.FieldInfo.ToString.html": {
    "href": "api/XData.Database.FieldInfo.ToString.html",
    "title": "Method ToString | XData website",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/XData.Database.FieldInfo.html": {
    "href": "api/XData.Database.FieldInfo.html",
    "title": "Class FieldInfo | XData website",
    "keywords": "Class FieldInfo Field information Inheritance Object FieldInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database Assembly : XData.docfx.dll Syntax public sealed class FieldInfo Properties Name Description IsAutoIncrement Auto increment flag IsPk Primary key flag Name Field name Type Field type Methods Name Description ToString() Returns a string that represents the current object. Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Dialect.html": {
    "href": "api/XData.Database.Dialect.html",
    "title": "Namespace XData.Database.Dialect | XData website",
    "keywords": "Namespace XData.Database.Dialect Classes BaseSqlBuilder SQL builder base class ExpressionContext SQL expression context XConnectionInfo Context connection info Enums SqlStringType SQL dialect specific format strings types"
  },
  "api/XData.Database.Dialect.XConnectionInfo.ConnectionString.html": {
    "href": "api/XData.Database.Dialect.XConnectionInfo.ConnectionString.html",
    "title": "Property ConnectionString | XData website",
    "keywords": "Property ConnectionString | Improve this Doc View Source ConnectionString ConnectionString Declaration public string ConnectionString { get; } Property Value Type Description String"
  },
  "api/XData.Database.Dialect.XConnectionInfo.Server.html": {
    "href": "api/XData.Database.Dialect.XConnectionInfo.Server.html",
    "title": "Property Server | XData website",
    "keywords": "Property Server | Improve this Doc View Source Server Database server name Declaration public string Server { get; } Property Value Type Description String"
  },
  "api/XData.Database.Dialect.XConnectionInfo.Schema.html": {
    "href": "api/XData.Database.Dialect.XConnectionInfo.Schema.html",
    "title": "Property Schema | XData website",
    "keywords": "Property Schema | Improve this Doc View Source Schema Database name or schema name Declaration public string Schema { get; } Property Value Type Description String"
  },
  "api/XData.Database.Dialect.XConnectionInfo.IntegratedSecurity.html": {
    "href": "api/XData.Database.Dialect.XConnectionInfo.IntegratedSecurity.html",
    "title": "Property IntegratedSecurity | XData website",
    "keywords": "Property IntegratedSecurity | Improve this Doc View Source IntegratedSecurity Integrated security flag Declaration public bool IntegratedSecurity { get; } Property Value Type Description Boolean"
  },
  "api/XData.Database.Dialect.XConnectionInfo.DbLogin.html": {
    "href": "api/XData.Database.Dialect.XConnectionInfo.DbLogin.html",
    "title": "Property DbLogin | XData website",
    "keywords": "Property DbLogin | Improve this Doc View Source DbLogin Database user login Declaration public string DbLogin { get; } Property Value Type Description String"
  },
  "api/XData.Database.Dialect.XConnectionInfo.html": {
    "href": "api/XData.Database.Dialect.XConnectionInfo.html",
    "title": "Class XConnectionInfo | XData website",
    "keywords": "Class XConnectionInfo Context connection info Inheritance Object XConnectionInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Dialect Assembly : XData.docfx.dll Syntax public class XConnectionInfo Properties Name Description ConnectionString ConnectionString DbLogin Database user login IntegratedSecurity Integrated security flag Schema Database name or schema name Server Database server name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Dialect.SqlStringType.html": {
    "href": "api/XData.Database.Dialect.SqlStringType.html",
    "title": "Enum SqlStringType | XData website",
    "keywords": "Enum SqlStringType SQL dialect specific format strings types Namespace : XData.Database.Dialect Assembly : XData.docfx.dll Syntax public enum SqlStringType Fields Name Description AcquireBlob AcquireXml AfterDelete AfterInsert AfterUpdate All Any BeforeDelete BeforeInsert BeforeUpdate BooleanConstant Ceiling CheckConcurrency Clear ClearComplete ClearDeclare ClearField ClearSaveKeys Coalesce CompleteInsert Concat Conditional Convert Date DateFormat DateTimeAdd DateTimeAddDays DateTimeAddHours DateTimeAddMilliseconds DateTimeAddMinutes DateTimeAddMonths DateTimeAddSeconds DateTimeAddYears DateTimeDaysInMonth DateTimeIsLeapYear Day DayOfWeek DayOfYear Days DaysTotal EmptyBlob EmptyGuid EmptyXml EndsWith Except ExtractXml ExtractXmlWithNamespaces FieldFormat Floor GetBlobSize GetForeignKey GroupConvert GroupField GroupXmlField Hour Hours IndexOf InitInsert InsertValues Intersect IsNullOrEmpty IsNullOrWhiteSpace Length Lock LockPk LockPkJoin MaxSize Millisecond Minute Minutes ModifyedHintAfter ModifyedHintBefore ModifyedTableName Month Months NewGuid NoneSelect Now PadLeft PadRight Power Random Remove Returning Round RowId RowIdArray RowIdFill RowIterator SaveBlob SaveXml Second Seconds SelectField SelectHintBefore SelectXmlField SequenceNextVal SkipInsert SqlBlockDelete SqlBlockIf SqlBlockIfExists SqlBlockInsert SqlBlockQuote SqlBlockReturn SqlBlockUpdate SqlParameter SqlScalarFunction SqlTableFunction Sqrt StartsWith Substring TableName TempTableCreate TempTableDrop TimeOfDay TimeSpanFormat ToBoolean ToDateTime Today ToDecimal ToInt16 ToInt32 ToInt64 ToString ToStringFormat ToXml TreeOrder Trim TrimEnd TrimStart UtcNow With WithRecursive XmlAsString XmlSourceName Year Years Extension Methods SerializationExtensions.ToXml<SqlStringType>() CollectionsExtensions.SetValue<SqlStringType, T>(T) CollectionsExtensions.AsEnum<SqlStringType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<SqlStringType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<SqlStringType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Dialect.ExpressionContext.Query.html": {
    "href": "api/XData.Database.Dialect.ExpressionContext.Query.html",
    "title": "Property Query | XData website",
    "keywords": "Property Query | Improve this Doc View Source Query Expression context query Declaration public IDataQuery Query { get; } Property Value Type Description IDataQuery"
  },
  "api/XData.Database.Dialect.ExpressionContext.OuterQueries.html": {
    "href": "api/XData.Database.Dialect.ExpressionContext.OuterQueries.html",
    "title": "Property OuterQueries | XData website",
    "keywords": "Property OuterQueries | Improve this Doc View Source OuterQueries Subquery outer queries Declaration public Dictionary<string, IDataQuery> OuterQueries { get; set; } Property Value Type Description Dictionary < String , IDataQuery >"
  },
  "api/XData.Database.Dialect.ExpressionContext.html": {
    "href": "api/XData.Database.Dialect.ExpressionContext.html",
    "title": "Class ExpressionContext | XData website",
    "keywords": "Class ExpressionContext SQL expression context Inheritance Object ExpressionContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Dialect Assembly : XData.docfx.dll Syntax public class ExpressionContext Properties Name Description OuterQueries Subquery outer queries Query Expression context query Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetInsertQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetInsertQuery.html",
    "title": "Method GetInsertQuery | XData website",
    "keywords": "Method GetInsertQuery | Improve this Doc View Source GetInsertQuery(IDataStructure, IDataObject, String, Boolean) Returns query to insert data object Declaration public Query GetInsertQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query Implements ISqlBuilder.GetInsertQuery(IDataStructure, IDataObject, String, Boolean) Exceptions Type Condition XDataQueryStructureException"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetUpdateQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetUpdateQuery.html",
    "title": "Method GetUpdateQuery | XData website",
    "keywords": "Method GetUpdateQuery | Improve this Doc View Source GetUpdateQuery(IDataStructure, IDataObject, String, Boolean) Returns query to update data object Declaration public Query GetUpdateQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query Implements ISqlBuilder.GetUpdateQuery(IDataStructure, IDataObject, String, Boolean) Exceptions Type Condition XDataQueryStructureException"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetDeleteQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetDeleteQuery.html",
    "title": "Method GetDeleteQuery | XData website",
    "keywords": "Method GetDeleteQuery | Improve this Doc View Source GetDeleteQuery(IDataStructure, IDataObject, String, Boolean) Returns query to delete data object Declaration public Query GetDeleteQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query Implements ISqlBuilder.GetDeleteQuery(IDataStructure, IDataObject, String, Boolean) Exceptions Type Condition XDataQueryStructureException"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetClearQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetClearQuery.html",
    "title": "Method GetClearQuery | XData website",
    "keywords": "Method GetClearQuery | Improve this Doc View Source GetClearQuery(IDataStructure) Returns query to clear all repository objects Declaration public Query GetClearQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query Implements ISqlBuilder.GetClearQuery(IDataStructure) Exceptions Type Condition XDataQueryStructureException"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.AddReturning2Command.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.AddReturning2Command.html",
    "title": "Method AddReturning2Command | XData website",
    "keywords": "Method AddReturning2Command | Improve this Doc View Source AddReturning2Command(ref StringBuilder, SortedList<String, Tuple<String, Boolean>>, Boolean, Boolean) Add returning auto increment identity column values statement in query Declaration protected abstract void AddReturning2Command(ref StringBuilder sb, SortedList<string, Tuple<string, bool>> identity, bool defaultValues = false, bool close = false) Parameters Type Name Description StringBuilder sb Query string builder SortedList < String , Tuple < String , Boolean >> identity Identity column name and parameter name Boolean defaultValues Insert default values flag Boolean close Close values parenthesis flag"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.CompleteInsert.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.CompleteInsert.html",
    "title": "Method CompleteInsert | XData website",
    "keywords": "Method CompleteInsert | Improve this Doc View Source CompleteInsert(String, SortedList<String, Tuple<String, Boolean>>, Type) Returns string contains SQL expression to complete insert statement Declaration protected virtual string CompleteInsert(string alias, SortedList<string, Tuple<string, bool>> identity, Type objectType) Parameters Type Name Description String alias Base table alias SortedList < String , Tuple < String , Boolean >> identity Identity fields and query parameters Type objectType Mapped object type Returns Type Description String SQL expression to complete insert statement"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.Queries.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.Queries.html",
    "title": "Property Queries | XData website",
    "keywords": "Property Queries | Improve this Doc View Source Queries List of predefined queries WARNING! Mast to be filled in constructor! Declaration protected List<Query> Queries { set; } Property Value Type Description List < Query >"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.TypeNames.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.TypeNames.html",
    "title": "Property TypeNames | XData website",
    "keywords": "Property TypeNames | Improve this Doc View Source TypeNames List of supported column type names WARNING! Mast to be filled in constructor! Declaration public string[] TypeNames { get; protected set; } Property Value Type Description String [] Implements ISqlBuilder.TypeNames"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.SqlTypes.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.SqlTypes.html",
    "title": "Property SqlTypes | XData website",
    "keywords": "Property SqlTypes | Improve this Doc View Source SqlTypes List of supported SQL types WARNING! Mast to be filled in constructor! Declaration public DbType[] SqlTypes { get; protected set; } Property Value Type Description DbType [] Implements ISqlBuilder.SqlTypes"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.TypeSynonyms.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.TypeSynonyms.html",
    "title": "Property TypeSynonyms | XData website",
    "keywords": "Property TypeSynonyms | Improve this Doc View Source TypeSynonyms List of supported type synonyms WARNING! Mast to be filled in constructor! Declaration public string[] TypeSynonyms { get; protected set; } Property Value Type Description String [] Implements ISqlBuilder.TypeSynonyms"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.Item.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.Item.html",
    "title": "Property Item | XData website",
    "keywords": "Property Item | Improve this Doc View Source Item[Enum] Predefined queries enumerator Declaration public Query this[Enum i] { get; } Parameters Type Name Description Enum i Predefined query enumeration key Property Value Type Description Query Query Implements ISqlBuilder.Item[Enum] Exceptions Type Condition XDataAdapterException"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetConnectionString.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetConnectionString.html",
    "title": "Method GetConnectionString | XData website",
    "keywords": "Method GetConnectionString | Improve this Doc View Source GetConnectionString(String, String, Boolean, String, String, String) Compose specific connection string from parts Declaration protected abstract string GetConnectionString(string server, string schema, bool integratedSecurity, string user, string password, string partialConnectionString) Parameters Type Name Description String server Server name String schema Schema name Boolean integratedSecurity Integrated security flag String user User login String password User password String partialConnectionString Additional connection string settings Returns Type Description String Connection string"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.ParseConnectionString.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.ParseConnectionString.html",
    "title": "Method ParseConnectionString | XData website",
    "keywords": "Method ParseConnectionString | Improve this Doc View Source ParseConnectionString(String, ref String, ref String, ref Boolean, ref String, ref String, out String) Parse specific connection string to parts Declaration protected abstract void ParseConnectionString(string connectionString, ref string server, ref string schema, ref bool integratedSecurity, ref string user, ref string password, out string partialConnectionString) Parameters Type Name Description String connectionString Connection string String server Server name String schema Schema name Boolean integratedSecurity Integrated security flag String user User login String password User password String partialConnectionString Additional connection string settings"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.DialectOptions.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.DialectOptions.html",
    "title": "Property DialectOptions | XData website",
    "keywords": "Property DialectOptions | Improve this Doc View Source DialectOptions Dialect options WARNING! Mast to be filled in constructor! Declaration public virtual DialectOptions DialectOptions { get; } Property Value Type Description DialectOptions Implements ISqlBuilder.DialectOptions"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetEnumerator.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetEnumerator.html",
    "title": "Method GetEnumerator | XData website",
    "keywords": "Method GetEnumerator | Improve this Doc View Source GetEnumerator() Predefined queries enumerator Declaration public IEnumerator<Query> GetEnumerator() Returns Type Description IEnumerator < Query > Predefined queries enumerator Implements IEnumerable<T>.GetEnumerator()"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.System-Collections-IEnumerable-GetEnumerator.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.System-Collections-IEnumerable-GetEnumerator.html",
    "title": "Method IEnumerable.GetEnumerator | XData website",
    "keywords": "Method IEnumerable.GetEnumerator | Improve this Doc View Source IEnumerable.GetEnumerator() Predefined queries enumerator Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Predefined queries enumerator Implements IEnumerable.GetEnumerator()"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.Context.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.Context.html",
    "title": "Property Context | XData website",
    "keywords": "Property Context | Improve this Doc View Source Context Context name Declaration protected string Context { get; } Property Value Type Description String"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.SqlStrings.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.SqlStrings.html",
    "title": "Field SqlStrings | XData website",
    "keywords": "Field SqlStrings SQL dialect specific format strings WARNING! Mast be filled in constructor! Namespace : XData.Database.Dialect Assembly : XData.docfx.dll Syntax protected SortedList<SqlStringType, string> SqlStrings Returns Type Description SortedList < SqlStringType , String >"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.ParameterPrefix.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.ParameterPrefix.html",
    "title": "Property ParameterPrefix | XData website",
    "keywords": "Property ParameterPrefix | Improve this Doc View Source ParameterPrefix Parameter prefix symbol Declaration public abstract string ParameterPrefix { get; } Property Value Type Description String Implements ISqlBuilder.ParameterPrefix"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetParameterName.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetParameterName.html",
    "title": "Method GetParameterName | XData website",
    "keywords": "Method GetParameterName | Improve this Doc View Source GetParameterName(String) Formats field name as parameter name Declaration public virtual string GetParameterName(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description String Parameter name Implements ISqlBuilder.GetParameterName(String)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.SetQueryParameterValues.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.SetQueryParameterValues.html",
    "title": "Method SetQueryParameterValues | XData website",
    "keywords": "Method SetQueryParameterValues | Improve this Doc View Source SetQueryParameterValues(ref Query, SortedList<String, Object>) Set query parameter values Declaration public void SetQueryParameterValues(ref Query query, SortedList<string, object> paramValues) Parameters Type Name Description Query query Query SortedList < String , Object > paramValues Parameter values Implements ISqlBuilder.SetQueryParameterValues(ref Query, SortedList<String, Object>)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.ToDataSet.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.ToDataSet.html",
    "title": "Method ToDataSet | XData website",
    "keywords": "Method ToDataSet | Improve this Doc View Source ToDataSet<TSource>(String, IEnumerable<TSource>) Compose union structure over source object sequence Declaration public string ToDataSet<TSource>(string prefix, IEnumerable<TSource> source) Parameters Type Name Description String prefix Column prefix IEnumerable <TSource> source Source sequence Returns Type Description String Data source Type Parameters Name Description TSource Source type"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.SetQueryParameters.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.SetQueryParameters.html",
    "title": "Method SetQueryParameters | XData website",
    "keywords": "Method SetQueryParameters | Improve this Doc View Source SetQueryParameters(ref Query, IEnumerable<IParameterDescription>, SortedList<String, Object>, String, DialectOptions) Declaration public void SetQueryParameters(ref Query query, IEnumerable<IParameterDescription> parameters, SortedList<string, object> variableValues, string userName, DialectOptions dialectOptions) Parameters Type Name Description Query query IEnumerable < IParameterDescription > parameters SortedList < String , Object > variableValues String userName DialectOptions dialectOptions Exceptions Type Condition XDataAdapterException"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.SequenceGeneration.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.SequenceGeneration.html",
    "title": "Method SequenceGeneration | XData website",
    "keywords": "Method SequenceGeneration | Improve this Doc View Source SequenceGeneration(out Boolean) Sequence generation supported Declaration public bool SequenceGeneration(out bool required) Parameters Type Name Description Boolean required Returns Type Description Boolean Sequence generation supported flag See Also GetSequenceName(String, String, String) SequenceRequired"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetSequenceName.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetSequenceName.html",
    "title": "Method GetSequenceName | XData website",
    "keywords": "Method GetSequenceName | Improve this Doc View Source GetSequenceName(String, String, String) Returns sequence name Declaration public string GetSequenceName(string context, string table, string column) Parameters Type Name Description String context Context name String table Table name String column Column name Returns Type Description String Sequence name"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.FormatConstValue.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.FormatConstValue.html",
    "title": "Method FormatConstValue | XData website",
    "keywords": "Method FormatConstValue | Improve this Doc View Source FormatConstValue(Object, out DbType) Declaration protected string FormatConstValue(object constVal, out DbType sqlType) Parameters Type Name Description Object constVal DbType sqlType Returns Type Description String"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.FormatSql.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.FormatSql.html",
    "title": "Method FormatSql | XData website",
    "keywords": "Method FormatSql | Improve this Doc View Source FormatSql(SqlStringType, Object[]) Format SQL dialect specific syntax strings Hint: Override to realize ugly non standard syntax (if needed) Declaration protected virtual string FormatSql(SqlStringType sqlStringType, params object[] args) Parameters Type Name Description SqlStringType sqlStringType SQL syntax key Object [] args Syntax arguments Returns Type Description String"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetSafeConvertExpression.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetSafeConvertExpression.html",
    "title": "Method GetSafeConvertExpression | XData website",
    "keywords": "Method GetSafeConvertExpression | Improve this Doc View Source GetSafeConvertExpression(Type, Expression, Expression) Safe convert expression Declaration public virtual Expression GetSafeConvertExpression(Type type, Expression dataRow, Expression fieldName) Parameters Type Name Description Type type Type of expression Expression dataRow Data row expression Expression fieldName Field name expression Returns Type Description Expression Expression Implements ISqlBuilder.GetSafeConvertExpression(Type, Expression, Expression)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.FormatFieldName.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.FormatFieldName.html",
    "title": "Method FormatFieldName | XData website",
    "keywords": "Method FormatFieldName | Improve this Doc View Source FormatFieldName(String, String) Format field name Declaration public static string FormatFieldName(string alias, string fieldName) Parameters Type Name Description String alias Source alias String fieldName Field name Returns Type Description String Formatted field name"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetConnectionInfo.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetConnectionInfo.html",
    "title": "Method GetConnectionInfo | XData website",
    "keywords": "Method GetConnectionInfo | Improve this Doc View Source GetConnectionInfo(String, String, String, Nullable<Boolean>, String, String) Declaration public XConnectionInfo GetConnectionInfo(string connectionString, string server, string schema, bool? integratedSecurity, string dbLogin, string dbPassword) Parameters Type Name Description String connectionString String server String schema Nullable < Boolean > integratedSecurity String dbLogin String dbPassword Returns Type Description XConnectionInfo"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetExpressionText.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetExpressionText.html",
    "title": "Method GetExpressionText | XData website",
    "keywords": "Method GetExpressionText | Improve this Doc View Source GetExpressionText(IDataStructure, ExpressionContext, Type, Expression, out DbType) Compose SQL expression from XData LINQ expression Declaration public string GetExpressionText(IDataStructure structure, ExpressionContext context, Type queryType, Expression expression, out DbType sqlType) Parameters Type Name Description IDataStructure structure Structure metadata ExpressionContext context Expression context Type queryType Data query type Expression expression XData LINQ expression DbType sqlType Expression sql type Returns Type Description String SQL expression Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported type XDataQueryStructureException Property not found XDataQueryStructureException LINQ expression has unsupported method parameters XDataAdapterException"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetExprSize.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetExprSize.html",
    "title": "Method GetExprSize | XData website",
    "keywords": "Method GetExprSize | Improve this Doc View Source GetExprSize(IField) Declaration protected string GetExprSize(IField field) Parameters Type Name Description IField field Returns Type Description String"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetSqlTypeName.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetSqlTypeName.html",
    "title": "Method GetSqlTypeName | XData website",
    "keywords": "Method GetSqlTypeName | Improve this Doc View Source GetSqlTypeName(DbType) Returns SQL type name for System.DbType Declaration protected virtual string GetSqlTypeName(DbType dbType) Parameters Type Name Description DbType dbType System.DbType enumeration key Returns Type Description String SQL type name Exceptions Type Condition XDataAdapterException Type not supported"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetAcquireXmlQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetAcquireXmlQuery.html",
    "title": "Method GetAcquireXmlQuery | XData website",
    "keywords": "Method GetAcquireXmlQuery | Improve this Doc View Source GetAcquireXmlQuery(String, String, String[], IComparable[]) Returns query to acquire xml data Declaration public Query GetAcquireXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue) Parameters Type Name Description String table Table name String column Xml column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values Returns Type Description Query Query Implements ISqlBuilder.GetAcquireXmlQuery(String, String, String[], IComparable[]) Exceptions Type Condition XDataQueryStructureException Field not found"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetSaveXmlQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetSaveXmlQuery.html",
    "title": "Method GetSaveXmlQuery | XData website",
    "keywords": "Method GetSaveXmlQuery | Improve this Doc View Source GetSaveXmlQuery(String, String, String[], IComparable[], ref String) Returns query to save xml data Declaration public Query GetSaveXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue, ref string body) Parameters Type Name Description String table Table name String column Xml column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String body Blob body Returns Type Description Query Query Implements ISqlBuilder.GetSaveXmlQuery(String, String, String[], IComparable[], ref String) Exceptions Type Condition XDataQueryStructureException Field not found"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.ExtractXmlQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.ExtractXmlQuery.html",
    "title": "Method ExtractXmlQuery | XData website",
    "keywords": "Method ExtractXmlQuery | Improve this Doc View Source ExtractXmlQuery(String, String, String[], IComparable[], String, KeyValuePair<String, String>[]) Returns query to extract xml data by XPath expression Declaration public Query ExtractXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue, string path, params KeyValuePair<string, string>[] namespaces) Parameters Type Name Description String table Table name String column Xml column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String path XPath expression KeyValuePair < String , String >[] namespaces XPath namespaces Returns Type Description Query XPath result Implements ISqlBuilder.ExtractXmlQuery(String, String, String[], IComparable[], String, KeyValuePair<String, String>[]) Exceptions Type Condition XDataQueryStructureException Field not found"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetXmlNamespaces.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetXmlNamespaces.html",
    "title": "Method GetXmlNamespaces | XData website",
    "keywords": "Method GetXmlNamespaces | Improve this Doc View Source GetXmlNamespaces(KeyValuePair<String, String>[]) Returns Xml namespaces string Declaration protected abstract string GetXmlNamespaces(KeyValuePair<string, string>[] namespaces) Parameters Type Name Description KeyValuePair < String , String >[] namespaces Xml namespaces Returns Type Description String Xml namespaces string"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetSaveBlobQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetSaveBlobQuery.html",
    "title": "Method GetSaveBlobQuery | XData website",
    "keywords": "Method GetSaveBlobQuery | Improve this Doc View Source GetSaveBlobQuery(String, String, IEnumerable<String>, IComparable[], ref Byte[], String) Returns query to save blob data Declaration public Query GetSaveBlobQuery(string table, string column, IEnumerable<string> tablePrimaryKey, IComparable[] primaryKeyValue, ref byte[] body, string nativeSqlType = null) Parameters Type Name Description String table Table name String column Blob column name IEnumerable < String > tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values Byte [] body Blob body String nativeSqlType Native SQL type name Returns Type Description Query Query Implements ISqlBuilder.GetSaveBlobQuery(String, String, IEnumerable<String>, IComparable[], ref Byte[], String)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetAcquireBlobQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetAcquireBlobQuery.html",
    "title": "Method GetAcquireBlobQuery | XData website",
    "keywords": "Method GetAcquireBlobQuery | Improve this Doc View Source GetAcquireBlobQuery(String, String, IEnumerable<String>, IComparable[], String) Returns query to acquire blob data Declaration public Query GetAcquireBlobQuery(string table, string column, IEnumerable<string> tablePrimaryKey, IComparable[] primaryKeyValue, string nativeSqlType = null) Parameters Type Name Description String table Table name String column Blob column name IEnumerable < String > tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String nativeSqlType Native SQL type name Returns Type Description Query Query Implements ISqlBuilder.GetAcquireBlobQuery(String, String, IEnumerable<String>, IComparable[], String)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetBlobSizeQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetBlobSizeQuery.html",
    "title": "Method GetBlobSizeQuery | XData website",
    "keywords": "Method GetBlobSizeQuery | Improve this Doc View Source GetBlobSizeQuery(String, String, String[], IComparable[]) Returns query to get Large Object size Declaration public Query GetBlobSizeQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue) Parameters Type Name Description String table Table name contained LOB String column LOB column name String [] tablePrimaryKey Primary key column names IComparable [] primaryKeyValue Primary key values Returns Type Description Query Query to get Large Object size Implements ISqlBuilder.GetBlobSizeQuery(String, String, String[], IComparable[])"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.Config.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.Config.html",
    "title": "Property Config | XData website",
    "keywords": "Property Config | Improve this Doc View Source Config SQL dialect configuration Declaration protected IConfiguration Config { get; } Property Value Type Description IConfiguration"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.Init.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.Init.html",
    "title": "Method Init | XData website",
    "keywords": "Method Init | Improve this Doc View Source Init(String, IConfiguration, String) Dialect adapter initialization Declaration public void Init(string context, IConfiguration config, string sequence) Parameters Type Name Description String context Context name IConfiguration config Specific dialect adapter configuration Xml String sequence Sequence generator assembly qualified class name Implements ISqlBuilder.Init(String, IConfiguration, String)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.AddSkipLimitAndOrder.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.AddSkipLimitAndOrder.html",
    "title": "Method AddSkipLimitAndOrder | XData website",
    "keywords": "Method AddSkipLimitAndOrder | Improve this Doc View Source AddSkipLimitAndOrder(IDataStructure, SortedList<String, Object>, ref StringBuilder, Int32, String, ref Query, ref List<Tuple<String, Type, String>>, ICollection<String>, ref SortedList<String, Tuple<String, String>>, Boolean) Add skip, limit, and order statements to query Declaration protected abstract void AddSkipLimitAndOrder(IDataStructure structure, SortedList<string, object> filterValues, ref StringBuilder strCommand, int fromPosition, string selectAll, ref Query query, ref List<Tuple<string, Type, string>> withSources, ICollection<string> skipped, ref SortedList<string, Tuple<string, string>> fields, bool doNotSkip = false) Parameters Type Name Description IDataStructure structure Structure metadata SortedList < String , Object > filterValues Filter values StringBuilder strCommand Query string builder Int32 fromPosition From statement start position String selectAll All fields list string Query query Query List < Tuple < String , Type , String >> withSources Common-Table-Expression (WITH) data sources ICollection < String > skipped Skipped sources collection SortedList < String , Tuple < String , String >> fields Parsed fields Boolean doNotSkip Don't skip empty sources"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetOrderByString.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetOrderByString.html",
    "title": "Method GetOrderByString | XData website",
    "keywords": "Method GetOrderByString | Improve this Doc View Source GetOrderByString(IDataStructure, SortedList<String, Object>, ref Query, ref List<Tuple<String, Type, String>>, ICollection<String>, ref SortedList<String, Tuple<String, String>>, Boolean) Returns order by string Declaration protected string GetOrderByString(IDataStructure structure, SortedList<string, object> filterValues, ref Query query, ref List<Tuple<string, Type, string>> withSources, ICollection<string> skipped, ref SortedList<string, Tuple<string, string>> fields, bool doNotSkip) Parameters Type Name Description IDataStructure structure Structure metadata SortedList < String , Object > filterValues Filter values Query query Query List < Tuple < String , Type , String >> withSources Common-Table-Expression (WITH) data sources ICollection < String > skipped Skipped sources collection SortedList < String , Tuple < String , String >> fields Parsed fields Boolean doNotSkip Don't skip empty sources Returns Type Description String Order by string Exceptions Type Condition XDataQueryStructureException Field not found"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.AddOrderBy.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.AddOrderBy.html",
    "title": "Method AddOrderBy | XData website",
    "keywords": "Method AddOrderBy | Improve this Doc View Source AddOrderBy(IDataStructure, SortedList<String, Object>, ref StringBuilder, ref Query, ref List<Tuple<String, Type, String>>, ICollection<String>, ref SortedList<String, Tuple<String, String>>, Boolean) Add order by statement to query Declaration protected virtual void AddOrderBy(IDataStructure structure, SortedList<string, object> filterValues, ref StringBuilder strCommand, ref Query query, ref List<Tuple<string, Type, string>> withSources, ICollection<string> skipped, ref SortedList<string, Tuple<string, string>> fields, bool doNotSkip) Parameters Type Name Description IDataStructure structure Structure metadata SortedList < String , Object > filterValues Filter values StringBuilder strCommand Query string builder Query query Query List < Tuple < String , Type , String >> withSources Common-Table-Expression (WITH) data sources ICollection < String > skipped Skipped sources collection SortedList < String , Tuple < String , String >> fields Parsed fields Boolean doNotSkip Don't skip empty sources"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetCall.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetCall.html",
    "title": "Method GetCall | XData website",
    "keywords": "Method GetCall | Improve this Doc View Source GetCall(IDataStructure, String) Declaration public StoredProcedure GetCall(IDataStructure structure, string userName) Parameters Type Name Description IDataStructure structure String userName Returns Type Description StoredProcedure Implements ISqlBuilder.GetCall(IDataStructure, String) Exceptions Type Condition XDataQueryStructureException XDataAdapterException stored procedure"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.RegisterResultSet.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.RegisterResultSet.html",
    "title": "Method RegisterResultSet | XData website",
    "keywords": "Method RegisterResultSet | Improve this Doc View Source RegisterResultSet(IResultSetDescription) Declaration protected virtual QueryParam RegisterResultSet(IResultSetDescription resultSet) Parameters Type Name Description IResultSetDescription resultSet Returns Type Description QueryParam"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetCountQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetCountQuery.html",
    "title": "Method GetCountQuery | XData website",
    "keywords": "Method GetCountQuery | Improve this Doc View Source GetCountQuery(IDataStructure) Returns query to select count of data objects in repository Declaration public Query GetCountQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query Implements ISqlBuilder.GetCountQuery(IDataStructure)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetSelectQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetSelectQuery.html",
    "title": "Method GetSelectQuery | XData website",
    "keywords": "Method GetSelectQuery | Improve this Doc View Source GetSelectQuery(IDataStructure, Boolean, Boolean) Returns query to select data objects Declaration public Query GetSelectQuery(IDataStructure structure, bool markProperties = false, bool doNotSkip = false) Parameters Type Name Description IDataStructure structure Structure metadata Boolean markProperties Mark properties with comments Boolean doNotSkip Don't skip sources Returns Type Description Query Query Implements ISqlBuilder.GetSelectQuery(IDataStructure, Boolean, Boolean)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetRefreshQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetRefreshQuery.html",
    "title": "Method GetRefreshQuery | XData website",
    "keywords": "Method GetRefreshQuery | Improve this Doc View Source GetRefreshQuery(IDataStructure) Returns query to refresh single data object Declaration public Query GetRefreshQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query Implements ISqlBuilder.GetRefreshQuery(IDataStructure)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetAnyQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetAnyQuery.html",
    "title": "Method GetAnyQuery | XData website",
    "keywords": "Method GetAnyQuery | Improve this Doc View Source GetAnyQuery(IDataStructure) Returns query to check existence of repository objects Hint: Used in XData LINQ expressions Declaration public Query GetAnyQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query Implements ISqlBuilder.GetAnyQuery(IDataStructure)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetAllQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetAllQuery.html",
    "title": "Method GetAllQuery | XData website",
    "keywords": "Method GetAllQuery | Improve this Doc View Source GetAllQuery(IDataStructure) Returns query to check compliance of all repository objects Hint: Used in XData LINQ expressions Declaration public Query GetAllQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query Implements ISqlBuilder.GetAllQuery(IDataStructure)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.GetLockQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.GetLockQuery.html",
    "title": "Method GetLockQuery | XData website",
    "keywords": "Method GetLockQuery | Improve this Doc View Source GetLockQuery(IDataStructure) Returns query to lock single data object Declaration public Query GetLockQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query Implements ISqlBuilder.GetLockQuery(IDataStructure)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.PrepareTempTables.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.PrepareTempTables.html",
    "title": "Method PrepareTempTables | XData website",
    "keywords": "Method PrepareTempTables | Improve this Doc View Source PrepareTempTables(IDataStructure, ref StringBuilder, Query, ICollection<String>, Boolean, Boolean) Declaration protected virtual bool PrepareTempTables(IDataStructure structure, ref StringBuilder strCommand, Query query, ICollection<string> skippedSources, bool riseErrors, bool doNotSkip) Parameters Type Name Description IDataStructure structure StringBuilder strCommand Query query ICollection < String > skippedSources Boolean riseErrors Boolean doNotSkip Returns Type Description Boolean"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.BuildSqlBlock.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.BuildSqlBlock.html",
    "title": "Method BuildSqlBlock | XData website",
    "keywords": "Method BuildSqlBlock | Improve this Doc View Source BuildSqlBlock(Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Declaration public Query BuildSqlBlock(Expression<SqlBlockDefinition> sqlBlock, Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters) Parameters Type Name Description Expression < SqlBlockDefinition > sqlBlock Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Returns Type Description Query | Improve this Doc View Source BuildSqlBlock<T>(Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[], out Func<DataRow, T>) Declaration public Query BuildSqlBlock<T>(Expression<SqlBlockDefinition<T>> sqlBlock, Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters, out Func<DataRow, T> mapper) where T : class, new() Parameters Type Name Description Expression < SqlBlockDefinition <T>> sqlBlock Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Func < DataRow , T> mapper Returns Type Description Query Type Parameters Name Description T"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.SqlBlockVariablePrefix.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.SqlBlockVariablePrefix.html",
    "title": "Property SqlBlockVariablePrefix | XData website",
    "keywords": "Property SqlBlockVariablePrefix | Improve this Doc View Source SqlBlockVariablePrefix Declaration protected virtual string SqlBlockVariablePrefix { get; } Property Value Type Description String"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.Beautify.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.Beautify.html",
    "title": "Method Beautify | XData website",
    "keywords": "Method Beautify | Improve this Doc View Source Beautify(String) Returns formatted SQL string Declaration public static string Beautify(string sql) Parameters Type Name Description String sql SQL string to format Returns Type Description String Formatted SQL string"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.FormatQuery.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.FormatQuery.html",
    "title": "Method FormatQuery | XData website",
    "keywords": "Method FormatQuery | Improve this Doc View Source FormatQuery(Query, Object[]) Returns formatted query string with parameter values Declaration public static string FormatQuery(Query query, params object[] paramValues) Parameters Type Name Description Query query Query Object [] paramValues Parameter values Returns Type Description String Formatted SQL string"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.BeautifyRtf.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.BeautifyRtf.html",
    "title": "Method BeautifyRtf | XData website",
    "keywords": "Method BeautifyRtf | Improve this Doc View Source BeautifyRtf(String) Returns RTF formatted SQL string Declaration public static string BeautifyRtf(string sql) Parameters Type Name Description String sql SQL string to format Returns Type Description String RTF formatted SQL string"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.FormatStoredProcedure.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.FormatStoredProcedure.html",
    "title": "Method FormatStoredProcedure | XData website",
    "keywords": "Method FormatStoredProcedure | Improve this Doc View Source FormatStoredProcedure(StoredProcedure, Object[]) Returns formatted query string with parameter values Declaration public static string FormatStoredProcedure(StoredProcedure storedProcedure, params object[] paramValues) Parameters Type Name Description StoredProcedure storedProcedure Stored procedure Object [] paramValues Parameter values Returns Type Description String Formatted SQL string"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.html",
    "title": "Class BaseSqlBuilder | XData website",
    "keywords": "Class BaseSqlBuilder SQL builder base class Inheritance Object BaseSqlBuilder Implements ISqlBuilder IEnumerable < Query > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Dialect Assembly : XData.docfx.dll Syntax [DatabaseAdapter(\"NONE\")] public abstract class BaseSqlBuilder : ISqlBuilder, ISqlBuilderInternal, IEnumerable<Query>, IEnumerable Fields Name Description SqlStrings SQL dialect specific format strings WARNING! Mast be filled in constructor! Properties Name Description Config SQL dialect configuration Context Context name DialectOptions Dialect options WARNING! Mast to be filled in constructor! Item[Enum] Predefined queries enumerator ParameterPrefix Parameter prefix symbol Queries List of predefined queries WARNING! Mast to be filled in constructor! SqlBlockVariablePrefix SqlTypes List of supported SQL types WARNING! Mast to be filled in constructor! TypeNames List of supported column type names WARNING! Mast to be filled in constructor! TypeSynonyms List of supported type synonyms WARNING! Mast to be filled in constructor! Methods Name Description AddOrderBy(IDataStructure, SortedList<String, Object>, ref StringBuilder, ref Query, ref List<Tuple<String, Type, String>>, ICollection<String>, ref SortedList<String, Tuple<String, String>>, Boolean) Add order by statement to query AddReturning2Command(ref StringBuilder, SortedList<String, Tuple<String, Boolean>>, Boolean, Boolean) Add returning auto increment identity column values statement in query AddSkipLimitAndOrder(IDataStructure, SortedList<String, Object>, ref StringBuilder, Int32, String, ref Query, ref List<Tuple<String, Type, String>>, ICollection<String>, ref SortedList<String, Tuple<String, String>>, Boolean) Add skip, limit, and order statements to query Beautify(String) Returns formatted SQL string BeautifyRtf(String) Returns RTF formatted SQL string BuildSqlBlock(Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) BuildSqlBlock<T>(Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[], out Func<DataRow, T>) CompleteInsert(String, SortedList<String, Tuple<String, Boolean>>, Type) Returns string contains SQL expression to complete insert statement ExtractXmlQuery(String, String, String[], IComparable[], String, KeyValuePair<String, String>[]) Returns query to extract xml data by XPath expression FormatConstValue(Object, out DbType) FormatFieldName(String, String) Format field name FormatQuery(Query, Object[]) Returns formatted query string with parameter values FormatSql(SqlStringType, Object[]) Format SQL dialect specific syntax strings Hint: Override to realize ugly non standard syntax (if needed) FormatStoredProcedure(StoredProcedure, Object[]) Returns formatted query string with parameter values GetAcquireBlobQuery(String, String, IEnumerable<String>, IComparable[], String) Returns query to acquire blob data GetAcquireXmlQuery(String, String, String[], IComparable[]) Returns query to acquire xml data GetAllQuery(IDataStructure) Returns query to check compliance of all repository objects Hint: Used in XData LINQ expressions GetAnyQuery(IDataStructure) Returns query to check existence of repository objects Hint: Used in XData LINQ expressions GetBlobSizeQuery(String, String, String[], IComparable[]) Returns query to get Large Object size GetCall(IDataStructure, String) GetClearQuery(IDataStructure) Returns query to clear all repository objects GetConnectionInfo(String, String, String, Nullable<Boolean>, String, String) GetConnectionString(String, String, Boolean, String, String, String) Compose specific connection string from parts GetCountQuery(IDataStructure) Returns query to select count of data objects in repository GetDeleteQuery(IDataStructure, IDataObject, String, Boolean) Returns query to delete data object GetEnumerator() Predefined queries enumerator GetExpressionText(IDataStructure, ExpressionContext, Type, Expression, out DbType) Compose SQL expression from XData LINQ expression GetExprSize(IField) GetInsertQuery(IDataStructure, IDataObject, String, Boolean) Returns query to insert data object GetLockQuery(IDataStructure) Returns query to lock single data object GetOrderByString(IDataStructure, SortedList<String, Object>, ref Query, ref List<Tuple<String, Type, String>>, ICollection<String>, ref SortedList<String, Tuple<String, String>>, Boolean) Returns order by string GetParameterName(String) Formats field name as parameter name GetRefreshQuery(IDataStructure) Returns query to refresh single data object GetSafeConvertExpression(Type, Expression, Expression) Safe convert expression GetSaveBlobQuery(String, String, IEnumerable<String>, IComparable[], ref Byte[], String) Returns query to save blob data GetSaveXmlQuery(String, String, String[], IComparable[], ref String) Returns query to save xml data GetSelectQuery(IDataStructure, Boolean, Boolean) Returns query to select data objects GetSequenceName(String, String, String) Returns sequence name GetSqlTypeName(DbType) Returns SQL type name for System.DbType GetUpdateQuery(IDataStructure, IDataObject, String, Boolean) Returns query to update data object GetXmlNamespaces(KeyValuePair<String, String>[]) Returns Xml namespaces string Init(String, IConfiguration, String) Dialect adapter initialization ParseConnectionString(String, ref String, ref String, ref Boolean, ref String, ref String, out String) Parse specific connection string to parts PrepareTempTables(IDataStructure, ref StringBuilder, Query, ICollection<String>, Boolean, Boolean) RegisterResultSet(IResultSetDescription) SequenceGeneration(out Boolean) Sequence generation supported SetQueryParameters(ref Query, IEnumerable<IParameterDescription>, SortedList<String, Object>, String, DialectOptions) SetQueryParameterValues(ref Query, SortedList<String, Object>) Set query parameter values ToDataSet<TSource>(String, IEnumerable<TSource>) Compose union structure over source object sequence Explicit Interface Implementations Name Description IEnumerable.GetEnumerator() Predefined queries enumerator Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.DataQueries.html": {
    "href": "api/XData.Database.DataQueries.html",
    "title": "Enum DataQueries | XData website",
    "keywords": "Enum DataQueries Static adapter queries enumeration Namespace : XData.Database Assembly : XData.docfx.dll Syntax public enum DataQueries Fields Name Description SelectTableColumns Table columns predefined query SelectTableList Tables predefined query See Also SelectTableColumns SelectTableList Extension Methods SerializationExtensions.ToXml<DataQueries>() CollectionsExtensions.SetValue<DataQueries, T>(T) CollectionsExtensions.AsEnum<DataQueries>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataQueries, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataQueries, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.html": {
    "href": "api/XData.Database.Adapter.html",
    "title": "Namespace XData.Database.Adapter | XData website",
    "keywords": "Namespace XData.Database.Adapter Classes BaseDatabaseAdapter<TConnection, TParameter> Database adapter base class CallResult Stored procedure call result DatabaseAdapterAttribute Database adapter attribute Query SQL query QueryParam SQL query parameter QueryResult SQL query result QueryResultBase SQL query result StoredProcedure SQL stored procedure UdtSqlType User defined type (UDT) description Interfaces IDatabaseAdapter Database adapter basic interface IDatabaseAdapterMetadata Database adapter description interface"
  },
  "api/XData.Database.Adapter.UdtSqlType.SqlTypeName.html": {
    "href": "api/XData.Database.Adapter.UdtSqlType.SqlTypeName.html",
    "title": "Property SqlTypeName | XData website",
    "keywords": "Property SqlTypeName | Improve this Doc View Source SqlTypeName User defined type (UDT) name for parameter Declaration public string SqlTypeName { get; set; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.UdtSqlType.ElementSqlTypeName.html": {
    "href": "api/XData.Database.Adapter.UdtSqlType.ElementSqlTypeName.html",
    "title": "Property ElementSqlTypeName | XData website",
    "keywords": "Property ElementSqlTypeName | Improve this Doc View Source ElementSqlTypeName User defined type (UDT) element type name for parameter Declaration public string ElementSqlTypeName { get; set; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.UdtSqlType.IsArray.html": {
    "href": "api/XData.Database.Adapter.UdtSqlType.IsArray.html",
    "title": "Property IsArray | XData website",
    "keywords": "Property IsArray | Improve this Doc View Source IsArray User defined type (UDT) collection is VARARRAY for parameter Declaration public bool IsArray { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Database.Adapter.UdtSqlType.MappedType.html": {
    "href": "api/XData.Database.Adapter.UdtSqlType.MappedType.html",
    "title": "Property MappedType | XData website",
    "keywords": "Property MappedType | Improve this Doc View Source MappedType User defined type (UDT) mapped type Declaration public Type MappedType { get; set; } Property Value Type Description Type"
  },
  "api/XData.Database.Adapter.UdtSqlType.html": {
    "href": "api/XData.Database.Adapter.UdtSqlType.html",
    "title": "Class UdtSqlType | XData website",
    "keywords": "Class UdtSqlType User defined type (UDT) description Inheritance Object UdtSqlType Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax public sealed class UdtSqlType Properties Name Description ElementSqlTypeName User defined type (UDT) element type name for parameter IsArray User defined type (UDT) collection is VARARRAY for parameter MappedType User defined type (UDT) mapped type SqlTypeName User defined type (UDT) name for parameter Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.StoredProcedure.Name.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name SQL stored procedure name Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.StoredProcedure.Hint.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.Hint.html",
    "title": "Property Hint | XData website",
    "keywords": "Property Hint | Improve this Doc View Source Hint Procedure hint Declaration public HintInfo Hint { get; set; } Property Value Type Description HintInfo"
  },
  "api/XData.Database.Adapter.StoredProcedure.ResultSets.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.ResultSets.html",
    "title": "Property ResultSets | XData website",
    "keywords": "Property ResultSets | Improve this Doc View Source ResultSets Stored procedure result sets names Declaration public IList<string> ResultSets { get; } Property Value Type Description IList < String >"
  },
  "api/XData.Database.Adapter.StoredProcedure.Item.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.Item.html",
    "title": "Property Item | XData website",
    "keywords": "Property Item | Improve this Doc View Source Item[Int32] Query parameters by index Declaration public QueryParam this[int i] { get; } Parameters Type Name Description Int32 i Parameter index Property Value Type Description QueryParam Query parameter | Improve this Doc View Source Item[String] Procedure parameters by name Declaration public QueryParam this[string name] { get; set; } Parameters Type Name Description String name Parameter name Property Value Type Description QueryParam Procedure parameter"
  },
  "api/XData.Database.Adapter.StoredProcedure.-ctor.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.-ctor.html",
    "title": "Constructor StoredProcedure | XData website",
    "keywords": "Constructor StoredProcedure | Improve this Doc View Source StoredProcedure(String, QueryParam[]) Procedure constructor Declaration public StoredProcedure(string name, params QueryParam[] par) Parameters Type Name Description String name Procedure name QueryParam [] par Parameters"
  },
  "api/XData.Database.Adapter.StoredProcedure.op_Implicit.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(String to StoredProcedure) Stored procedure name Declaration public static implicit operator StoredProcedure(string s) Parameters Type Name Description String s Procedure name Returns Type Description StoredProcedure Stored procedure"
  },
  "api/XData.Database.Adapter.StoredProcedure.GetEnumerator.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.GetEnumerator.html",
    "title": "Method GetEnumerator | XData website",
    "keywords": "Method GetEnumerator | Improve this Doc View Source GetEnumerator() Query parameters enumeration Declaration public IEnumerator<QueryParam> GetEnumerator() Returns Type Description IEnumerator < QueryParam > Query parameters enumeration Implements IEnumerable<T>.GetEnumerator()"
  },
  "api/XData.Database.Adapter.StoredProcedure.System-Collections-IEnumerable-GetEnumerator.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.System-Collections-IEnumerable-GetEnumerator.html",
    "title": "Method IEnumerable.GetEnumerator | XData website",
    "keywords": "Method IEnumerable.GetEnumerator | Improve this Doc View Source IEnumerable.GetEnumerator() Query parameters enumeration Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Query parameters enumeration Implements IEnumerable.GetEnumerator()"
  },
  "api/XData.Database.Adapter.StoredProcedure.ToString.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.ToString.html",
    "title": "Method ToString | XData website",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString()"
  },
  "api/XData.Database.Adapter.StoredProcedure.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.html",
    "title": "Class StoredProcedure | XData website",
    "keywords": "Class StoredProcedure SQL stored procedure Inheritance Object StoredProcedure Implements IEnumerable < QueryParam > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax public sealed class StoredProcedure : IEnumerable<QueryParam>, IEnumerable Constructors Name Description StoredProcedure(String, QueryParam[]) Procedure constructor Properties Name Description Hint Procedure hint Item[Int32] Query parameters by index Item[String] Procedure parameters by name Name SQL stored procedure name ResultSets Stored procedure result sets names Methods Name Description GetEnumerator() Query parameters enumeration ToString() Returns a String that represents the current Object . Operators Name Description Implicit(String to StoredProcedure) Stored procedure name Explicit Interface Implementations Name Description IEnumerable.GetEnumerator() Query parameters enumeration Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.Adapter.QueryResultBase.AffectedRows.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.AffectedRows.html",
    "title": "Property AffectedRows | XData website",
    "keywords": "Property AffectedRows | Improve this Doc View Source AffectedRows Count of rows affected by query Declaration public int AffectedRows { get; } Property Value Type Description Int32"
  },
  "api/XData.Database.Adapter.QueryResultBase.Item.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.Item.html",
    "title": "Property Item | XData website",
    "keywords": "Property Item | Improve this Doc View Source Item[Int32] Query parameters by index Declaration public QueryParam this[int i] { get; } Parameters Type Name Description Int32 i Parameter index Property Value Type Description QueryParam Query parameter | Improve this Doc View Source Item[String] Query parameters by name Declaration public QueryParam this[string name] { get; } Parameters Type Name Description String name Parameter name Property Value Type Description QueryParam Query parameter"
  },
  "api/XData.Database.Adapter.QueryResultBase.ParamsCount.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.ParamsCount.html",
    "title": "Property ParamsCount | XData website",
    "keywords": "Property ParamsCount | Improve this Doc View Source ParamsCount Query parameters count Declaration public int ParamsCount { get; } Property Value Type Description Int32"
  },
  "api/XData.Database.Adapter.QueryResultBase.-ctor.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.-ctor.html",
    "title": "Constructor QueryResultBase | XData website",
    "keywords": "Constructor QueryResultBase | Improve this Doc View Source QueryResultBase() Query result constructor Declaration protected QueryResultBase() | Improve this Doc View Source QueryResultBase(Int32, IEnumerable<QueryParam>) Query result constructor Declaration protected QueryResultBase(int affectedRows, IEnumerable<QueryParam> queryParams) Parameters Type Name Description Int32 affectedRows Affected rows count IEnumerable < QueryParam > queryParams Output parameters"
  },
  "api/XData.Database.Adapter.QueryResultBase.Init.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.Init.html",
    "title": "Method Init | XData website",
    "keywords": "Method Init | Improve this Doc View Source Init(Int32, IDataParameterCollection) Query result initialization Declaration protected void Init(int affectedRows, IDataParameterCollection queryParams) Parameters Type Name Description Int32 affectedRows Affected rows count IDataParameterCollection queryParams Output parameters | Improve this Doc View Source Init(Int32, IEnumerable<IDataParameter>) Query result initialization Declaration protected void Init(int affectedRows, IEnumerable<IDataParameter> queryParams) Parameters Type Name Description Int32 affectedRows Affected rows count IEnumerable < IDataParameter > queryParams Output parameters | Improve this Doc View Source Init(Int32, IEnumerable<QueryParam>) Query result initialization Declaration protected void Init(int affectedRows, IEnumerable<QueryParam> queryParams) Parameters Type Name Description Int32 affectedRows Affected rows count IEnumerable < QueryParam > queryParams Output parameters"
  },
  "api/XData.Database.Adapter.QueryResultBase.ParamInit.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.ParamInit.html",
    "title": "Method ParamInit | XData website",
    "keywords": "Method ParamInit | Improve this Doc View Source ParamInit(IDataParameter) Output parameter initialization Declaration protected abstract QueryParam ParamInit(IDataParameter parameter) Parameters Type Name Description IDataParameter parameter Output parameter Returns Type Description QueryParam"
  },
  "api/XData.Database.Adapter.QueryResultBase.GetEnumerator.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.GetEnumerator.html",
    "title": "Method GetEnumerator | XData website",
    "keywords": "Method GetEnumerator | Improve this Doc View Source GetEnumerator() Query parameters enumeration Declaration public IEnumerator<QueryParam> GetEnumerator() Returns Type Description IEnumerator < QueryParam > Query parameters enumeration Implements IEnumerable<T>.GetEnumerator()"
  },
  "api/XData.Database.Adapter.QueryResultBase.System-Collections-IEnumerable-GetEnumerator.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.System-Collections-IEnumerable-GetEnumerator.html",
    "title": "Method IEnumerable.GetEnumerator | XData website",
    "keywords": "Method IEnumerable.GetEnumerator | Improve this Doc View Source IEnumerable.GetEnumerator() Query parameters enumeration Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Query parameters enumeration Implements IEnumerable.GetEnumerator()"
  },
  "api/XData.Database.Adapter.QueryResultBase.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.html",
    "title": "Class QueryResultBase | XData website",
    "keywords": "Class QueryResultBase SQL query result Inheritance Object QueryResultBase CallResult QueryResult Implements IEnumerable < QueryParam > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax public abstract class QueryResultBase : IEnumerable<QueryParam>, IEnumerable Constructors Name Description QueryResultBase() Query result constructor QueryResultBase(Int32, IEnumerable<QueryParam>) Query result constructor Properties Name Description AffectedRows Count of rows affected by query Item[Int32] Query parameters by index Item[String] Query parameters by name ParamsCount Query parameters count Methods Name Description GetEnumerator() Query parameters enumeration Init(Int32, IDataParameterCollection) Query result initialization Init(Int32, IEnumerable<IDataParameter>) Query result initialization Init(Int32, IEnumerable<QueryParam>) Query result initialization ParamInit(IDataParameter) Output parameter initialization Explicit Interface Implementations Name Description IEnumerable.GetEnumerator() Query parameters enumeration Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.Adapter.QueryResult.-ctor.html": {
    "href": "api/XData.Database.Adapter.QueryResult.-ctor.html",
    "title": "Constructor QueryResult | XData website",
    "keywords": "Constructor QueryResult | Improve this Doc View Source QueryResult(Query, Int32, IDataParameterCollection) SQL query result constructor Declaration public QueryResult(Query query, int affectedRows, IDataParameterCollection queryParams) Parameters Type Name Description Query query Query instance Int32 affectedRows Affected rows IDataParameterCollection queryParams Query parameters | Improve this Doc View Source QueryResult(Query, Int32, IEnumerable<QueryParam>) SQL query result constructor Declaration public QueryResult(Query query, int affectedRows, IEnumerable<QueryParam> queryParams) Parameters Type Name Description Query query Query instance Int32 affectedRows Affected rows IEnumerable < QueryParam > queryParams Query parameter sequence"
  },
  "api/XData.Database.Adapter.QueryResult.ParamInit.html": {
    "href": "api/XData.Database.Adapter.QueryResult.ParamInit.html",
    "title": "Method ParamInit | XData website",
    "keywords": "Method ParamInit | Improve this Doc View Source ParamInit(IDataParameter) Update out parameter value Declaration protected override QueryParam ParamInit(IDataParameter parameter) Parameters Type Name Description IDataParameter parameter Parameter Returns Type Description QueryParam Query parameter Overrides QueryResultBase.ParamInit(IDataParameter) Exceptions Type Condition XDataRuntimeException"
  },
  "api/XData.Database.Adapter.QueryResult.html": {
    "href": "api/XData.Database.Adapter.QueryResult.html",
    "title": "Class QueryResult | XData website",
    "keywords": "Class QueryResult SQL query result Inheritance Object QueryResultBase QueryResult Implements IEnumerable < QueryParam > IEnumerable Inherited Members QueryResultBase.AffectedRows QueryResultBase.Item[Int32] QueryResultBase.Item[String] QueryResultBase.ParamsCount QueryResultBase.Init(Int32, IDataParameterCollection) QueryResultBase.Init(Int32, IEnumerable<IDataParameter>) QueryResultBase.Init(Int32, IEnumerable<QueryParam>) QueryResultBase.GetEnumerator() QueryResultBase.IEnumerable.GetEnumerator() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax public sealed class QueryResult : QueryResultBase, IEnumerable<QueryParam>, IEnumerable Constructors Name Description QueryResult(Query, Int32, IDataParameterCollection) SQL query result constructor QueryResult(Query, Int32, IEnumerable<QueryParam>) SQL query result constructor Methods Name Description ParamInit(IDataParameter) Update out parameter value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.Adapter.QueryParam.Name.html": {
    "href": "api/XData.Database.Adapter.QueryParam.Name.html",
    "title": "Property Name | XData website",
    "keywords": "Property Name | Improve this Doc View Source Name Parameter name Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.QueryParam.Type.html": {
    "href": "api/XData.Database.Adapter.QueryParam.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Parameter data type Declaration public DbType Type { get; } Property Value Type Description DbType"
  },
  "api/XData.Database.Adapter.QueryParam.Direction.html": {
    "href": "api/XData.Database.Adapter.QueryParam.Direction.html",
    "title": "Property Direction | XData website",
    "keywords": "Property Direction | Improve this Doc View Source Direction Parameter direction Declaration public ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection"
  },
  "api/XData.Database.Adapter.QueryParam.Value.html": {
    "href": "api/XData.Database.Adapter.QueryParam.Value.html",
    "title": "Property Value | XData website",
    "keywords": "Property Value | Improve this Doc View Source Value Parameter value Declaration public object Value { get; } Property Value Type Description Object"
  },
  "api/XData.Database.Adapter.QueryParam.Length.html": {
    "href": "api/XData.Database.Adapter.QueryParam.Length.html",
    "title": "Property Length | XData website",
    "keywords": "Property Length | Improve this Doc View Source Length Parameter value max length Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/XData.Database.Adapter.QueryParam.UdtTypeName.html": {
    "href": "api/XData.Database.Adapter.QueryParam.UdtTypeName.html",
    "title": "Property UdtTypeName | XData website",
    "keywords": "Property UdtTypeName | Improve this Doc View Source UdtTypeName Collection user defined type (UDT) SQL type name WARNING! Specify full qualified type name! WARNING! Using UDT can be not supported or limited by adapter! Declaration public string UdtTypeName { get; set; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.QueryParam.UdtElementTypeName.html": {
    "href": "api/XData.Database.Adapter.QueryParam.UdtElementTypeName.html",
    "title": "Property UdtElementTypeName | XData website",
    "keywords": "Property UdtElementTypeName | Improve this Doc View Source UdtElementTypeName Single object (or collection element) user defined type (UDT) SQL type name WARNING! Specify full qualified type name! WARNING! Using UDT can be not supported or limited by adapter! Declaration public string UdtElementTypeName { get; set; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.QueryParam.UdtMappedType.html": {
    "href": "api/XData.Database.Adapter.QueryParam.UdtMappedType.html",
    "title": "Property UdtMappedType | XData website",
    "keywords": "Property UdtMappedType | Improve this Doc View Source UdtMappedType Class type mapped with user defined type (UDT) SQL type name This type properties are mapped to SQL type by name (case insensitive) WARNING! Beware to use property data types not supported by adapter or user defined type (UDT)! WARNING! Using UDT can be not supported or limited by adapter! Declaration public Type UdtMappedType { get; set; } Property Value Type Description Type"
  },
  "api/XData.Database.Adapter.QueryParam.IsArray.html": {
    "href": "api/XData.Database.Adapter.QueryParam.IsArray.html",
    "title": "Property IsArray | XData website",
    "keywords": "Property IsArray | Improve this Doc View Source IsArray Collection type array flag Set to true to use with VARARRAY collections WARNING! Using UDT can be not supported or limited by adapter! Declaration public bool IsArray { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Database.Adapter.QueryParam.IsResultSet.html": {
    "href": "api/XData.Database.Adapter.QueryParam.IsResultSet.html",
    "title": "Property IsResultSet | XData website",
    "keywords": "Property IsResultSet | Improve this Doc View Source IsResultSet Parameter is result set Declaration public bool IsResultSet { get; set; } Property Value Type Description Boolean"
  },
  "api/XData.Database.Adapter.QueryParam.NativeSqlType.html": {
    "href": "api/XData.Database.Adapter.QueryParam.NativeSqlType.html",
    "title": "Property NativeSqlType | XData website",
    "keywords": "Property NativeSqlType | Improve this Doc View Source NativeSqlType Parameter native SQL type Declaration public string NativeSqlType { get; set; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.QueryParam.-ctor.html": {
    "href": "api/XData.Database.Adapter.QueryParam.-ctor.html",
    "title": "Constructor QueryParam | XData website",
    "keywords": "Constructor QueryParam | Improve this Doc View Source QueryParam(QueryParam, Object) Query parameter copy constructor Declaration public QueryParam(QueryParam param, object value = null) Parameters Type Name Description QueryParam param Parameter name Object value Parameter value | Improve this Doc View Source QueryParam(String, Object, DbType, Int32) Query parameter constructor Declaration public QueryParam(string name, object value = null, DbType type = null, int length = 0) Parameters Type Name Description String name Parameter name Object value Parameter value DbType type Parameter data type Int32 length Parameter value max length"
  },
  "api/XData.Database.Adapter.QueryParam.ToString.html": {
    "href": "api/XData.Database.Adapter.QueryParam.ToString.html",
    "title": "Method ToString | XData website",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString()"
  },
  "api/XData.Database.Adapter.QueryParam.html": {
    "href": "api/XData.Database.Adapter.QueryParam.html",
    "title": "Class QueryParam | XData website",
    "keywords": "Class QueryParam SQL query parameter Inheritance Object QueryParam Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax public class QueryParam Constructors Name Description QueryParam(String, Object, DbType, Int32) Query parameter constructor QueryParam(QueryParam, Object) Query parameter copy constructor Properties Name Description Direction Parameter direction IsArray Collection type array flag Set to true to use with VARARRAY collections WARNING! Using UDT can be not supported or limited by adapter! IsResultSet Parameter is result set Length Parameter value max length Name Parameter name NativeSqlType Parameter native SQL type Type Parameter data type UdtElementTypeName Single object (or collection element) user defined type (UDT) SQL type name WARNING! Specify full qualified type name! WARNING! Using UDT can be not supported or limited by adapter! UdtMappedType Class type mapped with user defined type (UDT) SQL type name This type properties are mapped to SQL type by name (case insensitive) WARNING! Beware to use property data types not supported by adapter or user defined type (UDT)! WARNING! Using UDT can be not supported or limited by adapter! UdtTypeName Collection user defined type (UDT) SQL type name WARNING! Specify full qualified type name! WARNING! Using UDT can be not supported or limited by adapter! Value Parameter value Methods Name Description ToString() Returns a String that represents the current Object . Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.Query.Sql.html": {
    "href": "api/XData.Database.Adapter.Query.Sql.html",
    "title": "Property Sql | XData website",
    "keywords": "Property Sql | Improve this Doc View Source Sql Query SQL expression Declaration public string Sql { get; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.Query.Type.html": {
    "href": "api/XData.Database.Adapter.Query.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Query command type Declaration public CommandType Type { get; } Property Value Type Description CommandType"
  },
  "api/XData.Database.Adapter.Query.Item.html": {
    "href": "api/XData.Database.Adapter.Query.Item.html",
    "title": "Property Item | XData website",
    "keywords": "Property Item | Improve this Doc View Source Item[Int32] Query parameters by index Declaration public QueryParam this[int i] { get; } Parameters Type Name Description Int32 i Parameter index Property Value Type Description QueryParam Query parameter | Improve this Doc View Source Item[String] Query parameters by name Declaration public QueryParam this[string name] { get; set; } Parameters Type Name Description String name Parameter name Property Value Type Description QueryParam Query parameter"
  },
  "api/XData.Database.Adapter.Query.-ctor.html": {
    "href": "api/XData.Database.Adapter.Query.-ctor.html",
    "title": "Constructor Query | XData website",
    "keywords": "Constructor Query | Improve this Doc View Source Query(String, CommandType, QueryParam[]) Query constructor Declaration public Query(string sql, CommandType type = null, params QueryParam[] par) Parameters Type Name Description String sql Sql expression CommandType type Command type QueryParam [] par Parameters"
  },
  "api/XData.Database.Adapter.Query.op_Implicit.html": {
    "href": "api/XData.Database.Adapter.Query.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(String to Query) Query SQL expression Declaration public static implicit operator Query(string s) Parameters Type Name Description String s Sql expression Returns Type Description Query Query"
  },
  "api/XData.Database.Adapter.Query.GetEnumerator.html": {
    "href": "api/XData.Database.Adapter.Query.GetEnumerator.html",
    "title": "Method GetEnumerator | XData website",
    "keywords": "Method GetEnumerator | Improve this Doc View Source GetEnumerator() Query parameters enumeration Declaration public IEnumerator<QueryParam> GetEnumerator() Returns Type Description IEnumerator < QueryParam > Query parameters enumeration Implements IEnumerable<T>.GetEnumerator()"
  },
  "api/XData.Database.Adapter.Query.System-Collections-IEnumerable-GetEnumerator.html": {
    "href": "api/XData.Database.Adapter.Query.System-Collections-IEnumerable-GetEnumerator.html",
    "title": "Method IEnumerable.GetEnumerator | XData website",
    "keywords": "Method IEnumerable.GetEnumerator | Improve this Doc View Source IEnumerable.GetEnumerator() Query parameters enumeration Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Query parameters enumeration Implements IEnumerable.GetEnumerator()"
  },
  "api/XData.Database.Adapter.Query.ToString.html": {
    "href": "api/XData.Database.Adapter.Query.ToString.html",
    "title": "Method ToString | XData website",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString()"
  },
  "api/XData.Database.Adapter.Query.html": {
    "href": "api/XData.Database.Adapter.Query.html",
    "title": "Class Query | XData website",
    "keywords": "Class Query SQL query Inheritance Object Query Implements IEnumerable < QueryParam > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax public sealed class Query : IEnumerable<QueryParam>, IEnumerable Constructors Name Description Query(String, CommandType, QueryParam[]) Query constructor Properties Name Description Item[Int32] Query parameters by index Item[String] Query parameters by name Sql Query SQL expression Type Query command type Methods Name Description GetEnumerator() Query parameters enumeration ToString() Returns a String that represents the current Object . Operators Name Description Implicit(String to Query) Query SQL expression Explicit Interface Implementations Name Description IEnumerable.GetEnumerator() Query parameters enumeration Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.Adapter.IDatabaseAdapterMetadata.Database.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapterMetadata.Database.html",
    "title": "Property Database | XData website",
    "keywords": "Property Database | Improve this Doc View Source Database Database connection type Declaration string Database { get; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.IDatabaseAdapterMetadata.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapterMetadata.html",
    "title": "Interface IDatabaseAdapterMetadata | XData website",
    "keywords": "Interface IDatabaseAdapterMetadata Database adapter description interface Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax public interface IDatabaseAdapterMetadata Properties Name Description Database Database connection type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.Init.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.Init.html",
    "title": "Method Init | XData website",
    "keywords": "Method Init | Improve this Doc View Source Init(ISqlBuilder, String, String, IConfiguration) Initialization routine Declaration void Init(ISqlBuilder dialectAdapter, string context, string connectionString, IConfiguration config) Parameters Type Name Description ISqlBuilder dialectAdapter SQL dialect adapter String context Context name String connectionString Connection string IConfiguration config Adapter configuration"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.FillTable.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.FillTable.html",
    "title": "Method FillTable | XData website",
    "keywords": "Method FillTable | Improve this Doc View Source FillTable(Guid, Query, CommandBehavior) Fill data table Declaration DataTable FillTable(Guid layer, Query query, CommandBehavior behavior = null) Parameters Type Name Description Guid layer Layer Query query Query CommandBehavior behavior Command behavior Returns Type Description DataTable Data table Exceptions Type Condition XDataSqlException wrong SQL query | Improve this Doc View Source FillTable(Guid, Enum, Object[]) Fill data table Declaration DataTable FillTable(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query index Object [] paramValues Query parameters Returns Type Description DataTable Data table Exceptions Type Condition XDataSqlException wrong SQL query parameters | Improve this Doc View Source FillTable(Guid, Enum, CommandBehavior, Object[]) Fill data table Declaration DataTable FillTable(Guid layer, Enum queryIndex, CommandBehavior behavior, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query index CommandBehavior behavior Command behavior Object [] paramValues Query parameters Returns Type Description DataTable Data table Exceptions Type Condition XDataSqlException wrong SQL query parameters"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.Test.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.Test.html",
    "title": "Method Test | XData website",
    "keywords": "Method Test | Improve this Doc View Source Test(Guid, Query) Test query Declaration void Test(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.ExecuteScalar.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.ExecuteScalar.html",
    "title": "Method ExecuteScalar | XData website",
    "keywords": "Method ExecuteScalar | Improve this Doc View Source ExecuteScalar(Guid, Query) Retrieve scalar value Declaration object ExecuteScalar(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Returns Type Description Object Object Exceptions Type Condition XDataSqlException wrong SQL query | Improve this Doc View Source ExecuteScalar(Guid, Enum, Object[]) Retrieve scalar value Declaration object ExecuteScalar(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query index Object [] paramValues Query parameters Returns Type Description Object Object Exceptions Type Condition XDataSqlException wrong SQL query parameters"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.ExecuteNonQuery.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.ExecuteNonQuery.html",
    "title": "Method ExecuteNonQuery | XData website",
    "keywords": "Method ExecuteNonQuery | Improve this Doc View Source ExecuteNonQuery(Guid, Query) Execute SQL statement Declaration QueryResult ExecuteNonQuery(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Returns Type Description QueryResult Query result Exceptions Type Condition XDataSqlException wrong SQL query | Improve this Doc View Source ExecuteNonQuery(Guid, Enum, Object[]) Execute SQL statement Declaration QueryResult ExecuteNonQuery(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query index Object [] paramValues Query parameters Returns Type Description QueryResult Query result Exceptions Type Condition XDataSqlException wrong SQL query parameters"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.Call.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.Call.html",
    "title": "Method Call | XData website",
    "keywords": "Method Call | Improve this Doc View Source Call(Guid, StoredProcedure) Execute SQL stored procedure Declaration CallResult Call(Guid layer, StoredProcedure procedure) Parameters Type Name Description Guid layer Layer StoredProcedure procedure Procedure Returns Type Description CallResult Call result Exceptions Type Condition XDataSqlException wrong SQL stored procedure"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.GetParameterValue.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.GetParameterValue.html",
    "title": "Method GetParameterValue | XData website",
    "keywords": "Method GetParameterValue | Improve this Doc View Source GetParameterValue(QueryParam) Read parameter value Declaration object GetParameterValue(QueryParam parameter) Parameters Type Name Description QueryParam parameter Parameter Returns Type Description Object Parameter value | Improve this Doc View Source GetParameterValue<T>(QueryParam) Read parameter value Declaration T GetParameterValue<T>(QueryParam parameter) Parameters Type Name Description QueryParam parameter Parameter Returns Type Description T Parameter value Type Parameters Name Description T"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.SelectParameterValue.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.SelectParameterValue.html",
    "title": "Method SelectParameterValue | XData website",
    "keywords": "Method SelectParameterValue | Improve this Doc View Source SelectParameterValue<T>(QueryParam) Iterate user data type (UDT) valued table/array parameter value Declaration IEnumerable<T> SelectParameterValue<T>(QueryParam parameter) Parameters Type Name Description QueryParam parameter Parameter Returns Type Description IEnumerable <T> Parameter value Type Parameters Name Description T"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.Close.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.Close.html",
    "title": "Method Close | XData website",
    "keywords": "Method Close | Improve this Doc View Source Close(Guid) Close database adapter Declaration void Close(Guid layer) Parameters Type Name Description Guid layer Layer Exceptions Type Condition XDataSqlException SQL exceptions while closing connection"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.IsOpen.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.IsOpen.html",
    "title": "Method IsOpen | XData website",
    "keywords": "Method IsOpen | Improve this Doc View Source IsOpen(Guid) Check adapter connection is open Declaration bool IsOpen(Guid layer) Parameters Type Name Description Guid layer Layer Returns Type Description Boolean"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.NotSupported.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.NotSupported.html",
    "title": "Property NotSupported | XData website",
    "keywords": "Property NotSupported | Improve this Doc View Source NotSupported Dialect options not supported by adapter Declaration DialectOptions NotSupported { get; } Property Value Type Description DialectOptions"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.BeginTransaction.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.BeginTransaction.html",
    "title": "Method BeginTransaction | XData website",
    "keywords": "Method BeginTransaction | Improve this Doc View Source BeginTransaction(Guid, Boolean, IsolationLevel) Begin transaction Declaration string BeginTransaction(Guid layer, bool read = false, IsolationLevel isolation = null) Parameters Type Name Description Guid layer Layer Boolean read Read only transaction flag IsolationLevel isolation Transaction isolation level Returns Type Description String Success flag Exceptions Type Condition XDataSqlException SQL exceptions while beginning transaction."
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.Commit.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.Commit.html",
    "title": "Method Commit | XData website",
    "keywords": "Method Commit | Improve this Doc View Source Commit(Guid, String) Commit transaction Declaration bool Commit(Guid layer, string transactionId) Parameters Type Name Description Guid layer Layer String transactionId Transaction id Returns Type Description Boolean Success flag"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.Rollback.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.Rollback.html",
    "title": "Method Rollback | XData website",
    "keywords": "Method Rollback | Improve this Doc View Source Rollback(Guid, String) Rollback transaction Declaration bool Rollback(Guid layer, string transactionId) Parameters Type Name Description Guid layer Layer String transactionId Transaction id Returns Type Description Boolean Success flag"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.ConnectType.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.ConnectType.html",
    "title": "Property ConnectType | XData website",
    "keywords": "Property ConnectType | Improve this Doc View Source ConnectType Database connection type Declaration string ConnectType { get; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.InTransaction.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.InTransaction.html",
    "title": "Method InTransaction | XData website",
    "keywords": "Method InTransaction | Improve this Doc View Source InTransaction(Guid) Transaction context flag Declaration bool InTransaction(Guid layer) Parameters Type Name Description Guid layer Layer Returns Type Description Boolean"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.SafeConvert.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.SafeConvert.html",
    "title": "Method SafeConvert | XData website",
    "keywords": "Method SafeConvert | Improve this Doc View Source SafeConvert<T>(Object) Safe convert data Declaration T SafeConvert<T>(object data) Parameters Type Name Description Object data Data to convert Returns Type Description T Converted data Type Parameters Name Description T Result type"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.GetTableFieldInfo.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.GetTableFieldInfo.html",
    "title": "Method GetTableFieldInfo | XData website",
    "keywords": "Method GetTableFieldInfo | Improve this Doc View Source GetTableFieldInfo(Guid, String) Returns table structure Declaration ReadOnlyCollection<FieldInfo> GetTableFieldInfo(Guid layer, string table) Parameters Type Name Description Guid layer Layer String table Table name Returns Type Description ReadOnlyCollection < FieldInfo > List of fields"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.GetTablesInfo.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.GetTablesInfo.html",
    "title": "Method GetTablesInfo | XData website",
    "keywords": "Method GetTablesInfo | Improve this Doc View Source GetTablesInfo(Guid) Returns table list Declaration ReadOnlyCollection<TableInfo> GetTablesInfo(Guid layer) Parameters Type Name Description Guid layer Layer Returns Type Description ReadOnlyCollection < TableInfo > List of table"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.html",
    "title": "Interface IDatabaseAdapter | XData website",
    "keywords": "Interface IDatabaseAdapter Database adapter basic interface Inherited Members IDisposable.Dispose() Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax public interface IDatabaseAdapter : IDisposable Properties Name Description ConnectType Database connection type NotSupported Dialect options not supported by adapter Methods Name Description BeginTransaction(Guid, Boolean, IsolationLevel) Begin transaction Call(Guid, StoredProcedure) Execute SQL stored procedure Close(Guid) Close database adapter Commit(Guid, String) Commit transaction ExecuteNonQuery(Guid, Enum, Object[]) Execute SQL statement ExecuteNonQuery(Guid, Query) Execute SQL statement ExecuteScalar(Guid, Enum, Object[]) Retrieve scalar value ExecuteScalar(Guid, Query) Retrieve scalar value FillTable(Guid, Enum, CommandBehavior, Object[]) Fill data table FillTable(Guid, Enum, Object[]) Fill data table FillTable(Guid, Query, CommandBehavior) Fill data table GetParameterValue(QueryParam) Read parameter value GetParameterValue<T>(QueryParam) Read parameter value GetTableFieldInfo(Guid, String) Returns table structure GetTablesInfo(Guid) Returns table list Init(ISqlBuilder, String, String, IConfiguration) Initialization routine InTransaction(Guid) Transaction context flag IsOpen(Guid) Check adapter connection is open Rollback(Guid, String) Rollback transaction SafeConvert<T>(Object) Safe convert data SelectParameterValue<T>(QueryParam) Iterate user data type (UDT) valued table/array parameter value Test(Guid, Query) Test query Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.DatabaseAdapterAttribute.-ctor.html": {
    "href": "api/XData.Database.Adapter.DatabaseAdapterAttribute.-ctor.html",
    "title": "Constructor DatabaseAdapterAttribute | XData website",
    "keywords": "Constructor DatabaseAdapterAttribute | Improve this Doc View Source DatabaseAdapterAttribute(String) Database adapter attribute constructor Declaration public DatabaseAdapterAttribute(string adapterDatabase) Parameters Type Name Description String adapterDatabase Connection type"
  },
  "api/XData.Database.Adapter.DatabaseAdapterAttribute.Database.html": {
    "href": "api/XData.Database.Adapter.DatabaseAdapterAttribute.Database.html",
    "title": "Property Database | XData website",
    "keywords": "Property Database | Improve this Doc View Source Database Database connection type Declaration public string Database { get; } Property Value Type Description String Implements IDatabaseAdapterMetadata.Database"
  },
  "api/XData.Database.Adapter.DatabaseAdapterAttribute.html": {
    "href": "api/XData.Database.Adapter.DatabaseAdapterAttribute.html",
    "title": "Class DatabaseAdapterAttribute | XData website",
    "keywords": "Class DatabaseAdapterAttribute Database adapter attribute Inheritance Object Attribute DatabaseAdapterAttribute Implements IDatabaseAdapterMetadata Inherited Members Attribute.Equals(Object) Attribute.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class DatabaseAdapterAttribute : Attribute, IDatabaseAdapterMetadata Constructors Name Description DatabaseAdapterAttribute(String) Database adapter attribute constructor Properties Name Description Database Database connection type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.CallResult.ResultSets.html": {
    "href": "api/XData.Database.Adapter.CallResult.ResultSets.html",
    "title": "Property ResultSets | XData website",
    "keywords": "Property ResultSets | Improve this Doc View Source ResultSets Stored procedure result sets Declaration public ReadOnlyCollection<DataTable> ResultSets { get; } Property Value Type Description ReadOnlyCollection < DataTable > Remarks Hint: Data table name contains result set name"
  },
  "api/XData.Database.Adapter.CallResult.-ctor.html": {
    "href": "api/XData.Database.Adapter.CallResult.-ctor.html",
    "title": "Constructor CallResult | XData website",
    "keywords": "Constructor CallResult | Improve this Doc View Source CallResult(StoredProcedure, IDataParameterCollection, IList<DataTable>) Stored procedure call result constructor Declaration public CallResult(StoredProcedure procedure, IDataParameterCollection procedureParams, IList<DataTable> resultSets) Parameters Type Name Description StoredProcedure procedure Stored procedure IDataParameterCollection procedureParams Procedure parameters IList < DataTable > resultSets Result sets list | Improve this Doc View Source CallResult(StoredProcedure, IEnumerable<IDataParameter>, IList<DataTable>) Stored procedure call result constructor Declaration public CallResult(StoredProcedure procedure, IEnumerable<IDataParameter> procedureParams, IList<DataTable> resultSets) Parameters Type Name Description StoredProcedure procedure Stored procedure IEnumerable < IDataParameter > procedureParams Procedure parameters IList < DataTable > resultSets Result sets list | Improve this Doc View Source CallResult(StoredProcedure, IEnumerable<QueryParam>, IList<DataTable>) Stored procedure call result constructor Declaration public CallResult(StoredProcedure procedure, IEnumerable<QueryParam> procedureParams, IList<DataTable> resultSets) Parameters Type Name Description StoredProcedure procedure Stored procedure IEnumerable < QueryParam > procedureParams Procedure parameters sequence IList < DataTable > resultSets Result sets list"
  },
  "api/XData.Database.Adapter.CallResult.ParamInit.html": {
    "href": "api/XData.Database.Adapter.CallResult.ParamInit.html",
    "title": "Method ParamInit | XData website",
    "keywords": "Method ParamInit | Improve this Doc View Source ParamInit(IDataParameter) Update out parameter value Declaration protected override QueryParam ParamInit(IDataParameter parameter) Parameters Type Name Description IDataParameter parameter Parameter Returns Type Description QueryParam Query parameter Overrides QueryResultBase.ParamInit(IDataParameter) Exceptions Type Condition XDataRuntimeException"
  },
  "api/XData.Database.Adapter.CallResult.html": {
    "href": "api/XData.Database.Adapter.CallResult.html",
    "title": "Class CallResult | XData website",
    "keywords": "Class CallResult Stored procedure call result Inheritance Object QueryResultBase CallResult Implements IEnumerable < QueryParam > IEnumerable Inherited Members QueryResultBase.AffectedRows QueryResultBase.Item[Int32] QueryResultBase.Item[String] QueryResultBase.ParamsCount QueryResultBase.Init(Int32, IDataParameterCollection) QueryResultBase.Init(Int32, IEnumerable<IDataParameter>) QueryResultBase.Init(Int32, IEnumerable<QueryParam>) QueryResultBase.GetEnumerator() QueryResultBase.IEnumerable.GetEnumerator() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax public sealed class CallResult : QueryResultBase, IEnumerable<QueryParam>, IEnumerable Constructors Name Description CallResult(StoredProcedure, IDataParameterCollection, IList<DataTable>) Stored procedure call result constructor CallResult(StoredProcedure, IEnumerable<IDataParameter>, IList<DataTable>) Stored procedure call result constructor CallResult(StoredProcedure, IEnumerable<QueryParam>, IList<DataTable>) Stored procedure call result constructor Properties Name Description ResultSets Stored procedure result sets Methods Name Description ParamInit(IDataParameter) Update out parameter value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Initialized.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Initialized.html",
    "title": "Property Initialized | XData website",
    "keywords": "Property Initialized | Improve this Doc View Source Initialized Declaration protected bool Initialized { get; } Property Value Type Description Boolean"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.DialectAdapter.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.DialectAdapter.html",
    "title": "Property DialectAdapter | XData website",
    "keywords": "Property DialectAdapter | Improve this Doc View Source DialectAdapter SQL dialect adapter instance Declaration protected ISqlBuilder DialectAdapter { get; } Property Value Type Description ISqlBuilder"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Context.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Context.html",
    "title": "Property Context | XData website",
    "keywords": "Property Context | Improve this Doc View Source Context Database context name Declaration protected string Context { get; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ConnectionString.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ConnectionString.html",
    "title": "Property ConnectionString | XData website",
    "keywords": "Property ConnectionString | Improve this Doc View Source ConnectionString Connection string Declaration protected string ConnectionString { get; set; } Property Value Type Description String"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetConnection.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetConnection.html",
    "title": "Method GetConnection | XData website",
    "keywords": "Method GetConnection | Improve this Doc View Source GetConnection(Guid) Database connection Declaration protected DbConnection GetConnection(Guid layer) Parameters Type Name Description Guid layer Returns Type Description DbConnection"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.InitConnection.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.InitConnection.html",
    "title": "Method InitConnection | XData website",
    "keywords": "Method InitConnection | Improve this Doc View Source InitConnection(DbConnection) Declaration protected virtual void InitConnection(DbConnection connection) Parameters Type Name Description DbConnection connection"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.CreateCommand.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.CreateCommand.html",
    "title": "Method CreateCommand | XData website",
    "keywords": "Method CreateCommand | Improve this Doc View Source CreateCommand(TConnection) Create specific SQL command Declaration protected virtual IDbCommand CreateCommand(TConnection connection) Parameters Type Name Description TConnection connection SQL connection Returns Type Description IDbCommand SQL command Remarks Override this when some special command parameters are required"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetProcedureCall.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetProcedureCall.html",
    "title": "Method GetProcedureCall | XData website",
    "keywords": "Method GetProcedureCall | Improve this Doc View Source GetProcedureCall(ref IDbCommand, StoredProcedure, String, Boolean) Declaration protected virtual void GetProcedureCall(ref IDbCommand command, StoredProcedure procedure, string getResultName = null, bool closeCursor = false) Parameters Type Name Description IDbCommand command StoredProcedure procedure String getResultName Boolean closeCursor"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.CreateParameter.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.CreateParameter.html",
    "title": "Method CreateParameter | XData website",
    "keywords": "Method CreateParameter | Improve this Doc View Source CreateParameter(Guid, QueryParam) Create common parameter Declaration protected virtual TParameter CreateParameter(Guid layer, QueryParam parameter) Parameters Type Name Description Guid layer Layer QueryParam parameter Query parameter Returns Type Description TParameter Parameter"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Call.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Call.html",
    "title": "Method Call | XData website",
    "keywords": "Method Call | Improve this Doc View Source Call(Guid, StoredProcedure) Calls stored procedure Declaration public CallResult Call(Guid layer, StoredProcedure procedure) Parameters Type Name Description Guid layer Layer StoredProcedure procedure Stored procedure Returns Type Description CallResult CallResult Implements IDatabaseAdapter.Call(Guid, StoredProcedure) Exceptions Type Condition XDataSqlException"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetParameterValue.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetParameterValue.html",
    "title": "Method GetParameterValue | XData website",
    "keywords": "Method GetParameterValue | Improve this Doc View Source GetParameterValue(QueryParam) Returns parameter value Declaration public object GetParameterValue(QueryParam parameter) Parameters Type Name Description QueryParam parameter Query parameter Returns Type Description Object Parameter value Implements IDatabaseAdapter.GetParameterValue(QueryParam) | Improve this Doc View Source GetParameterValue<T>(QueryParam) Declaration public T GetParameterValue<T>(QueryParam parameter) Parameters Type Name Description QueryParam parameter Returns Type Description T Type Parameters Name Description T Implements IDatabaseAdapter.GetParameterValue<T>(QueryParam) Exceptions Type Condition XDataAdapterException"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ReadNativeValue.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ReadNativeValue.html",
    "title": "Method ReadNativeValue | XData website",
    "keywords": "Method ReadNativeValue | Improve this Doc View Source ReadNativeValue<T>(String, Object) Read native SQL value Declaration protected virtual T ReadNativeValue<T>(string nativeSqlType, object value) Parameters Type Name Description String nativeSqlType Native SQL type name Object value Value Returns Type Description T Mapped value Type Parameters Name Description T Mapped type Exceptions Type Condition XDataAdapterException"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.SelectParameterValue.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.SelectParameterValue.html",
    "title": "Method SelectParameterValue | XData website",
    "keywords": "Method SelectParameterValue | Improve this Doc View Source SelectParameterValue<T>(QueryParam) Declaration public IEnumerable<T> SelectParameterValue<T>(QueryParam parameter) Parameters Type Name Description QueryParam parameter Returns Type Description IEnumerable <T> Type Parameters Name Description T Implements IDatabaseAdapter.SelectParameterValue<T>(QueryParam) Exceptions Type Condition XDataAdapterException"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ExecuteScalar.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ExecuteScalar.html",
    "title": "Method ExecuteScalar | XData website",
    "keywords": "Method ExecuteScalar | Improve this Doc View Source ExecuteScalar(Guid, Query) Executes scalar returning query Declaration public object ExecuteScalar(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Returns Type Description Object Reader Implements IDatabaseAdapter.ExecuteScalar(Guid, Query) Exceptions Type Condition XDataSqlException wrong SQL query XDataConcurrencyException concurrency exception | Improve this Doc View Source ExecuteScalar(Guid, Enum, Object[]) Executes scalar returning query Declaration public object ExecuteScalar(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query enumeration key Object [] paramValues Query parameter values Returns Type Description Object Scalar value Implements IDatabaseAdapter.ExecuteScalar(Guid, Enum, Object[]) Exceptions Type Condition XDataSqlException wrong SQL query parameters"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.IsConcurrencyError.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.IsConcurrencyError.html",
    "title": "Method IsConcurrencyError | XData website",
    "keywords": "Method IsConcurrencyError | Improve this Doc View Source IsConcurrencyError(Exception) Check exception is a concurrency exception Declaration protected virtual bool IsConcurrencyError(Exception exception) Parameters Type Name Description Exception exception Exception Returns Type Description Boolean Exception is a concurrency exception"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ExecuteNonQuery.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ExecuteNonQuery.html",
    "title": "Method ExecuteNonQuery | XData website",
    "keywords": "Method ExecuteNonQuery | Improve this Doc View Source ExecuteNonQuery(Guid, Query) Executes SQL expression with no result set Declaration public QueryResult ExecuteNonQuery(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Returns Type Description QueryResult Query result Implements IDatabaseAdapter.ExecuteNonQuery(Guid, Query) Exceptions Type Condition XDataSqlException wrong SQL query XDataConcurrencyException concurrency exception | Improve this Doc View Source ExecuteNonQuery(Guid, Enum, Object[]) Executes SQL expression with no result set Declaration public QueryResult ExecuteNonQuery(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query enumeration key Object [] paramValues Query parameter values Returns Type Description QueryResult Query result Implements IDatabaseAdapter.ExecuteNonQuery(Guid, Enum, Object[]) Exceptions Type Condition XDataSqlException wrong SQL query parameters"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.FillTable.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.FillTable.html",
    "title": "Method FillTable | XData website",
    "keywords": "Method FillTable | Improve this Doc View Source FillTable(Guid, Query, CommandBehavior) Executes query and fill data table Declaration public DataTable FillTable(Guid layer, Query query, CommandBehavior behavior = null) Parameters Type Name Description Guid layer Layer Query query Query CommandBehavior behavior Command behavior Returns Type Description DataTable Filled data table Implements IDatabaseAdapter.FillTable(Guid, Query, CommandBehavior) Exceptions Type Condition XDataSqlException wrong SQL query | Improve this Doc View Source FillTable(Guid, Enum, Object[]) Executes query and fill data table Declaration public DataTable FillTable(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query enumeration key Object [] paramValues Query parameter values Returns Type Description DataTable Filled data table Implements IDatabaseAdapter.FillTable(Guid, Enum, Object[]) Exceptions Type Condition XDataSqlException wrong SQL query parameters | Improve this Doc View Source FillTable(Guid, Enum, CommandBehavior, Object[]) Executes query and fill data table Declaration public DataTable FillTable(Guid layer, Enum queryIndex, CommandBehavior behavior, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query enumeration key CommandBehavior behavior Command behavior Object [] paramValues Query parameter values Returns Type Description DataTable Filled data table Implements IDatabaseAdapter.FillTable(Guid, Enum, CommandBehavior, Object[]) Exceptions Type Condition XDataSqlException wrong SQL query parameters"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Test.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Test.html",
    "title": "Method Test | XData website",
    "keywords": "Method Test | Improve this Doc View Source Test(Guid, Query) Test query syntax WARNING! Throws a error if test failed! Declaration public void Test(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Implements IDatabaseAdapter.Test(Guid, Query) Exceptions Type Condition XDataSqlException wrong SQL query"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Close.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Close.html",
    "title": "Method Close | XData website",
    "keywords": "Method Close | Improve this Doc View Source Close(Guid) Close database connection Declaration public void Close(Guid layer) Parameters Type Name Description Guid layer Implements IDatabaseAdapter.Close(Guid) Exceptions Type Condition XDataSqlException SQL exceptions while closing connection"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.IsOpen.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.IsOpen.html",
    "title": "Method IsOpen | XData website",
    "keywords": "Method IsOpen | Improve this Doc View Source IsOpen(Guid) Connection is open flag Declaration public bool IsOpen(Guid layer) Parameters Type Name Description Guid layer Returns Type Description Boolean Implements IDatabaseAdapter.IsOpen(Guid)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.NotSupported.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.NotSupported.html",
    "title": "Property NotSupported | XData website",
    "keywords": "Property NotSupported | Improve this Doc View Source NotSupported Check adapter supports user defined types (UDT) Declaration public virtual DialectOptions NotSupported { get; } Property Value Type Description DialectOptions Implements IDatabaseAdapter.NotSupported"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.InTransaction.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.InTransaction.html",
    "title": "Method InTransaction | XData website",
    "keywords": "Method InTransaction | Improve this Doc View Source InTransaction(Guid) Connection have not committed transaction flag Declaration public bool InTransaction(Guid layer) Parameters Type Name Description Guid layer Returns Type Description Boolean Implements IDatabaseAdapter.InTransaction(Guid)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.SafeConvert.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.SafeConvert.html",
    "title": "Method SafeConvert | XData website",
    "keywords": "Method SafeConvert | Improve this Doc View Source SafeConvert<T>(Object) Safe conversion for Db specific types Declaration public virtual T SafeConvert<T>(object data) Parameters Type Name Description Object data Source data Returns Type Description T Source data converted to type Type Parameters Name Description T Result type Implements IDatabaseAdapter.SafeConvert<T>(Object) Remarks Override this to convert some specific Db related types See Also SafeTypeConvert"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetTableFieldInfo.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetTableFieldInfo.html",
    "title": "Method GetTableFieldInfo | XData website",
    "keywords": "Method GetTableFieldInfo | Improve this Doc View Source GetTableFieldInfo(Guid, String) Declaration public abstract ReadOnlyCollection<FieldInfo> GetTableFieldInfo(Guid layer, string table) Parameters Type Name Description Guid layer String table Returns Type Description ReadOnlyCollection < FieldInfo > Implements IDatabaseAdapter.GetTableFieldInfo(Guid, String)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetTablesInfo.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetTablesInfo.html",
    "title": "Method GetTablesInfo | XData website",
    "keywords": "Method GetTablesInfo | Improve this Doc View Source GetTablesInfo(Guid) Declaration public abstract ReadOnlyCollection<TableInfo> GetTablesInfo(Guid layer) Parameters Type Name Description Guid layer Returns Type Description ReadOnlyCollection < TableInfo > Implements IDatabaseAdapter.GetTablesInfo(Guid)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetUtdParameter.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetUtdParameter.html",
    "title": "Method GetUtdParameter | XData website",
    "keywords": "Method GetUtdParameter | Improve this Doc View Source GetUtdParameter(QueryParam) Create and initialize user data type (UDT) parameter Hint: Override this method to use UDT stored procedure parameters Declaration protected virtual IDataParameter GetUtdParameter(QueryParam parameter) Parameters Type Name Description QueryParam parameter Stored procedure parameter Returns Type Description IDataParameter Exceptions Type Condition XDataAdapterException User Defined Type (UTD)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.WrapUtd.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.WrapUtd.html",
    "title": "Method WrapUtd | XData website",
    "keywords": "Method WrapUtd | Improve this Doc View Source WrapUtd<T>(T, String) Wrap data to user defined type (UTD) Declaration protected virtual object WrapUtd<T>(T value, string utdTypeName) where T : class Parameters Type Name Description T value Value to wrap String utdTypeName User defined type name Returns Type Description Object Wrapped value Type Parameters Name Description T Type mapped to user defined type (UTD) Exceptions Type Condition XDataAdapterException User Defined Type (UTD)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.WrapUtdCollection.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.WrapUtdCollection.html",
    "title": "Method WrapUtdCollection | XData website",
    "keywords": "Method WrapUtdCollection | Improve this Doc View Source WrapUtdCollection<T>(T[], Boolean, String, String) Wrap data to collection (table or array) user defined type (UTD) Declaration protected virtual object WrapUtdCollection<T>(T[] value, bool isArray, string utdTypeName, string utdElementName = null) Parameters Type Name Description T[] value Collection to wrap Boolean isArray Use VARARRAY String utdTypeName User defined type name for collection String utdElementName User defined type name for element (set to null for scalar type collection) Returns Type Description Object Wrapped collection Type Parameters Name Description T Collection element type mapped to user defined type (UTD) Exceptions Type Condition XDataAdapterException User Defined Type (UTD)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ReadUtd.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ReadUtd.html",
    "title": "Method ReadUtd | XData website",
    "keywords": "Method ReadUtd | Improve this Doc View Source ReadUtd<T>(Object) Read data from wrapped user defined type (UTD) Declaration protected virtual T ReadUtd<T>(object utdObject) where T : class Parameters Type Name Description Object utdObject Wrapped value Returns Type Description T Unwrapped value Type Parameters Name Description T Type mapped to user defined type (UTD) Exceptions Type Condition XDataAdapterException User Defined Type (UTD)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ReadUtdCollection.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ReadUtdCollection.html",
    "title": "Method ReadUtdCollection | XData website",
    "keywords": "Method ReadUtdCollection | Improve this Doc View Source ReadUtdCollection<T>(Object) Read data from wrapped user defined type (UTD) Declaration protected virtual ICollection<T> ReadUtdCollection<T>(object utdCollection) Parameters Type Name Description Object utdCollection Wrapped collection Returns Type Description ICollection <T> Unwrapped collection Type Parameters Name Description T Collection element type mapped to user defined type (UTD) Exceptions Type Condition XDataAdapterException User Defined Type (UTD)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.RegisterResultSet.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.RegisterResultSet.html",
    "title": "Method RegisterResultSet | XData website",
    "keywords": "Method RegisterResultSet | Improve this Doc View Source RegisterResultSet(String) Register result set parameter of stored procedure Declaration protected virtual IDbDataParameter RegisterResultSet(string resultSetName) Parameters Type Name Description String resultSetName Result set name Returns Type Description IDbDataParameter Result set parameter Remarks WARNING! Override this method to register result sets as out parameters Exceptions Type Condition XDataAdapterException RegisterResultSet See Also ResultSets MultipleRecordsetProceduresSupported RegisterRecordsetRequired"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.AddSavePoint.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.AddSavePoint.html",
    "title": "Method AddSavePoint | XData website",
    "keywords": "Method AddSavePoint | Improve this Doc View Source AddSavePoint(Guid, IDbTransaction, String) Add named save point Declaration protected abstract void AddSavePoint(Guid layer, IDbTransaction transaction, string savePoint) Parameters Type Name Description Guid layer Layer IDbTransaction transaction Transaction String savePoint Save point name"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.RollbackToSavePoint.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.RollbackToSavePoint.html",
    "title": "Method RollbackToSavePoint | XData website",
    "keywords": "Method RollbackToSavePoint | Improve this Doc View Source RollbackToSavePoint(Guid, IDbTransaction, String) Rollback to named save point Declaration protected abstract void RollbackToSavePoint(Guid layer, IDbTransaction transaction, string savePoint) Parameters Type Name Description Guid layer Layer IDbTransaction transaction Transaction String savePoint Save point name"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.BeginTransaction.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.BeginTransaction.html",
    "title": "Method BeginTransaction | XData website",
    "keywords": "Method BeginTransaction | Improve this Doc View Source BeginTransaction(Guid, Boolean, IsolationLevel) Begin transaction Declaration public string BeginTransaction(Guid layer, bool read = false, IsolationLevel isolation = null) Parameters Type Name Description Guid layer Layer Boolean read Read only transaction flag IsolationLevel isolation Transaction isolation level Returns Type Description String Transaction key Implements IDatabaseAdapter.BeginTransaction(Guid, Boolean, IsolationLevel) Exceptions Type Condition XDataSqlException SQL exceptions while beginning transaction."
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Commit.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Commit.html",
    "title": "Method Commit | XData website",
    "keywords": "Method Commit | Improve this Doc View Source Commit(Guid, String) Commit transaction Declaration public bool Commit(Guid layer, string transactionId) Parameters Type Name Description Guid layer Layer String transactionId Transaction key Returns Type Description Boolean Success flag Implements IDatabaseAdapter.Commit(Guid, String)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Rollback.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Rollback.html",
    "title": "Method Rollback | XData website",
    "keywords": "Method Rollback | Improve this Doc View Source Rollback(Guid, String) Rollback transaction Declaration public bool Rollback(Guid layer, string transactionId) Parameters Type Name Description Guid layer Layer String transactionId Transaction key Returns Type Description Boolean Success flag Implements IDatabaseAdapter.Rollback(Guid, String)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ConnectType.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.ConnectType.html",
    "title": "Property ConnectType | XData website",
    "keywords": "Property ConnectType | Improve this Doc View Source ConnectType Adapter name Declaration public string ConnectType { get; } Property Value Type Description String Implements IDatabaseAdapter.ConnectType"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Dispose.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Dispose.html",
    "title": "Method Dispose | XData website",
    "keywords": "Method Dispose | Improve this Doc View Source Dispose() IDisposable realization Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Init.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Init.html",
    "title": "Method Init | XData website",
    "keywords": "Method Init | Improve this Doc View Source Init() Adapter initialization Declaration protected abstract void Init() | Improve this Doc View Source Init(ISqlBuilder, String, String, IConfiguration) Adapter initialization logic Declaration public void Init(ISqlBuilder dialectAdapter, string context, string connectionString, IConfiguration config) Parameters Type Name Description ISqlBuilder dialectAdapter SQL dialect adapter String context Context name String connectionString Database connection string IConfiguration config Adapter configuration Implements IDatabaseAdapter.Init(ISqlBuilder, String, String, IConfiguration)"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetSqlType.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetSqlType.html",
    "title": "Method GetSqlType | XData website",
    "keywords": "Method GetSqlType | Improve this Doc View Source GetSqlType(String) Declaration protected DbType GetSqlType(string typeName) Parameters Type Name Description String typeName Returns Type Description DbType Exceptions Type Condition XDataAdapterException Type not supported"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetNativeType.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.GetNativeType.html",
    "title": "Method GetNativeType | XData website",
    "keywords": "Method GetNativeType | Improve this Doc View Source GetNativeType(DbType) Declaration protected string GetNativeType(DbType type) Parameters Type Name Description DbType type Returns Type Description String Exceptions Type Condition XDataAdapterException"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Config.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.Config.html",
    "title": "Property Config | XData website",
    "keywords": "Property Config | Improve this Doc View Source Config Adapter configuration Declaration protected IConfiguration Config { get; } Property Value Type Description IConfiguration"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.html",
    "title": "Class BaseDatabaseAdapter<TConnection, TParameter> | XData website",
    "keywords": "Class BaseDatabaseAdapter<TConnection, TParameter> Database adapter base class Inheritance Object BaseDatabaseAdapter<TConnection, TParameter> Implements IDatabaseAdapter IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.docfx.dll Syntax [DatabaseAdapter(\"NONE\")] public abstract class BaseDatabaseAdapter<TConnection, TParameter> : IDatabaseAdapter, IDisposable where TConnection : DbConnection, new() where TParameter : IDbDataParameter, new() Type Parameters Name Description TConnection TParameter Properties Name Description Config Adapter configuration ConnectionString Connection string ConnectType Adapter name Context Database context name DialectAdapter SQL dialect adapter instance Initialized NotSupported Check adapter supports user defined types (UDT) Methods Name Description AddSavePoint(Guid, IDbTransaction, String) Add named save point BeginTransaction(Guid, Boolean, IsolationLevel) Begin transaction Call(Guid, StoredProcedure) Calls stored procedure Close(Guid) Close database connection Commit(Guid, String) Commit transaction CreateCommand(TConnection) Create specific SQL command CreateParameter(Guid, QueryParam) Create common parameter Dispose() IDisposable realization ExecuteNonQuery(Guid, Enum, Object[]) Executes SQL expression with no result set ExecuteNonQuery(Guid, Query) Executes SQL expression with no result set ExecuteScalar(Guid, Enum, Object[]) Executes scalar returning query ExecuteScalar(Guid, Query) Executes scalar returning query FillTable(Guid, Enum, CommandBehavior, Object[]) Executes query and fill data table FillTable(Guid, Enum, Object[]) Executes query and fill data table FillTable(Guid, Query, CommandBehavior) Executes query and fill data table GetConnection(Guid) Database connection GetNativeType(DbType) GetParameterValue(QueryParam) Returns parameter value GetParameterValue<T>(QueryParam) GetProcedureCall(ref IDbCommand, StoredProcedure, String, Boolean) GetSqlType(String) GetTableFieldInfo(Guid, String) GetTablesInfo(Guid) GetUtdParameter(QueryParam) Create and initialize user data type (UDT) parameter Hint: Override this method to use UDT stored procedure parameters Init() Adapter initialization Init(ISqlBuilder, String, String, IConfiguration) Adapter initialization logic InitConnection(DbConnection) InTransaction(Guid) Connection have not committed transaction flag IsConcurrencyError(Exception) Check exception is a concurrency exception IsOpen(Guid) Connection is open flag ReadNativeValue<T>(String, Object) Read native SQL value ReadUtd<T>(Object) Read data from wrapped user defined type (UTD) ReadUtdCollection<T>(Object) Read data from wrapped user defined type (UTD) RegisterResultSet(String) Register result set parameter of stored procedure Rollback(Guid, String) Rollback transaction RollbackToSavePoint(Guid, IDbTransaction, String) Rollback to named save point SafeConvert<T>(Object) Safe conversion for Db specific types SelectParameterValue<T>(QueryParam) Test(Guid, Query) Test query syntax WARNING! Throws a error if test failed! WrapUtd<T>(T, String) Wrap data to user defined type (UTD) WrapUtdCollection<T>(T[], Boolean, String, String) Wrap data to collection (table or array) user defined type (UTD) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataActionType.html": {
    "href": "api/XData.DataActionType.html",
    "title": "Enum DataActionType | XData website",
    "keywords": "Enum DataActionType Action type Namespace : XData Assembly : XData.docfx.dll Syntax public enum DataActionType Fields Name Description AfterClear After clear trigger logic AfterDelete After delete trigger logic AfterInsert After insert trigger logic AfterUpdate After update trigger logic BeforeClear Before clear trigger logic BeforeDelete Before delete trigger logic BeforeInsert Before insert trigger logic BeforeUpdate Before update trigger logic InitObject Object instance initialization code InitRepository Repository initialization code InvalidateObject Refresh object event code InvalidateRepository Refresh repository event code See Also ActionType InitRepository InvalidateRepository InvalidateObject InitObject BeforeInsert BeforeUpdate BeforeDelete AfterInsert AfterUpdate AfterDelete BeforeClear AfterClear Extension Methods SerializationExtensions.ToXml<DataActionType>() CollectionsExtensions.SetValue<DataActionType, T>(T) CollectionsExtensions.AsEnum<DataActionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<DataActionType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<DataActionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.CustomMapping-1.html": {
    "href": "api/XData.CustomMapping-1.html",
    "title": "Delegate CustomMapping<T> | XData website",
    "keywords": "Delegate CustomMapping<T> Custom mapping delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate IRepositoryDescription<T> CustomMapping<out T>() where T : class, IDataObject, new(); Returns Type Description IRepositoryDescription <T> Success flag Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.CustomLogic-1.html": {
    "href": "api/XData.CustomLogic-1.html",
    "title": "Delegate CustomLogic<T> | XData website",
    "keywords": "Delegate CustomLogic<T> Custom server logic delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool CustomLogic<in T>(params T[] objects) where T : class, IDataObject; Parameters Type Name Description T[] objects Object instances to process Returns Type Description Boolean Success flag Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.CurrentObjectChanging-1.html": {
    "href": "api/XData.CurrentObjectChanging-1.html",
    "title": "Delegate CurrentObjectChanging<T> | XData website",
    "keywords": "Delegate CurrentObjectChanging<T> Assigning object as current event delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool CurrentObjectChanging<in T>(T obj) where T : class, IDataObject; Parameters Type Name Description T obj Changing is allowed Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also OnCurrentObjectChanging"
  },
  "api/XData.CurrentObjectChanged-1.html": {
    "href": "api/XData.CurrentObjectChanged-1.html",
    "title": "Delegate CurrentObjectChanged<T> | XData website",
    "keywords": "Delegate CurrentObjectChanged<T> Object assigned as current event delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate void CurrentObjectChanged<in T>(T obj) where T : class, IDataObject; Parameters Type Name Description T obj Changing is allowed Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also OnCurrentObjectChanged"
  },
  "api/XData.CopyFlag.html": {
    "href": "api/XData.CopyFlag.html",
    "title": "Enum CopyFlag | XData website",
    "keywords": "Enum CopyFlag Namespace : XData Assembly : XData.docfx.dll Syntax [Flags] public enum CopyFlag Fields Name Description CopyReadOnlyProperties Copy readonly properties Default Default copy values behavior ExceptProperties Copy all properties EXCEPT listed in optional properties parameter Extension Methods SerializationExtensions.ToXml<CopyFlag>() CollectionsExtensions.SetValue<CopyFlag, T>(T) CollectionsExtensions.AsEnum<CopyFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<CopyFlag, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<CopyFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Combination.html": {
    "href": "api/XData.Combination.html",
    "title": "Enum Combination | XData website",
    "keywords": "Enum Combination Filter combination logical composition Namespace : XData Assembly : XData.docfx.dll Syntax [DataContract] public enum Combination Fields Name Description And AND Or OR See Also Combination And Or Extension Methods SerializationExtensions.ToXml<Combination>() CollectionsExtensions.SetValue<Combination, T>(T) CollectionsExtensions.AsEnum<Combination>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<Combination, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<Combination, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.ClearAttachedHandler.html": {
    "href": "api/XData.ClearAttachedHandler.html",
    "title": "Delegate ClearAttachedHandler | XData website",
    "keywords": "Delegate ClearAttachedHandler Clear attached handler delegate Namespace : XData Assembly : XData.docfx.dll Syntax public delegate bool ClearAttachedHandler(DataSubmitFlag flag = DataSubmitFlag.None); Parameters Type Name Description DataSubmitFlag flag Submit flag Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Calculate-1.html": {
    "href": "api/XData.Calculate-1.html",
    "title": "Delegate Calculate<T> | XData website",
    "keywords": "Delegate Calculate<T> XData LINQ-styled SQL expression delegate type Namespace : XData Assembly : XData.docfx.dll Syntax public delegate T Calculate<out T>(IQueryStructureAdapter adapter); Parameters Type Name Description IQueryStructureAdapter adapter Query structure adapter Returns Type Description T Type Parameters Name Description T Result type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also SqlExpressionAttribute ExpressionFilterAttribute PropertyExpressionAttribute"
  },
  "api/XData.AttachedHandlerType.html": {
    "href": "api/XData.AttachedHandlerType.html",
    "title": "Enum AttachedHandlerType | XData website",
    "keywords": "Enum AttachedHandlerType Attached event types Namespace : XData Assembly : XData.docfx.dll Syntax public enum AttachedHandlerType Fields Name Description OnClear OnClear OnExecute OnExecute OnGetLob OnGetLob OnGetLobSize OnGetLobSize OnGetXml OnGetXml OnLock OnLock OnRefresh OnRefresh OnSetLob OnSetLob OnSetXml OnSetXml OnSubmit OnSubmit OnSubmitObject OnSubmitObject OnSubmitQuery OnSubmitQuery Extension Methods SerializationExtensions.ToXml<AttachedHandlerType>() CollectionsExtensions.SetValue<AttachedHandlerType, T>(T) CollectionsExtensions.AsEnum<AttachedHandlerType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<AttachedHandlerType, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<AttachedHandlerType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.AttachedHandler-1.Type.html": {
    "href": "api/XData.AttachedHandler-1.Type.html",
    "title": "Property Type | XData website",
    "keywords": "Property Type | Improve this Doc View Source Type Attached handler type Declaration public AttachedHandlerType Type { get; protected set; } Property Value Type Description AttachedHandlerType"
  },
  "api/XData.AttachedHandler-1.Handler.html": {
    "href": "api/XData.AttachedHandler-1.Handler.html",
    "title": "Property Handler | XData website",
    "keywords": "Property Handler | Improve this Doc View Source Handler Attached handler Declaration protected object Handler { get; } Property Value Type Description Object"
  },
  "api/XData.AttachedHandler-1.-ctor.html": {
    "href": "api/XData.AttachedHandler-1.-ctor.html",
    "title": "Constructor AttachedHandler | XData website",
    "keywords": "Constructor AttachedHandler | Improve this Doc View Source AttachedHandler(AttachedHandlerType, Object) DataObjectAttachedHandler constructor Declaration protected AttachedHandler(AttachedHandlerType type, object handler) Parameters Type Name Description AttachedHandlerType type Object handler"
  },
  "api/XData.AttachedHandler-1.op_Implicit.html": {
    "href": "api/XData.AttachedHandler-1.op_Implicit.html",
    "title": "Operator Implicit | XData website",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(SubmitObjectAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap submit object handler Declaration public static implicit operator AttachedHandler<T>(SubmitObjectAttachedHandler<T> handler) Parameters Type Name Description SubmitObjectAttachedHandler <T> handler Submit handler Returns Type Description AttachedHandler <T> Data object attached handler | Improve this Doc View Source Implicit(LockAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap lock handler Declaration public static implicit operator AttachedHandler<T>(LockAttachedHandler<T> handler) Parameters Type Name Description LockAttachedHandler <T> handler Lock handler Returns Type Description AttachedHandler <T> Data object attached handler | Improve this Doc View Source Implicit(RefreshAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap refresh object handler Declaration public static implicit operator AttachedHandler<T>(RefreshAttachedHandler<T> handler) Parameters Type Name Description RefreshAttachedHandler <T> handler Refresh handler Returns Type Description AttachedHandler <T> Data object attached handler | Improve this Doc View Source Implicit(GetLobAttachedHandler to AttachedHandler<T>) Implicitly wrap get Lob handler Declaration public static implicit operator AttachedHandler<T>(GetLobAttachedHandler handler) Parameters Type Name Description GetLobAttachedHandler handler Get Lob handler Returns Type Description AttachedHandler <T> Data object attached handler | Improve this Doc View Source Implicit(GetLobSizeAttachedHandler to AttachedHandler<T>) Implicitly wrap get Lob size handler Declaration public static implicit operator AttachedHandler<T>(GetLobSizeAttachedHandler handler) Parameters Type Name Description GetLobSizeAttachedHandler handler Get Lob handler Returns Type Description AttachedHandler <T> Data object attached handler | Improve this Doc View Source Implicit(SetLobAttachedHandler to AttachedHandler<T>) Implicitly wrap set Lob handler Declaration public static implicit operator AttachedHandler<T>(SetLobAttachedHandler handler) Parameters Type Name Description SetLobAttachedHandler handler Set Lob handler Returns Type Description AttachedHandler <T> Data object attached handler | Improve this Doc View Source Implicit(GetXmlAttachedHandler to AttachedHandler<T>) Implicitly wrap get Xml handler Declaration public static implicit operator AttachedHandler<T>(GetXmlAttachedHandler handler) Parameters Type Name Description GetXmlAttachedHandler handler Get Xml handler Returns Type Description AttachedHandler <T> Data object attached handler | Improve this Doc View Source Implicit(SetXmlAttachedHandler to AttachedHandler<T>) Implicitly wrap set Xml handler Declaration public static implicit operator AttachedHandler<T>(SetXmlAttachedHandler handler) Parameters Type Name Description SetXmlAttachedHandler handler Set Xml handler Returns Type Description AttachedHandler <T> Data object attached handler | Improve this Doc View Source Implicit(SubmitQueryAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap submit query handler Declaration public static implicit operator AttachedHandler<T>(SubmitQueryAttachedHandler<T> handler) Parameters Type Name Description SubmitQueryAttachedHandler <T> handler Submit query handler Returns Type Description AttachedHandler <T> Data object attached handler"
  },
  "api/XData.AttachedHandler-1.op_Explicit.html": {
    "href": "api/XData.AttachedHandler-1.op_Explicit.html",
    "title": "Operator Explicit | XData website",
    "keywords": "Operator Explicit | Improve this Doc View Source Explicit(AttachedHandler<T> to SubmitObjectAttachedHandler<T>) Explicitly unwrap submit object handler Declaration public static explicit operator SubmitObjectAttachedHandler<T>(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description SubmitObjectAttachedHandler <T> Unwrapped attached handler | Improve this Doc View Source Explicit(AttachedHandler<T> to LockAttachedHandler<T>) Explicitly unwrap lock object handler Declaration public static explicit operator LockAttachedHandler<T>(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description LockAttachedHandler <T> Unwrapped attached handler | Improve this Doc View Source Explicit(AttachedHandler<T> to RefreshAttachedHandler<T>) Explicitly unwrap refresh object handler Declaration public static explicit operator RefreshAttachedHandler<T>(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description RefreshAttachedHandler <T> Unwrapped attached handler | Improve this Doc View Source Explicit(AttachedHandler<T> to GetLobAttachedHandler) Explicitly unwrap get Lob handler Declaration public static explicit operator GetLobAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description GetLobAttachedHandler Unwrapped attached handler | Improve this Doc View Source Explicit(AttachedHandler<T> to GetLobSizeAttachedHandler) Explicitly unwrap get Lob size handler Declaration public static explicit operator GetLobSizeAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description GetLobSizeAttachedHandler Unwrapped attached handler | Improve this Doc View Source Explicit(AttachedHandler<T> to SetLobAttachedHandler) Explicitly unwrap set Lob handler Declaration public static explicit operator SetLobAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description SetLobAttachedHandler Unwrapped attached handler | Improve this Doc View Source Explicit(AttachedHandler<T> to GetXmlAttachedHandler) Explicitly unwrap get Xml handler Declaration public static explicit operator GetXmlAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description GetXmlAttachedHandler Unwrapped attached handler | Improve this Doc View Source Explicit(AttachedHandler<T> to SetXmlAttachedHandler) Explicitly unwrap set Xml handler Declaration public static explicit operator SetXmlAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description SetXmlAttachedHandler Unwrapped attached handler | Improve this Doc View Source Explicit(AttachedHandler<T> to SubmitQueryAttachedHandler<T>) Explicitly unwrap submit query handler Declaration public static explicit operator SubmitQueryAttachedHandler<T>(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description SubmitQueryAttachedHandler <T> Unwrapped attached handler"
  },
  "api/XData.AttachedHandler-1.html": {
    "href": "api/XData.AttachedHandler-1.html",
    "title": "Class AttachedHandler<T> | XData website",
    "keywords": "Class AttachedHandler<T> Data object level attached handler wrapper Inheritance Object AttachedHandler<T> RepositoryAttachedHandler<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public class AttachedHandler<T> where T : class, IDataObject Type Parameters Name Description T Constructors Name Description AttachedHandler(AttachedHandlerType, Object) DataObjectAttachedHandler constructor Properties Name Description Handler Attached handler Type Attached handler type Operators Name Description Explicit(AttachedHandler<T> to GetLobAttachedHandler) Explicitly unwrap get Lob handler Explicit(AttachedHandler<T> to GetLobSizeAttachedHandler) Explicitly unwrap get Lob size handler Explicit(AttachedHandler<T> to GetXmlAttachedHandler) Explicitly unwrap get Xml handler Explicit(AttachedHandler<T> to LockAttachedHandler<T>) Explicitly unwrap lock object handler Explicit(AttachedHandler<T> to RefreshAttachedHandler<T>) Explicitly unwrap refresh object handler Explicit(AttachedHandler<T> to SetLobAttachedHandler) Explicitly unwrap set Lob handler Explicit(AttachedHandler<T> to SetXmlAttachedHandler) Explicitly unwrap set Xml handler Explicit(AttachedHandler<T> to SubmitObjectAttachedHandler<T>) Explicitly unwrap submit object handler Explicit(AttachedHandler<T> to SubmitQueryAttachedHandler<T>) Explicitly unwrap submit query handler Implicit(GetLobAttachedHandler to AttachedHandler<T>) Implicitly wrap get Lob handler Implicit(GetLobSizeAttachedHandler to AttachedHandler<T>) Implicitly wrap get Lob size handler Implicit(GetXmlAttachedHandler to AttachedHandler<T>) Implicitly wrap get Xml handler Implicit(LockAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap lock handler Implicit(RefreshAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap refresh object handler Implicit(SetLobAttachedHandler to AttachedHandler<T>) Implicitly wrap set Lob handler Implicit(SetXmlAttachedHandler to AttachedHandler<T>) Implicitly wrap set Xml handler Implicit(SubmitObjectAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap submit object handler Implicit(SubmitQueryAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap submit query handler Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) SqlBlockExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Async.html": {
    "href": "api/XData.Async.html",
    "title": "Namespace XData.Async | XData website",
    "keywords": "Namespace XData.Async Classes AsyncExtensions"
  },
  "api/XData.Async.AsyncExtensions.ToArrayAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.ToArrayAsync.html",
    "title": "Method ToArrayAsync | XData website",
    "keywords": "Method ToArrayAsync | Improve this Doc View Source ToArrayAsync<T>(IQueryable<T>) Asynchronous wrapper over ToArray() LINQ function Declaration public static Task<T[]> ToArrayAsync<T>(this IQueryable<T> source) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Returns Type Description Task <T[]> Asynchronous call over ToArray() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source ToArrayAsync<T>(IQueryable<T>, CancellationToken) Asynchronous wrapper over ToArray() LINQ function Declaration public static Task<T[]> ToArrayAsync<T>(this IQueryable<T> source, CancellationToken token) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Returns Type Description Task <T[]> Asynchronous call over ToArray() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source ToArrayAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over ToArray() LINQ function Declaration public static Task<T[]> ToArrayAsync<T>(this IQueryable<T> source, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T[]> Asynchronous call over ToArray() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source ToArrayAsync<T>(IQueryable<T>, CancellationToken, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over ToArray() LINQ function Declaration public static Task<T[]> ToArrayAsync<T>(this IQueryable<T> source, CancellationToken token, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T[]> Asynchronous call over ToArray() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.ToListAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.ToListAsync.html",
    "title": "Method ToListAsync | XData website",
    "keywords": "Method ToListAsync | Improve this Doc View Source ToListAsync<T>(IQueryable<T>) Asynchronous wrapper over ToList() LINQ function Declaration public static Task<List<T>> ToListAsync<T>(this IQueryable<T> source) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Returns Type Description Task < List <T>> Asynchronous call over ToList() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source ToListAsync<T>(IQueryable<T>, CancellationToken) Asynchronous wrapper over ToList() LINQ function Declaration public static Task<List<T>> ToListAsync<T>(this IQueryable<T> source, CancellationToken token) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Returns Type Description Task < List <T>> Asynchronous call over ToList() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.ToDictionaryAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.ToDictionaryAsync.html",
    "title": "Method ToDictionaryAsync | XData website",
    "keywords": "Method ToDictionaryAsync | Improve this Doc View Source ToDictionaryAsync<T, TKey, TValue>(IQueryable<T>, Func<T, TKey>, Func<T, TValue>) Asynchronous wrapper over ToDictionary() LINQ function Declaration public static Task<Dictionary<TKey, TValue>> ToDictionaryAsync<T, TKey, TValue>(this IQueryable<T> source, Func<T, TKey> keySelector, Func<T, TValue> elementSelector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Func <T, TKey> keySelector Function to extract key from each element Func <T, TValue> elementSelector Function to extract value from each element Returns Type Description Task < Dictionary <TKey, TValue>> Asynchronous call over ToDictionary() LINQ function Type Parameters Name Description T Object type TKey Dictionary key type TValue Dictionary value type | Improve this Doc View Source ToDictionaryAsync<T, TKey, TValue>(IQueryable<T>, CancellationToken, Func<T, TKey>, Func<T, TValue>) Asynchronous wrapper over ToDictionary() LINQ function Declaration public static Task<Dictionary<TKey, TValue>> ToDictionaryAsync<T, TKey, TValue>(this IQueryable<T> source, CancellationToken token, Func<T, TKey> keySelector, Func<T, TValue> elementSelector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Func <T, TKey> keySelector Function to extract key from each element Func <T, TValue> elementSelector Function to extract value from each element Returns Type Description Task < Dictionary <TKey, TValue>> Asynchronous call over ToDictionary() LINQ function Type Parameters Name Description T Object type TKey Dictionary key type TValue Dictionary value type"
  },
  "api/XData.Async.AsyncExtensions.ForEachAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.ForEachAsync.html",
    "title": "Method ForEachAsync | XData website",
    "keywords": "Method ForEachAsync | Improve this Doc View Source ForEachAsync<T>(IQueryable<T>, Func<T, Task>) Asynchronous wrapper over query result iteration Declaration public static Task ForEachAsync<T>(this IQueryable<T> source, Func<T, Task> body) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Func <T, Task > body Iteration logic Returns Type Description Task Asynchronous call over query result iteration Type Parameters Name Description T Object type | Improve this Doc View Source ForEachAsync<T>(IQueryable<T>, CancellationToken, Func<T, Task>) Asynchronous wrapper over query result iteration Declaration public static Task ForEachAsync<T>(this IQueryable<T> source, CancellationToken token, Func<T, Task> body) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Func <T, Task > body Iteration logic Returns Type Description Task Asynchronous call over query result iteration Type Parameters Name Description T Object type | Improve this Doc View Source ForEachAsync<T>(IQueryable<T>, Action<T>) Asynchronous wrapper over query result iteration Declaration public static Task ForEachAsync<T>(this IQueryable<T> source, Action<T> body) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Action <T> body Iteration logic Returns Type Description Task Asynchronous call over query result iteration Type Parameters Name Description T Object type | Improve this Doc View Source ForEachAsync<T>(IQueryable<T>, CancellationToken, Action<T>) Asynchronous wrapper over query result iteration Declaration public static Task ForEachAsync<T>(this IQueryable<T> source, CancellationToken token, Action<T> body) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Action <T> body Iteration logic Returns Type Description Task Asynchronous call over query result iteration Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.AllAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.AllAsync.html",
    "title": "Method AllAsync | XData website",
    "keywords": "Method AllAsync | Improve this Doc View Source AllAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over All() LINQ function Declaration public static Task<bool> AllAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task < Boolean > Asynchronous call over All() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AllAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over All() LINQ function Declaration public static Task<bool> AllAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task < Boolean > Asynchronous call over All() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.AnyAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.AnyAsync.html",
    "title": "Method AnyAsync | XData website",
    "keywords": "Method AnyAsync | Improve this Doc View Source AnyAsync<T>(IQueryable<T>) Asynchronous wrapper over Any() LINQ function Declaration public static Task<bool> AnyAsync<T>(this IQueryable<T> source) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Returns Type Description Task < Boolean > Asynchronous call over Any() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AnyAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over Any() LINQ function Declaration public static Task<bool> AnyAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task < Boolean > Asynchronous call over Any() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AnyAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over Any() LINQ function Declaration public static Task<bool> AnyAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task < Boolean > Asynchronous call over Any() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.ContainsAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.ContainsAsync.html",
    "title": "Method ContainsAsync | XData website",
    "keywords": "Method ContainsAsync | Improve this Doc View Source ContainsAsync<T>(IQueryable<T>, T, Func<T, Object>[]) Asynchronous wrapper over Contains() LINQ function Declaration public static Task<bool> ContainsAsync<T>(this IQueryable<T> source, T item, params Func<T, object>[] properties) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence T item The object to locate in the sequence. Func <T, Object >[] properties Object properties to compare Returns Type Description Task < Boolean > Asynchronous call over Contains() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source ContainsAsync<T>(IQueryable<T>, T, IEqualityComparer<T>) Asynchronous wrapper over Contains() LINQ function Declaration public static Task<bool> ContainsAsync<T>(this IQueryable<T> source, T item, IEqualityComparer<T> comparer) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence T item The object to locate in the sequence. IEqualityComparer <T> comparer Object comparer Returns Type Description Task < Boolean > Asynchronous call over Contains() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source ContainsAsync<T>(IQueryable<T>, CancellationToken, T, IEqualityComparer<T>) Asynchronous wrapper over Contains() LINQ function Declaration public static Task<bool> ContainsAsync<T>(this IQueryable<T> source, CancellationToken token, T item, IEqualityComparer<T> comparer) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token T item The object to locate in the sequence. IEqualityComparer <T> comparer Object comparer Returns Type Description Task < Boolean > Asynchronous call over Contains() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source ContainsAsync<T>(IQueryable<T>, T) Asynchronous wrapper over Contains() LINQ function Declaration public static Task<bool> ContainsAsync<T>(this IQueryable<T> source, T item) where T : class, IComparable<T>, new() Parameters Type Name Description IQueryable <T> source Source object sequence T item The object to locate in the sequence. Returns Type Description Task < Boolean > Asynchronous call over Contains() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source ContainsAsync<T>(IQueryable<T>, CancellationToken, T) Asynchronous wrapper over Contains() LINQ function Declaration public static Task<bool> ContainsAsync<T>(this IQueryable<T> source, CancellationToken token, T item) where T : class, IComparable<T>, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token T item The object to locate in the sequence. Returns Type Description Task < Boolean > Asynchronous call over Contains() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.FirstAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.FirstAsync.html",
    "title": "Method FirstAsync | XData website",
    "keywords": "Method FirstAsync | Improve this Doc View Source FirstAsync<T>(IQueryable<T>) Asynchronous wrapper over First() LINQ function Declaration public static Task<T> FirstAsync<T>(this IQueryable<T> source) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Returns Type Description Task <T> Asynchronous call over First() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over First() LINQ function Declaration public static Task<T> FirstAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task <T> Asynchronous call over First() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over First() LINQ function Declaration public static Task<T> FirstAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task <T> Asynchronous call over First() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over First() LINQ function Declaration public static Task<T> FirstAsync<T>(this IQueryable<T> source, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over First() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over First() LINQ function Declaration public static Task<T> FirstAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over First() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over First() LINQ function Declaration public static Task<T> FirstAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over First() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.FirstOrDefaultAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.FirstOrDefaultAsync.html",
    "title": "Method FirstOrDefaultAsync | XData website",
    "keywords": "Method FirstOrDefaultAsync | Improve this Doc View Source FirstOrDefaultAsync<T>(IQueryable<T>) Asynchronous wrapper over FirstOrDefault() LINQ function Declaration public static Task<T> FirstOrDefaultAsync<T>(this IQueryable<T> source) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Returns Type Description Task <T> Asynchronous call over FirstOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstOrDefaultAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over FirstOrDefault() LINQ function Declaration public static Task<T> FirstOrDefaultAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task <T> Asynchronous call over FirstOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstOrDefaultAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over FirstOrDefault() LINQ function Declaration public static Task<T> FirstOrDefaultAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task <T> Asynchronous call over FirstOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstOrDefaultAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over FirstOrDefault() LINQ function Declaration public static Task<T> FirstOrDefaultAsync<T>(this IQueryable<T> source, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over FirstOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstOrDefaultAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over FirstOrDefault() LINQ function Declaration public static Task<T> FirstOrDefaultAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over FirstOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source FirstOrDefaultAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over FirstOrDefault() LINQ function Declaration public static Task<T> FirstOrDefaultAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over FirstOrDefault() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.SingleAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.SingleAsync.html",
    "title": "Method SingleAsync | XData website",
    "keywords": "Method SingleAsync | Improve this Doc View Source SingleAsync<T>(IQueryable<T>) Asynchronous wrapper over Single() LINQ function Declaration public static Task<T> SingleAsync<T>(this IQueryable<T> source) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Returns Type Description Task <T> Asynchronous call over Single() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over Single() LINQ function Declaration public static Task<T> SingleAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task <T> Asynchronous call over Single() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over Single() LINQ function Declaration public static Task<T> SingleAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task <T> Asynchronous call over Single() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over Single() LINQ function Declaration public static Task<T> SingleAsync<T>(this IQueryable<T> source, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over Single() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over Single() LINQ function Declaration public static Task<T> SingleAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over Single() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over Single() LINQ function Declaration public static Task<T> SingleAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over Single() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.SingleOrDefaultAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.SingleOrDefaultAsync.html",
    "title": "Method SingleOrDefaultAsync | XData website",
    "keywords": "Method SingleOrDefaultAsync | Improve this Doc View Source SingleOrDefaultAsync<T>(IQueryable<T>) Asynchronous wrapper over SingleOrDefault() LINQ function Declaration public static Task<T> SingleOrDefaultAsync<T>(this IQueryable<T> source) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Returns Type Description Task <T> Asynchronous call over SingleOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleOrDefaultAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over SingleOrDefault() LINQ function Declaration public static Task<T> SingleOrDefaultAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task <T> Asynchronous call over SingleOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleOrDefaultAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over SingleOrDefault() LINQ function Declaration public static Task<T> SingleOrDefaultAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task <T> Asynchronous call over SingleOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleOrDefaultAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over SingleOrDefault() LINQ function Declaration public static Task<T> SingleOrDefaultAsync<T>(this IQueryable<T> source, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over SingleOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleOrDefaultAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over SingleOrDefault() LINQ function Declaration public static Task<T> SingleOrDefaultAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over SingleOrDefault() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SingleOrDefaultAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over SingleOrDefault() LINQ function Declaration public static Task<T> SingleOrDefaultAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate, Func<JsonSettings<T>, JsonSettings<T>> settings) where T : class, IDataObject, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Returns Type Description Task <T> Asynchronous call over SingleOrDefault() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.CountAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.CountAsync.html",
    "title": "Method CountAsync | XData website",
    "keywords": "Method CountAsync | Improve this Doc View Source CountAsync<T>(IQueryable<T>) Asynchronous wrapper over Count() LINQ function Declaration public static Task<int> CountAsync<T>(this IQueryable<T> source) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Returns Type Description Task < Int32 > Asynchronous call over Count() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source CountAsync<T>(IQueryable<T>, CancellationToken) Asynchronous wrapper over Count() LINQ function Declaration public static Task<int> CountAsync<T>(this IQueryable<T> source, CancellationToken token) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Returns Type Description Task < Int32 > Asynchronous call over Count() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source CountAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over Count() LINQ function Declaration public static Task<int> CountAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task < Int32 > Asynchronous call over Count() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source CountAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over Count() LINQ function Declaration public static Task<int> CountAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task < Int32 > Asynchronous call over Count() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.LongCountAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.LongCountAsync.html",
    "title": "Method LongCountAsync | XData website",
    "keywords": "Method LongCountAsync | Improve this Doc View Source LongCountAsync<T>(IQueryable<T>) Asynchronous wrapper over LongCount() LINQ function Declaration public static Task<long> LongCountAsync<T>(this IQueryable<T> source) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Returns Type Description Task < Int64 > Asynchronous call over LongCount() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source LongCountAsync<T>(IQueryable<T>, CancellationToken) Asynchronous wrapper over LongCount() LINQ function Declaration public static Task<long> LongCountAsync<T>(this IQueryable<T> source, CancellationToken token) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Returns Type Description Task < Int64 > Asynchronous call over LongCount() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source LongCountAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over LongCount() LINQ function Declaration public static Task<long> LongCountAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task < Int64 > Asynchronous call over LongCount() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source LongCountAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over LongCount() LINQ function Declaration public static Task<long> LongCountAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, bool>> predicate) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Boolean >> predicate A function to test each element for a condition Returns Type Description Task < Int64 > Asynchronous call over LongCount() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.MaxAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.MaxAsync.html",
    "title": "Method MaxAsync | XData website",
    "keywords": "Method MaxAsync | Improve this Doc View Source MaxAsync<T, TResult>(IQueryable<T>, Expression<Func<T, TResult>>) Asynchronous wrapper over Max() LINQ function Declaration public static Task<TResult> MaxAsync<T, TResult>(this IQueryable<T> source, Expression<Func<T, TResult>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, TResult>> selector A projection function to apply to each element Returns Type Description Task <TResult> Asynchronous call over Max() LINQ function Type Parameters Name Description T Object type TResult Function applied field type | Improve this Doc View Source MaxAsync<T, TResult>(IQueryable<T>, CancellationToken, Expression<Func<T, TResult>>) Asynchronous wrapper over Max() LINQ function Declaration public static Task<TResult> MaxAsync<T, TResult>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, TResult>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, TResult>> selector A projection function to apply to each element Returns Type Description Task <TResult> Asynchronous call over Max() LINQ function Type Parameters Name Description T Object type TResult Function applied field type"
  },
  "api/XData.Async.AsyncExtensions.MinAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.MinAsync.html",
    "title": "Method MinAsync | XData website",
    "keywords": "Method MinAsync | Improve this Doc View Source MinAsync<T, TResult>(IQueryable<T>, Expression<Func<T, TResult>>) Asynchronous wrapper over Min() LINQ function Declaration public static Task<TResult> MinAsync<T, TResult>(this IQueryable<T> source, Expression<Func<T, TResult>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, TResult>> selector A projection function to apply to each element Returns Type Description Task <TResult> Asynchronous call over Min() LINQ function Type Parameters Name Description T Object type TResult Function applied field type | Improve this Doc View Source MinAsync<T, TResult>(IQueryable<T>, CancellationToken, Expression<Func<T, TResult>>) Asynchronous wrapper over Min() LINQ function Declaration public static Task<TResult> MinAsync<T, TResult>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, TResult>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, TResult>> selector A projection function to apply to each element Returns Type Description Task <TResult> Asynchronous call over Min() LINQ function Type Parameters Name Description T Object type TResult Function applied field type"
  },
  "api/XData.Async.AsyncExtensions.AverageAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.AverageAsync.html",
    "title": "Method AverageAsync | XData website",
    "keywords": "Method AverageAsync | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Single>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<float> AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, float>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Single >> selector A projection function to apply to each element Returns Type Description Task < Single > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Single>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<float> AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, float>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Single >> selector A projection function to apply to each element Returns Type Description Task < Single > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Double>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double> AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, double>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Double >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Double>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double> AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, double>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Double >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Decimal>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<decimal> AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, decimal>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Decimal >> selector A projection function to apply to each element Returns Type Description Task < Decimal > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Decimal>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<decimal> AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, decimal>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Decimal >> selector A projection function to apply to each element Returns Type Description Task < Decimal > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Int32>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double> AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, int>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Int32 >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Int32>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double> AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, int>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Int32 >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Int64>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double> AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, long>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Int64 >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Int64>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double> AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, long>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Int64 >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Single>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<float? > AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, float? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Single >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Single >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Single>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<float? > AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, float? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Single >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Single >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Double>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double? > AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, double? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Double >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Double>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double? > AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, double? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Double >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Decimal>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<decimal? > AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, decimal? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Decimal >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Decimal >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Decimal>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<decimal? > AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, decimal? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Decimal >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Decimal >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Int32>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double? > AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, int? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Int32 >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Int32>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double? > AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, int? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Int32 >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Int64>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double? > AverageAsync<T>(this IQueryable<T> source, Expression<Func<T, long? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Int64 >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Int64>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double? > AverageAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, long? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Int64 >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.SumAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.SumAsync.html",
    "title": "Method SumAsync | XData website",
    "keywords": "Method SumAsync | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Single>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<float> SumAsync<T>(this IQueryable<T> source, Expression<Func<T, float>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Single >> selector A projection function to apply to each element Returns Type Description Task < Single > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Single>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<float> SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, float>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Single >> selector A projection function to apply to each element Returns Type Description Task < Single > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Double>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double> SumAsync<T>(this IQueryable<T> source, Expression<Func<T, double>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Double >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Double>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double> SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, double>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Double >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Decimal>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<decimal> SumAsync<T>(this IQueryable<T> source, Expression<Func<T, decimal>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Decimal >> selector A projection function to apply to each element Returns Type Description Task < Decimal > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Decimal>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<decimal> SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, decimal>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Decimal >> selector A projection function to apply to each element Returns Type Description Task < Decimal > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Int32>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double> SumAsync<T>(this IQueryable<T> source, Expression<Func<T, int>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Int32 >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Int32>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double> SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, int>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Int32 >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Int64>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double> SumAsync<T>(this IQueryable<T> source, Expression<Func<T, long>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Int64 >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Int64>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double> SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, long>> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Int64 >> selector A projection function to apply to each element Returns Type Description Task < Double > Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Single>>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<float? > SumAsync<T>(this IQueryable<T> source, Expression<Func<T, float? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Single >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Single >> Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Single>>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<float? > SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, float? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Single >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Single >> Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Double>>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double? > SumAsync<T>(this IQueryable<T> source, Expression<Func<T, double? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Double >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Double>>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double? > SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, double? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Double >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Decimal>>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<decimal? > SumAsync<T>(this IQueryable<T> source, Expression<Func<T, decimal? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Decimal >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Decimal >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Decimal>>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<decimal? > SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, decimal? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Decimal >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Decimal >> Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Int32>>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double? > SumAsync<T>(this IQueryable<T> source, Expression<Func<T, int? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Int32 >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Int32>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double? > SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, int? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Int32 >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Int64>>>) Asynchronous wrapper over Sum() LINQ function Declaration public static Task<double? > SumAsync<T>(this IQueryable<T> source, Expression<Func<T, long? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence Expression < Func <T, Nullable < Int64 >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Sum() LINQ function Type Parameters Name Description T Object type | Improve this Doc View Source SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Int64>>>) Asynchronous wrapper over Average() LINQ function Declaration public static Task<double? > SumAsync<T>(this IQueryable<T> source, CancellationToken token, Expression<Func<T, long? >> selector) where T : class, new() Parameters Type Name Description IQueryable <T> source Source object sequence CancellationToken token Cancellation token Expression < Func <T, Nullable < Int64 >>> selector A projection function to apply to each element Returns Type Description Task < Nullable < Double >> Asynchronous call over Average() LINQ function Type Parameters Name Description T Object type"
  },
  "api/XData.Async.AsyncExtensions.FillTableAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.FillTableAsync.html",
    "title": "Method FillTableAsync | XData website",
    "keywords": "Method FillTableAsync | Improve this Doc View Source FillTableAsync(IDataScope, Query, CommandBehavior) Asynchronous wrapper over FillTable(Query, CommandBehavior) call Declaration public static Task<DataTable> FillTableAsync(this IDataScope dataScope, Query query, CommandBehavior behavior = null) Parameters Type Name Description IDataScope dataScope Data scope Query query Query CommandBehavior behavior Command behavior Returns Type Description Task < DataTable > Asynchronous call over FillTable | Improve this Doc View Source FillTableAsync(IDataScope, CancellationToken, Query, CommandBehavior) Asynchronous wrapper over FillTable(Query, CommandBehavior) call Declaration public static Task<DataTable> FillTableAsync(this IDataScope dataScope, CancellationToken token, Query query, CommandBehavior behavior = null) Parameters Type Name Description IDataScope dataScope Data scope CancellationToken token Cancellation token Query query Query CommandBehavior behavior Command behavior Returns Type Description Task < DataTable > Asynchronous call over FillTable"
  },
  "api/XData.Async.AsyncExtensions.ExecuteScalarAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.ExecuteScalarAsync.html",
    "title": "Method ExecuteScalarAsync | XData website",
    "keywords": "Method ExecuteScalarAsync | Improve this Doc View Source ExecuteScalarAsync<TResult>(IDataScope, Query) Asynchronous wrapper over ExecuteScalar<TResult>(Query) call Declaration public static Task<TResult> ExecuteScalarAsync<TResult>(this IDataScope dataScope, Query query) Parameters Type Name Description IDataScope dataScope Data scope Query query Query Returns Type Description Task <TResult> Asynchronous call over ExecuteScalar Type Parameters Name Description TResult | Improve this Doc View Source ExecuteScalarAsync<TResult>(IDataScope, CancellationToken, Query) Asynchronous wrapper over ExecuteScalar<TResult>(Query) call Declaration public static Task<TResult> ExecuteScalarAsync<TResult>(this IDataScope dataScope, CancellationToken token, Query query) Parameters Type Name Description IDataScope dataScope Data scope CancellationToken token Cancellation token Query query Query Returns Type Description Task <TResult> Asynchronous call over ExecuteScalar Type Parameters Name Description TResult"
  },
  "api/XData.Async.AsyncExtensions.ExecuteNonQueryAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.ExecuteNonQueryAsync.html",
    "title": "Method ExecuteNonQueryAsync | XData website",
    "keywords": "Method ExecuteNonQueryAsync | Improve this Doc View Source ExecuteNonQueryAsync(IDataScope, Query) Asynchronous wrapper over ExecuteNonQuery(Query) call Declaration public static Task ExecuteNonQueryAsync(this IDataScope dataScope, Query query) Parameters Type Name Description IDataScope dataScope Data scope Query query Query Returns Type Description Task Asynchronous call over ExecuteNonQuery | Improve this Doc View Source ExecuteNonQueryAsync(IDataScope, CancellationToken, Query) Asynchronous wrapper over ExecuteNonQuery(Query) call Declaration public static Task ExecuteNonQueryAsync(this IDataScope dataScope, CancellationToken token, Query query) Parameters Type Name Description IDataScope dataScope Data scope CancellationToken token Cancellation token Query query Query Returns Type Description Task Asynchronous call over ExecuteNonQuery"
  },
  "api/XData.Async.AsyncExtensions.ExecuteSqlBlockAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.ExecuteSqlBlockAsync.html",
    "title": "Method ExecuteSqlBlockAsync | XData website",
    "keywords": "Method ExecuteSqlBlockAsync | Improve this Doc View Source ExecuteSqlBlockAsync(IDataScope, Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over SQL block execution Declaration public static Task ExecuteSqlBlockAsync(this IDataScope dataScope, Expression<SqlBlockDefinition> block, params Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters) Parameters Type Name Description IDataScope dataScope Data scope Expression < SqlBlockDefinition > block Sql block structure Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Sql block parameters Returns Type Description Task Asynchronous wrapper over SQL block execution | Improve this Doc View Source ExecuteSqlBlockAsync(IDataScope, CancellationToken, Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over SQL block execution Declaration public static Task ExecuteSqlBlockAsync(this IDataScope dataScope, CancellationToken token, Expression<SqlBlockDefinition> block, params Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters) Parameters Type Name Description IDataScope dataScope Data scope CancellationToken token Cancellation token Expression < SqlBlockDefinition > block Sql block structure Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Sql block parameters Returns Type Description Task Asynchronous wrapper over SQL block execution"
  },
  "api/XData.Async.AsyncExtensions.GetSqlBlockDataAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.GetSqlBlockDataAsync.html",
    "title": "Method GetSqlBlockDataAsync | XData website",
    "keywords": "Method GetSqlBlockDataAsync | Improve this Doc View Source GetSqlBlockDataAsync<T>(IDataScope, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over select SQL block data Declaration public static Task<T[]> GetSqlBlockDataAsync<T>(this IDataScope dataScope, Expression<SqlBlockDefinition<T>> block, params Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters) where T : class, new() Parameters Type Name Description IDataScope dataScope Data scope layer Expression < SqlBlockDefinition <T>> block Sql block structure Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Sql block parameters Returns Type Description Task <T[]> Asynchronous wrapper over SQL block data selected and mapped Type Parameters Name Description T | Improve this Doc View Source GetSqlBlockDataAsync<T>(IDataScope, Func<JsonSettings<T>, JsonSettings<T>>, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over select SQL block data Declaration public static Task<T[]> GetSqlBlockDataAsync<T>(this IDataScope dataScope, Func<JsonSettings<T>, JsonSettings<T>> settings, Expression<SqlBlockDefinition<T>> block, params Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters) where T : class, IDataObject, new() Parameters Type Name Description IDataScope dataScope Data scope layer Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Expression < SqlBlockDefinition <T>> block Sql block structure Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Sql block parameters Returns Type Description Task <T[]> Asynchronous wrapper over SQL block data selected and mapped Type Parameters Name Description T | Improve this Doc View Source GetSqlBlockDataAsync<T>(IDataScope, CancellationToken, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over select SQL block data Declaration public static Task<T[]> GetSqlBlockDataAsync<T>(this IDataScope dataScope, CancellationToken token, Expression<SqlBlockDefinition<T>> block, params Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters) where T : class, new() Parameters Type Name Description IDataScope dataScope Data scope layer CancellationToken token Cancellation token Expression < SqlBlockDefinition <T>> block Sql block structure Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Sql block parameters Returns Type Description Task <T[]> Asynchronous wrapper over SQL block data selected and mapped Type Parameters Name Description T | Improve this Doc View Source GetSqlBlockDataAsync<T>(IDataScope, CancellationToken, Func<JsonSettings<T>, JsonSettings<T>>, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over select SQL block data Declaration public static Task<T[]> GetSqlBlockDataAsync<T>(this IDataScope dataScope, CancellationToken token, Func<JsonSettings<T>, JsonSettings<T>> settings, Expression<SqlBlockDefinition<T>> block, params Expression<Func<ISqlParamAdapter, ISqlParam>>[] parameters) where T : class, IDataObject, new() Parameters Type Name Description IDataScope dataScope Data scope layer CancellationToken token Cancellation token Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings Expression < SqlBlockDefinition <T>> block Sql block structure Expression < Func < ISqlParamAdapter , ISqlParam >>[] parameters Sql block parameters Returns Type Description Task <T[]> Asynchronous wrapper over SQL block data selected and mapped Type Parameters Name Description T"
  },
  "api/XData.Async.AsyncExtensions.SubmitAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.SubmitAsync.html",
    "title": "Method SubmitAsync | XData website",
    "keywords": "Method SubmitAsync | Improve this Doc View Source SubmitAsync<T>(T, DataSubmitFlag) Asynchronous wrapper over Submit Declaration public static Task<bool> SubmitAsync<T>(this T obj, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit DataSubmitFlag flag Data submit flag Returns Type Description Task < Boolean > Asynchronous wrapper over Submit Type Parameters Name Description T | Improve this Doc View Source SubmitAsync<T>(T, CancellationToken, DataSubmitFlag) Asynchronous wrapper over Submit Declaration public static Task<bool> SubmitAsync<T>(this T obj, CancellationToken token, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit CancellationToken token Cancellation token DataSubmitFlag flag Data submit flag Returns Type Description Task < Boolean > Asynchronous wrapper over Submit Type Parameters Name Description T"
  },
  "api/XData.Async.AsyncExtensions.SubmitAndReturnAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.SubmitAndReturnAsync.html",
    "title": "Method SubmitAndReturnAsync | XData website",
    "keywords": "Method SubmitAndReturnAsync | Improve this Doc View Source SubmitAndReturnAsync<T>(T, DataSubmitFlag) Asynchronous wrapper over Submit Declaration public static Task<T> SubmitAndReturnAsync<T>(this T obj, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit DataSubmitFlag flag Data submit flag Returns Type Description Task <T> Asynchronous wrapper over Submit Type Parameters Name Description T | Improve this Doc View Source SubmitAndReturnAsync<T>(T, CancellationToken, DataSubmitFlag) Asynchronous wrapper over Submit Declaration public static Task<T> SubmitAndReturnAsync<T>(this T obj, CancellationToken token, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit CancellationToken token Cancellation token DataSubmitFlag flag Data submit flag Returns Type Description Task <T> Asynchronous wrapper over Submit Type Parameters Name Description T | Improve this Doc View Source SubmitAndReturnAsync<T>(T, Func<JsonSettings<T>, JsonSettings<T>>, DataSubmitFlag) Asynchronous wrapper over Submit Declaration public static Task<T> SubmitAndReturnAsync<T>(this T obj, Func<JsonSettings<T>, JsonSettings<T>> settings, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings DataSubmitFlag flag Data submit flag Returns Type Description Task <T> Asynchronous wrapper over Submit Type Parameters Name Description T | Improve this Doc View Source SubmitAndReturnAsync<T>(T, CancellationToken, Func<JsonSettings<T>, JsonSettings<T>>, DataSubmitFlag) Asynchronous wrapper over Submit Declaration public static Task<T> SubmitAndReturnAsync<T>(this T obj, CancellationToken token, Func<JsonSettings<T>, JsonSettings<T>> settings, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit CancellationToken token Cancellation token Func < JsonSettings <T>, JsonSettings <T>> settings JSON serialization settings DataSubmitFlag flag Data submit flag Returns Type Description Task <T> Asynchronous wrapper over Submit Type Parameters Name Description T"
  },
  "api/XData.Async.AsyncExtensions.LoadLobAsync.html": {
    "href": "api/XData.Async.AsyncExtensions.LoadLobAsync.html",
    "title": "Method LoadLobAsync | XData website",
    "keywords": "Method LoadLobAsync | Improve this Doc View Source LoadLobAsync<T>(T) Asynchronous wrapper over LoadLob Declaration public static Task<T> LoadLobAsync<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit Returns Type Description Task <T> Asynchronous wrapper over LoadLob Type Parameters Name Description T | Improve this Doc View Source LoadLobAsync<T>(T, CancellationToken) Asynchronous wrapper over LoadLob Declaration public static Task<T> LoadLobAsync<T>(this T obj, CancellationToken token) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit CancellationToken token Cancellation token Returns Type Description Task <T> Asynchronous wrapper over LoadLob Type Parameters Name Description T | Improve this Doc View Source LoadLobAsync<T>(T, String[]) Asynchronous wrapper over LoadLob Declaration public static Task<T> LoadLobAsync<T>(this T obj, params string[] properties) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit String [] properties Large data properties to load Returns Type Description Task <T> Asynchronous wrapper over LoadLob Type Parameters Name Description T | Improve this Doc View Source LoadLobAsync<T>(T, CancellationToken, String[]) Asynchronous wrapper over LoadLob Declaration public static Task<T> LoadLobAsync<T>(this T obj, CancellationToken token, params string[] properties) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit CancellationToken token Cancellation token String [] properties Large data properties to load Returns Type Description Task <T> Asynchronous wrapper over LoadLob Type Parameters Name Description T | Improve this Doc View Source LoadLobAsync<T>(T, Expression<Func<T, Object>>[]) Asynchronous wrapper over LoadLob Declaration public static Task<T> LoadLobAsync<T>(this T obj, params Expression<Func<T, object>>[] properties) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit Expression < Func <T, Object >>[] properties Large data properties expressions to load Returns Type Description Task <T> Asynchronous wrapper over LoadLob Type Parameters Name Description T | Improve this Doc View Source LoadLobAsync<T>(T, CancellationToken, Expression<Func<T, Object>>[]) Asynchronous wrapper over LoadLob Declaration public static Task<T> LoadLobAsync<T>(this T obj, CancellationToken token, params Expression<Func<T, object>>[] properties) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object to submit CancellationToken token Cancellation token Expression < Func <T, Object >>[] properties Large data properties expressions to load Returns Type Description Task <T> Asynchronous wrapper over LoadLob Type Parameters Name Description T"
  },
  "api/XData.Async.AsyncExtensions.html": {
    "href": "api/XData.Async.AsyncExtensions.html",
    "title": "Class AsyncExtensions | XData website",
    "keywords": "Class AsyncExtensions Inheritance Object AsyncExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Async Assembly : XData.docfx.dll Syntax public static class AsyncExtensions Methods Name Description AllAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over All() LINQ function AllAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over All() LINQ function AnyAsync<T>(IQueryable<T>) Asynchronous wrapper over Any() LINQ function AnyAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over Any() LINQ function AnyAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over Any() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Decimal>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Double>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Int32>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Int64>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Decimal>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Double>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Int32>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Int64>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Single>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, Expression<Func<T, Single>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Decimal>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Double>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Int32>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Int64>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Decimal>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Double>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Int32>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Int64>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Single>>>) Asynchronous wrapper over Average() LINQ function AverageAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Single>>) Asynchronous wrapper over Average() LINQ function ContainsAsync<T>(IQueryable<T>, T) Asynchronous wrapper over Contains() LINQ function ContainsAsync<T>(IQueryable<T>, T, IEqualityComparer<T>) Asynchronous wrapper over Contains() LINQ function ContainsAsync<T>(IQueryable<T>, T, Func<T, Object>[]) Asynchronous wrapper over Contains() LINQ function ContainsAsync<T>(IQueryable<T>, CancellationToken, T) Asynchronous wrapper over Contains() LINQ function ContainsAsync<T>(IQueryable<T>, CancellationToken, T, IEqualityComparer<T>) Asynchronous wrapper over Contains() LINQ function CountAsync<T>(IQueryable<T>) Asynchronous wrapper over Count() LINQ function CountAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over Count() LINQ function CountAsync<T>(IQueryable<T>, CancellationToken) Asynchronous wrapper over Count() LINQ function CountAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over Count() LINQ function ExecuteNonQueryAsync(IDataScope, CancellationToken, Query) Asynchronous wrapper over ExecuteNonQuery(Query) call ExecuteNonQueryAsync(IDataScope, Query) Asynchronous wrapper over ExecuteNonQuery(Query) call ExecuteScalarAsync<TResult>(IDataScope, CancellationToken, Query) Asynchronous wrapper over ExecuteScalar<TResult>(Query) call ExecuteScalarAsync<TResult>(IDataScope, Query) Asynchronous wrapper over ExecuteScalar<TResult>(Query) call ExecuteSqlBlockAsync(IDataScope, Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over SQL block execution ExecuteSqlBlockAsync(IDataScope, CancellationToken, Expression<SqlBlockDefinition>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over SQL block execution FillTableAsync(IDataScope, CancellationToken, Query, CommandBehavior) Asynchronous wrapper over FillTable(Query, CommandBehavior) call FillTableAsync(IDataScope, Query, CommandBehavior) Asynchronous wrapper over FillTable(Query, CommandBehavior) call FirstAsync<T>(IQueryable<T>) Asynchronous wrapper over First() LINQ function FirstAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over First() LINQ function FirstAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over First() LINQ function FirstAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over First() LINQ function FirstAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over First() LINQ function FirstAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over First() LINQ function FirstOrDefaultAsync<T>(IQueryable<T>) Asynchronous wrapper over FirstOrDefault() LINQ function FirstOrDefaultAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over FirstOrDefault() LINQ function FirstOrDefaultAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over FirstOrDefault() LINQ function FirstOrDefaultAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over FirstOrDefault() LINQ function FirstOrDefaultAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over FirstOrDefault() LINQ function FirstOrDefaultAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over FirstOrDefault() LINQ function ForEachAsync<T>(IQueryable<T>, Action<T>) Asynchronous wrapper over query result iteration ForEachAsync<T>(IQueryable<T>, Func<T, Task>) Asynchronous wrapper over query result iteration ForEachAsync<T>(IQueryable<T>, CancellationToken, Action<T>) Asynchronous wrapper over query result iteration ForEachAsync<T>(IQueryable<T>, CancellationToken, Func<T, Task>) Asynchronous wrapper over query result iteration GetSqlBlockDataAsync<T>(IDataScope, Func<JsonSettings<T>, JsonSettings<T>>, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over select SQL block data GetSqlBlockDataAsync<T>(IDataScope, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over select SQL block data GetSqlBlockDataAsync<T>(IDataScope, CancellationToken, Func<JsonSettings<T>, JsonSettings<T>>, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over select SQL block data GetSqlBlockDataAsync<T>(IDataScope, CancellationToken, Expression<SqlBlockDefinition<T>>, Expression<Func<ISqlParamAdapter, ISqlParam>>[]) Asynchronous wrapper over select SQL block data LoadLobAsync<T>(T) Asynchronous wrapper over LoadLob LoadLobAsync<T>(T, Expression<Func<T, Object>>[]) Asynchronous wrapper over LoadLob LoadLobAsync<T>(T, String[]) Asynchronous wrapper over LoadLob LoadLobAsync<T>(T, CancellationToken) Asynchronous wrapper over LoadLob LoadLobAsync<T>(T, CancellationToken, Expression<Func<T, Object>>[]) Asynchronous wrapper over LoadLob LoadLobAsync<T>(T, CancellationToken, String[]) Asynchronous wrapper over LoadLob LongCountAsync<T>(IQueryable<T>) Asynchronous wrapper over LongCount() LINQ function LongCountAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over LongCount() LINQ function LongCountAsync<T>(IQueryable<T>, CancellationToken) Asynchronous wrapper over LongCount() LINQ function LongCountAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over LongCount() LINQ function MaxAsync<T, TResult>(IQueryable<T>, Expression<Func<T, TResult>>) Asynchronous wrapper over Max() LINQ function MaxAsync<T, TResult>(IQueryable<T>, CancellationToken, Expression<Func<T, TResult>>) Asynchronous wrapper over Max() LINQ function MinAsync<T, TResult>(IQueryable<T>, Expression<Func<T, TResult>>) Asynchronous wrapper over Min() LINQ function MinAsync<T, TResult>(IQueryable<T>, CancellationToken, Expression<Func<T, TResult>>) Asynchronous wrapper over Min() LINQ function SingleAsync<T>(IQueryable<T>) Asynchronous wrapper over Single() LINQ function SingleAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over Single() LINQ function SingleAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over Single() LINQ function SingleAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over Single() LINQ function SingleAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over Single() LINQ function SingleAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over Single() LINQ function SingleOrDefaultAsync<T>(IQueryable<T>) Asynchronous wrapper over SingleOrDefault() LINQ function SingleOrDefaultAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over SingleOrDefault() LINQ function SingleOrDefaultAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Asynchronous wrapper over SingleOrDefault() LINQ function SingleOrDefaultAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over SingleOrDefault() LINQ function SingleOrDefaultAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>) Asynchronous wrapper over SingleOrDefault() LINQ function SingleOrDefaultAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Boolean>>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over SingleOrDefault() LINQ function SubmitAndReturnAsync<T>(T, Func<JsonSettings<T>, JsonSettings<T>>, DataSubmitFlag) Asynchronous wrapper over Submit SubmitAndReturnAsync<T>(T, CancellationToken, Func<JsonSettings<T>, JsonSettings<T>>, DataSubmitFlag) Asynchronous wrapper over Submit SubmitAndReturnAsync<T>(T, CancellationToken, DataSubmitFlag) Asynchronous wrapper over Submit SubmitAndReturnAsync<T>(T, DataSubmitFlag) Asynchronous wrapper over Submit SubmitAsync<T>(T, CancellationToken, DataSubmitFlag) Asynchronous wrapper over Submit SubmitAsync<T>(T, DataSubmitFlag) Asynchronous wrapper over Submit SumAsync<T>(IQueryable<T>, Expression<Func<T, Decimal>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, Expression<Func<T, Double>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, Expression<Func<T, Int32>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, Expression<Func<T, Int64>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Decimal>>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Double>>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Int32>>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Int64>>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, Expression<Func<T, Nullable<Single>>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, Expression<Func<T, Single>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Decimal>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Double>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Int32>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Int64>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Decimal>>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Double>>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Int32>>>) Asynchronous wrapper over Average() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Int64>>>) Asynchronous wrapper over Average() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Nullable<Single>>>) Asynchronous wrapper over Sum() LINQ function SumAsync<T>(IQueryable<T>, CancellationToken, Expression<Func<T, Single>>) Asynchronous wrapper over Sum() LINQ function ToArrayAsync<T>(IQueryable<T>) Asynchronous wrapper over ToArray() LINQ function ToArrayAsync<T>(IQueryable<T>, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over ToArray() LINQ function ToArrayAsync<T>(IQueryable<T>, CancellationToken) Asynchronous wrapper over ToArray() LINQ function ToArrayAsync<T>(IQueryable<T>, CancellationToken, Func<JsonSettings<T>, JsonSettings<T>>) Asynchronous wrapper over ToArray() LINQ function ToDictionaryAsync<T, TKey, TValue>(IQueryable<T>, Func<T, TKey>, Func<T, TValue>) Asynchronous wrapper over ToDictionary() LINQ function ToDictionaryAsync<T, TKey, TValue>(IQueryable<T>, CancellationToken, Func<T, TKey>, Func<T, TValue>) Asynchronous wrapper over ToDictionary() LINQ function ToListAsync<T>(IQueryable<T>) Asynchronous wrapper over ToList() LINQ function ToListAsync<T>(IQueryable<T>, CancellationToken) Asynchronous wrapper over ToList() LINQ function"
  },
  "api/XData.ApplyFlag.html": {
    "href": "api/XData.ApplyFlag.html",
    "title": "Enum ApplyFlag | XData website",
    "keywords": "Enum ApplyFlag Apply detached object properties flags Namespace : XData Assembly : XData.docfx.dll Syntax [Flags] public enum ApplyFlag Fields Name Description AddWhenNotFound Add new entity when not found in DB CopyReadOnlyProperties Copy readonly properties Default Default apply values behavior Add a new entity to repository when keys has empty values Or try to find object in DB by key and concurrency token values and throw concurrency exception when not found Then copy all object properties to found or a new object, or properties restricted by optional properties parameter ExceptProperties Copy all properties EXCEPT listed in optional properties parameter IgnoreConcurrency Ignore concurrency token on find Extension Methods SerializationExtensions.ToXml<ApplyFlag>() CollectionsExtensions.SetValue<ApplyFlag, T>(T) CollectionsExtensions.AsEnum<ApplyFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) SqlBlockExtensions.SetExpression<ApplyFlag, TResult>(Expression<Func<IBlockQueryAdapter, TResult>>) QueryDescriptionExtensions.SetExpression<ApplyFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Actions.All.html": {
    "href": "api/XData.Actions.All.html",
    "title": "Field All | XData website",
    "keywords": "Field All All actions (CRUD and custom actions) Namespace : XData Assembly : XData.docfx.dll Syntax public const string All = \"`ALL`\" Returns Type Description String"
  },
  "api/XData.Actions.CRUD.html": {
    "href": "api/XData.Actions.CRUD.html",
    "title": "Field CRUD | XData website",
    "keywords": "Field CRUD CRUD actions Namespace : XData Assembly : XData.docfx.dll Syntax public const string CRUD = \"`CRUD`\" Returns Type Description String"
  },
  "api/XData.Actions.Create.html": {
    "href": "api/XData.Actions.Create.html",
    "title": "Field Create | XData website",
    "keywords": "Field Create Create action Namespace : XData Assembly : XData.docfx.dll Syntax public const string Create = \"`CREATE`\" Returns Type Description String"
  },
  "api/XData.Actions.Update.html": {
    "href": "api/XData.Actions.Update.html",
    "title": "Field Update | XData website",
    "keywords": "Field Update Update action Namespace : XData Assembly : XData.docfx.dll Syntax public const string Update = \"`UPDATE`\" Returns Type Description String"
  },
  "api/XData.Actions.Delete.html": {
    "href": "api/XData.Actions.Delete.html",
    "title": "Field Delete | XData website",
    "keywords": "Field Delete Delete action Namespace : XData Assembly : XData.docfx.dll Syntax public const string Delete = \"`DELETE`\" Returns Type Description String"
  },
  "api/XData.Actions.html": {
    "href": "api/XData.Actions.html",
    "title": "Class Actions | XData website",
    "keywords": "Class Actions Standard actions used by security Inheritance Object Actions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.docfx.dll Syntax public static class Actions Fields Name Description All All actions (CRUD and custom actions) Create Create action CRUD CRUD actions Delete Delete action Update Update action"
  }
}