{
  "api/XData.VariableIndexer.html": {
    "href": "api/XData.VariableIndexer.html",
    "title": "Class VariableIndexer | XData website",
    "keywords": "Class VariableIndexer Data object variables indexer Inheritance Object VariableIndexer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public sealed class VariableIndexer Constructors VariableIndexer(IEnumerable<Variable>) Variable indexer constructor Declaration public VariableIndexer(IEnumerable<Variable> variables) Parameters Type Name Description IEnumerable < Variable > variables Variables sequence Properties Count Variables count Declaration public int Count { get; } Property Value Type Description Int32 Item[String] Variable indexer Declaration public string this[string name] { get; } Parameters Type Name Description String name Variable name Property Value Type Description String Variable Methods Contains(String) Variables contains name Declaration public bool Contains(string name) Parameters Type Name Description String name Variable name Returns Type Description Boolean Contains flag Set(IEnumerable<Variable>) Set variables values Declaration public VariableIndexer Set(IEnumerable<Variable> variables) Parameters Type Name Description IEnumerable < Variable > variables Variables sequence Returns Type Description VariableIndexer Set(String, String) Set variable value Declaration public VariableIndexer Set(string name, string value) Parameters Type Name Description String name Variable name String value Variable value Returns Type Description VariableIndexer Set(Variable) Set variable value Declaration public VariableIndexer Set(Variable variable) Parameters Type Name Description Variable variable Variable Returns Type Description VariableIndexer Set(VariableIndexer) Set variables values Declaration public VariableIndexer Set(VariableIndexer variables) Parameters Type Name Description VariableIndexer variables Variable indexer Returns Type Description VariableIndexer Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Variable.html": {
    "href": "api/XData.Variable.html",
    "title": "Class Variable | XData website",
    "keywords": "Class Variable Data object repository variable Inheritance Object Variable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData Assembly : XData.dll Syntax public sealed class Variable Constructors Variable(String, String) Data object repository variable constructor Declaration public Variable(string name, string val) Parameters Type Name Description String name Variable name String val Variable value Properties Name Variable name Declaration public string Name { get; } Property Value Type Description String Value Variable value Declaration public string Value { get; } Property Value Type Description String Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Implicit(KeyValuePair<String, String> to Variable) Implicit key value convertor Declaration public static implicit operator Variable(KeyValuePair<string, string> var) Parameters Type Name Description KeyValuePair < String , String > var Key value pair Returns Type Description Variable Data object variable Implicit(String[] to Variable) Implicit string array convertor Declaration public static implicit operator Variable(string[] var) Parameters Type Name Description String [] var String array [name, value] Returns Type Description Variable Data object variable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Trigger-1.html": {
    "href": "api/XData.Trigger-1.html",
    "title": "Delegate Trigger<T> | XData website",
    "keywords": "Delegate Trigger<T> Trigger logic delegate type Namespace : XData Assembly : XData.dll Syntax public delegate bool Trigger<T>(ref T obj, ref DataTriggerFlag flag) where T : class, IDataObject; Parameters Type Name Description T obj Object instance DataTriggerFlag flag Trigger routing flag Returns Type Description Boolean Success flag Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also BeforeDelete BeforeInsert BeforeUpdate AfterDelete AfterInsert AfterUpdate"
  },
  "api/XData.Mapping.PropertyAttribute.html": {
    "href": "api/XData.Mapping.PropertyAttribute.html",
    "title": "Class PropertyAttribute | XData website",
    "keywords": "Class PropertyAttribute Data object property attribute Inheritance Object System.Attribute PropertyBaseAttribute PropertyAttribute Inherited Members PropertyBaseAttribute.Source PropertyBaseAttribute.Flags PropertyBaseAttribute.NativeSqlType Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyAttribute : PropertyBaseAttribute Constructors PropertyAttribute(String, String) Data object property attribute Declaration public PropertyAttribute(string source = \"\", string fieldName = \"\") Parameters Type Name Description String source Source alias String fieldName Field name Exceptions Type Condition XDataRuntimeException Field name cannot be null or empty string Properties FieldName Field name Declaration public string FieldName { get; } Property Value Type Description String IsLink Property link flag Declaration public override bool IsLink { get; } Property Value Type Description Boolean False Overrides PropertyBaseAttribute.IsLink Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ProcedureAttribute.html": {
    "href": "api/XData.Mapping.ProcedureAttribute.html",
    "title": "Class ProcedureAttribute | XData website",
    "keywords": "Class ProcedureAttribute Data object SQL procedure / function attribute Inheritance Object System.Attribute DataSourceAttribute ProcedureAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class ProcedureAttribute : DataSourceAttribute Examples Procedure(\"C\", \"dbo.GetCustomers\", ProcedureType.Function) Constructors ProcedureAttribute(String, String, ProcedureType) Data object SQL procedure / function attribute Declaration public ProcedureAttribute(string alias, string name, ProcedureType type) Parameters Type Name Description String alias Procedure / function alias String name Procedure / function name ProcedureType type Stored procedure type Exceptions Type Condition XDataRuntimeException Procedure alias cannot be null or empty string XDataRuntimeException Procedure name cannot be null or empty string Properties Alias Procedure / function alias Set procedure alias as BaseSource Hint: Alias used with table-valued functions as from-structure alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias Name SQL stored procedure / function name WARNING! Specify full qualified name of procedure! Declaration public string Name { get; } Property Value Type Description String ProcedureType Stored procedure type Declaration public ProcedureType ProcedureType { get; } Property Value Type Description ProcedureType See Also ProcedureType Type Data source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType Procedure Overrides DataSourceAttribute.Type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DataTableAttribute InnerViewAttribute SubqueryAttribute ParameterAttribute ResultSetAttribute"
  },
  "api/XData.Mapping.Dynamic.ParameterDescription.html": {
    "href": "api/XData.Mapping.Dynamic.ParameterDescription.html",
    "title": "Class ParameterDescription | XData website",
    "keywords": "Class ParameterDescription SQL procedure / function parameter description Inheritance Object ParameterDescription Implements IParameterDescription Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public class ParameterDescription : IParameterDescription Properties Alias Procedure alias Declaration public string Alias { get; set; } Property Value Type Description String Binding Parameter XData binding name Declaration public string Binding { get; set; } Property Value Type Description String DbType Parameter database type Declaration public DbType DbType { get; set; } Property Value Type Description DbType DefaultValue Parameter default value Declaration public string DefaultValue { get; set; } Property Value Type Description String DefaultValueType Parameter default value type Declaration public DefaultType DefaultValueType { get; set; } Property Value Type Description DefaultType Direction Parameter direction Declaration public ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection Name Parameter name Declaration public string Name { get; set; } Property Value Type Description String NativeSqlType Parameter native SQL type Declaration public string NativeSqlType { get; set; } Property Value Type Description String Order Parameter order Declaration public int Order { get; set; } Property Value Type Description Int32 Scale Parameter scale Declaration public int Scale { get; set; } Property Value Type Description Int32 Size Parameter size Declaration public int Size { get; set; } Property Value Type Description Int32 Type Parameter mapped type Declaration public Type Type { get; set; } Property Value Type Description Type TypeIsArray Parameter is VARARRAY Declaration public bool TypeIsArray { get; set; } Property Value Type Description Boolean UdtSqlType Parameter user-defined-type definition Declaration public UdtSqlType UdtSqlType { get; set; } Property Value Type Description UdtSqlType Value Parameter value Declaration public object Value { get; set; } Property Value Type Description Object Methods Clone() Parameter clone Declaration public IParameterDescription Clone() Returns Type Description IParameterDescription Copy(Object) Parameter copy Declaration public IParameterDescription Copy(object value) Parameters Type Name Description Object value Parameter value Returns Type Description IParameterDescription Parameter description GetValue<T>() Parameter conversion Declaration public T GetValue<T>() Returns Type Description T Type Parameters Name Description T Conversion result type Implements IParameterDescription Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ITaggedExpression.html": {
    "href": "api/XData.Mapping.Dynamic.ITaggedExpression.html",
    "title": "Interface ITaggedExpression | XData website",
    "keywords": "Interface ITaggedExpression Object tagged expression interface Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface ITaggedExpression Properties Key Key value Declaration object Key { get; } Property Value Type Description Object KeyType Key type Declaration Type KeyType { get; } Property Value Type Description Type Value Value type Declaration Expression Value { get; } Property Value Type Description Expression Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ISubqueryFilterAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.ISubqueryFilterAdapter.html",
    "title": "Interface ISubqueryFilterAdapter | XData website",
    "keywords": "Interface ISubqueryFilterAdapter Subquery link filter description adapter Inherited Members IFilterAdapter.Combination(String, Combination, String) IFilterAdapter.Combination(String, Combination) Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface ISubqueryFilterAdapter : IFilterAdapter Methods SubqueryLink(String) Subquery link filter description Declaration IFilterDescription SubqueryLink(string subqueryProperty) Parameters Type Name Description String subqueryProperty Subquery property name to link with Returns Type Description IFilterDescription Filter description SubqueryLink(String, String) Subquery link filter description Declaration IFilterDescription SubqueryLink(string subqueryProperty, string property) Parameters Type Name Description String subqueryProperty Subquery property name to link with String property Base query property name to link with Returns Type Description IFilterDescription Filter description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ISubqueryFilterAdapter-2.html": {
    "href": "api/XData.Mapping.Dynamic.ISubqueryFilterAdapter-2.html",
    "title": "Interface ISubqueryFilterAdapter<T, TDObj> | XData website",
    "keywords": "Interface ISubqueryFilterAdapter<T, TDObj> Subquery link filter description adapter Inherited Members ISubqueryFilterAdapter<T>.SubqueryLink(Expression<Func<T, Object>>) ISubqueryFilterAdapter<T>.SubqueryLink(Expression<Func<T, Object>>, String) ISubqueryFilterAdapter.SubqueryLink(String) ISubqueryFilterAdapter.SubqueryLink(String, String) IFilterAdapter.Combination(String, Combination, String) IFilterAdapter.Combination(String, Combination) Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface ISubqueryFilterAdapter<T, TDObj> : ISubqueryFilterAdapter<T>, ISubqueryFilterAdapter, IFilterAdapter where T : class where TDObj : class Type Parameters Name Description T Repository data object type TDObj Subquery mapped type Methods SubqueryLink(Expression<Func<TDObj, Object>>) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with Returns Type Description IFilterDescription Filter description SubqueryLink(Expression<Func<TDObj, Object>>, Expression<Func<T, Object>>) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty, Expression<Func<T, object>> property) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with Expression < Func <T, Object >> property Base query property name expression to link with Returns Type Description IFilterDescription Filter description SubqueryLink(Expression<Func<TDObj, Object>>, String) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty, string property) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with String property Base query property name to link with Returns Type Description IFilterDescription Filter description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryDescription-1.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryDescription-1.html",
    "title": "Interface IRepositoryDescription<T> | XData website",
    "keywords": "Interface IRepositoryDescription<T> Dynamic repository structure description interface Inherited Members IQueryDescription.Type Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IRepositoryDescription<out T> : IQueryDescription where T : class, IDataObject, new() Type Parameters Name Description T Methods SetBaseTable(String) Set base table alias to repository dynamic mapping Declaration IRepositoryDescription<T> SetBaseTable(string baseTableAlias) Parameters Type Name Description String baseTableAlias Base table alias Returns Type Description IRepositoryDescription <T> Dynamic repository description SetContext(String) Set context to repository dynamic mapping Declaration IRepositoryDescription<T> SetContext(string context) Parameters Type Name Description String context Database context name Returns Type Description IRepositoryDescription <T> Dynamic repository description SetFlags(DataStructureFlag) Set flags to repository dynamic mapping Declaration IRepositoryDescription<T> SetFlags(DataStructureFlag flags) Parameters Type Name Description DataStructureFlag flags Data repository flags Returns Type Description IRepositoryDescription <T> Dynamic repository description SetLogicAssembly(String) Set server data logic assembly name to repository dynamic mapping Declaration IRepositoryDescription<T> SetLogicAssembly(string logicAssemblyName) Parameters Type Name Description String logicAssemblyName Server data logic assembly name Returns Type Description IRepositoryDescription <T> Dynamic repository description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryWithFlag.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryWithFlag.html",
    "title": "Interface IQueryWithFlag | XData website",
    "keywords": "Interface IQueryWithFlag Common-Table-Expression (WITH) flag Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IQueryWithFlag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryWithAdapter-1.html",
    "title": "Interface IQueryWithAdapter<TRoot> | XData website",
    "keywords": "Interface IQueryWithAdapter<TRoot> Common-Table-Expression (WITH) mapping attributes Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IQueryWithAdapter<TRoot> where TRoot : class Type Parameters Name Description TRoot Common-Table-Expression (WITH) initial subquery mapped type Methods Properties(Expression<Func<TRoot, Object>>[]) Common-Table-Expression (WITH) properties order Declaration IQueryWithFlag Properties(params Expression<Func<TRoot, object>>[] properties) Parameters Type Name Description Expression < Func <TRoot, Object >>[] properties Common-Table-Expression (WITH) properties expressions Returns Type Description IQueryWithFlag Common-Table-Expression (WITH) flag RecursiveType(WithRecursiveType) Common-Table-Expression (WITH) recursive link type attribute Declaration IQueryWithFlag RecursiveType(WithRecursiveType withType) Parameters Type Name Description WithRecursiveType withType Common-Table-Expression (WITH) recursive link type Returns Type Description IQueryWithFlag Common-Table-Expression (WITH) flag WithRecursive<TDobj>(String, IQueryDescription<TDobj>, Expression<Func<ISubqueryFilterAdapter<TRoot, TDobj>, IFilterDescription>>[]) Common-Table-Expression (WITH) recursive subqueries Declaration IQueryWithFlag WithRecursive<TDobj>(string alias, IQueryDescription<TDobj> query, params Expression<Func<ISubqueryFilterAdapter<TRoot, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Common-Table-Expression (WITH) recursive subquery alias IQueryDescription <TDobj> query Common-Table-Expression (WITH) recursive subquery description Expression < Func < ISubqueryFilterAdapter <TRoot, TDobj>, IFilterDescription >>[] filters Common-Table-Expression (WITH) recursive subquery links Returns Type Description IQueryWithFlag Common-Table-Expression (WITH) flag Type Parameters Name Description TDobj Common-Table-Expression (WITH) recursive subquery type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Dialect.SqlStringType.html": {
    "href": "api/XData.Database.Dialect.SqlStringType.html",
    "title": "Enum SqlStringType | XData website",
    "keywords": "Enum SqlStringType SQL dialect specific format strings types Namespace : XData.Database.Dialect Assembly : XData.dll Syntax public enum SqlStringType Fields Name Description AcquireBlob AcquireXml AfterDelete AfterInsert AfterUpdate All Any BeforeDelete BeforeInsert BeforeUpdate Ceiling CheckConcurrency Clear ClearComplete ClearDeclare ClearField ClearSaveKeys Coalesce CompleteInsert Concat Conditional Convert Date DateFormat DateTimeAdd DateTimeAddDays DateTimeAddHours DateTimeAddMilliseconds DateTimeAddMinutes DateTimeAddMonths DateTimeAddSeconds DateTimeAddYears DateTimeDaysInMonth DateTimeIsLeapYear Day DayOfWeek DayOfYear Days DaysTotal EmptyBlob EmptyGuid EmptyXml EndsWith Except ExtractXml ExtractXmlWithNamespaces FieldFormat Floor GetBlobSize GetForeignKey GroupConvert GroupField Hour Hours IndexOf InitInsert InsertValues Intersect IsNullOrEmpty IsNullOrWhiteSpace Length Lock LockPk LockPkJoin MaxSize Millisecond Minute Minutes ModifyedHintAfter ModifyedHintBefore ModifyedTableName Month Months NewGuid NoneSelect Now PadLeft PadRight Power Random Remove Returning Round RowId RowIdArray RowIdFill RowIterator SaveBlob SaveXml Second Seconds SelectField SelectHintBefore SequenceNextVal SqlParameter SqlScalarFunction SqlTableFunction Sqrt StartsWith Substring TableName TimeOfDay TimeSpanFormat ToBoolean ToDateTime Today ToDecimal ToInt16 ToInt32 ToInt64 ToString ToStringFormat ToXml TreeOrder Trim TrimEnd TrimStart TrueConstant UtcNow With WithRecursive XmlAsString Year Years Extension Methods SerializationExtensions.ToXml<SqlStringType>() CollectionsExtensions.SetValue<SqlStringType, T>(T) CollectionsExtensions.AsEnum<SqlStringType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<SqlStringType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.html": {
    "href": "api/XData.Database.Adapter.html",
    "title": "Namespace XData.Database.Adapter | XData website",
    "keywords": "Namespace XData.Database.Adapter Classes BaseDatabaseAdapter<TConnection, TParameter> Database adapter base class CallResult Stored procedure call result DatabaseAdapterAttribute Database adapter attribute Query SQL query QueryParam SQL query parameter QueryResult SQL query result QueryResultBase SQL query result StoredProcedure SQL stored procedure UdtSqlType User defined type (UDT) description Interfaces IDatabaseAdapter Database adapter basic interface IDatabaseAdapterMetadata Database adapter description interface"
  },
  "api/XData.Mapping.Dynamic.IFilterAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IFilterAdapter.html",
    "title": "Interface IFilterAdapter | XData website",
    "keywords": "Interface IFilterAdapter Filter description adapter Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IFilterAdapter Methods Combination(String, Combination) Filter combination description Declaration IFilterDescription Combination(string name, Combination combination) Parameters Type Name Description String name Filter combination name Combination combination Filter combination logic Returns Type Description IFilterDescription Filter description Combination(String, Combination, String) Filter combination description Declaration IFilterDescription Combination(string name, Combination combination, string parent) Parameters Type Name Description String name Filter combination name Combination combination Filter combination logic String parent Parent filter combination name Returns Type Description IFilterDescription Filter description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkFlag.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkFlag.html",
    "title": "Interface IExternalLinkFlag | XData website",
    "keywords": "Interface IExternalLinkFlag Dynamic structure external link flag interface Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IExternalLinkFlag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ActionAttribute.html": {
    "href": "api/XData.Mapping.ActionAttribute.html",
    "title": "Class ActionAttribute | XData website",
    "keywords": "Class ActionAttribute Data action attribute Inheritance Object System.Attribute ActionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public sealed class ActionAttribute : Attribute Remarks Used to assign one or more DataActionType to IDataLogic<T> action handler Hint: Use ActionOrder to apply execution order of multiple handlers marked ActionAttribute for same DataActionType Hint: Action handlers will executed on server side when using XData Application server Constructors ActionAttribute(DataActionType, Int32) Data action attribute Declaration public ActionAttribute(DataActionType type, int order = 0) Parameters Type Name Description DataActionType type Type of action (see DataActionType) Int32 order Action execution order Properties ActionOrder Action execution order Declaration public int ActionOrder { get; } Property Value Type Description Int32 ActionType Type of action (see DataActionType) Declaration public DataActionType ActionType { get; } Property Value Type Description DataActionType See Also DataActionType TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping-2.html": {
    "href": "api/XData.Mapping-2.html",
    "title": "Delegate Mapping<TFrom, T> | XData website",
    "keywords": "Delegate Mapping<TFrom, T> Mapping logic delegate type Namespace : XData Assembly : XData.dll Syntax public delegate void Mapping<in TFrom, T>(TFrom source, ref T result) where TFrom : class where T : class, IDataObject; Parameters Type Name Description TFrom source Source object instance T result Target object instance Type Parameters Name Description TFrom Source object type T Target object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Add<TFrom>(IQueryable<TFrom>, Mapping<TFrom, T>)"
  },
  "api/XData.Log.html": {
    "href": "api/XData.Log.html",
    "title": "Class Log | XData website",
    "keywords": "Class Log Log helper Inheritance Object Log Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public static class Log Methods Write(MessageType, Func<String>, Func<AdditionalInfo>[]) Write message to log Declaration public static void Write(MessageType msgType, Func<string> getMsgText, params Func<AdditionalInfo>[] getInfo) Parameters Type Name Description MessageType msgType Message type Func < String > getMsgText Get message text handler Func < AdditionalInfo >[] getInfo Get additional information handler Remarks Debug information omits until WriteDebugInfo not set to true"
  },
  "api/XData.LockAttachedHandler-1.html": {
    "href": "api/XData.LockAttachedHandler-1.html",
    "title": "Delegate LockAttachedHandler<T> | XData website",
    "keywords": "Delegate LockAttachedHandler<T> Lock object attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool LockAttachedHandler<in T>(T obj) where T : class, IDataObject; Parameters Type Name Description T obj Object instance Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.ProxyConfig.html": {
    "href": "api/XData.Interfaces.ProxyConfig.html",
    "title": "Class ProxyConfig | XData website",
    "keywords": "Class ProxyConfig Proxy configuration section Inheritance Object ProxyConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Interfaces Assembly : XData.dll Syntax public sealed class ProxyConfig Remarks WARNING! All attributes are required! Examples <proxy name=\"TEST\" dialect=\"MSSQL\" endpoint=\"XAppServer\"/> Properties EndpointName XData application server WCF endpoint name Declaration public string EndpointName { get; set; } Property Value Type Description String Name Proxy name Declaration public string Name { get; set; } Property Value Type Description String Remarks Mast be the same as Name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name EndpointName"
  },
  "api/XData.Interfaces.ISqlBuilder.html": {
    "href": "api/XData.Interfaces.ISqlBuilder.html",
    "title": "Interface ISqlBuilder | XData website",
    "keywords": "Interface ISqlBuilder SQL builder interface Namespace : XData.Interfaces Assembly : XData.dll Syntax public interface ISqlBuilder Properties DialectOptions Dialect options WARNING! Mast to be filled in constructor! Declaration DialectOptions DialectOptions { get; } Property Value Type Description DialectOptions Item[Enum] Predefined queries Declaration Query this[Enum i] { get; } Parameters Type Name Description Enum i Query enumerated index Property Value Type Description Query Query ParameterPrefix Parameter prefix in SQL dialect Declaration string ParameterPrefix { get; } Property Value Type Description String SqlTypes List of supported SQL types WARNING! Mast to be filled in constructor! Declaration DbType[] SqlTypes { get; } Property Value Type Description DbType [] TypeNames List of supported column type names WARNING! Mast to be filled in constructor! Declaration string[] TypeNames { get; } Property Value Type Description String [] TypeSynonyms List of supported type synonyms WARNING! Mast to be filled in constructor! Declaration string[] TypeSynonyms { get; } Property Value Type Description String [] Methods ExtractXmlQuery(String, String, String[], IComparable[], String, KeyValuePair<String, String>[]) Returns query to extract XML data by XPath expression Declaration Query ExtractXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue, string path, params KeyValuePair<string, string>[] namespaces) Parameters Type Name Description String table Table name String column XML column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String path XPath expression KeyValuePair < String , String >[] namespaces XPath namespaces Returns Type Description Query XPath result GetAcquireBlobQuery(String, String, IEnumerable<String>, IComparable[], String) Returns query to acquire blob data Declaration Query GetAcquireBlobQuery(string table, string column, IEnumerable<string> tablePrimaryKey, IComparable[] primaryKeyValue, string nativeSqlType = null) Parameters Type Name Description String table Table name String column Blob column name IEnumerable < String > tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String nativeSqlType Native SQL type name Returns Type Description Query Query GetAcquireXmlQuery(String, String, String[], IComparable[]) Returns query to acquire XML data Declaration Query GetAcquireXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue) Parameters Type Name Description String table Table name String column XML column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values Returns Type Description Query Query GetAllQuery(IDataStructure) Returns query to check compliance of all repository objects Hint: Used in XData LINQ expressions Declaration Query GetAllQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetAnyQuery(IDataStructure) Returns query to check existence of repository objects Hint: Used in XData LINQ expressions Declaration Query GetAnyQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetBlobSizeQuery(String, String, String[], IComparable[]) Returns query to get Large Object size Declaration Query GetBlobSizeQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue) Parameters Type Name Description String table Table name contained LOB String column LOB column name String [] tablePrimaryKey Primary key column names IComparable [] primaryKeyValue Primary key values Returns Type Description Query Query to get Large Object size GetCall(IDataStructure, String) Returns stored procedure call definition Declaration StoredProcedure GetCall(IDataStructure dataStructure, string userName) Parameters Type Name Description IDataStructure dataStructure Structure String userName User name Returns Type Description StoredProcedure Stored procedure definition GetClearQuery(IDataStructure) Returns query to clear all repository objects Declaration Query GetClearQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetCountQuery(IDataStructure) Returns query to select count of data objects in repository Declaration Query GetCountQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetDeleteQuery(IDataStructure, IDataObject, String, Boolean) Returns query to delete data object Declaration Query GetDeleteQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query GetInsertQuery(IDataStructure, IDataObject, String) Returns query to insert data object Declaration Query GetInsertQuery(IDataStructure structure, IDataObject data, string userName) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Returns Type Description Query Query GetLockQuery(IDataStructure) Returns query to lock single data object Declaration Query GetLockQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetParameterName(String) Formats field name as parameter name Declaration string GetParameterName(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description String Parameter name GetRefreshQuery(IDataStructure) Returns query to refresh single data object Declaration Query GetRefreshQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetSafeConvertExpression(Type, Expression, Expression) Safe convert expression Declaration Expression GetSafeConvertExpression(Type type, Expression dataRow, Expression fieldName) Parameters Type Name Description Type type Type of expression Expression dataRow Data row expression Expression fieldName Field name expression Returns Type Description Expression Expression GetSaveBlobQuery(String, String, IEnumerable<String>, IComparable[], ref Byte[], String) Returns query to save blob data Declaration Query GetSaveBlobQuery(string table, string column, IEnumerable<string> tablePrimaryKey, IComparable[] primaryKeyValue, ref byte[] body, string nativeSqlType = null) Parameters Type Name Description String table Table name String column Blob column name IEnumerable < String > tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values Byte [] body Blob body String nativeSqlType Native SQL type name Returns Type Description Query Query GetSaveXmlQuery(String, String, String[], IComparable[], ref String) Returns query to save XML data Declaration Query GetSaveXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue, ref string body) Parameters Type Name Description String table Table name String column XML column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String body Blob body Returns Type Description Query Query GetSelectQuery(IDataStructure, Boolean, Boolean) Returns query to select data objects Declaration Query GetSelectQuery(IDataStructure structure, bool markProperties = false, bool doNotSkip = false) Parameters Type Name Description IDataStructure structure Structure metadata Boolean markProperties Mark properties with comments Boolean doNotSkip Don't skip sources Returns Type Description Query Query GetUpdateQuery(IDataStructure, IDataObject, String, Boolean) Returns query to update data object Declaration Query GetUpdateQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query Init(String, IConfiguration, String) SQL builder initialization Declaration void Init(string context, IConfiguration config, string sequence) Parameters Type Name Description String context IConfiguration config String sequence SetQueryParameterValues(ref Query, SortedList<String, Object>) Set query parameter values Declaration void SetQueryParameterValues(ref Query query, SortedList<string, object> paramValues) Parameters Type Name Description Query query Query SortedList < String , Object > paramValues Parameter values Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.QueryResultBase.html": {
    "href": "api/XData.Database.Adapter.QueryResultBase.html",
    "title": "Class QueryResultBase | XData website",
    "keywords": "Class QueryResultBase SQL query result Inheritance Object QueryResultBase CallResult QueryResult Implements IEnumerable < QueryParam > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.dll Syntax public abstract class QueryResultBase : IEnumerable<QueryParam>, IEnumerable Constructors QueryResultBase() Query result constructor Declaration protected QueryResultBase() QueryResultBase(Int32, IEnumerable<QueryParam>) Query result constructor Declaration protected QueryResultBase(int affectedRows, IEnumerable<QueryParam> queryParams) Parameters Type Name Description Int32 affectedRows Affected rows count IEnumerable < QueryParam > queryParams Output parameters Properties AffectedRows Count of rows affected by query Declaration public int AffectedRows { get; } Property Value Type Description Int32 Item[Int32] Query parameters by index Declaration public QueryParam this[int i] { get; } Parameters Type Name Description Int32 i Parameter index Property Value Type Description QueryParam Query parameter Item[String] Query parameters by name Declaration public QueryParam this[string name] { get; } Parameters Type Name Description String name Parameter name Property Value Type Description QueryParam Query parameter ParamsCount Query parameters count Declaration public int ParamsCount { get; } Property Value Type Description Int32 Methods GetEnumerator() Query parameters enumeration Declaration public IEnumerator<QueryParam> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < QueryParam > Query parameters enumeration Init(Int32, IEnumerable<IDataParameter>) Query result initialization Declaration protected void Init(int affectedRows, IEnumerable<IDataParameter> queryParams) Parameters Type Name Description Int32 affectedRows Affected rows count IEnumerable < IDataParameter > queryParams Output parameters Init(Int32, IEnumerable<QueryParam>) Query result initialization Declaration protected void Init(int affectedRows, IEnumerable<QueryParam> queryParams) Parameters Type Name Description Int32 affectedRows Affected rows count IEnumerable < QueryParam > queryParams Output parameters Init(Int32, IDataParameterCollection) Query result initialization Declaration protected void Init(int affectedRows, IDataParameterCollection queryParams) Parameters Type Name Description Int32 affectedRows Affected rows count IDataParameterCollection queryParams Output parameters ParamInit(IDataParameter) Output parameter initialization Declaration protected abstract QueryParam ParamInit(IDataParameter parameter) Parameters Type Name Description IDataParameter parameter Output parameter Returns Type Description QueryParam Explicit Interface Implementations IEnumerable.GetEnumerator() Query parameters enumeration Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Query parameters enumeration Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.Adapter.Query.html": {
    "href": "api/XData.Database.Adapter.Query.html",
    "title": "Class Query | XData website",
    "keywords": "Class Query SQL query Inheritance Object Query Implements IEnumerable < QueryParam > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database.Adapter Assembly : XData.dll Syntax public sealed class Query : IEnumerable<QueryParam>, IEnumerable Constructors Query(String, CommandType, QueryParam[]) Query constructor Declaration public Query(string sql, CommandType type = CommandType.Text, params QueryParam[] par) Parameters Type Name Description String sql Sql expression CommandType type Command type QueryParam [] par Parameters Properties Item[Int32] Query parameters by index Declaration public QueryParam this[int i] { get; } Parameters Type Name Description Int32 i Parameter index Property Value Type Description QueryParam Query parameter Item[String] Query parameters by name Declaration public QueryParam this[string name] { get; set; } Parameters Type Name Description String name Parameter name Property Value Type Description QueryParam Query parameter Sql Query SQL expression Declaration public string Sql { get; } Property Value Type Description String Type Query command type Declaration public CommandType Type { get; } Property Value Type Description CommandType Methods GetEnumerator() Query parameters enumeration Declaration public IEnumerator<QueryParam> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < QueryParam > Query parameters enumeration ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString() Operators Implicit(String to Query) Query SQL expression Declaration public static implicit operator Query(string s) Parameters Type Name Description String s Sql expression Returns Type Description Query Query Explicit Interface Implementations IEnumerable.GetEnumerator() Query parameters enumeration Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Query parameters enumeration Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.Adapter.DatabaseAdapterAttribute.html": {
    "href": "api/XData.Database.Adapter.DatabaseAdapterAttribute.html",
    "title": "Class DatabaseAdapterAttribute | XData website",
    "keywords": "Class DatabaseAdapterAttribute Database adapter attribute Inheritance Object System.Attribute DatabaseAdapterAttribute Implements IDatabaseAdapterMetadata Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class DatabaseAdapterAttribute : Attribute, IDatabaseAdapterMetadata Constructors DatabaseAdapterAttribute(String) Database adapter attribute constructor Declaration public DatabaseAdapterAttribute(string adapterDatabase) Parameters Type Name Description String adapterDatabase Connection type Properties Database Database connection type Declaration public string Database { get; } Property Value Type Description String Implements IDatabaseAdapterMetadata Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.CustomMapping-1.html": {
    "href": "api/XData.CustomMapping-1.html",
    "title": "Delegate CustomMapping<T> | XData website",
    "keywords": "Delegate CustomMapping<T> Custom mapping delegate type Namespace : XData Assembly : XData.dll Syntax public delegate IRepositoryDescription<T> CustomMapping<out T>() where T : class, IDataObject, new(); Returns Type Description IRepositoryDescription <T> Success flag Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.HierarchyAttribute.html": {
    "href": "api/XData.Mapping.HierarchyAttribute.html",
    "title": "Class HierarchyAttribute | XData website",
    "keywords": "Class HierarchyAttribute Hierarchy attribute Inheritance Object System.Attribute HierarchyAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class HierarchyAttribute : Attribute Remarks Tables can be hierarchically liked to themselves. On every hierarchical link is possible to build hierarchy table, to simplify tree structure queries. It's alternative of ORACLE CONNECT BY PRIOR...START WITH construction for other database engines // Table T_TEST has parent_id field tree linked to test_id (T_TEST's pk) // Table L_TEST has two fields parent_id and child_id all linked to T_TEST.test_id // Table L_TEST contains all subtree relations inside T_TEST // For example: for T_TEST (test_id, parent_id): (1, null) : (2, 1) : (3, 2) // L_TEST will contain (parent_id, child_id): (1, 1) : (1, 2) : (1, 3) : (2, 2) : (2, 3) : (3, 3) [DataObject(\"T\"), DataTable(\"T_TEST\", \"T\"), Hierarchy(\"T\", \"L_TEST\", \"parent_id\", \"parent_id\", \"child_id\"), Column(\"TestId\", \"test_id\", typeof(long?), \"T\", Flags = DataPropertyFlag.Id)] WARNING! Hierarchy base table (T_TEST in example above) mast contain non complex primary key! Hint: Possible to describe multiple hierarchies across one table using different tree links Constructors HierarchyAttribute(String, String, String, String, String) Hierarchy attribute Declaration public HierarchyAttribute(string source, string treeTableName, string parent, string linkParent, string linkChild) Parameters Type Name Description String source Source table alias String treeTableName Link table name String parent Source table parent column name String linkParent Link table parent column name String linkChild Link table child column name Exceptions Type Condition XDataRuntimeException Source table alias cannot be null or empty string XDataRuntimeException Link table name cannot be null or empty string XDataRuntimeException Source table parent column name cannot be null or empty string XDataRuntimeException Link table parent column name cannot be null or empty string XDataRuntimeException Link table child column name cannot be null or empty string Properties LinkChild Link table child column name Declaration public string LinkChild { get; } Property Value Type Description String LinkParent Link table parent column name Declaration public string LinkParent { get; } Property Value Type Description String Parent Source table parent column name Declaration public string Parent { get; } Property Value Type Description String Source Source table alias Declaration public string Source { get; } Property Value Type Description String See Also Alias TreeTableName Link table name Declaration public string TreeTableName { get; } Property Value Type Description String Remarks Tree table contains links from tree node to all subtree nodes. TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.FilterCombinationAttribute.html": {
    "href": "api/XData.Mapping.FilterCombinationAttribute.html",
    "title": "Class FilterCombinationAttribute | XData website",
    "keywords": "Class FilterCombinationAttribute Data object filter combination (filter group) attribute Inheritance Object System.Attribute FilterCombinationAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class FilterCombinationAttribute : Attribute Remarks Filter combinations combine filters into named logical groups united by same logical operation (see Combination ) Default filter combination always exists. It have And combination and named as Empty Filter combination tree based on Parent property Constructors FilterCombinationAttribute(String) Data object filter combination (filter group) attribute constructor Declaration public FilterCombinationAttribute(string name) Parameters Type Name Description String name Name of filter combination (filter group) Exceptions Type Condition XDataRuntimeException Name of filter combination (filter group) cannot be null or empty string Properties Combination Filter combination (filter group) logical operation (And or Or) Declaration public Combination Combination { get; set; } Property Value Type Description Combination Name Name of filter combination (filter group) Declaration public string Name { get; } Property Value Type Description String Parent Parent filter combination (filter group) name Declaration public string Parent { get; set; } Property Value Type Description String TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.FilterBaseAttribute.html": {
    "href": "api/XData.Mapping.FilterBaseAttribute.html",
    "title": "Class FilterBaseAttribute | XData website",
    "keywords": "Class FilterBaseAttribute Base filter description attribute Inheritance Object System.Attribute FilterBaseAttribute FilterAttribute SubqueryLinkAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax public abstract class FilterBaseAttribute : Attribute Properties FilterType Filter type Declaration public abstract FilterType FilterType { get; } Property Value Type Description FilterType See Also FilterType Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.FilterAttribute.html": {
    "href": "api/XData.Mapping.FilterAttribute.html",
    "title": "Class FilterAttribute | XData website",
    "keywords": "Class FilterAttribute Base inner filter attribute Inheritance Object System.Attribute FilterBaseAttribute FilterAttribute ConstantFilterAttribute DictionaryFilterAttribute ExpressionFilterAttribute OptionalFilterAttribute RangeFilterAttribute Inherited Members FilterBaseAttribute.FilterType Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public abstract class FilterAttribute : FilterBaseAttribute Constructors FilterAttribute(String, String) Base filter attribute Declaration protected FilterAttribute(string source, string fieldName) Parameters Type Name Description String source Primary source alias String fieldName Primary field name Exceptions Type Condition XDataRuntimeException Primary source alias cannot be null or empty string XDataRuntimeException Primary field name cannot be null or empty string Properties Combination Filter combination (filter group) name Declaration public string Combination { get; set; } Property Value Type Description String See Also FilterCombinationAttribute FieldName Primary field name Declaration public string FieldName { get; } Property Value Type Description String Operation Filter operation Declaration public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation See Also FilterOperation Source Primary source alias Declaration public string Source { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also FilterCombinationAttribute LinkAttribute SubqueryLinkAttribute ConstantFilterAttribute DictionaryFilterAttribute SubqueryFilterAttribute RangeFilterAttribute ExpressionFilterAttribute RuntimeFilter"
  },
  "api/XData.Mapping.ExternalLinkAttribute.html": {
    "href": "api/XData.Mapping.ExternalLinkAttribute.html",
    "title": "Class ExternalLinkAttribute | XData website",
    "keywords": "Class ExternalLinkAttribute Data object external link to other (child) data objects attribute Inheritance Object System.Attribute ExternalLinkAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ExternalLinkAttribute : Attribute Remarks Used to organize master/detail relation between repositories Constructors ExternalLinkAttribute(Type, String, String, String) External link attribute Declaration public ExternalLinkAttribute(Type childType, string childProperty, string property = \"\", string filterName = \"\") Parameters Type Name Description Type childType Child data object description type String childProperty Child property to link String property Parent property contains value to link String filterName Filter name Exceptions Type Condition XDataRuntimeException Child data object description type cannot be null XDataRuntimeException Child property to link cannot be null or empty string Properties ChildLinkType Child linked property type Declaration public Type ChildLinkType { get; set; } Property Value Type Description Type Remarks Used when child repository linked through subquery ChildProperty Child property to link Declaration public string ChildProperty { get; } Property Value Type Description String ChildType Child data object type Declaration public Type ChildType { get; } Property Value Type Description Type Combination Filter combination (filter group) name Declaration public string Combination { get; set; } Property Value Type Description String See Also FilterCombinationAttribute DirectLink Direct link slave to selected tree node Declaration public bool DirectLink { get; set; } Property Value Type Description Boolean Remarks Used to show/hide subtree related items in slave view when master is tree When ShowSubtree = false - slave contains selected node child items only When ShowSubtree = true - selected node and it's subtree child items Works with ShowSubtree : External links marked as DirectLink is filled while ShowSubtree is false and omitted otherwise FilterName Filter name Declaration public string FilterName { get; } Property Value Type Description String Remarks If not assigned used FilterBy ChildProperty pattern MasterRefresh Refresh parent object notification on child submit Declaration public bool MasterRefresh { get; set; } Property Value Type Description Boolean Remarks Used when parent object contains calculated fields over child objects Nullable Filter null value handling Declaration public FilterNullable Nullable { get; set; } Property Value Type Description FilterNullable See Also FilterNullable Operation Filter operation Declaration public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation See Also FilterOperation PrimaryFilter Primary filter flag Declaration public bool PrimaryFilter { get; set; } Property Value Type Description Boolean See Also OptionalFilterAttribute PropertyName Property to link Declaration public string PropertyName { get; } Property Value Type Description String Remarks If not assigned used ChildProperty name TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.IConfiguration.html": {
    "href": "api/XData.Interfaces.IConfiguration.html",
    "title": "Interface IConfiguration | XData website",
    "keywords": "Interface IConfiguration XData configuration Namespace : XData.Interfaces Assembly : XData.dll Syntax public interface IConfiguration Examples <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> <!-- *** WARNING! configSections section with declaration of \"xdata\" is required and mast be first child section of configuration! --> <configSections> <section name=\"xdata\" type=\"System.Configuration.IgnoreSectionHandler\" /> </configSections> <!-- *** You can configure Your application to direct connect database OR use application server --> <!-- *** Endpoint required using application server only --> <!--<system.serviceModel> <client> <endpoint address=\"net.tcp://localhost:8733/AppServer/\" binding=\"netTcpBinding\" contract=\"XDataProxy.IAppServer\" name=\"XAppServer\" /> </client> </system.serviceModel>--> <!-- *** Connection strings required using direct connect only --> <connectionStrings> <add name=\"TEST\" connectionString=\"Data Source=(local);Initial Catalog=XDataTest;User Id=test;Password=test\" /> </connectionStrings> <!-- *** xdata section (see XDataConfiguration.DefaultContext, XDataConfiguration.AssemblyPath, XDataConfiguration.WriteDebugInfo, XDataConfiguration.LogWriter documentation) --> <xdata default=\"TEST\" assemblyPath=\".\\\" debug=\"false\" log=\"XData.Logging.Trace.TraceWriter, XData.Logging.Trace\"> <!-- *** Specific SQL data access adapter required using direct database access (see XDataConfiguration.Adapters documentation) --> <adapter name=\"MSSQL\" file=\"C:\\Projects\\Net40\\XData\\_Debug\\XMsSqlAdapter.dll\"/> <!-- *** Specific SQL dialect adapter (see XDataConfiguration.Dialects documentation) --> <dialect name=\"MSSQL\" file=\"C:\\Projects\\Net40\\XData\\_Debug\\XMsSqlDialect.dll\"/> <!-- *** Proxy adapter required using application server only --> <!--<adapter name=\"PROXY\" file=\"C:\\XData\\XProxyAdapter.dll\"/>--> <!-- *** Context can be configured by direct or proxy adapter according Your needs (see XDataConfiguration.Contexts, ContextConfig.SequenceNameRule documentation) --> <!--<context name=\"TEST\" adapter=\"PROXY\"/>--> <context name=\"TEST\" adapter=\"MSSQL\" sequence=\"XMyCustomLib.MyDbSequence, XMyCustomLib\"/> <!-- *** Context proxy configuration required using application server only (see XDataConfiguration.ProxyList documentation) --> <!--<proxy name=\"TEST\" adapter=\"MSSQL\" endpoint=\"XAppServer\" />--> </xdata> </configuration> Properties Adapters Registered adapters collection Declaration List<AdapterConfig> Adapters { get; } Property Value Type Description List < AdapterConfig > See Also AdapterConfig Contexts Registered contexts collection Declaration List<ContextConfig> Contexts { get; } Property Value Type Description List < ContextConfig > See Also ContextConfig DefaultContext Default context name Declaration string DefaultContext { get; } Property Value Type Description String Remarks WARNING! Required configuration attribute! See Also Context Context Dialects Registered SQL dialects collection Declaration List<DialectConfig> Dialects { get; } Property Value Type Description List < DialectConfig > See Also DialectConfig LifeTimeLimit XData objects lifetime limit (minutes) Declaration int LifeTimeLimit { get; } Property Value Type Description Int32 LogWriter Log writer class name Declaration string LogWriter { get; } Property Value Type Description String MonitoringContext Health monitoring context name Declaration string MonitoringContext { get; } Property Value Type Description String See Also Context Context ProxyList Registered proxy collection Declaration List<ProxyConfig> ProxyList { get; } Property Value Type Description List < ProxyConfig > See Also ProxyConfig SecurityContext Security context name Declaration string SecurityContext { get; } Property Value Type Description String See Also Context Context WriteDebugInfo Write debug info Declaration bool WriteDebugInfo { get; } Property Value Type Description Boolean Remarks Default value is false Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Adapters Dialects Contexts ProxyList DefaultContext WriteDebugInfo LogWriter"
  },
  "api/XData.IDataOptions.html": {
    "href": "api/XData.IDataOptions.html",
    "title": "Interface IDataOptions | XData website",
    "keywords": "Interface IDataOptions XData options interface Namespace : XData Assembly : XData.dll Syntax public interface IDataOptions Methods AddAdapter(String, String, IConfiguration) Add supported SQL adapter description Declaration IDataOptions AddAdapter(string name, string assemblyName, IConfiguration options = null) Parameters Type Name Description String name Adapter name String assemblyName Assembly name of adapter plugin IConfiguration options Adapter options (xml) see concrete adapter readme for details Returns Type Description IDataOptions XData options interface AddContext(String, String, String, String, Boolean, String, String) Add context description Declaration IDataOptions AddContext(string name, string dialect, string adapter, string connectionString, bool isDefault, string sequence = null, string concurrencyErrorId = null) Parameters Type Name Description String name Context name String dialect Dialect name String adapter Adapter or proxy name String connectionString Connection string Boolean isDefault Default context flag String sequence (optional) Assembly qualified type name implements ISequenceNameRule String concurrencyErrorId (optional) Concurrency error id Returns Type Description IDataOptions XData options interface AddDialect(String, String, IConfiguration) Add supported SQL dialect description Declaration IDataOptions AddDialect(string name, string assemblyName, IConfiguration options = null) Parameters Type Name Description String name Dialect name String assemblyName Assembly name of dialect plugin IConfiguration options Dialect options (xml) see concrete dialect readme for details Returns Type Description IDataOptions XData options interface AddProxy(String, String) Add proxy adapter description Declaration IDataOptions AddProxy(string name, string endpoint) Parameters Type Name Description String name Proxy name String endpoint WCF client endpoint name Returns Type Description IDataOptions XData options interface SetLifeTmeLimit(Int32) Set XData cache lifetime limit in seconds Declaration IDataOptions SetLifeTmeLimit(int seconds) Parameters Type Name Description Int32 seconds XData cache lifetime limit Returns Type Description IDataOptions XData options interface SetMonitoringContext(String) Set monitoring context (optional, manual configuration) Declaration IDataOptions SetMonitoringContext(string monitoringContext) Parameters Type Name Description String monitoringContext Returns Type Description IDataOptions XData options interface SetSecurityContext(String) Set security context (optional, manual configuration) Declaration IDataOptions SetSecurityContext(string securityContext) Parameters Type Name Description String securityContext Security context Returns Type Description IDataOptions XData options interface SetWriteDebugInfo(Boolean) Set logger write debug info flag (optional, manual configuration) Declaration IDataOptions SetWriteDebugInfo(bool writeDebugInfo = false) Parameters Type Name Description Boolean writeDebugInfo Write debug info to log Returns Type Description IDataOptions XData options interface UseCredentials(String, String, Nullable<Boolean>, String, String) Set database credentials Declaration IDataOptions UseCredentials(string dbServer = null, string dbSchema = null, bool? dbIntegratedSecurity = default(bool? ), string dbLogin = null, string dbPassword = null) Parameters Type Name Description String dbServer Server name or URI String dbSchema Database or schema name Nullable < Boolean > dbIntegratedSecurity Use integrated security String dbLogin Database user login String dbPassword Database user password Returns Type Description IDataOptions XData options interface Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IDataObject.html": {
    "href": "api/XData.IDataObject.html",
    "title": "Interface IDataObject | XData website",
    "keywords": "Interface IDataObject Data object interface Namespace : XData Assembly : XData.dll Syntax public interface IDataObject : ISqlObject Remarks Mapping domain object to database WARNING! Data object mapping requires DataObjectAttribute ! Hint: Use DataTableAttribute , SubqueryAttribute and InnerViewAttribute to map data object to data sources Hint: Use FilterAttribute 's specific successor to link data sources and apply filters to data Hint: Use ExternalLinkAttribute to declare master/slave relations between repositories Hint: Use Lob to map binary fields [Property(\"scan\", \"SC\", Flags = DataPropertyFlag.OuterFlag)] public Lob Scan { get; set; } Hint: Use Xml to map Xml fields [Property(\"source\", \"SR\", Flags = DataPropertyFlag.OuterFlag)] public Xml Source { get; set; } Hint: Use Link<TVal, TSrc> to map data link [Property(\"name\", \"S\"), DictionaryProperty(\"Name\", \"DocState\"), DictionaryProperty(\"Code\", \"DocStateCode\")] public Link<string, DocState> DocState { get; set; } Hint: Use ColumnAttribute to map data without declaring property (for example to declare Id ) [DataObject(\"S\"), DataTable(\"T_DOC_STATE\", \"S\"), Column(\"DocStateId\", \"doc_state_id\", typeof(long?), \"S\", Flags = DataPropertyFlag.Id)] Hint: Use PropertyExpressionAttribute or ColumnExpressionAttribute to use SQL expression or subquery as property (or mapped column) data source [Property(\"doc_amount\"), PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] public double? DocAmount { get { return this.GetProperty(() => DocAmount); } } Hint: Use PropertyDefaultAttribute or ColumnDefaultAttribute to set default value generation rule to property (or mapped column) [Property(\"doc_date\", \"D\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DocDate { get; set; } Hint: Use ReferenceAttribute to use inner view property in parent data object [PropertyLink(\"HistoryDate\", \"H\")] public DateTime? DocLastChange { get { return this.GetProperty(() => DocLastChange); } } Hint: Declare readonly fields as [PropertyLink(\"HistoryDate\", \"H\")] public DateTime? DocLastChange { get { return this.GetProperty(() => DocLastChange); } } Hint: Declare custom logic functions (see IDataLogic<T> and Execute<T>(ICollection<T>, String, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) ) as //generate unique action key and use it for mark it realization in IDataLogic<Invoice> [CustomAction(\"{ab12d6f0-69d0-4997-bb0b-5f5f7c0581d1}\")] public static CustomLogic<Invoice> TestCustomLogic; //using obj.Execute(() => Invoice.TestCustomLogic); Hint: Variables can be used as temporary values storage // store obj.GetRepository().Variables.Add(\"SomeName\", \"SomeValue\"); // and somewhere you can get it var something = obj.GetRepository().Variables[\"SomeName\"]; Hint: HierarchyAttribute can be used to fill and maintain hierarchy tables automatically // Table T_TEST has parent_id field tree linked to test_id (T_TEST's pk) // Table L_TEST has two fields parent_id and child_id all linked to T_TEST.test_id // Table L_TEST contains all subtree relations inside T_TEST // For example: for T_TEST (test_id, parent_id): (1, null) : (2, 1) : (3, 2) // L_TEST will contain (parent_id, child_id): (1, 1) : (1, 2) : (1, 3) : (2, 2) : (2, 3) : (3, 3) [DataObject(\"T\"), DataTable(\"T_TEST\", \"T\"), Hierarchy(\"T\", \"L_TEST\", \"parent_id\", \"parent_id\", \"child_id\"), Column(\"TestId\", \"test_id\", typeof(long?), \"T\", Flags = DataPropertyFlag.Id)] Examples [DataObject(\"T\"), DataTable(\"T_DOC_TYPE\", \"T\"), Column(\"DocTypeId\", \"doc_type_id\", typeof(long?), \"T\", Flags = DataPropertyFlag.Id)] public class DocType : IDataObject { [Property(\"name\", \"T\")] public string Name { get; set; } [Property(\"code\", \"T\")] public string Code { get; set; } } Extension Methods DataObjectExtensions.Modify<T>(T, Action<T>[]) DataObjectExtensions.GetProperties<T>(T, IEnumerable<String>, DataVersion) DataObjectExtensions.GetProperties<T>(T, String[]) DataObjectExtensions.GetProperties<T>(T, DataVersion, String[]) DataObjectExtensions.IsCleared<T>(T, String) DataObjectExtensions.IsChanged<T>(T, String) DataObjectExtensions.IsChanged<T>(T, Expression<Func<T, Object>>[]) DataObjectExtensions.IsEmpty<T>(T, String) DataObjectExtensions.IsEmpty<T>(T, Expression<Func<T, Object>>) DataObjectExtensions.GetProperty<TRet>(IDataObject, String) DataObjectExtensions.GetContext(IDataObject) DataObjectExtensions.GetLayer(IDataObject) DataObjectExtensions.GetRepositoryAlias(IDataObject) DataObjectExtensions.IsAttached(IDataObject, Type) DataObjectExtensions.GetState<T>(T) DataObjectExtensions.CheckState<T>(T, DataObjectState) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also IRepository <T> IDataLogic <T> CheckState<T> (T, DataObjectState ) SetDeleted<T>(T, Boolean) Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Serialize<T>(T) Restore<T>(T, SerializedData) GetProperties<T> (T, DataVersion , String []) GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) XData.DataObjectExtensions.GetProperty``1(``0,System.String,XData.DataVersion) GetRepository<T>(T) IsChanged<T> (T, Expression < Func <T, Object >>[]) IsEmpty<T> (T, Expression < Func <T, Object >>) IsCleared<T> (T, String ) SetCurrent<T>(T) Submit<T>(T, DataSubmitFlag) Lock<T>(T)"
  },
  "api/XData.IDataLogic-1.html": {
    "href": "api/XData.IDataLogic-1.html",
    "title": "Interface IDataLogic<T> | XData website",
    "keywords": "Interface IDataLogic<T> Data logic interface Namespace : XData Assembly : XData.dll Syntax public interface IDataLogic<T> where T : class, IDataObject Type Parameters Name Description T Remarks Marking interface for classes contains data aware logic of mapped objects Used to divide data aware logic from mapping Hint: Separating mapping and logic to different assemblies allows to run data aware logic on XData application server Hint: Application can use XData application server or direct connect to database depending of configuration (see IConfiguration ) Examples public abstract class InvoiceLogic : IDataLogic<Invoice> { [Action(DataActionType.BeforeClear)] public readonly static RepositoryTrigger<Invoice> ClearHistoryBatch = ((IRepository<Invoice> invoiceRepository, ref DataTriggerFlag flag) => DoSomething()); [CustomAction(\"{ab12d6f0-69d0-4997-bb0b-5f5f7c0581d1}\")] public static readonly CustomLogic<Invoice> TestCustomLogic = (objects => { return DoSomethingElse(); }); } Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also IDataObject InitRepository <T> InvalidateRepository <T> InitObject <T> InvalidateObject <T> Trigger <T> CustomLogic <T>"
  },
  "api/XData.Exceptions.XDataAdapterException.html": {
    "href": "api/XData.Exceptions.XDataAdapterException.html",
    "title": "Class XDataAdapterException | XData website",
    "keywords": "Class XDataAdapterException Adapter exception Inheritance Object Exception ApplicationException XDataException XDataAdapterException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Exceptions Assembly : XData.dll Syntax [Serializable] public class XDataAdapterException : XDataException, ISerializable Constructors XDataAdapterException(XDataAdapterExceptionType, String) Adapter exception Declaration public XDataAdapterException(XDataAdapterExceptionType type, string path) Parameters Type Name Description XDataAdapterExceptionType type Exception type String path Adapter file path XDataAdapterException(XDataAdapterExceptionType, String, Type) Adapter exception Declaration public XDataAdapterException(XDataAdapterExceptionType type, string details, Type adapterType) Parameters Type Name Description XDataAdapterExceptionType type Exception type String details Exception details Type adapterType Adapter type XDataAdapterException(XDataAdapterExceptionType, Type) Adapter exception Declaration public XDataAdapterException(XDataAdapterExceptionType type, Type adapterType) Parameters Type Name Description XDataAdapterExceptionType type Exception type Type adapterType Adapter type Properties AdapterType Adapter type Declaration public Type AdapterType { get; } Property Value Type Description Type Details Exception details Declaration public string Details { get; } Property Value Type Description String FilePath Adapter file path Declaration public string FilePath { get; } Property Value Type Description String Type Adapter exception type Declaration public XDataAdapterExceptionType Type { get; } Property Value Type Description XDataAdapterExceptionType Implements System.Runtime.Serialization.ISerializable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataVersion.html": {
    "href": "api/XData.DataVersion.html",
    "title": "Enum DataVersion | XData website",
    "keywords": "Enum DataVersion Version of data Namespace : XData Assembly : XData.dll Syntax public enum DataVersion Fields Name Description Actual Actual data version Original Original data version See Also GetProperties<T> (T, DataVersion , String []) GetProperties<T> (T, IEnumerable < String >, DataVersion ) GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) XData.DataObjectExtensions.GetProperty``1(``0,System.String,XData.DataVersion) Actual Original Extension Methods SerializationExtensions.ToXml<DataVersion>() CollectionsExtensions.SetValue<DataVersion, T>(T) CollectionsExtensions.AsEnum<DataVersion>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataVersion, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataTriggerFlag.html": {
    "href": "api/XData.DataTriggerFlag.html",
    "title": "Enum DataTriggerFlag | XData website",
    "keywords": "Enum DataTriggerFlag Data trigger result flags Namespace : XData Assembly : XData.dll Syntax [Flags] public enum DataTriggerFlag Fields Name Description None Standard trigger result Refresh Refresh representation layer flag Skip Skip standard submitting See Also Trigger <T> RepositoryTrigger <T> None Skip Refresh Extension Methods SerializationExtensions.ToXml<DataTriggerFlag>() CollectionsExtensions.SetValue<DataTriggerFlag, T>(T) CollectionsExtensions.AsEnum<DataTriggerFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataTriggerFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.RuntimeFilter.html": {
    "href": "api/XData.DataSource.Structure.RuntimeFilter.html",
    "title": "Class RuntimeFilter | XData website",
    "keywords": "Class RuntimeFilter Runtime value filter Inheritance Object RuntimeFilter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public sealed class RuntimeFilter Constructors RuntimeFilter(String, String) Runtime filter constructor Declaration public RuntimeFilter(string propertyName, string filterName = null) Parameters Type Name Description String propertyName Filter property name String filterName Filter name Properties Combination Filter combination name Declaration public string Combination { get; set; } Property Value Type Description String Name Filter name Declaration public string Name { get; } Property Value Type Description String Nullable Filter null value handling Declaration public FilterNullable Nullable { get; set; } Property Value Type Description FilterNullable Operation Filter operation Declaration public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation PrimaryFilter Primary filter flag Declaration public bool PrimaryFilter { get; set; } Property Value Type Description Boolean PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description String Operators Implicit(String to RuntimeFilter) Cast operator for runtime filter based on property Declaration public static implicit operator RuntimeFilter(string propertyName) Parameters Type Name Description String propertyName Property name Returns Type Description RuntimeFilter Implicit(FilterName to RuntimeFilter) Cast operator for named runtime filter Declaration public static implicit operator RuntimeFilter(FilterName filterName) Parameters Type Name Description FilterName filterName Filter name Returns Type Description RuntimeFilter Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.AdditionalInfo.html": {
    "href": "api/XData.Exceptions.AdditionalInfo.html",
    "title": "Class AdditionalInfo | XData website",
    "keywords": "Class AdditionalInfo Exception and log additional info Inheritance Object AdditionalInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Exceptions Assembly : XData.dll Syntax [Serializable] public sealed class AdditionalInfo Properties Name Additional info name Declaration public string Name { get; set; } Property Value Type Description String Value Additional info value Declaration public string Value { get; set; } Property Value Type Description String Operators Implicit(KeyValuePair<String, String> to AdditionalInfo) Exception additional info Declaration public static implicit operator AdditionalInfo(KeyValuePair<string, string> source) Parameters Type Name Description KeyValuePair < String , String > source Source key value pair Returns Type Description AdditionalInfo Exception additional info Implicit(String[] to AdditionalInfo) Exception additional info Declaration public static implicit operator AdditionalInfo(string[] source) Parameters Type Name Description String [] source Source string array Returns Type Description AdditionalInfo Exception additional info Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DialectOptions.html": {
    "href": "api/XData.DialectOptions.html",
    "title": "Enum DialectOptions | XData website",
    "keywords": "Enum DialectOptions SQL dialect options SequenceRequired WithSupported ReturningInResult StoredProceduresSupported ScalarFunctionsSupported TableFunctionsSupported ObjectParametersSupported TableParametersSupported ScalarFunctionsOutParametersAllowed TableOutParametersAllowed MultipleRecordsetProceduresSupported Namespace : XData Assembly : XData.dll Syntax [Flags] public enum DialectOptions Fields Name Description CheckConcurrencySupport Concurrency check supported ClearByRowIdArrays Clear statement used row id arrays InternalErrorCatch Concurrency SQL errors are catched and jammed in provider MultipleRecordsetProceduresSupported Multiple record set stored procedures are supported None No specific SQL dialect options declared ObjectParametersSupported User defined objects (UDT) are supported as procedure/function parameter types RegisterRecordsetRequired Output record set registering is required ReturningInResult Insert returned identity value as query result RowIteratorSupported Row iterator is supported SafeTypeConvert Safe type conversion required ScalarFunctionsOutParametersAllowed Scalar-valued SQL functions OUT parameters are supported ScalarFunctionsSupported Scalar-valued SQL functions are supported SequenceRequired Sequence is required to auto increment fields SequenceSupported Sequences are supported StoredProcedureResultAsExecuteScalar SQL function result value returned as Execute scalar result StoredProcedureResultFetch Stored procedure results fetched by multiple reader execute StoredProceduresSupported SQL stored procedures are supported TableFunctionsSupported Table-valued SQL functions are supported TableOutParametersAllowed Table types are supported as procedure/function OUT parameter types TableParametersSupported Table types are supported as procedure/function parameter types UdtAsReturnValueSupported SQL function can return UDT or Arrays WithInsideSubqueryNotSupported Common-Table-Expression (WITH) queries not supported inside subqueries WithSupported Common-Table-Expression (WITH) queries are supported WithUnionNotSupported Common-Table-Expression (WITH) recursive queries combination with UNION operation not supported Extension Methods SerializationExtensions.ToXml<DialectOptions>() CollectionsExtensions.SetValue<DialectOptions, T>(T) CollectionsExtensions.AsEnum<DialectOptions>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DialectOptions, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSubmitFlag.html": {
    "href": "api/XData.DataSubmitFlag.html",
    "title": "Enum DataSubmitFlag | XData website",
    "keywords": "Enum DataSubmitFlag Data submit options Namespace : XData Assembly : XData.dll Syntax [Flags] [DataContract] public enum DataSubmitFlag Fields Name Description Cascade Cascade submit IgnoreConcurrency Ignore concurrency conflicts None Standard submit Silent Silent submit See Also Submit(ref T, DataSubmitFlag) Submit(IEnumerable<T>, DataSubmitFlag) None Silent Cascade Extension Methods SerializationExtensions.ToXml<DataSubmitFlag>() CollectionsExtensions.SetValue<DataSubmitFlag, T>(T) CollectionsExtensions.AsEnum<DataSubmitFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataSubmitFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataStructureFlag.html": {
    "href": "api/XData.DataStructureFlag.html",
    "title": "Enum DataStructureFlag | XData website",
    "keywords": "Enum DataStructureFlag Data object structure flags Namespace : XData Assembly : XData.dll Syntax [Flags] public enum DataStructureFlag Fields Name Description Grouping Grouped Data object None Common editable Data object ReadOnly Read only Data object Tree Tree organized Data object See Also Flags None Tree Grouping ReadOnly Extension Methods SerializationExtensions.ToXml<DataStructureFlag>() CollectionsExtensions.SetValue<DataStructureFlag, T>(T) CollectionsExtensions.AsEnum<DataStructureFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataStructureFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryStructureAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructureAdapter.html",
    "title": "Interface IQueryStructureAdapter | XData website",
    "keywords": "Interface IQueryStructureAdapter Query structure mapping adapter interface Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IQueryStructureAdapter Methods CastTo<T>() Type cast modifier Declaration IQueryStructureAdapter CastTo<T>() Returns Type Description IQueryStructureAdapter Type Parameters Name Description T Type to cast Expr<TValue>(String, Expression<Func<IQueryStructureAdapter, TValue>>, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name Expression < Func < IQueryStructureAdapter , TValue>> expr Expression DbType dbType Expression database type Expression < Func < IExpressionPropertyAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only! See Also DataExpressionType DbType Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IExpressionPropertyAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name DataExpressionType type Expression source type String exprText Expression text DbType dbType Expression database type Expression < Func < IExpressionPropertyAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only! See Also DataExpressionType DbType Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Field<TValue>(Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(params Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description Expression < Func < IPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Field<TValue>(String, String, Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(string sourceAlias, string fieldName, params Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name Expression < Func < IPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Ref<TValue>(String, String, Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue>(string sourceAlias, string property, params Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Referenced property subquery alias String property Referenced property name Expression < Func < IPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IPropertyMappingAdapter, IStructureFlag>>[] attributes) where TDobj : class Parameters Type Name Description String sourceAlias Referenced property subquery alias Expression < Func <TDobj, Object >> property Referenced property name Expression < Func < IPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type TDobj Referenced inner view type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.Exists(IQueryStructureAdapter, String) QueryDescriptionExtensions.Case<T, TResult>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, TResult>>, TaggedExpression<T, TResult>[]) QueryDescriptionExtensions.DateDiff<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, DateTime>>, Expression<Func<IQueryStructureAdapter, DateTime>>, DateDiffKind) QueryDescriptionExtensions.HasFlag<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.SqlFn<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, Object>>[]) QueryDescriptionExtensions.SqlParam<TResult>(IQueryStructureAdapter, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) QueryDescriptionExtensions.SqlExpr<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, TResult>>[]) See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkDefinitionAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkDefinitionAdapter-1.html",
    "title": "Interface IExternalLinkDefinitionAdapter<T> | XData website",
    "keywords": "Interface IExternalLinkDefinitionAdapter<T> External link definition adapter Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IExternalLinkDefinitionAdapter<T> where T : class, IDataObject, new() Type Parameters Name Description T Parent data object type Methods ExternalLink<TChild>(Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[]) External link definition Declaration IExternalLinkDefinition ExternalLink<TChild>(params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) where TChild : class, IDataObject, new() Parameters Type Name Description Expression < Func < IExternalLinkAdapter <T, TChild>, IExternalLinkFlag >>[] linkFlags External link flags Returns Type Description IExternalLinkDefinition External link definition Type Parameters Name Description TChild External link repository data object type ExternalLink<TChild>(Expression<Func<IRepositoryStructureAdapter<TChild>, Object>>, Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[]) External link definition Declaration IExternalLinkDefinition ExternalLink<TChild>(Expression<Func<IRepositoryStructureAdapter<TChild>, object>> property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) where TChild : class, IDataObject, new() Parameters Type Name Description Expression < Func < IRepositoryStructureAdapter <TChild>, Object >> property Link property Expression < Func < IExternalLinkAdapter <T, TChild>, IExternalLinkFlag >>[] linkFlags External link flags Returns Type Description IExternalLinkDefinition External link definition Type Parameters Name Description TChild External link repository data object type ExternalLink<TChild>(String, Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[]) External link definition Declaration IExternalLinkDefinition ExternalLink<TChild>(string property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) where TChild : class, IDataObject, new() Parameters Type Name Description String property Link property Expression < Func < IExternalLinkAdapter <T, TChild>, IExternalLinkFlag >>[] linkFlags External link flags Returns Type Description IExternalLinkDefinition External link definition Type Parameters Name Description TChild External link repository data object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkDefinition.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkDefinition.html",
    "title": "Interface IExternalLinkDefinition | XData website",
    "keywords": "Interface IExternalLinkDefinition Dynamic structure external link definition interface Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IExternalLinkDefinition Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Lob.html": {
    "href": "api/XData.Mapping.Lob.html",
    "title": "Class Lob | XData website",
    "keywords": "Class Lob Blob field wrapper Inheritance Object Lob Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax public abstract class Lob Examples // declaration [Property(\"scan\", \"SC\", Flags = DataPropertyFlag.OuterFlag)] public Lob Scan { get; set; } // using byte[] scan = GetScanFileBody(); newInvoice.Scan += scan; // is the same as newInvoice.Scan.Value = scan; Properties Assigned Blob is value is changed from null value Declaration public abstract bool Assigned { get; } Property Value Type Description Boolean Cleared Blob is value is cleared Declaration public abstract bool Cleared { get; } Property Value Type Description Boolean EmptyKeys Blob table keys are empty Declaration public abstract bool EmptyKeys { get; } Property Value Type Description Boolean Value Blob value Declaration public abstract byte[] Value { get; set; } Property Value Type Description Byte [] Methods GetSize() Returns Lob size Declaration public abstract long GetSize() Returns Type Description Int64 Operators Addition(Lob, Byte[]) Set Lob value Declaration public static Lob operator +(Lob lob, byte[] body) Parameters Type Name Description Lob lob Lob Byte [] body Lob body Returns Type Description Lob Updated lob Implicit(Lob to Byte[]) Implicit Lob body extraction Declaration public static implicit operator byte[](Lob lob) Parameters Type Name Description Lob lob Lob property Returns Type Description Byte [] Lob body Extension Methods DataObjectExtensions.Modify(Lob, Action<Byte[]>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Value Addition(Lob, Byte[]) Implicit(Lob to Byte[]) Modify ( Lob , Action < Byte []>) Assigned Cleared EmptyKeys"
  },
  "api/XData.Mapping.LinkPropertyAttribute.html": {
    "href": "api/XData.Mapping.LinkPropertyAttribute.html",
    "title": "Class LinkPropertyAttribute | XData website",
    "keywords": "Class LinkPropertyAttribute Data object link property attribute Inheritance Object System.Attribute LinkPropertyAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public sealed class LinkPropertyAttribute : Attribute Remarks Used to declare source and destination properties to copy values when assigned Source Every link from DictSource to Property mast be declared as separated LinkPropertyAttribute WARNING! Applicable to Link<TVal, TSrc> typed properties only! Constructors LinkPropertyAttribute(String, String) Data object link property attribute Declaration public LinkPropertyAttribute(string dictSource = null, string property = null) Parameters Type Name Description String dictSource Dictionary source object property String property Property to fill Properties DictSource Dictionary source object property Declaration public string DictSource { get; } Property Value Type Description String Property Property to fill Declaration public string Property { get; set; } Property Value Type Description String TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.DictionaryFilterAttribute.html": {
    "href": "api/XData.Mapping.DictionaryFilterAttribute.html",
    "title": "Class DictionaryFilterAttribute | XData website",
    "keywords": "Class DictionaryFilterAttribute Data object dictionary filter attribute Inheritance Object System.Attribute FilterBaseAttribute FilterAttribute DictionaryFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class DictionaryFilterAttribute : FilterAttribute Remarks Filter by dictionary code (example: doc_type_id = (select doc_type_id from t_doc_type where code = 'INVOICE') ) WARNING! Dictionary restricted by single valued primary key! WARNING! Dictionary code mast be unique! Examples DictionaryFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\", \"D\") Constructors DictionaryFilterAttribute(String, String, String, String, String, String) Dictionary filter attribute Declaration public DictionaryFilterAttribute(string dictionaryTable, string dictionaryIdField, string dictionaryCodeField, string dictionaryValue, string source, string fieldName = \"\") Parameters Type Name Description String dictionaryTable Dictionary table name String dictionaryIdField Dictionary id field String dictionaryCodeField Dictionary code field String dictionaryValue Dictionary code value String source Filter source alias String fieldName Filter field name Exceptions Type Condition XDataRuntimeException Dictionary table name cannot be null or empty string XDataRuntimeException Dictionary id field cannot be null or empty string XDataRuntimeException Dictionary code field cannot be null or empty string XDataRuntimeException Dictionary code value cannot be null or empty string Properties DictionaryCode Dictionary code field Declaration public string DictionaryCode { get; } Property Value Type Description String DictionaryId Dictionary id field Declaration public string DictionaryId { get; } Property Value Type Description String DictionaryTable Dictionary table name Declaration public string DictionaryTable { get; } Property Value Type Description String DictionaryValue Dictionary code value Declaration public string DictionaryValue { get; } Property Value Type Description String FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Dictionary Overrides FilterBaseAttribute.FilterType IsVariableValue Variable name as filter value Declaration public bool IsVariableValue { get; set; } Property Value Type Description Boolean Remarks If true DictionaryValue contains data object variable name which value will be compared with Dictionary code TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Dictionary"
  },
  "api/XData.Mapping.DataTableAttribute.html": {
    "href": "api/XData.Mapping.DataTableAttribute.html",
    "title": "Class DataTableAttribute | XData website",
    "keywords": "Class DataTableAttribute Data object table attribute Inheritance Object System.Attribute DataSourceAttribute DataTableAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class DataTableAttribute : DataSourceAttribute Constructors DataTableAttribute(String, String) Data object table attribute Declaration public DataTableAttribute(string name, string alias) Parameters Type Name Description String name Table name String alias Table alias Exceptions Type Condition ArgumentException Table alias cannot be null or empty string XDataRuntimeException Data table alias is null or empty. Properties Alias Table alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias Name Table name Declaration public string Name { get; } Property Value Type Description String Parent Parent table alias Declaration public string Parent { get; set; } Property Value Type Description String Remarks Updatable tables mast be organized in update hierarchy linked by ParentAlias. Root table of update hierarchy is the data object base source (see BaseSource ) See Also Alias Type Data source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType Table Overrides DataSourceAttribute.Type TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.DataSourceAttribute.html": {
    "href": "api/XData.Mapping.DataSourceAttribute.html",
    "title": "Class DataSourceAttribute | XData website",
    "keywords": "Class DataSourceAttribute Base data object source attribute Inheritance Object System.Attribute DataSourceAttribute DataTableAttribute InnerViewAttribute ProcedureAttribute SubqueryAttribute WithAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public abstract class DataSourceAttribute : Attribute Properties Alias Data source alias Declaration public abstract string Alias { get; protected set; } Property Value Type Description String Type Data source type Declaration public abstract DataSourceType Type { get; } Property Value Type Description DataSourceType Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.DataObjectAttribute.html": {
    "href": "api/XData.Mapping.DataObjectAttribute.html",
    "title": "Class DataObjectAttribute | XData website",
    "keywords": "Class DataObjectAttribute Data object metadata attribute Inheritance Object System.Attribute DataObjectAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class DataObjectAttribute : Attribute Remarks WARNING! Required attribute! Constructors DataObjectAttribute(String) Data object metadata attribute Declaration public DataObjectAttribute(string baseSource = \"\") Parameters Type Name Description String baseSource Base table alias Remarks If Base table is empty - data object has no base table. WARNING! None based data objects are read only and can not contain any table! Properties BaseSource Base table alias Declaration public string BaseSource { get; } Property Value Type Description String Remarks Base table is modification allowed data source subtree root of data object See Also Alias Parent Context Context alias Declaration public string Context { get; set; } Property Value Type Description String See Also Context Flags Combination of DataObjectFlag values Declaration public DataStructureFlag Flags { get; set; } Property Value Type Description DataStructureFlag See Also DataStructureFlag LogicAssemblyName Data logic assembly name Declaration public string LogicAssemblyName { get; set; } Property Value Type Description String See Also IDataLogic <T> Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.ISqlObject.html": {
    "href": "api/XData.ISqlObject.html",
    "title": "Interface ISqlObject | XData website",
    "keywords": "Interface ISqlObject SQL (sub)query part interface Namespace : XData Assembly : XData.dll Syntax public interface ISqlObject Remarks Mapping object as subquery Hint: Use abstract classes to map subquery Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IRepository.html": {
    "href": "api/XData.IRepository.html",
    "title": "Interface IRepository | XData website",
    "keywords": "Interface IRepository Data repository (data object collection) basic interface Inherited Members IDataQuery.Alias IDataQuery.Layer IDataQuery.Context IDataQuery.Variables IQueryable.ElementType IQueryable.Expression IQueryable.Provider IEnumerable.GetEnumerator() IDisposable.Dispose() Namespace : XData Assembly : XData.dll Syntax public interface IRepository : IDataQuery, IOrderedQueryable, IQueryable, IEnumerable, IDisposable Properties Count Get repository object count Declaration long Count { get; } Property Value Type Description Int64 Editable Get editable state of repository objects Declaration bool Editable { get; } Property Value Type Description Boolean FixedQuery Data repository fixed query Declaration bool FixedQuery { get; set; } Property Value Type Description Boolean Remarks Used to cache recordset once (at first call) and have an access to cached data multiple times Hint: Useful when needed to read the same data multiple times according dynamic rules and all records count approximately equal or less then requests count Examples var q = dataScope.GetRepository<Some>().Where(x => x.SomeField == 1); q.FixedQuery = true; q.FirstOrDefault(x => x.OtherField == 3); //Queried across the cached data HasCurrentRecord Check current record is assigned Declaration bool HasCurrentRecord { get; } Property Value Type Description Boolean Manual Manual repository flag Declaration bool Manual { get; set; } Property Value Type Description Boolean Remarks Manual repositories can be filled by attached objects only Hint: Use manual repositories to build logic filled repositories Hint: Use manual repositories as mock repositories for testing Hint: Object attaching (see Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) ) set Manual property to True automatically WARNING! Dettach objects (see Dettach(Predicate<T>) ) NOT set Manual property to False automatically! See Also Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) Dettach(Predicate<T>) SetAttachedHandlers(ref T, AttachedHandler<T>[]) SetAttachedHandlers(RepositoryAttachedHandler<T>[]) ShowSubtree Data repository tree modifier Declaration bool ShowSubtree { get; set; } Property Value Type Description Boolean Remarks Used to show/hide subtree related items in slave view when master is tree When ShowSubtree = false - slave contains selected node child items only When ShowSubtree = true - selected node and it's subtree child items Works with DirectLink : External links marked as DirectLink is filled while ShowSubtree is false and omitted otherwise See Also DirectLink Methods Clear(DataSubmitFlag) Clear repository objects Declaration bool Clear(DataSubmitFlag flag = DataSubmitFlag.None) Parameters Type Name Description DataSubmitFlag flag Returns Type Description Boolean Remarks All objects corresponded current repository limitations will be deleted through single operation WARNING! Trigger logic BeforeDelete and AfterDelete are not used in this case! Use BeforeClear and AfterClear instead! CloseChilds() Close child repositories Declaration void CloseChilds() DetachChild<TChild>(String) Detach child repository Declaration void DetachChild<TChild>(string alias = null) where TChild : class, IDataObject, new() Parameters Type Name Description String alias Type Parameters Name Description TChild FindParent<TParent>(out IRepository<TParent>, String) Find parent repository Declaration bool FindParent<TParent>(out IRepository<TParent> parent, string alias = null) where TParent : class, IDataObject, new() Parameters Type Name Description IRepository <TParent> parent Parent repository String alias Parent repository alias Returns Type Description Boolean Find success Type Parameters Name Description TParent Parent repository type GetChild<TChild>(String, ISecuritySession, Variable[]) Get a child repository Declaration IRepository<TChild> GetChild<TChild>(string alias = null, ISecuritySession security = null, params Variable[] variables) where TChild : class, IDataObject, new() Parameters Type Name Description String alias Child alias ISecuritySession security Security session Variable [] variables Child variables Returns Type Description IRepository <TChild> Repository Type Parameters Name Description TChild Child type Remarks If child repository not exists it will be created and linked to base repository as a child When alias parameter value is not set child object type name used as child repository alias See Also DetachChild<TChild>(String) CloseChilds() Refresh() Refresh repository data cache Declaration void Refresh() Extension Methods DataObjectExtensions.GetParameter<T>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also IRepository <T>"
  },
  "api/XData.IRepository-1.html": {
    "href": "api/XData.IRepository-1.html",
    "title": "Interface IRepository<T> | XData website",
    "keywords": "Interface IRepository<T> Data repository (data object collection) type specific interface Inherited Members IDataQuery<T>.GetFilterValue(RuntimeFilter) IEnumerable<T>.GetEnumerator() IRepository.ShowSubtree IRepository.FixedQuery IRepository.DetachChild<TChild>(String) IRepository.Clear(DataSubmitFlag) IRepository.CloseChilds() IRepository.Refresh() IRepository.GetChild<TChild>(String, ISecuritySession, Variable[]) IRepository.FindParent<TParent>(IRepository<TParent>, String) IRepository.Count IRepository.Editable IRepository.HasCurrentRecord IRepository.Manual IDataQuery.Alias IDataQuery.Layer IDataQuery.Context IDataQuery.Variables IQueryable.ElementType IQueryable.Expression IQueryable.Provider IDisposable.Dispose() Namespace : XData Assembly : XData.dll Syntax public interface IRepository<T> : IDataQuery<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IRepository, IDataQuery, IOrderedQueryable, IQueryable, IEnumerable, IDisposable where T : class, IDataObject Type Parameters Name Description T Remarks Hint: Its possible to use any DI container with XData: // example with Autofac syntax // register Container.Register(() => dataScope.GetRepository<Invoice>()).As<IRepository<Invoice>>(); Container.Register(() => dataScope.GetRepository<Invoice>().GetChild<InvoiceSpec>()).As<IRepository<InvoiceSpec>>(); // resolve var spec = Container.Resolve<IRepository<InvoiceSpec>>(); //spec is linked with Invoice repository as a slave! Properties Current Get/set current data object Declaration T Current { get; set; } Property Value Type Description T Current data object instance Exceptions Type Condition XDataQueryStructureException object not mapped properly. Methods Add<TFrom>(IQueryable<TFrom>, Mapping<TFrom, T>) Copy objects from source repository Declaration bool Add<TFrom>(IQueryable<TFrom> source, Mapping<TFrom, T> mapping = null) where TFrom : class Parameters Type Name Description IQueryable <TFrom> source Source repository Mapping <TFrom, T> mapping Data mapping Returns Type Description Boolean Success flag Type Parameters Name Description TFrom Exceptions Type Condition XDataRuntimeException \"source\" parameter is null. XDataQueryStructureException mapping error. See Also Mapping <TFrom, T> Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) Attach object to repository Declaration IRepository<T> Attach(T obj, DataObjectState state = DataObjectState.Original, IEnumerable<KeyValuePair<string, object>> originalValues = null, params AttachedHandler<T>[] handlers) Parameters Type Name Description T obj Object instance DataObjectState state Object state IEnumerable < KeyValuePair < String , Object >> originalValues Original property values AttachedHandler <T>[] handlers Attached handlers Returns Type Description IRepository <T> Repository Remarks Hint: Object attaching set Manual property to True automatically Hint: The originalValues parameter can contain only necessary not null valued properties Hint: Use SetValue<TKey, T>(TKey, T) to fill originalValues parameter Hint: Use AttachedHandler<T> convert operators to attach object specific handlers (SubmitObjectAttachedHandler<Invoice>)((ref Invoice i, DataSubmitFlag f) => true) WARNING! Use repository SetAttachedHandlers(RepositoryAttachedHandler<T>[]) method to apply same handler for all objects! Exceptions Type Condition XDataQueryStructureException no DataObjectAttribute found in data object mapping. XDataRuntimeException type loading error. See Also SetValue<TKey, T> (TKey, T) Dettach(Predicate<T>) AttachNewObjects(IEnumerable<T>, AttachedHandler<T>[]) Attach object to repository Declaration IEnumerable<T> AttachNewObjects(IEnumerable<T> source, params AttachedHandler<T>[] handlers) Parameters Type Name Description IEnumerable <T> source Object sequence AttachedHandler <T>[] handlers Attached handlers Returns Type Description IEnumerable <T> Repository Remarks Hint: Object attaching set Manual property to True automatically Hint: The originalValues parameter can contain only necessary not null valued properties Hint: Use SetValue<TKey, T>(TKey, T) to fill originalValues parameter Hint: Use AttachedHandler<T> convert operators to attach object specific handlers (SubmitObjectAttachedHandler<Invoice>)((ref Invoice i, DataSubmitFlag f) => true) WARNING! Use repository SetAttachedHandlers(RepositoryAttachedHandler<T>[]) method to apply same handler for all objects! Exceptions Type Condition XDataQueryStructureException no DataObjectAttribute found in data object mapping. XDataRuntimeException type loading error. See Also SetValue<TKey, T> (TKey, T) Dettach(Predicate<T>) Clear(Expression<Func<T, Boolean>>, DataSubmitFlag) Clear repository objects Declaration bool Clear(Expression<Func<T, bool>> predicate, DataSubmitFlag flag = DataSubmitFlag.None) Parameters Type Name Description Expression < Func <T, Boolean >> predicate DataSubmitFlag flag Returns Type Description Boolean Remarks All objects corresponded current repository limitations will be deleted through single operation WARNING! Trigger logic BeforeDelete and AfterDelete are not used in this case! Use BeforeClear and AfterClear instead! Exceptions Type Condition XDataQueryStructureException no DataObjectAttribute found in data object mapping. XDataRuntimeException type loading error. ClearAttachedObjects() Clear attached objects Declaration IRepository<T> ClearAttachedObjects() Returns Type Description IRepository <T> Repository Remarks WARNING! Clear attached objects NOT set Manual property to False automatically! Exceptions Type Condition XDataQueryStructureException no DataObjectAttribute found in data object mapping. XDataRuntimeException type loading error. Dettach(Predicate<T>) Dettach virtual objects from repository Declaration IRepository<T> Dettach(Predicate<T> predicate) Parameters Type Name Description Predicate <T> predicate Object search predicate to detach Returns Type Description IRepository <T> Repository Exceptions Type Condition XDataQueryStructureException no DataObjectAttribute found in data object mapping. XDataRuntimeException type loading error. See Also Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) Dettach(Predicate<T>) Execute(String, IEnumerable<T>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over object instances Declaration bool Execute(string key, IEnumerable<T> objects, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) Parameters Type Name Description String key Logic key IEnumerable <T> objects Object instances IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag Exceptions Type Condition XDataQueryStructureException no DataObjectAttribute found in data object mapping. XDataRuntimeException type loading error. See Also CustomLogic <T> Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Execute<T>(ICollection<T>, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Lock(T) Lock object in database Declaration bool Lock(T obj) Parameters Type Name Description T obj Data object instance Returns Type Description Boolean Success flag Exceptions Type Condition XDataRuntimeException \"obj\" parameter is null. See Also Lock<T>(T) New() Get new instance of data object Declaration T New() Returns Type Description T Data object instance Exceptions Type Condition XDataQueryStructureException object not mapped properly. New(Action<T>[]) Get new instance of data object Declaration T New(params Action<T>[] init) Parameters Type Name Description Action <T>[] init Data object initialization actions Returns Type Description T Data object instance Exceptions Type Condition XDataQueryStructureException object not mapped properly. Refresh(ref T) Refresh object data from database Declaration bool Refresh(ref T obj) Parameters Type Name Description T obj Data object instance Returns Type Description Boolean Success flag Exceptions Type Condition XDataRuntimeException \"obj\" parameter is null. XDataQueryStructureException object not mapped properly. See Also Refresh<T>(T) Reset() Reset repository structure and filter values Declaration IRepository<T> Reset() Returns Type Description IRepository <T> Self repository link Exceptions Type Condition XDataQueryStructureException no DataObjectAttribute found in data object mapping. XDataRuntimeException type loading error. See Also RuntimeFilter GetFilterValue ( RuntimeFilter ) SetFilterValue(RuntimeFilter, Object) SetAttachedHandlers(ref T, AttachedHandler<T>[]) Attach extra handlers to single object Declaration void SetAttachedHandlers(ref T obj, params AttachedHandler<T>[] handlers) Parameters Type Name Description T obj Object instance AttachedHandler <T>[] handlers Attached handlers Remarks Hint: Use AttachedHandler<T> convert operators to attach object specific handlers (SubmitObjectAttachedHandler<Invoice>)((ref Invoice i, DataSubmitFlag f) => true) WARNING! Use repository SetAttachedHandlers(RepositoryAttachedHandler<T>[]) method to apply same handler for all objects! Exceptions Type Condition XDataQueryStructureException no DataObjectAttribute found in data object mapping. XDataRuntimeException type loading error. See Also Attach(T, DataObjectState, IEnumerable<KeyValuePair<String, Object>>, AttachedHandler<T>[]) SetAttachedHandlers(RepositoryAttachedHandler<T>[]) SetAttachedHandlers<T>(T, AttachedHandler<T>[]) SetAttachedHandlers(RepositoryAttachedHandler<T>[]) Attach extra handlers to repository Declaration IRepository<T> SetAttachedHandlers(params RepositoryAttachedHandler<T>[] handlers) Parameters Type Name Description RepositoryAttachedHandler <T>[] handlers Attached handlers Returns Type Description IRepository <T> Repository Remarks Hint: Use RepositoryAttachedHandler<T> convert operators to attach object specific handlers (SubmitObjectAttachedHandler<Invoice>)((ref Invoice i, DataSubmitFlag f) => true) Exceptions Type Condition XDataQueryStructureException no DataObjectAttribute found in data object mapping. XDataRuntimeException type loading error. SetFilterValue(RuntimeFilter, Object) Set metadata defined RuntimeFilter value Declaration IRepository<T> SetFilterValue(RuntimeFilter filter, object val) Parameters Type Name Description RuntimeFilter filter Filter Object val Filter value Returns Type Description IRepository <T> Self repository link Remarks Hint: Set val = null to clear filter Exceptions Type Condition XDataRuntimeException \"filter\" parameter is null. See Also RuntimeFilter Reset() GetFilterValue ( RuntimeFilter ) Submit(ref T, DataSubmitFlag) Save single data object changes Declaration bool Submit(ref T obj, DataSubmitFlag flag = DataSubmitFlag.None) Parameters Type Name Description T obj Data object instance DataSubmitFlag flag Submit flag Returns Type Description Boolean Success flag Exceptions Type Condition XDataRuntimeException \"objects\" is null. See Also Submit<T>(T, DataSubmitFlag) Submit(IEnumerable<T>, DataSubmitFlag) Save multiple data objects changes Declaration bool Submit(IEnumerable<T> objects, DataSubmitFlag flag = DataSubmitFlag.None) Parameters Type Name Description IEnumerable <T> objects Data object sequence DataSubmitFlag flag Submit flag Returns Type Description Boolean Success flag Exceptions Type Condition XDataRuntimeException \"objects\" is null or empty sequence. See Also DataSubmitFlag Events OnCurrentObjectChanged Event fired when repository current object is changed Declaration event CurrentObjectChanged<T> OnCurrentObjectChanged Event Type Type Description CurrentObjectChanged <T> Exceptions Type Condition XDataRuntimeException custom logic fires exception. OnCurrentObjectChanging Event fired when repository current object changing occurred Declaration event CurrentObjectChanging<T> OnCurrentObjectChanging Event Type Type Description CurrentObjectChanging <T> Exceptions Type Condition XDataRuntimeException custom logic fires exception. OnInit Event fired when repository is initialized Declaration event InitRepository<T> OnInit Event Type Type Description InitRepository <T> Exceptions Type Condition XDataRuntimeException custom logic fires exception. OnInitObject Event fired when object is initialized Declaration event InitObject<T> OnInitObject Event Type Type Description InitObject <T> Exceptions Type Condition XDataRuntimeException custom logic fires exception. OnInvalidate Event fired when repository need to be refreshed Declaration event InvalidateRepository<T> OnInvalidate Event Type Type Description InvalidateRepository <T> Exceptions Type Condition XDataRuntimeException custom logic fires exception. OnInvalidateObject Event fired when object need to be refreshed Declaration event InvalidateObject<T> OnInvalidateObject Event Type Type Description InvalidateObject <T> Exceptions Type Condition XDataRuntimeException custom logic fires exception. Extension Methods DataObjectExtensions.AsString<T>(IQueryable<T>) DataObjectExtensions.GetParameter<T>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder) See Also IDataObject AsString<T> ( IQueryable <T>) GetRepository<T>(T) GetRepository<T>(String, String, ISecuritySession, Variable[])"
  },
  "api/XData.IDataEngine.html": {
    "href": "api/XData.IDataEngine.html",
    "title": "Interface IDataEngine | XData website",
    "keywords": "Interface IDataEngine XData engine interface Namespace : XData Assembly : XData.dll Syntax public interface IDataEngine Properties Configuration XData configuration object Declaration IConfiguration Configuration { get; } Property Value Type Description IConfiguration See Also IConfiguration Methods GetDataScope(Guid, String, Boolean) Request existing or create data scope Declaration IDataScope GetDataScope(Guid layer, string defaultContext = null, bool throwIfNotFound = false) Parameters Type Name Description Guid layer Data scope layer String defaultContext Default context of scope (if nof found) Boolean throwIfNotFound Throw an exception when data scope is not found Returns Type Description IDataScope Data scope See Also IDataScope NewDataScope(String) Create new data scope Declaration IDataScope NewDataScope(string defaultContext = null) Parameters Type Name Description String defaultContext Default context of scope Returns Type Description IDataScope Data scope See Also IDataScope ResetAllDictionaries() Reset all dictionaries cache Declaration void ResetAllDictionaries() See Also GetDictionaryValue<T>(Expression<Func<T, Boolean>>, String, String, ISecuritySession, Variable[]) ResetDictionaryCache<T>() Reset single dictionary cache Declaration void ResetDictionaryCache<T>() where T : class, IDataObject Type Parameters Name Description T Dictionary type See Also GetDictionaryValue<T>(Expression<Func<T, Boolean>>, String, String, ISecuritySession, Variable[]) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.GetXmlAttachedHandler.html": {
    "href": "api/XData.GetXmlAttachedHandler.html",
    "title": "Delegate GetXmlAttachedHandler | XData website",
    "keywords": "Delegate GetXmlAttachedHandler Get Xml attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool GetXmlAttachedHandler(string property, IComparable[] primaryKeyValue, out string xml); Parameters Type Name Description String property Xml property name IComparable [] primaryKeyValue Xml table primary key values String xml Xml string Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.GetLobSizeAttachedHandler.html": {
    "href": "api/XData.GetLobSizeAttachedHandler.html",
    "title": "Delegate GetLobSizeAttachedHandler | XData website",
    "keywords": "Delegate GetLobSizeAttachedHandler Get Lob size attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool GetLobSizeAttachedHandler(string property, IComparable[] primaryKeyValue, out long size); Parameters Type Name Description String property Lob property name IComparable [] primaryKeyValue Lob table primary key values Int64 size Lob body size Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.GetLobAttachedHandler.html": {
    "href": "api/XData.GetLobAttachedHandler.html",
    "title": "Delegate GetLobAttachedHandler | XData website",
    "keywords": "Delegate GetLobAttachedHandler Get Lob attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool GetLobAttachedHandler(string property, IComparable[] primaryKeyValue, out byte[] body); Parameters Type Name Description String property Lob property name IComparable [] primaryKeyValue Lob table primary key values Byte [] body Lob body Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.QueryResult.html": {
    "href": "api/XData.Database.Adapter.QueryResult.html",
    "title": "Class QueryResult | XData website",
    "keywords": "Class QueryResult SQL query result Inheritance Object QueryResultBase QueryResult Implements IEnumerable < QueryParam > IEnumerable Inherited Members QueryResultBase.AffectedRows QueryResultBase.Item[Int32] QueryResultBase.Item[String] QueryResultBase.ParamsCount QueryResultBase.Init(Int32, IDataParameterCollection) QueryResultBase.Init(Int32, IEnumerable<IDataParameter>) QueryResultBase.Init(Int32, IEnumerable<QueryParam>) QueryResultBase.GetEnumerator() QueryResultBase.IEnumerable.GetEnumerator() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.dll Syntax public sealed class QueryResult : QueryResultBase, IEnumerable<QueryParam>, IEnumerable Constructors QueryResult(Query, Int32, IEnumerable<QueryParam>) SQL query result constructor Declaration public QueryResult(Query query, int affectedRows, IEnumerable<QueryParam> queryParams) Parameters Type Name Description Query query Query instance Int32 affectedRows Affected rows IEnumerable < QueryParam > queryParams Query parameter sequence QueryResult(Query, Int32, IDataParameterCollection) SQL query result constructor Declaration public QueryResult(Query query, int affectedRows, IDataParameterCollection queryParams) Parameters Type Name Description Query query Query instance Int32 affectedRows Affected rows IDataParameterCollection queryParams Query parameters Methods ParamInit(IDataParameter) Update out parameter value Declaration protected override QueryParam ParamInit(IDataParameter parameter) Parameters Type Name Description IDataParameter parameter Parameter Returns Type Description QueryParam Query parameter Overrides QueryResultBase.ParamInit(IDataParameter) Exceptions Type Condition XDataRuntimeException Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.Adapter.IDatabaseAdapter.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapter.html",
    "title": "Interface IDatabaseAdapter | XData website",
    "keywords": "Interface IDatabaseAdapter Database adapter basic interface Inherited Members IDisposable.Dispose() Namespace : XData.Database.Adapter Assembly : XData.dll Syntax public interface IDatabaseAdapter : IDisposable Properties ConnectType Database connection type Declaration string ConnectType { get; } Property Value Type Description String NotSupported Dialect options not supported by adapter Declaration DialectOptions NotSupported { get; } Property Value Type Description DialectOptions Methods BeginTransaction(Guid, Boolean, IsolationLevel) Begin transaction Declaration string BeginTransaction(Guid layer, bool read = false, IsolationLevel isolation = IsolationLevel.ReadCommitted) Parameters Type Name Description Guid layer Layer Boolean read Read only transaction flag IsolationLevel isolation Transaction isolation level Returns Type Description String Success flag Exceptions Type Condition XDataSqlException SQL exceptions while beginning transaction. Call(Guid, StoredProcedure) Execute SQL stored procedure Declaration CallResult Call(Guid layer, StoredProcedure procedure) Parameters Type Name Description Guid layer Layer StoredProcedure procedure Procedure Returns Type Description CallResult Call result Exceptions Type Condition XDataSqlException wrong SQL stored procedure Close(Guid) Close database adapter Declaration void Close(Guid layer) Parameters Type Name Description Guid layer Layer Exceptions Type Condition XDataSqlException SQL exceptions while closing connection Commit(Guid, String) Commit transaction Declaration bool Commit(Guid layer, string transactionId) Parameters Type Name Description Guid layer Layer String transactionId Transaction id Returns Type Description Boolean Success flag ExecuteNonQuery(Guid, Enum, Object[]) Execute SQL statement Declaration QueryResult ExecuteNonQuery(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query index Object [] paramValues Query parameters Returns Type Description QueryResult Query result Exceptions Type Condition XDataSqlException wrong SQL query parameters ExecuteNonQuery(Guid, Query) Execute SQL statement Declaration QueryResult ExecuteNonQuery(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Returns Type Description QueryResult Query result Exceptions Type Condition XDataSqlException wrong SQL query ExecuteScalar(Guid, Enum, Object[]) Retrieve scalar value Declaration object ExecuteScalar(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query index Object [] paramValues Query parameters Returns Type Description Object Object Exceptions Type Condition XDataSqlException wrong SQL query parameters ExecuteScalar(Guid, Query) Retrieve scalar value Declaration object ExecuteScalar(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Returns Type Description Object Object Exceptions Type Condition XDataSqlException wrong SQL query FillTable(Guid, Enum, CommandBehavior, Object[]) Fill data table Declaration DataTable FillTable(Guid layer, Enum queryIndex, CommandBehavior behavior, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query index CommandBehavior behavior Command behavior Object [] paramValues Query parameters Returns Type Description DataTable Data table Exceptions Type Condition XDataSqlException wrong SQL query parameters FillTable(Guid, Enum, Object[]) Fill data table Declaration DataTable FillTable(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query index Object [] paramValues Query parameters Returns Type Description DataTable Data table Exceptions Type Condition XDataSqlException wrong SQL query parameters FillTable(Guid, Query, CommandBehavior) Fill data table Declaration DataTable FillTable(Guid layer, Query query, CommandBehavior behavior = CommandBehavior.Default) Parameters Type Name Description Guid layer Layer Query query Query CommandBehavior behavior Command behavior Returns Type Description DataTable Data table Exceptions Type Condition XDataSqlException wrong SQL query GetParameterValue(QueryParam) Read parameter value Declaration object GetParameterValue(QueryParam parameter) Parameters Type Name Description QueryParam parameter Parameter Returns Type Description Object Parameter value GetParameterValue<T>(QueryParam) Read parameter value Declaration T GetParameterValue<T>(QueryParam parameter) Parameters Type Name Description QueryParam parameter Parameter Returns Type Description T Parameter value Type Parameters Name Description T GetTableFieldInfo(Guid, String) Returns table structure Declaration ReadOnlyCollection<FieldInfo> GetTableFieldInfo(Guid layer, string table) Parameters Type Name Description Guid layer Layer String table Table name Returns Type Description ReadOnlyCollection < FieldInfo > List of fields GetTablesInfo(Guid) Returns table list Declaration ReadOnlyCollection<TableInfo> GetTablesInfo(Guid layer) Parameters Type Name Description Guid layer Layer Returns Type Description ReadOnlyCollection < TableInfo > List of table Init(ISqlBuilder, String, String, IConfiguration) Initialization routine Declaration void Init(ISqlBuilder dialectAdapter, string context, string connectionString, IConfiguration config) Parameters Type Name Description ISqlBuilder dialectAdapter SQL dialect adapter String context Context name String connectionString Connection string IConfiguration config Adapter configuration InTransaction(Guid) Transaction context flag Declaration bool InTransaction(Guid layer) Parameters Type Name Description Guid layer Layer Returns Type Description Boolean IsOpen(Guid) Check adapter connection is open Declaration bool IsOpen(Guid layer) Parameters Type Name Description Guid layer Layer Returns Type Description Boolean Rollback(Guid, String) Rollback transaction Declaration bool Rollback(Guid layer, string transactionId) Parameters Type Name Description Guid layer Layer String transactionId Transaction id Returns Type Description Boolean Success flag SafeConvert<T>(Object) Safe convert data Declaration T SafeConvert<T>(object data) Parameters Type Name Description Object data Data to convert Returns Type Description T Converted data Type Parameters Name Description T Result type SelectParameterValue<T>(QueryParam) Iterate user data type (UDT) valued table/array parameter value Declaration IEnumerable<T> SelectParameterValue<T>(QueryParam parameter) Parameters Type Name Description QueryParam parameter Parameter Returns Type Description IEnumerable <T> Parameter value Type Parameters Name Description T Test(Guid, Query) Test query Declaration void Test(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataActionType.html": {
    "href": "api/XData.DataActionType.html",
    "title": "Enum DataActionType | XData website",
    "keywords": "Enum DataActionType Action type Namespace : XData Assembly : XData.dll Syntax public enum DataActionType Fields Name Description AfterClear After clear trigger logic AfterDelete After delete trigger logic AfterInsert After insert trigger logic AfterUpdate After update trigger logic BeforeClear Before clear trigger logic BeforeDelete Before delete trigger logic BeforeInsert Before insert trigger logic BeforeUpdate Before update trigger logic InitObject Object instance initialization code InitRepository Repository initialization code InvalidateObject Refresh object event code InvalidateRepository Refresh repository event code See Also ActionType InitRepository InvalidateRepository InvalidateObject InitObject BeforeInsert BeforeUpdate BeforeDelete AfterInsert AfterUpdate AfterDelete BeforeClear AfterClear Extension Methods SerializationExtensions.ToXml<DataActionType>() CollectionsExtensions.SetValue<DataActionType, T>(T) CollectionsExtensions.AsEnum<DataActionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataActionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.ClearAttachedHandler.html": {
    "href": "api/XData.ClearAttachedHandler.html",
    "title": "Delegate ClearAttachedHandler | XData website",
    "keywords": "Delegate ClearAttachedHandler Clear attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool ClearAttachedHandler(DataSubmitFlag flag = DataSubmitFlag.None); Parameters Type Name Description DataSubmitFlag flag Submit flag Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SerializedValue.html": {
    "href": "api/XData.SerializedValue.html",
    "title": "Class SerializedValue | XData website",
    "keywords": "Class SerializedValue Serialized data value Inheritance Object SerializedValue Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax [Serializable] [DataContract] public class SerializedValue Constructors SerializedValue(String, String, Object, Object) Serialized value constructor Declaration public SerializedValue(string propertyName, string fieldName, object original, object value) Parameters Type Name Description String propertyName Property name String fieldName Field name Object original Original value Object value Value Properties FieldName Field name Declaration [DataMember] public string FieldName { get; set; } Property Value Type Description String IsNotChanged Not changed flag Declaration [DataMember] public bool IsNotChanged { get; set; } Property Value Type Description Boolean IsNull Null value flag Declaration [DataMember] public bool IsNull { get; set; } Property Value Type Description Boolean Original Original value Declaration [DataMember] public string Original { get; set; } Property Value Type Description String PropertyName Property name Declaration [DataMember] public string PropertyName { get; set; } Property Value Type Description String TypeName Value type name Declaration [DataMember] public string TypeName { get; set; } Property Value Type Description String Value Original value Declaration [DataMember] public string Value { get; set; } Property Value Type Description String Methods Deserialize(Type, String) Deserialize value Declaration public static object Deserialize(Type type, string value) Parameters Type Name Description Type type Data type String value String value representation Returns Type Description Object Value GetValue(Type) Returns serialized value Declaration public object GetValue(Type type) Parameters Type Name Description Type type Returns Type Description Object Serialize(Object) Serialize value Declaration public static string Serialize(object value) Parameters Type Name Description Object value Value Returns Type Description String String value representation Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SerializedData.html": {
    "href": "api/XData.SerializedData.html",
    "title": "Class SerializedData | XData website",
    "keywords": "Class SerializedData Serialized data Inheritance Object SerializedData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData Assembly : XData.dll Syntax [DataContract] [Serializable] public class SerializedData Constructors SerializedData(IRepository, IDataObject) Serialized data constructor Declaration public SerializedData(IRepository repository, IDataObject obj) Parameters Type Name Description IRepository repository Repository IDataObject obj Data object to serialize Properties Data Serialized data Declaration [DataMember] public SerializedValue[] Data { get; set; } Property Value Type Description SerializedValue [] ObjectType Object type Declaration [DataMember] public string ObjectType { get; } Property Value Type Description String State DataObject state Declaration [DataMember] public DataObjectState State { get; set; } Property Value Type Description DataObjectState Methods GetFieldValue(Type, String) Returns field value Declaration public object GetFieldValue(Type type, string fieldName) Parameters Type Name Description Type type Field type String fieldName Field name Returns Type Description Object Field value Exceptions Type Condition XDataRuntimeException serialized data has not contains requested field. HasFieldValue(String) Serialized data has field value Declaration public bool HasFieldValue(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description Boolean Field value found IsFieldNull(String) Serialized data field value is null Declaration public bool IsFieldNull(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description Boolean Field value is null ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString() Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SerializationExtensions.html": {
    "href": "api/XData.SerializationExtensions.html",
    "title": "Class SerializationExtensions | XData website",
    "keywords": "Class SerializationExtensions Serialization extensions Inheritance Object SerializationExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public static class SerializationExtensions Methods ObjectToXml(Object) Serialize object data to Xml Declaration public static string ObjectToXml(object source) Parameters Type Name Description Object source Object to serialize Returns Type Description String Xml string ReadXml<T>(String) Deserialize helper Declaration public static T ReadXml<T>(this string source) Parameters Type Name Description String source String contained serialized object Returns Type Description T De-serialized object Type Parameters Name Description T Object type Restore<T>(T, SerializedData) Set serialized data to object Declaration public static void Restore<T>(this T obj, SerializedData data) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance SerializedData data Serialized data Type Parameters Name Description T Data object type Exceptions Type Condition XDataQueryStructureException serialized data contains not mapped properties. XDataRuntimeException serialized data is null. XDataRuntimeException serialized data have a wrong type. See Also Serialize<T>(T) Serialize<T>(IEnumerable<T>) Serialize<T>(T) Get serialized data from object Declaration public static SerializedData Serialize<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Returns Type Description SerializedData Serialized data Type Parameters Name Description T Data object type See Also Restore<T>(T, SerializedData) Serialize<T>(IEnumerable<T>) Get serialized data from objects sequence Declaration public static SerializedData[] Serialize<T>(this IEnumerable<T> objects) where T : class, IDataObject, new() Parameters Type Name Description IEnumerable <T> objects Data objects sequence Returns Type Description SerializedData [] Serialized data Type Parameters Name Description T Data object type See Also Restore<T>(T, SerializedData) Serialize<T>(IDataQuery<T>, TextWriter) Serialize data query helper Declaration public static void Serialize<T>(this IDataQuery<T> query, TextWriter writer) where T : class, IDataObject, new() Parameters Type Name Description IDataQuery <T> query Query TextWriter writer Writer to serialize Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Writer is null See Also GetRepository<T>(TextReader) Serialize<T>(IRepository<T>, TextWriter) Serialize repository helper Declaration public static void Serialize<T>(this IRepository<T> repository, TextWriter writer) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> repository Repository TextWriter writer Writer to serialize Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Writer is null See Also GetRepository<T>(TextReader) ToXml<T>(T) Serialize helper Declaration public static string ToXml<T>(this T source) Parameters Type Name Description T source Object to serialize Returns Type Description String Serialized collection Type Parameters Name Description T Object type"
  },
  "api/XData.Security.html": {
    "href": "api/XData.Security.html",
    "title": "Namespace XData.Security | XData website",
    "keywords": "Namespace XData.Security Classes SecuritySession Security session base class"
  },
  "api/XData.Mapping.Dynamic.IQueryStructure.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryStructure.html",
    "title": "Interface IQueryStructure | XData website",
    "keywords": "Interface IQueryStructure Dynamic query structure interface Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IQueryStructure Methods AddFilters(String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Add dynamic filters Declaration IQueryStructure AddFilters(string alias, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Source alias Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Dynamic filters Returns Type Description IQueryStructure Call(Guid, Variable[]) Dynamic procedure call with no result set Declaration IDataQuery Call(Guid layer, params Variable[] variables) Parameters Type Name Description Guid layer Layer Variable [] variables Data object variables Returns Type Description IDataQuery Procedure call result Remarks Hint: Use variables as parameter values Hint: To pass binary parameters use Base64 string value Hint: To pass UDT parameters use Xml-serialized value of mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter Call<TResult>(Guid, String, Variable[]) Dynamic procedure call Declaration IDataQuery<TResult> Call<TResult>(Guid layer, string resultSetName, params Variable[] variables) where TResult : class Parameters Type Name Description Guid layer Layer String resultSetName Base result set name Variable [] variables Data object variables Returns Type Description IDataQuery <TResult> Procedure call result Type Parameters Name Description TResult Dynamic query result type Remarks Hint: Use variables as parameter values Hint: To pass binary parameters use Base64 string value Hint: To pass UDT parameters use Xml-serialized value of mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter Column<TResult>(String, Expression<Func<IQueryStructureAdapter, TResult>>) Dynamic query hidden property mapping Declaration IQueryStructure Column<TResult>(string name, Expression<Func<IQueryStructureAdapter, TResult>> mapper) Parameters Type Name Description String name Hidden property name Expression < Func < IQueryStructureAdapter , TResult>> mapper Property mapping expression Returns Type Description IQueryStructure Query structure Type Parameters Name Description TResult See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryStructureAdapter DataTable(String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query table mapping Declaration IQueryStructure DataTable(string name, string alias, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String name Table name String alias Table alias Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription Hint(String, String, HintType) Dynamic query data source hint Declaration IQueryStructure Hint(string alias, string hint, HintType hintType = HintType.Select) Parameters Type Name Description String alias Data source alias String hint Hint HintType hintType Hint type Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) InnerView(String, Type, Expression<Func<ISubqueryFilterAdapter, IFilterDescription>>[]) Dynamic query inner view mapping Declaration IQueryStructure InnerView(string alias, Type dobjType, params Expression<Func<ISubqueryFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Inner view alias Type dobjType Inner view statically mapped type Expression < Func < ISubqueryFilterAdapter , IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription InnerView<TDobj>(String, Expression<Func<ISubqueryFilterAdapter<TDobj>, IFilterDescription>>[]) Dynamic query inner view mapping Declaration IQueryStructure InnerView<TDobj>(string alias, params Expression<Func<ISubqueryFilterAdapter<TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Inner view alias Expression < Func < ISubqueryFilterAdapter <TDobj>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IQueryStructure Query structure Type Parameters Name Description TDobj Inner view statically mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription InnerView<TDobj>(String, IQueryDescription<TDobj>, Expression<Func<ISubqueryFilterAdapter<TDobj>, IFilterDescription>>[]) Dynamic query inner view mapping Declaration IQueryStructure InnerView<TDobj>(string alias, IQueryDescription<TDobj> sub, params Expression<Func<ISubqueryFilterAdapter<TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Inner view alias IQueryDescription <TDobj> sub Inner view query structure Expression < Func < ISubqueryFilterAdapter <TDobj>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IQueryStructure Query structure Type Parameters Name Description TDobj See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription IFilterDescription Map<TResult>(Expression<Func<IRepositoryStructureAdapter<TResult>, TResult>>, Expression<Func<IRepositoryStructureAdapter<TResult>, IExternalLinkDefinition>>[]) Dynamic repository mapping Declaration IRepositoryDescription<TResult> Map<TResult>(Expression<Func<IRepositoryStructureAdapter<TResult>, TResult>> mapper, params Expression<Func<IRepositoryStructureAdapter<TResult>, IExternalLinkDefinition>>[] externalLinks) where TResult : class, IDataObject, new() Parameters Type Name Description Expression < Func < IRepositoryStructureAdapter <TResult>, TResult>> mapper Mapping expression Expression < Func < IRepositoryStructureAdapter <TResult>, IExternalLinkDefinition >>[] externalLinks External link descriptions Returns Type Description IRepositoryDescription <TResult> Dynamic repository description Type Parameters Name Description TResult Dynamic repository type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter Parameter<T>(String, Int32, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) Dynamic query procedure parameter mapping Declaration IQueryStructure Parameter<T>(string alias, int order, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) Parameters Type Name Description String alias Procedure alias Int32 order Parameter order String binding Parameter value binding DbType type Parameter SQL data type Expression < Func < IProcedureParameterAdapter , IProcedureParameterFlag >>[] attributes Parameter mapping attributes Returns Type Description IQueryStructure Query structure Type Parameters Name Description T Parameter data type Procedure(String, String, ProcedureType, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic query procedure mapping Declaration IQueryStructure Procedure(string alias, string name, ProcedureType type, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Procedure alias String name Procedure name ProcedureType type Procedure type Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription Return<T>(String, String, Int32, Expression<Func<IQueryStructureAdapter, T>>) Dynamic query procedure result set mapping Declaration IQueryStructure Return<T>(string alias, string name, int order, Expression<Func<IQueryStructureAdapter, T>> mapper = null) where T : class Parameters Type Name Description String alias Procedure alias String name Result set name Int32 order Result set order Expression < Func < IQueryStructureAdapter , T>> mapper Result set mapper Returns Type Description IQueryStructure Query structure Type Parameters Name Description T Parameter data type Select<TResult>() Dynamic query result mapping using statically mapped data Declaration IQueryDescription<TResult> Select<TResult>() where TResult : class, IDataObject, new() Returns Type Description IQueryDescription <TResult> Dynamic query description Type Parameters Name Description TResult Dynamic query result type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Dynamic query result mapping Declaration IQueryDescription<TResult> Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>> mapper) where TResult : class Parameters Type Name Description Expression < Func < IQueryStructureAdapter , TResult>> mapper Mapping expression Returns Type Description IQueryDescription <TResult> Dynamic query description Type Parameters Name Description TResult Dynamic query result type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter Subquery(String, Type, String, DataGrouping, Expression<Func<ISubqueryFilterAdapter, IFilterDescription>>[]) Dynamic query subquery mapping Declaration IQueryStructure Subquery(string alias, Type dobjType, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Subquery alias Type dobjType Subquery statically mapped type String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryFilterAdapter , IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IQueryStructure Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription Subquery<TDobj>(String, Expression<Func<TDobj, Object>>, DataGrouping, Expression<Func<ISubqueryFilterAdapter<TDobj>, IFilterDescription>>[]) Dynamic query subquery mapping Declaration IQueryStructure Subquery<TDobj>(string alias, Expression<Func<TDobj, object>> property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryFilterAdapter<TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Subquery alias Expression < Func <TDobj, Object >> property Subquery selected property expression DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryFilterAdapter <TDobj>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IQueryStructure Query structure Type Parameters Name Description TDobj Subquery statically mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription Subquery<TDobj>(String, IQueryDescription<TDobj>, String, DataGrouping, Expression<Func<ISubqueryFilterAdapter<TDobj>, IFilterDescription>>[]) Dynamic query subquery mapping Declaration IQueryStructure Subquery<TDobj>(string alias, IQueryDescription<TDobj> sub, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryFilterAdapter<TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Subquery alias IQueryDescription <TDobj> sub Subquery query structure String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryFilterAdapter <TDobj>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IQueryStructure Query structure Type Parameters Name Description TDobj See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription DataGrouping IFilterDescription With<TRoot>(String, IQueryDescription<TRoot>, Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[]) Dynamic query Common-Table-Expression (WITH) subquery mapping Declaration IQueryStructure With<TRoot>(string alias, IQueryDescription<TRoot> sub, params Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[] attributes) where TRoot : class Parameters Type Name Description String alias Common-Table-Expression (WITH) subquery alias IQueryDescription <TRoot> sub Common-Table-Expression (WITH) initial subquery description Expression < Func < IQueryWithAdapter <TRoot>, IQueryWithFlag >>[] attributes Common-Table-Expression (WITH) attributes Returns Type Description IQueryStructure Query structure Type Parameters Name Description TRoot Common-Table-Expression (WITH) initial subquery mapped type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also GetStructure(String, String, DataStructureFlag, Variable[])"
  },
  "api/XData.Mapping.Dynamic.IQueryDescription.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryDescription.html",
    "title": "Interface IQueryDescription | XData website",
    "keywords": "Interface IQueryDescription Dynamic query description basic interface Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IQueryDescription Properties Type Dynamic query description element type Declaration Type Type { get; } Property Value Type Description Type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IQueryDescription-1.html": {
    "href": "api/XData.Mapping.Dynamic.IQueryDescription-1.html",
    "title": "Interface IQueryDescription<T> | XData website",
    "keywords": "Interface IQueryDescription<T> Dynamic query description with result type specified interface Inherited Members IQueryDescription.Type Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IQueryDescription<out T> : IQueryDescription where T : class Type Parameters Name Description T Query description element type Methods AsQuery(Guid, Variable[]) Returns queryable data source based on description Declaration IDataQuery<T> AsQuery(Guid layer, params Variable[] variables) Parameters Type Name Description Guid layer Layer Variable [] variables Object variables values Returns Type Description IDataQuery <T> Data source Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IWorkSet-1.html": {
    "href": "api/XData.IWorkSet-1.html",
    "title": "Interface IWorkSet<T> | XData website",
    "keywords": "Interface IWorkSet<T> Work set interface Inherited Members IWorkSet.Name IWorkSet.Clear() IWorkSet.Submit(IDataScope) IDisposable.Dispose() Namespace : XData Assembly : XData.WorkSet.dll Syntax public interface IWorkSet<T> : IWorkSet, IDisposable where T : class, IDataObject, new() Type Parameters Name Description T Data object type Remarks Used to create/modify complex objects Hint: UnitOfWork template Methods Add(Func<T>) Add object to work set collection Declaration T Add(Func<T> data) Parameters Type Name Description Func <T> data Lazy data creator Returns Type Description T Added object Assign(Func<T, Boolean>, Func<T>, WorkState) Assign single object Declaration T Assign(Func<T, bool> predicate, Func<T> data, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, Boolean > predicate Predicate to find object Func <T> data Lazy data creator WorkState state Work set state Returns Type Description T Assigned object Remarks Used to assign single object and reset depended work sets data changes WARNING! Do not use this method to update data only! All depended work sets will be reseted and data changes are lost! Call Get(Func<T, Boolean>, WorkState) to obtain data object and change it instead! Assign(Func<T, Int32, Boolean>, Func<T, IComparable>[], Func<T>, WorkState) Assign single object Declaration T Assign(Func<T, int, bool> predicate, Func<T, IComparable>[] order, Func<T> data, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find object Func <T, IComparable >[] order Order statements Func <T> data Lazy data creator WorkState state Work set state Returns Type Description T Assigned object Remarks Used to assign single object and reset depended work sets data changes WARNING! Do not use this method to update data only! All depended work sets will be reseted and data changes are lost! Call Get(Func<T, Boolean>, WorkState) to obtain data object and change it instead! Assign<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Func<T>, WorkState) Assign single object Declaration T Assign<TKey>(Func<T, int, bool> predicate, Func<T, TKey> order, Func<T> data, WorkState state = WorkState.Active) where TKey : IComparable Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find object Func <T, TKey> order Order statement Func <T> data Lazy data creator WorkState state Work set state Returns Type Description T Assigned object Type Parameters Name Description TKey Order key type Remarks Used to assign single object and reset depended work sets data changes WARNING! Do not use this method to update data only! All depended work sets will be reseted and data changes are lost! Call Get(Func<T, Boolean>, WorkState) to obtain data object and change it instead! Find<TRet>(Func<T, Boolean>, Expression<Func<T, IEnumerable<TRet>>>) Find depended work set Declaration IWorkSet<TRet> Find<TRet>(Func<T, bool> predicate, Expression<Func<T, IEnumerable<TRet>>> child) where TRet : class, IDataObject, new() Parameters Type Name Description Func <T, Boolean > predicate Predicate to find parent object Expression < Func <T, IEnumerable <TRet>>> child Expression returning parent object property contains depended data object collection Returns Type Description IWorkSet <TRet> Found work set Type Parameters Name Description TRet Depended object type Find<TRet>(Func<T, Int32, Boolean>, Func<T, IComparable>[], Expression<Func<T, IEnumerable<TRet>>>) Find depended work set (using order index) Declaration IWorkSet<TRet> Find<TRet>(Func<T, int, bool> predicate, Func<T, IComparable>[] order, Expression<Func<T, IEnumerable<TRet>>> child) where TRet : class, IDataObject, new() Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find parent object Func <T, IComparable >[] order Order statements Expression < Func <T, IEnumerable <TRet>>> child Expression returning parent object property contains depended data object collection Returns Type Description IWorkSet <TRet> Found work set Type Parameters Name Description TRet Depended object type Find<TRet>(Expression<Func<T, IEnumerable<TRet>>>) Find depended work set Declaration IWorkSet<TRet> Find<TRet>(Expression<Func<T, IEnumerable<TRet>>> child) where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, IEnumerable <TRet>>> child Expression returning parent object property contains depended data object collection Returns Type Description IWorkSet <TRet> Found work set Type Parameters Name Description TRet Depended object type Find<TRet, TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Expression<Func<T, IEnumerable<TRet>>>) Find depended work set (using order index) Declaration IWorkSet<TRet> Find<TRet, TKey>(Func<T, int, bool> predicate, Func<T, TKey> order, Expression<Func<T, IEnumerable<TRet>>> child) where TRet : class, IDataObject, new() where TKey : IComparable Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find parent object Func <T, TKey> order Order statements Expression < Func <T, IEnumerable <TRet>>> child Expression returning parent object property contains depended data object collection Returns Type Description IWorkSet <TRet> Found work set Type Parameters Name Description TRet Depended object type TKey Order key type Get(Func<T, Boolean>, WorkState) Get single data object by predicate Declaration T Get(Func<T, bool> predicate = null, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, Boolean > predicate Predicate to find specific object WorkState state Work set state Returns Type Description T Data object Get(Func<T, Int32, Boolean>, Func<T, IComparable>[], WorkState) Get single data object by predicate (using order index) Declaration T Get(Func<T, int, bool> predicate, Func<T, IComparable>[] order, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find specific object Func <T, IComparable >[] order Order statements WorkState state Work set state Returns Type Description T Data object Get<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, WorkState) Get single data object by predicate (using order index) Declaration T Get<TKey>(Func<T, int, bool> predicate, Func<T, TKey> order, WorkState state = WorkState.Active) where TKey : IComparable Parameters Type Name Description Func <T, Int32 , Boolean > predicate Predicate to find specific object Func <T, TKey> order Order statement WorkState state Work set state Returns Type Description T Data object Type Parameters Name Description TKey Order key type Lock(IDataScope, Func<T, Boolean>) Try to obtain lock on data object Declaration bool Lock(IDataScope dataScope, Func<T, bool> predicate = null) Parameters Type Name Description IDataScope dataScope Currrent data scope Func <T, Boolean > predicate Predicate to find specific object Returns Type Description Boolean Lock success flag Lock(IDataScope, Func<T, Int32, Boolean>, Func<T, IComparable>[]) Try to obtain lock on data object by predicate (using order index) Declaration bool Lock(IDataScope dataScope, Func<T, int, bool> predicate, Func<T, IComparable>[] order) Parameters Type Name Description IDataScope dataScope Currrent data scope Func <T, Int32 , Boolean > predicate Predicate to find specific object Func <T, IComparable >[] order Order statements Returns Type Description Boolean Lock success flag Lock<TKey>(IDataScope, Func<T, Int32, Boolean>, Func<T, TKey>) Try to obtain lock on data object by predicate (using order index) Declaration bool Lock<TKey>(IDataScope dataScope, Func<T, int, bool> predicate, Func<T, TKey> order) where TKey : IComparable Parameters Type Name Description IDataScope dataScope Currrent data scope Func <T, Int32 , Boolean > predicate Predicate to find specific object Func <T, TKey> order Order statement Returns Type Description Boolean Lock success flag Type Parameters Name Description TKey Order key type Select(WorkState) Retrieve all objects by work set Declaration IEnumerable<T> Select(WorkState state = WorkState.Active) Parameters Type Name Description WorkState state Work set state Returns Type Description IEnumerable <T> Data object sequence Select<TRet>(Func<T, TRet>, WorkState) Retrieve all objects by work set and apply selector logic to convert data Declaration IEnumerable<TRet> Select<TRet>(Func<T, TRet> selector, WorkState state = WorkState.Active) Parameters Type Name Description Func <T, TRet> selector Selector convert routine WorkState state Work set state Returns Type Description IEnumerable <TRet> Result object sequence Type Parameters Name Description TRet Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name Clear () Submit ( IDataScope ) Lock<TKey>(IDataScope, Func<T, Int32, Boolean>, Func<T, TKey>) Get<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, WorkState) Select(WorkState) Assign<TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Func<T>, WorkState) Find<TRet, TKey>(Func<T, Int32, Boolean>, Func<T, TKey>, Expression<Func<T, IEnumerable<TRet>>>) Add(Func<T>) Work"
  },
  "api/XData.Database.Adapter.BaseDatabaseAdapter-2.html": {
    "href": "api/XData.Database.Adapter.BaseDatabaseAdapter-2.html",
    "title": "Class BaseDatabaseAdapter<TConnection, TParameter> | XData website",
    "keywords": "Class BaseDatabaseAdapter<TConnection, TParameter> Database adapter base class Inheritance Object BaseDatabaseAdapter<TConnection, TParameter> Implements IDatabaseAdapter IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.dll Syntax [DatabaseAdapter(\"NONE\")] public abstract class BaseDatabaseAdapter<TConnection, TParameter> : IDatabaseAdapter, IDisposable where TConnection : DbConnection, new() where TParameter : IDbDataParameter, new() Type Parameters Name Description TConnection TParameter Properties Config Adapter configuration Declaration protected IConfiguration Config { get; } Property Value Type Description IConfiguration ConnectionString Connection string Declaration protected string ConnectionString { get; set; } Property Value Type Description String ConnectType Adapter name Declaration public string ConnectType { get; } Property Value Type Description String Context Database context name Declaration protected string Context { get; } Property Value Type Description String DialectAdapter SQL dialect adapter instance Declaration protected ISqlBuilder DialectAdapter { get; } Property Value Type Description ISqlBuilder NotSupported Check adapter supports user defined types (UDT) Declaration public virtual DialectOptions NotSupported { get; } Property Value Type Description DialectOptions Methods AddSavePoint(Guid, IDbTransaction, String) Add named save point Declaration protected abstract void AddSavePoint(Guid layer, IDbTransaction transaction, string savePoint) Parameters Type Name Description Guid layer Layer IDbTransaction transaction Transaction String savePoint Save point name BeginTransaction(Guid, Boolean, IsolationLevel) Begin transaction Declaration public string BeginTransaction(Guid layer, bool read = false, IsolationLevel isolation = IsolationLevel.ReadCommitted) Parameters Type Name Description Guid layer Layer Boolean read Read only transaction flag IsolationLevel isolation Transaction isolation level Returns Type Description String Transaction key Exceptions Type Condition XDataSqlException SQL exceptions while beginning transaction. Call(Guid, StoredProcedure) Calls stored procedure Declaration public CallResult Call(Guid layer, StoredProcedure procedure) Parameters Type Name Description Guid layer Layer StoredProcedure procedure Stored procedure Returns Type Description CallResult CallResult Exceptions Type Condition XDataSqlException Close(Guid) Close database connection Declaration public void Close(Guid layer) Parameters Type Name Description Guid layer Exceptions Type Condition XDataSqlException SQL exceptions while closing connection Commit(Guid, String) Commit transaction Declaration public bool Commit(Guid layer, string transactionId) Parameters Type Name Description Guid layer Layer String transactionId Transaction key Returns Type Description Boolean Success flag CreateCommand(TConnection) Create specific SQL command Declaration protected virtual IDbCommand CreateCommand(TConnection connection) Parameters Type Name Description TConnection connection SQL connection Returns Type Description IDbCommand SQL command Remarks Override this when some special command parameters are required CreateParameter(Guid, QueryParam) Create common parameter Declaration protected virtual TParameter CreateParameter(Guid layer, QueryParam parameter) Parameters Type Name Description Guid layer Layer QueryParam parameter Query parameter Returns Type Description TParameter Parameter Dispose() IDisposable realization Declaration public void Dispose() ExecuteNonQuery(Guid, Enum, Object[]) Executes SQL expression with no result set Declaration public QueryResult ExecuteNonQuery(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query enumeration key Object [] paramValues Query parameter values Returns Type Description QueryResult Query result Exceptions Type Condition XDataSqlException wrong SQL query parameters ExecuteNonQuery(Guid, Query) Executes SQL expression with no result set Declaration public QueryResult ExecuteNonQuery(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Returns Type Description QueryResult Query result Exceptions Type Condition XDataSqlException wrong SQL query XDataConcurrencyException concurrency exception ExecuteScalar(Guid, Enum, Object[]) Executes scalar returning query Declaration public object ExecuteScalar(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query enumeration key Object [] paramValues Query parameter values Returns Type Description Object Scalar value Exceptions Type Condition XDataSqlException wrong SQL query parameters ExecuteScalar(Guid, Query) Executes scalar returning query Declaration public object ExecuteScalar(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Returns Type Description Object Reader Exceptions Type Condition XDataSqlException wrong SQL query XDataConcurrencyException concurrency exception FillTable(Guid, Enum, CommandBehavior, Object[]) Executes query and fill data table Declaration public DataTable FillTable(Guid layer, Enum queryIndex, CommandBehavior behavior, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query enumeration key CommandBehavior behavior Command behavior Object [] paramValues Query parameter values Returns Type Description DataTable Filled data table Exceptions Type Condition XDataSqlException wrong SQL query parameters FillTable(Guid, Enum, Object[]) Executes query and fill data table Declaration public DataTable FillTable(Guid layer, Enum queryIndex, params object[] paramValues) Parameters Type Name Description Guid layer Layer Enum queryIndex Predefined query enumeration key Object [] paramValues Query parameter values Returns Type Description DataTable Filled data table Exceptions Type Condition XDataSqlException wrong SQL query parameters FillTable(Guid, Query, CommandBehavior) Executes query and fill data table Declaration public DataTable FillTable(Guid layer, Query query, CommandBehavior behavior = CommandBehavior.Default) Parameters Type Name Description Guid layer Layer Query query Query CommandBehavior behavior Command behavior Returns Type Description DataTable Filled data table Exceptions Type Condition XDataSqlException wrong SQL query GetConnection(Guid) Database connection Declaration protected DbConnection GetConnection(Guid layer) Parameters Type Name Description Guid layer Returns Type Description DbConnection GetNativeType(DbType) Declaration protected string GetNativeType(DbType type) Parameters Type Name Description DbType type Returns Type Description String Exceptions Type Condition XDataAdapterException GetParameterValue(QueryParam) Returns parameter value Declaration public object GetParameterValue(QueryParam parameter) Parameters Type Name Description QueryParam parameter Query parameter Returns Type Description Object Parameter value GetParameterValue<T>(QueryParam) Declaration public T GetParameterValue<T>(QueryParam parameter) Parameters Type Name Description QueryParam parameter Returns Type Description T Type Parameters Name Description T Exceptions Type Condition XDataAdapterException GetProsedureCall(ref IDbCommand, StoredProcedure, String, Boolean) Declaration protected virtual void GetProsedureCall(ref IDbCommand command, StoredProcedure procedure, string getResultName = null, bool closeCursor = false) Parameters Type Name Description IDbCommand command StoredProcedure procedure String getResultName Boolean closeCursor GetSqlType(String) Declaration protected DbType GetSqlType(string typeName) Parameters Type Name Description String typeName Returns Type Description DbType Exceptions Type Condition XDataAdapterException Type not supported GetTableFieldInfo(Guid, String) Declaration public abstract ReadOnlyCollection<FieldInfo> GetTableFieldInfo(Guid layer, string table) Parameters Type Name Description Guid layer String table Returns Type Description ReadOnlyCollection < FieldInfo > GetTablesInfo(Guid) Declaration public abstract ReadOnlyCollection<TableInfo> GetTablesInfo(Guid layer) Parameters Type Name Description Guid layer Returns Type Description ReadOnlyCollection < TableInfo > GetUtdParameter(QueryParam) Create and initialize user data type (UDT) parameter Hint: Override this method to use UDT stored procedure parameters Declaration protected virtual IDataParameter GetUtdParameter(QueryParam parameter) Parameters Type Name Description QueryParam parameter Stored procedure parameter Returns Type Description IDataParameter IDataParameter Exceptions Type Condition XDataAdapterException User Defined Type (UTD) Init() Adapter initialization Declaration protected abstract void Init() Init(ISqlBuilder, String, String, IConfiguration) Adapter initialization logic Declaration public void Init(ISqlBuilder dialectAdapter, string context, string connectionString, IConfiguration config) Parameters Type Name Description ISqlBuilder dialectAdapter SQL dialect adapter String context Context name String connectionString Database connection string IConfiguration config Adapter configuration InitConnection(DbConnection) Declaration protected virtual void InitConnection(DbConnection connection) Parameters Type Name Description DbConnection connection InTransaction(Guid) Connection have not committed transaction flag Declaration public bool InTransaction(Guid layer) Parameters Type Name Description Guid layer Returns Type Description Boolean IsConcurrencyError(Exception) Check exception is a concurrency exception Declaration protected virtual bool IsConcurrencyError(Exception exception) Parameters Type Name Description Exception exception Exception Returns Type Description Boolean Exception is a concurrency exception IsOpen(Guid) Connection is open flag Declaration public bool IsOpen(Guid layer) Parameters Type Name Description Guid layer Returns Type Description Boolean ReadNativeValue<T>(String, Object) Read native SQL value Declaration protected virtual T ReadNativeValue<T>(string nativeSqlType, object value) Parameters Type Name Description String nativeSqlType Native SQL type name Object value Value Returns Type Description T Mapped value Type Parameters Name Description T Mapped type Exceptions Type Condition XDataAdapterException ReadUtd<T>(Object) Read data from wrapped user defined type (UTD) Declaration protected virtual T ReadUtd<T>(object utdObject) where T : class Parameters Type Name Description Object utdObject Wrapped value Returns Type Description T Unwrapped value Type Parameters Name Description T Type mapped to user defined type (UTD) Exceptions Type Condition XDataAdapterException User Defined Type (UTD) ReadUtdCollection<T>(Object) Read data from wrapped user defined type (UTD) Declaration protected virtual ICollection<T> ReadUtdCollection<T>(object utdCollection) Parameters Type Name Description Object utdCollection Wrapped collection Returns Type Description ICollection <T> Unwrapped collection Type Parameters Name Description T Collection element type mapped to user defined type (UTD) Exceptions Type Condition XDataAdapterException User Defined Type (UTD) RegisterResultSet(String) Register result set parameter of stored procedure Declaration protected virtual IDbDataParameter RegisterResultSet(string resultSetName) Parameters Type Name Description String resultSetName Result set name Returns Type Description IDbDataParameter Result set parameter Remarks WARNING! Override this method to register result sets as out parameters Exceptions Type Condition XDataAdapterException RegisterResultSet See Also ResultSets MultipleRecordsetProceduresSupported RegisterRecordsetRequired Rollback(Guid, String) Rollback transaction Declaration public bool Rollback(Guid layer, string transactionId) Parameters Type Name Description Guid layer Layer String transactionId Transaction key Returns Type Description Boolean Success flag RollbackToSavePoint(Guid, IDbTransaction, String) Rollback to named save point Declaration protected abstract void RollbackToSavePoint(Guid layer, IDbTransaction transaction, string savePoint) Parameters Type Name Description Guid layer Layer IDbTransaction transaction Transaction String savePoint Save point name SafeConvert<T>(Object) Safe conversion for Db specific types Declaration public virtual T SafeConvert<T>(object data) Parameters Type Name Description Object data Source data Returns Type Description T Source data converted to type Type Parameters Name Description T Result type Remarks Override this to convert some specific Db related types See Also SafeTypeConvert SelectParameterValue<T>(QueryParam) Declaration public IEnumerable<T> SelectParameterValue<T>(QueryParam parameter) Parameters Type Name Description QueryParam parameter Returns Type Description IEnumerable <T> Type Parameters Name Description T Exceptions Type Condition XDataAdapterException Test(Guid, Query) Test query syntax WARNING! Throws a error if test failed! Declaration public void Test(Guid layer, Query query) Parameters Type Name Description Guid layer Layer Query query Query Exceptions Type Condition XDataSqlException wrong SQL query WrapUtd<T>(T, String) Wrap data to user defined type (UTD) Declaration protected virtual object WrapUtd<T>(T value, string utdTypeName) where T : class Parameters Type Name Description T value Value to wrap String utdTypeName User defined type name Returns Type Description Object Wrapped value Type Parameters Name Description T Type mapped to user defined type (UTD) Exceptions Type Condition XDataAdapterException User Defined Type (UTD) WrapUtdCollection<T>(T[], Boolean, String, String) Wrap data to collection (table or array) user defined type (UTD) Declaration protected virtual object WrapUtdCollection<T>(T[] value, bool isArray, string utdTypeName, string utdElementName = null) Parameters Type Name Description T[] value Collection to wrap Boolean isArray Use VARARRAY String utdTypeName User defined type name for collection String utdElementName User defined type name for element (set to null for scalar type collection) Returns Type Description Object Wrapped collection Type Parameters Name Description T Collection element type mapped to user defined type (UTD) Exceptions Type Condition XDataAdapterException User Defined Type (UTD) Implements IDatabaseAdapter System.IDisposable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.RefreshAttachedHandler-1.html": {
    "href": "api/XData.RefreshAttachedHandler-1.html",
    "title": "Delegate RefreshAttachedHandler<T> | XData website",
    "keywords": "Delegate RefreshAttachedHandler<T> Refresh attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool RefreshAttachedHandler<T>(ref T obj) where T : class, IDataObject; Parameters Type Name Description T obj Object instance Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.HintInfo.html": {
    "href": "api/XData.Mapping.HintInfo.html",
    "title": "Class HintInfo | XData website",
    "keywords": "Class HintInfo Hint description Inheritance Object HintInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax public class HintInfo Properties Hint Hint text Declaration public string Hint { get; set; } Property Value Type Description String HintType Hint type Declaration public HintType HintType { get; set; } Property Value Type Description HintType Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.HintAttribute.html": {
    "href": "api/XData.Mapping.HintAttribute.html",
    "title": "Class HintAttribute | XData website",
    "keywords": "Class HintAttribute Inheritance Object System.Attribute HintAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class HintAttribute : Attribute Constructors HintAttribute(String, String, HintType) Hint attribute constructor Declaration public HintAttribute(string alias, string hint, HintType hintType = HintType.Select) Parameters Type Name Description String alias Data source alias String hint Hint text HintType hintType Hint type Properties Alias Data source alias to apply hint Declaration public string Alias { get; } Property Value Type Description String Hint Hint Declaration public HintInfo Hint { get; } Property Value Type Description HintInfo TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataObjectExtensions.html": {
    "href": "api/XData.DataObjectExtensions.html",
    "title": "Class DataObjectExtensions | XData website",
    "keywords": "Class DataObjectExtensions IDataObject extension functions Inheritance Object DataObjectExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public static class DataObjectExtensions Fields SubquerySources Data sources types interpretable as sub queries Declaration public static readonly DataSourceType[] SubquerySources Field Value Type Description DataSourceType [] Methods AssignProperty<T, TValue>(T, String, TValue) Assign property value Declaration public static void AssignProperty<T, TValue>(this T obj, string prop, TValue value) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance String prop Property name TValue value Property value Type Parameters Name Description T Data object type TValue Data property type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty AsString<T>(IQueryable<T>) Repository select query text Declaration public static string AsString<T>(this IQueryable<T> queryable) where T : class, IDataObject Parameters Type Name Description IQueryable <T> queryable Queryable source of data object Returns Type Description String Repository Type Parameters Name Description T Data object type Remarks WARNING! High resource utilization! Use it for debug only! Callback<T>(T, String, ref Byte[]) Callback to client Declaration public static bool Callback<T>(this T obj, string message, ref byte[] data) where T : class, IDataObject, new() Parameters Type Name Description T obj Object context String message Message name Byte [] data Data to post Returns Type Description Boolean Type Parameters Name Description T Data object type CheckState<T>(T, DataObjectState) Checks object for state Declaration public static bool CheckState<T>(this T obj, DataObjectState state) where T : class, IDataObject Parameters Type Name Description T obj Data object instance DataObjectState state State Returns Type Description Boolean Object has desired state flag Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException No state attached to object See Also GetState<T>(T) SetDeleted<T>(T, Boolean) Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over single object Declaration public static bool Execute<T>(this T obj, Expression<Func<CustomLogic<T>>> routine, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Expression < Func < CustomLogic <T>>> routine Action field name expression Example: () => SomeCustomActionField IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type Remarks Hint: When using XData application server custom logic will executed on server side Exceptions Type Condition XDataRuntimeException Action field expression is null XDataRuntimeException CustomActionAttribute not found for expression specified field See Also Execute<T>(ICollection<T>, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Execute<T>(T, String, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over single object Declaration public static bool Execute<T>(this T obj, string key, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance String key Action key IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type Remarks Hint: When using XData application server custom logic will executed on server side Exceptions Type Condition XDataRuntimeException Object repository is detached See Also Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Execute<T>(ICollection<T>, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over array of objects Declaration public static bool Execute<T>(this ICollection<T> objects, Expression<Func<CustomLogic<T>>> routine, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) where T : class, IDataObject, new() Parameters Type Name Description ICollection <T> objects Collection of objects Expression < Func < CustomLogic <T>>> routine Action field name expression Example: () => SomeCustomActionField IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type Remarks Hint: When using XData application server custom logic will executed on server side Exceptions Type Condition XDataRuntimeException Action field name expression is null XDataRuntimeException CustomActionAttribute not found for expression specified field See Also Execute<T>(T, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Execute<T>(ICollection<T>, String, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) Run custom logic over array of objects Declaration public static bool Execute<T>(this ICollection<T> objects, string key, IDictionary<string, Action<byte[]>> post = null, IDictionary<string, Func<byte[], byte[]>> callback = null) where T : class, IDataObject, new() Parameters Type Name Description ICollection <T> objects Collection of objects String key Action key IDictionary < String , Action < Byte []>> post Post data handler IDictionary < String , Func < Byte [], Byte []>> callback Callback handler Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type Remarks Hint: When using XData application server custom logic will executed on server side Exceptions Type Condition XDataRuntimeException Object repository is detached See Also Execute<T>(ICollection<T>, Expression<Func<CustomLogic<T>>>, IDictionary<String, Action<Byte[]>>, IDictionary<String, Func<Byte[], Byte[]>>) FindMemberExpression(Expression) Property name expression parse helper Declaration public static MemberExpression FindMemberExpression(Expression e) Parameters Type Name Description Expression e Property name expression: x => x.SomePropertyName Returns Type Description MemberExpression Property name Exceptions Type Condition XDataRuntimeException Property name expression can not be null XDataRuntimeException Expression has a wrong expression type GetContext(IDataObject) Returns context name for object Declaration public static string GetContext(this IDataObject obj) Parameters Type Name Description IDataObject obj Data object Returns Type Description String Context name Exceptions Type Condition XDataRuntimeException GetLayer(IDataObject) Returns repository layer for object Declaration public static Guid GetLayer(this IDataObject obj) Parameters Type Name Description IDataObject obj Data object Returns Type Description Guid Repository layer Exceptions Type Condition XDataRuntimeException GetParameter<T>(IDataQuery, String) Returns SQL procedure/function out parameter value Declaration public static T GetParameter<T>(this IDataQuery query, string param) Parameters Type Name Description IDataQuery query Data query String param Parameter name Returns Type Description T Parameter value Type Parameters Name Description T Exceptions Type Condition XDataRuntimeException Parameter name can not be null or empty See Also GetParameter<T, TRet>(IDataQuery<T>, Expression<Func<T, TRet>>) GetParameter<T, TRet>(T, Expression<Func<T, TRet>>) Returns SQL procedure/function out parameter value Declaration public static TRet GetParameter<T, TRet>(this T obj, Expression<Func<T, TRet>> param) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Expression < Func <T, TRet>> param Parameter name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description TRet Parameter value Type Parameters Name Description T Data object type TRet Parameter type Exceptions Type Condition XDataRuntimeException Parameter name expression can not be null GetParameter<T, TRet>(T, String) Returns SQL procedure/function out parameter value Declaration public static TRet GetParameter<T, TRet>(this T obj, string param) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance String param Parameter name Returns Type Description TRet Parameter value Type Parameters Name Description T Data object type TRet Parameter type Exceptions Type Condition XDataRuntimeException Parameter name can not be null or empty See Also GetParameter<T, TRet>(T, Expression<Func<T, TRet>>) GetParameter<T, TRet>(IDataQuery<T>, Expression<Func<T, TRet>>) Returns SQL procedure/function out parameter value Declaration public static TRet GetParameter<T, TRet>(this IDataQuery<T> query, Expression<Func<T, TRet>> param) where T : class, new() Parameters Type Name Description IDataQuery <T> query Data query Expression < Func <T, TRet>> param Parameter name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description TRet Parameter value Type Parameters Name Description T Data object type TRet Parameter type Exceptions Type Condition XDataRuntimeException Parameter name expression can not be null GetProperties<T>(T, IEnumerable<String>, DataVersion) Returns properties values Declaration public static IEnumerable<KeyValuePair<string, object>> GetProperties<T>(this T obj, IEnumerable<string> props, DataVersion version = DataVersion.Actual) where T : class, IDataObject Parameters Type Name Description T obj Data object instance IEnumerable < String > props Properties sequence DataVersion version Data version Returns Type Description IEnumerable < KeyValuePair < String , Object >> Sequence of name value pairs Type Parameters Name Description T Data object type Remarks Hint: To get a single property value use GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) function. Exceptions Type Condition XDataRuntimeException Properties sequence is null GetProperties<T>(T, String[]) Returns properties values Hint: To get a single property value use GetProperty function. Declaration public static IEnumerable<KeyValuePair<string, object>> GetProperties<T>(this T obj, params string[] props) where T : class, IDataObject Parameters Type Name Description T obj Data object instance String [] props Properties array Returns Type Description IEnumerable < KeyValuePair < String , Object >> Sequence of name value pairs Type Parameters Name Description T Data object type Remarks Hint: To get a single property value use GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) function. GetProperties<T>(T, DataVersion, String[]) Returns properties values Declaration public static IEnumerable<KeyValuePair<string, object>> GetProperties<T>(this T obj, DataVersion version = DataVersion.Actual, params string[] props) where T : class, IDataObject Parameters Type Name Description T obj Data object instance DataVersion version Data version String [] props Properties array Returns Type Description IEnumerable < KeyValuePair < String , Object >> Sequence of name value pairs Type Parameters Name Description T Data object type Remarks Hint: To get a single property value use GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) function. GetProperty<TRet>(IDataObject, String) Returns single property value Declaration public static TRet GetProperty<TRet>(this IDataObject obj, string prop) Parameters Type Name Description IDataObject obj Data object instance String prop Property name Returns Type Description TRet Property value Type Parameters Name Description TRet Property type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty See Also GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) GetProperty<T, TRet>(T, Expression<Func<T, TRet>>) Returns property value Declaration public static TRet GetProperty<T, TRet>(this T obj, Expression<Func<T, TRet>> prop) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Expression < Func <T, TRet>> prop Property name expression: x => x.SomePropertyName Returns Type Description TRet Property value Type Parameters Name Description T Data object type TRet Property type Exceptions Type Condition XDataRuntimeException Property name expression can not be null GetProperty<T, TRet>(T, Expression<Func<T, TRet>>, DataVersion) Returns property value Declaration public static TRet GetProperty<T, TRet>(this T obj, Expression<Func<T, TRet>> prop, DataVersion version) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Expression < Func <T, TRet>> prop Property name expression: x => x.SomePropertyName DataVersion version Data version Returns Type Description TRet Property value Type Parameters Name Description T Data object type TRet Property type Exceptions Type Condition XDataRuntimeException Property name expression can not be null GetRepository<T>(T) Returns object repository Declaration public static IRepository<T> GetRepository<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Returns Type Description IRepository <T> Object repository Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Object repository is detached GetRepositoryAlias(IDataObject) Returns object's repository alias Declaration public static string GetRepositoryAlias(this IDataObject obj) Parameters Type Name Description IDataObject obj Data object Returns Type Description String Repository alias Exceptions Type Condition XDataRuntimeException GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) Returns SQL procedure/function result set Declaration public static IEnumerable<TRes> GetResultSet<TRes>(this IDataQuery query, Expression<Func<IEnumerable<TRes>>> resultSetName) where TRes : class Parameters Type Name Description IDataQuery query Data query Expression < Func < IEnumerable <TRes>>> resultSetName Result set name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description IEnumerable <TRes> Result set object sequence Type Parameters Name Description TRes Result set object type Exceptions Type Condition XDataRuntimeException Result set name expression can not be null See Also GetResultSet<TRes>(IDataQuery, String) GetResultSet<TRes>(IDataQuery, String) Returns SQL procedure/function result set Declaration public static IEnumerable<TRes> GetResultSet<TRes>(this IDataQuery query, string resultSetName) where TRes : class Parameters Type Name Description IDataQuery query Data query String resultSetName Result set name name Returns Type Description IEnumerable <TRes> Parameter value Type Parameters Name Description TRes Result set object type Exceptions Type Condition XDataRuntimeException Result set name can not be null or empty See Also GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) GetResultSet<T, TRes>(T, Expression<Func<T, IEnumerable<TRes>>>) Returns SQL procedure/function result set Declaration public static IEnumerable<TRes> GetResultSet<T, TRes>(this T obj, Expression<Func<T, IEnumerable<TRes>>> resultSetName) where T : class, IDataObject, new() where TRes : class Parameters Type Name Description T obj Data object instance Expression < Func <T, IEnumerable <TRes>>> resultSetName Result set name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description IEnumerable <TRes> Result set object sequence Type Parameters Name Description T Data object type TRes Result set object type Exceptions Type Condition XDataRuntimeException Result set name expression can not be null GetResultSet<T, TRes>(IRepository<T>, Expression<Func<T, IEnumerable<TRes>>>) Returns SQL procedure/function result set Declaration public static IEnumerable<TRes> GetResultSet<T, TRes>(this IRepository<T> repository, Expression<Func<T, IEnumerable<TRes>>> resultSetName) where T : class, IDataObject, new() where TRes : class Parameters Type Name Description IRepository <T> repository Data object repository Expression < Func <T, IEnumerable <TRes>>> resultSetName Result set name expression using same name property (case insensitive) Example: x => x.SomePropertyName Returns Type Description IEnumerable <TRes> Result set object sequence Type Parameters Name Description T Object type TRes Result set object type Exceptions Type Condition XDataRuntimeException Result set name expression can not be null See Also GetResultSet<TRes>(IDataQuery, String) GetState<T>(T) Returns state of object Declaration public static DataObjectState GetState<T>(this T obj) where T : class, IDataObject Parameters Type Name Description T obj Data object instance Returns Type Description DataObjectState Object state flags combination(see DataObjectState) Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException No state attached to object See Also CheckState<T>(T, DataObjectState) SetDeleted<T>(T, Boolean) IsAttached(IDataObject, Type) Check data object is attached Declaration public static bool IsAttached(this IDataObject obj, Type type) Parameters Type Name Description IDataObject obj Data object instance Type type Data object type Returns Type Description Boolean Object is attached Exceptions Type Condition XDataRuntimeException Object is detached IsChanged<T>(T, Expression<Func<T, Object>>[]) Test property value is assigned Declaration public static bool IsChanged<T>(this T obj, params Expression<Func<T, object>>[] prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance Expression < Func <T, Object >>[] prop Property name expression Example: x => x.SomePropertyName Returns Type Description Boolean Property is changed Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name expression can not be null IsChanged<T>(T, String) Test property value is assigned Declaration public static bool IsChanged<T>(this T obj, string prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance String prop Property name Returns Type Description Boolean Property is changed Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty IsCleared<T>(T, String) Test property value is cleared Declaration public static bool IsCleared<T>(this T obj, string prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance String prop Property name Returns Type Description Boolean Property is cleared Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty IsEmpty<T>(T, Expression<Func<T, Object>>) Test property value is empty Declaration public static bool IsEmpty<T>(this T obj, Expression<Func<T, object>> prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance Expression < Func <T, Object >> prop Property name expression Example: x => x.SomePropertyName Returns Type Description Boolean Property is empty Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name expression can not be null IsEmpty<T>(T, String) Test property value is empty Declaration public static bool IsEmpty<T>(this T obj, string prop) where T : class, IDataObject Parameters Type Name Description T obj Data object instance String prop Property name Returns Type Description Boolean Property is empty Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException Property name can not be null or empty Lock<T>(T) Lock object in database Declaration public static bool Lock<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Returns Type Description Boolean Lock success Type Parameters Name Description T Data object type See Also Lock(T) Modify(Lob, Action<Byte[]>) Lob field modify Declaration public static Lob Modify(this Lob source, Action<byte[]> action) Parameters Type Name Description Lob source Source Lob Action < Byte []> action Modify action Returns Type Description Lob Modified Lob Exceptions Type Condition XDataRuntimeException Modify logic error See Also Lob Modify(Xml, Action<XDocument>) Modify(Xml, Action<XDocument>) Xml field modify Declaration public static Xml Modify(this Xml source, Action<XDocument> action) Parameters Type Name Description Xml source Source document Action < XDocument > action Modify action Returns Type Description Xml Modified xml Examples invoice.Source.Modify(doc => doc.Element(\"invoice\").Attribute(\"state\").Value = \"ACTIVE\"); Exceptions Type Condition XDataRuntimeException Modify logic error See Also Xml Modify(Lob, Action<Byte[]>) Modify<T>(T, Action<T>[]) Data object modification wrapper Declaration public static T Modify<T>(this T obj, params Action<T>[] actions) where T : class, IDataObject Parameters Type Name Description T obj Data object Action <T>[] actions Modification actions Returns Type Description T Modified data object Type Parameters Name Description T Data object type PostData<T>(T, String, Func<Byte[]>) Post data to client Declaration public static void PostData<T>(this T obj, string message, Func<byte[]> data) where T : class, IDataObject, new() Parameters Type Name Description T obj Object context String message Message name Func < Byte []> data Data to post Type Parameters Name Description T Data object type Refresh<T>(T) Refresh single data object from database Declaration public static bool Refresh<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Returns Type Description Boolean Success flag Type Parameters Name Description T Data object type Refresh<T>(IRepository<T>) Refresh repository data Declaration public static IRepository<T> Refresh<T>(this IRepository<T> source) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> source Repository Returns Type Description IRepository <T> Repository Type Parameters Name Description T Data object type SetAttachedHandlers<T>(T, AttachedHandler<T>[]) Attach extra handlers to object instance Declaration public static void SetAttachedHandlers<T>(this T obj, params AttachedHandler<T>[] handlers) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance AttachedHandler <T>[] handlers Handlers Type Parameters Name Description T Data object type SetCurrent<T>(T) Set object as repository current Declaration public static void SetCurrent<T>(this T obj) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Type Parameters Name Description T Data object type See Also Current SetDeleted<T>(T, Boolean) Set deleted state to object Declaration public static void SetDeleted<T>(this T obj, bool setState) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance Boolean setState Set or remove DataObjectState.Deleted state flag Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException No state attached to object See Also CheckState<T>(T, DataObjectState) GetState<T>(T) SetFilterValue<T, TRes>(IRepository<T>, Expression<Func<T, TRes>>, TRes) Set value to dynamically created runtime filter Declaration public static IRepository<T> SetFilterValue<T, TRes>(this IRepository<T> repository, Expression<Func<T, TRes>> propertyExpression, TRes filterValue) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> repository Repository Expression < Func <T, TRes>> propertyExpression Property name expression TRes filterValue Filter value Returns Type Description IRepository <T> Repository Type Parameters Name Description T Repository data object type TRes Property type Submit<T>(T, DataSubmitFlag) Submit data object changes Declaration public static bool Submit<T>(this T obj, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject, new() Parameters Type Name Description T obj Data object instance DataSubmitFlag flag Submit flag Returns Type Description Boolean Submit success Type Parameters Name Description T Data object type See Also Submit(ref T, DataSubmitFlag) ToArray<T>(IRepository<T>, Expression<Func<T, Boolean>>) Returns repository select result filtered by predicate as array and reset repository Declaration public static T[] ToArray<T>(this IRepository<T> repository, Expression<Func<T, bool>> predicate = null) where T : class, IDataObject, new() Parameters Type Name Description IRepository <T> repository Source repository Expression < Func <T, Boolean >> predicate Filter predicate Returns Type Description T[] Select result filtered by predicate as array Type Parameters Name Description T Repository object type"
  },
  "api/XData.DataCombination.html": {
    "href": "api/XData.DataCombination.html",
    "title": "Enum DataCombination | XData website",
    "keywords": "Enum DataCombination Data set combination modes Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum DataCombination Fields Name Description Except EXCEPT(MINUS) Intersect INTERSECT None Data object not use combination Union UNION UnionAll UNION ALL See Also None Union UnionAll Except Intersect Extension Methods SerializationExtensions.ToXml<DataCombination>() CollectionsExtensions.SetValue<DataCombination, T>(T) CollectionsExtensions.AsEnum<DataCombination>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataCombination, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.FieldInfo.html": {
    "href": "api/XData.Database.FieldInfo.html",
    "title": "Class FieldInfo | XData website",
    "keywords": "Class FieldInfo Field information Inheritance Object FieldInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database Assembly : XData.dll Syntax [Serializable] public sealed class FieldInfo Properties IsAutoIncrement Auto increment flag Declaration public bool IsAutoIncrement { get; set; } Property Value Type Description Boolean IsPk Primary key flag Declaration public bool IsPk { get; set; } Property Value Type Description Boolean Name Field name Declaration public string Name { get; set; } Property Value Type Description String Type Field type Declaration public DbType Type { get; set; } Property Value Type Description DbType Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Dialect.BaseSqlBuilder.html": {
    "href": "api/XData.Database.Dialect.BaseSqlBuilder.html",
    "title": "Class BaseSqlBuilder | XData website",
    "keywords": "Class BaseSqlBuilder SQL builder base class Inheritance Object BaseSqlBuilder Implements ISqlBuilder IEnumerable < Query > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Dialect Assembly : XData.dll Syntax [DatabaseAdapter(\"NONE\")] public abstract class BaseSqlBuilder : ISqlBuilder, ISqlBuilderInternal, IEnumerable<Query>, IEnumerable Fields SqlStrings SQL dialect specific format strings WARNING! Mast be filled in constructor! Declaration protected SortedList<SqlStringType, string> SqlStrings Field Value Type Description SortedList < SqlStringType , String > Properties Config SQL dialect configuration Declaration protected IConfiguration Config { get; } Property Value Type Description IConfiguration Context Context name Declaration protected string Context { get; } Property Value Type Description String DialectOptions Dialect options WARNING! Mast to be filled in constructor! Declaration public virtual DialectOptions DialectOptions { get; } Property Value Type Description DialectOptions Item[Enum] Predefined queries enumerator Declaration public Query this[Enum i] { get; } Parameters Type Name Description Enum i Predefined query enumeration key Property Value Type Description Query Query Exceptions Type Condition XDataAdapterException ParameterPrefix Parameter prefix symbol Declaration public abstract string ParameterPrefix { get; } Property Value Type Description String Queries List of predefined queries WARNING! Mast to be filled in constructor! Declaration protected List<Query> Queries { set; } Property Value Type Description List < Query > SqlTypes List of supported SQL types WARNING! Mast to be filled in constructor! Declaration public DbType[] SqlTypes { get; protected set; } Property Value Type Description DbType [] TypeNames List of supported column type names WARNING! Mast to be filled in constructor! Declaration public string[] TypeNames { get; protected set; } Property Value Type Description String [] TypeSynonyms List of supported type synonyms WARNING! Mast to be filled in constructor! Declaration public string[] TypeSynonyms { get; protected set; } Property Value Type Description String [] Methods AddOrderBy(IDataStructure, SortedList<String, Object>, ref StringBuilder, ref Query, ref List<Tuple<String, Type, String>>, ICollection<String>, ref SortedList<String, Tuple<String, String>>, Boolean) Add order by statement to query Declaration protected virtual void AddOrderBy(IDataStructure structure, SortedList<string, object> filterValues, ref StringBuilder strCommand, ref Query query, ref List<Tuple<string, Type, string>> withSources, ICollection<string> skipped, ref SortedList<string, Tuple<string, string>> fields, bool doNotSkip) Parameters Type Name Description IDataStructure structure Structure metadata SortedList < String , Object > filterValues Filter values StringBuilder strCommand Query string builder Query query Query List < Tuple < String , Type , String >> withSources Common-Table-Expression (WITH) data sources ICollection < String > skipped Skipped sources collection SortedList < String , Tuple < String , String >> fields Parsed fields Boolean doNotSkip Don't skip empty sources AddReturning2Command(ref StringBuilder, SortedList<String, Tuple<String, Boolean>>) Add returning auto increment identity column values statement in query Declaration protected abstract void AddReturning2Command(ref StringBuilder sb, SortedList<string, Tuple<string, bool>> identity) Parameters Type Name Description StringBuilder sb Query string builder SortedList < String , Tuple < String , Boolean >> identity Identity column name and parameter name AddSkipLimitAndOrder(IDataStructure, SortedList<String, Object>, ref StringBuilder, Int32, String, ref Query, ref List<Tuple<String, Type, String>>, ICollection<String>, ref SortedList<String, Tuple<String, String>>, Boolean) Add skip, limit, and order statements to query Declaration protected abstract void AddSkipLimitAndOrder(IDataStructure structure, SortedList<string, object> filterValues, ref StringBuilder strCommand, int fromPosition, string selectAll, ref Query query, ref List<Tuple<string, Type, string>> withSources, ICollection<string> skipped, ref SortedList<string, Tuple<string, string>> fields, bool doNotSkip = false) Parameters Type Name Description IDataStructure structure Structure metadata SortedList < String , Object > filterValues Filter values StringBuilder strCommand Query string builder Int32 fromPosition From statement start position String selectAll All fields list string Query query Query List < Tuple < String , Type , String >> withSources Common-Table-Expression (WITH) data sources ICollection < String > skipped Skipped sources collection SortedList < String , Tuple < String , String >> fields Parsed fields Boolean doNotSkip Don't skip empty sources Beautify(String) Returns formatted SQL string Declaration public static string Beautify(string sql) Parameters Type Name Description String sql SQL string to format Returns Type Description String Formatted SQL string BeautifyRtf(String) Returns RTF formatted SQL string Declaration public static string BeautifyRtf(string sql) Parameters Type Name Description String sql SQL string to format Returns Type Description String RTF formatted SQL string CompleteInsert(String, SortedList<String, Tuple<String, Boolean>>, Type) Returns string contains SQL expression to complete insert statement Declaration protected virtual string CompleteInsert(string alias, SortedList<string, Tuple<string, bool>> identity, Type objectType) Parameters Type Name Description String alias Base table alias SortedList < String , Tuple < String , Boolean >> identity Identity fields and query parameters Type objectType Mapped object type Returns Type Description String SQL expression to complete insert statement ExtractXmlQuery(String, String, String[], IComparable[], String, KeyValuePair<String, String>[]) Returns query to extract xml data by XPath expression Declaration public Query ExtractXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue, string path, params KeyValuePair<string, string>[] namespaces) Parameters Type Name Description String table Table name String column Xml column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String path XPath expression KeyValuePair < String , String >[] namespaces XPath namespaces Returns Type Description Query XPath result Exceptions Type Condition XDataQueryStructureException Field not found FormatFieldName(String, String) Format field name Declaration public static string FormatFieldName(string alias, string fieldName) Parameters Type Name Description String alias Source alias String fieldName Field name Returns Type Description String Formatted field name FormatQuery(Query, Object[]) Returns formatted query string with parameter values Declaration public static string FormatQuery(Query query, params object[] paramValues) Parameters Type Name Description Query query Query Object [] paramValues Parameter values Returns Type Description String Formatted SQL string FormatSql(SqlStringType, Object[]) Format SQL dialect specific syntax strings Hint: Override to realize ugly non standard syntax (if needed) Declaration protected virtual string FormatSql(SqlStringType sqlStringType, params object[] args) Parameters Type Name Description SqlStringType sqlStringType SQL syntax key Object [] args Syntax arguments Returns Type Description String FormatStoredProcedure(StoredProcedure, Object[]) Returns formatted query string with parameter values Declaration public static string FormatStoredProcedure(StoredProcedure storedProcedure, params object[] paramValues) Parameters Type Name Description StoredProcedure storedProcedure Stored procedure Object [] paramValues Parameter values Returns Type Description String Formatted SQL string GetAcquireBlobQuery(String, String, IEnumerable<String>, IComparable[], String) Returns query to acquire blob data Declaration public Query GetAcquireBlobQuery(string table, string column, IEnumerable<string> tablePrimaryKey, IComparable[] primaryKeyValue, string nativeSqlType = null) Parameters Type Name Description String table Table name String column Blob column name IEnumerable < String > tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String nativeSqlType Native SQL type name Returns Type Description Query Query GetAcquireXmlQuery(String, String, String[], IComparable[]) Returns query to acquire xml data Declaration public Query GetAcquireXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue) Parameters Type Name Description String table Table name String column Xml column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values Returns Type Description Query Query Exceptions Type Condition XDataQueryStructureException Field not found GetAllQuery(IDataStructure) Returns query to check compliance of all repository objects Hint: Used in XData LINQ expressions Declaration public Query GetAllQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetAnyQuery(IDataStructure) Returns query to check existence of repository objects Hint: Used in XData LINQ expressions Declaration public Query GetAnyQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetBlobSizeQuery(String, String, String[], IComparable[]) Returns query to get Large Object size Declaration public Query GetBlobSizeQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue) Parameters Type Name Description String table Table name contained LOB String column LOB column name String [] tablePrimaryKey Primary key column names IComparable [] primaryKeyValue Primary key values Returns Type Description Query Query to get Large Object size GetCall(IDataStructure, String) Declaration public StoredProcedure GetCall(IDataStructure structure, string userName) Parameters Type Name Description IDataStructure structure String userName Returns Type Description StoredProcedure Exceptions Type Condition XDataQueryStructureException XDataAdapterException stored procedure GetClearQuery(IDataStructure) Returns query to clear all repository objects Declaration public Query GetClearQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query Exceptions Type Condition XDataQueryStructureException GetConnectionInfo(String, String, String, Nullable<Boolean>, String, String) Declaration public XConnectionInfo GetConnectionInfo(string connectionString, string server, string schema, bool? integratedSecurity, string dbLogin, string dbPassword) Parameters Type Name Description String connectionString String server String schema Nullable < Boolean > integratedSecurity String dbLogin String dbPassword Returns Type Description XConnectionInfo GetConnectionString(String, String, Boolean, String, String, String) Compose specific connection string from parts Declaration protected abstract string GetConnectionString(string server, string schema, bool integratedSecurity, string user, string password, string partialConnectionString) Parameters Type Name Description String server Server name String schema Schema name Boolean integratedSecurity Integrated security flag String user User login String password User password String partialConnectionString Additional connection string settings Returns Type Description String Connection string GetCountQuery(IDataStructure) Returns query to select count of data objects in repository Declaration public Query GetCountQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetDeleteQuery(IDataStructure, IDataObject, String, Boolean) Returns query to delete data object Declaration public Query GetDeleteQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query Exceptions Type Condition XDataQueryStructureException GetEnumerator() Predefined queries enumerator Declaration public IEnumerator<Query> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Query > Predefined queries enumerator GetExpressionText(IDataStructure, ExpressionContext, Type, Expression) Compose SQL expression from XData LINQ expression Declaration public string GetExpressionText(IDataStructure structure, ExpressionContext context, Type queryType, Expression expression) Parameters Type Name Description IDataStructure structure Structure metadata ExpressionContext context Expression context Type queryType Data query type Expression expression XData LINQ expression Returns Type Description String SQL expression Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported type XDataQueryStructureException Property not found XDataQueryStructureException LINQ expression has unsupported method parameters XDataAdapterException GetInsertQuery(IDataStructure, IDataObject, String) Returns query to insert data object Declaration public Query GetInsertQuery(IDataStructure structure, IDataObject data, string userName) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Returns Type Description Query Query Exceptions Type Condition XDataQueryStructureException GetLockQuery(IDataStructure) Returns query to lock single data object Declaration public Query GetLockQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetOrderByString(IDataStructure, SortedList<String, Object>, ref Query, ref List<Tuple<String, Type, String>>, ICollection<String>, ref SortedList<String, Tuple<String, String>>, Boolean) Returns order by string Declaration protected string GetOrderByString(IDataStructure structure, SortedList<string, object> filterValues, ref Query query, ref List<Tuple<string, Type, string>> withSources, ICollection<string> skipped, ref SortedList<string, Tuple<string, string>> fields, bool doNotSkip) Parameters Type Name Description IDataStructure structure Structure metadata SortedList < String , Object > filterValues Filter values Query query Query List < Tuple < String , Type , String >> withSources Common-Table-Expression (WITH) data sources ICollection < String > skipped Skipped sources collection SortedList < String , Tuple < String , String >> fields Parsed fields Boolean doNotSkip Don't skip empty sources Returns Type Description String Order by string Exceptions Type Condition XDataQueryStructureException Field not found GetParameterName(String) Formats field name as parameter name Declaration public virtual string GetParameterName(string fieldName) Parameters Type Name Description String fieldName Field name Returns Type Description String Parameter name GetRefreshQuery(IDataStructure) Returns query to refresh single data object Declaration public Query GetRefreshQuery(IDataStructure structure) Parameters Type Name Description IDataStructure structure Structure metadata Returns Type Description Query Query GetSafeConvertExpression(Type, Expression, Expression) Safe convert expression Declaration public virtual Expression GetSafeConvertExpression(Type type, Expression dataRow, Expression fieldName) Parameters Type Name Description Type type Type of expression Expression dataRow Data row expression Expression fieldName Field name expression Returns Type Description Expression Expression GetSaveBlobQuery(String, String, IEnumerable<String>, IComparable[], ref Byte[], String) Returns query to save blob data Declaration public Query GetSaveBlobQuery(string table, string column, IEnumerable<string> tablePrimaryKey, IComparable[] primaryKeyValue, ref byte[] body, string nativeSqlType = null) Parameters Type Name Description String table Table name String column Blob column name IEnumerable < String > tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values Byte [] body Blob body String nativeSqlType Native SQL type name Returns Type Description Query Query GetSaveXmlQuery(String, String, String[], IComparable[], ref String) Returns query to save xml data Declaration public Query GetSaveXmlQuery(string table, string column, string[] tablePrimaryKey, IComparable[] primaryKeyValue, ref string body) Parameters Type Name Description String table Table name String column Xml column name String [] tablePrimaryKey Table primary key columns IComparable [] primaryKeyValue Table primary key values String body Blob body Returns Type Description Query Query Exceptions Type Condition XDataQueryStructureException Field not found GetSelectQuery(IDataStructure, Boolean, Boolean) Returns query to select data objects Declaration public Query GetSelectQuery(IDataStructure structure, bool markProperties = false, bool doNotSkip = false) Parameters Type Name Description IDataStructure structure Structure metadata Boolean markProperties Mark properties with comments Boolean doNotSkip Don't skip sources Returns Type Description Query Query GetSequenceName(String, String, String) Returns sequence name Declaration public string GetSequenceName(string context, string table, string column) Parameters Type Name Description String context Context name String table Table name String column Column name Returns Type Description String Sequence name GetSqlTypeName(DbType) Returns SQL type name for System.DbType Declaration protected virtual string GetSqlTypeName(DbType dbType) Parameters Type Name Description DbType dbType System.DbType enumeration key Returns Type Description String SQL type name Exceptions Type Condition XDataAdapterException Type not supported GetUpdateQuery(IDataStructure, IDataObject, String, Boolean) Returns query to update data object Declaration public Query GetUpdateQuery(IDataStructure structure, IDataObject data, string userName, bool ignoreConcurrency = true) Parameters Type Name Description IDataStructure structure Structure metadata IDataObject data Data object instance String userName User name Boolean ignoreConcurrency Ignore concurrency flag Returns Type Description Query Query Exceptions Type Condition XDataQueryStructureException GetXmlNamespaces(KeyValuePair<String, String>[]) Returns Xml namespaces string Declaration protected abstract string GetXmlNamespaces(KeyValuePair<string, string>[] namespaces) Parameters Type Name Description KeyValuePair < String , String >[] namespaces Xml namespaces Returns Type Description String Xml namespaces string Init(String, IConfiguration, String) Dialect adapter initialization Declaration public void Init(string context, IConfiguration config, string sequence) Parameters Type Name Description String context Context name IConfiguration config Specific dialect adapter configuration Xml String sequence Sequence generator assembly qualified class name ParseConnectionString(String, ref String, ref String, ref Boolean, ref String, ref String, out String) Parse specific connection string to parts Declaration protected abstract void ParseConnectionString(string connectionString, ref string server, ref string schema, ref bool integratedSecurity, ref string user, ref string password, out string partialConnectionString) Parameters Type Name Description String connectionString Connection string String server Server name String schema Schema name Boolean integratedSecurity Integrated security flag String user User login String password User password String partialConnectionString Additional connection string settings RegisterResultSet(IResultSetDescription) Declaration protected virtual QueryParam RegisterResultSet(IResultSetDescription resultSet) Parameters Type Name Description IResultSetDescription resultSet Returns Type Description QueryParam SequenceGeneration(out Boolean) Sequence generation supported Declaration public bool SequenceGeneration(out bool required) Parameters Type Name Description Boolean required Returns Type Description Boolean Sequence generation supported flag See Also GetSequenceName(String, String, String) SequenceRequired SetQueryParameters(ref Query, IEnumerable<IParameterDescription>, SortedList<String, String>, String, DialectOptions) Declaration public void SetQueryParameters(ref Query query, IEnumerable<IParameterDescription> parameters, SortedList<string, string> variableValues, string userName, DialectOptions dialectOptions) Parameters Type Name Description Query query IEnumerable < IParameterDescription > parameters SortedList < String , String > variableValues String userName DialectOptions dialectOptions Exceptions Type Condition XDataAdapterException SetQueryParameterValues(ref Query, SortedList<String, Object>) Set query parameter values Declaration public void SetQueryParameterValues(ref Query query, SortedList<string, object> paramValues) Parameters Type Name Description Query query Query SortedList < String , Object > paramValues Parameter values ToDataSet<TSource>(String, IEnumerable<TSource>) Compose union structure over source object sequence Declaration public string ToDataSet<TSource>(string prefix, IEnumerable<TSource> source) Parameters Type Name Description String prefix Column prefix IEnumerable <TSource> source Source sequence Returns Type Description String Data source Type Parameters Name Description TSource Source type Explicit Interface Implementations IEnumerable.GetEnumerator() Predefined queries enumerator Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Predefined queries enumerator Implements ISqlBuilder System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Mapping.LinkAttribute.html": {
    "href": "api/XData.Mapping.LinkAttribute.html",
    "title": "Class LinkAttribute | XData website",
    "keywords": "Class LinkAttribute Base link attribute Inheritance Object System.Attribute FilterBaseAttribute FilterAttribute OptionalFilterAttribute LinkAttribute Inherited Members OptionalFilterAttribute.PrimaryFilter FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class LinkAttribute : OptionalFilterAttribute Constructors LinkAttribute(String, String, String, String) Base link attribute constructor Declaration public LinkAttribute(string linkedSource, string linkedFieldName, string source, string fieldName = \"\") Parameters Type Name Description String linkedSource Secondary source alias String linkedFieldName Secondary field name String source Primary source alias String fieldName Primary field name Exceptions Type Condition XDataRuntimeException Secondary source alias cannot be null or empty string XDataRuntimeException Secondary field name cannot be null or empty string Properties FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Link Overrides FilterBaseAttribute.FilterType LinkedFieldName Secondary field name Declaration public string LinkedFieldName { get; } Property Value Type Description String LinkedSourceAlias Secondary source alias Declaration public string LinkedSourceAlias { get; } Property Value Type Description String TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also LinkAttribute OptionalFilterAttribute"
  },
  "api/XData.Mapping.Link-2.html": {
    "href": "api/XData.Mapping.Link-2.html",
    "title": "Class Link<TVal, TSrc> | XData website",
    "keywords": "Class Link<TVal, TSrc> Dictionary link wrapper Inheritance Object Link<TVal, TSrc> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax public abstract class Link<TVal, TSrc> : ILink where TVal : IComparable<TVal> where TSrc : class, IDataObject, new() Type Parameters Name Description TVal Link value type TSrc Link source type Examples // declaration [Property(\"name\", \"S\"), DictionaryProperty(\"Name\", \"DocState\"), DictionaryProperty(\"Code\", \"DocStateCode\")] public Link<string, DocState> DocState { get; set; } // using newInvoice.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == \"CREATED\"); // is the same as newInvoice.DocState.Source = dataScope.GetDictionaryValue<DocState>(x => x.Code == \"CREATED\"); Properties Key Dictionary key Declaration public object Key { get; } Property Value Type Description Object Source Dictionary source data object Declaration public abstract TSrc Source { set; } Property Value Type Description TSrc Value Dictionary value Declaration public TVal Value { get; } Property Value Type Description TVal Methods IsNull() Check link for null value Declaration public bool IsNull() Returns Type Description Boolean Link is null Operators Addition(Link<TVal, TSrc>, TSrc) Set link source Declaration public static Link<TVal, TSrc> operator +(Link<TVal, TSrc> link, TSrc source) Parameters Type Name Description Link <TVal, TSrc> link Link TSrc source Link source Returns Type Description Link <TVal, TSrc> Updated link Implicit(Link<TVal, TSrc> to TVal) Implicitly returns dictionary value Declaration public static implicit operator TVal(Link<TVal, TSrc> val) Parameters Type Name Description Link <TVal, TSrc> val Dictionary property Returns Type Description TVal Value Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also LinkPropertyAttribute Value Key Source Addition(Link<TVal, TSrc>, TSrc) Implicit(Link<TVal, TSrc> to TVal) GetDictionaryValue<T>(Expression<Func<T, Boolean>>, String, String, ISecuritySession, Variable[]) IsNull()"
  },
  "api/XData.Mapping.InnerViewAttribute.html": {
    "href": "api/XData.Mapping.InnerViewAttribute.html",
    "title": "Class InnerViewAttribute | XData website",
    "keywords": "Class InnerViewAttribute Data object inner view attribute Inheritance Object System.Attribute DataSourceAttribute InnerViewAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class InnerViewAttribute : DataSourceAttribute Examples InnerView(\"H\", typeof(DocLastChange)) Constructors InnerViewAttribute(String, Type) Data object inner view attribute Declaration public InnerViewAttribute(string alias, Type innerViewType) Parameters Type Name Description String alias Inner view alias Type innerViewType Object type represents inner view structure Exceptions Type Condition XDataRuntimeException Inner view alias cannot be null or empty string XDataRuntimeException Object type represents inner view structure cannot be null Properties Alias Inner view alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias InnerViewType Object type represents inner view structure Declaration public Type InnerViewType { get; } Property Value Type Description Type Type Source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType InnerView Overrides DataSourceAttribute.Type TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DataTableAttribute SubqueryAttribute SubqueryLinkAttribute"
  },
  "api/XData.Mapping.HintType.html": {
    "href": "api/XData.Mapping.HintType.html",
    "title": "Enum HintType | XData website",
    "keywords": "Enum HintType Hint type Namespace : XData.Mapping Assembly : XData.dll Syntax [Flags] public enum HintType Fields Name Description All Delete Insert Select Update Extension Methods SerializationExtensions.ToXml<HintType>() CollectionsExtensions.SetValue<HintType, T>(T) CollectionsExtensions.AsEnum<HintType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<HintType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IPropertyMappingAdapter.html",
    "title": "Interface IPropertyMappingAdapter | XData website",
    "keywords": "Interface IPropertyMappingAdapter Basic dynamic structure adapter Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IPropertyMappingAdapter Methods Group(Int32) Property grouping modifier Declaration IStructureFlag Group(int groupOrder) Parameters Type Name Description Int32 groupOrder Property grouping option Returns Type Description IStructureFlag Property description attribute Group(DataGrouping) Property grouping modifier Declaration IStructureFlag Group(DataGrouping grouping) Parameters Type Name Description DataGrouping grouping Property grouping option Returns Type Description IStructureFlag Property description attribute Remarks Used as property description attribute Hidden() Column is hidden column flag attribute Declaration IStructureFlag Hidden() Returns Type Description IStructureFlag Key() Property is key modifier Declaration IStructureFlag Key() Returns Type Description IStructureFlag Property description attribute Remarks Used as property description attribute Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ConstantFilterAttribute.html": {
    "href": "api/XData.Mapping.ConstantFilterAttribute.html",
    "title": "Class ConstantFilterAttribute | XData website",
    "keywords": "Class ConstantFilterAttribute Data object constant value filter attribute Inheritance Object System.Attribute FilterBaseAttribute FilterAttribute ConstantFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ConstantFilterAttribute : FilterAttribute Remarks Filter value can be constant, data object variable value (see Variables ), current date or time Constructors ConstantFilterAttribute(String, String, String, String) Constant filter attribute Declaration public ConstantFilterAttribute(string name, string source, string fieldName, string constant = \"\") Parameters Type Name Description String name Filter name String source Filter source alias String fieldName Filter field name String constant Filter value Exceptions Type Condition XDataRuntimeException Filter name cannot be null or empty string Properties ConstantType Filter value type Declaration public FilterConstantType ConstantType { get; set; } Property Value Type Description FilterConstantType See Also FilterConstantType ConstantValue Filter value Declaration public string ConstantValue { get; } Property Value Type Description String See Also ConstantType FilterConstantType FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Constant Overrides FilterBaseAttribute.FilterType Name Filter parameter name Declaration public string Name { get; } Property Value Type Description String Remarks No Sql parameter prefix needed Nullable Filter null value handling mode Declaration public FilterNullable Nullable { get; set; } Property Value Type Description FilterNullable See Also FilterConstantType TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.InvalidateObject-1.html": {
    "href": "api/XData.InvalidateObject-1.html",
    "title": "Delegate InvalidateObject<T> | XData website",
    "keywords": "Delegate InvalidateObject<T> Refresh one object event delegate type Namespace : XData Assembly : XData.dll Syntax public delegate void InvalidateObject<in T>(T obj) where T : class, IDataObject; Parameters Type Name Description T obj Object to refresh Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also InvalidateObject OnInvalidateObject"
  },
  "api/XData.Interfaces.html": {
    "href": "api/XData.Interfaces.html",
    "title": "Namespace XData.Interfaces | XData website",
    "keywords": "Namespace XData.Interfaces Classes AdapterConfig Adapter configuration section ContextConfig Context config section DialectConfig SQL dialect configuration section ProxyConfig Proxy configuration section Interfaces IConfiguration XData configuration ILogWriter XData log writer interface IProxy Data object proxy interface IProxyManager Proxy manager ISecuritySession Security session interface ISequenceNameRule Sequence name rule interface ISqlBuilder SQL builder interface"
  },
  "api/XData.DataSource.Structure.IOptionalFilter.html": {
    "href": "api/XData.DataSource.Structure.IOptionalFilter.html",
    "title": "Interface IOptionalFilter | XData website",
    "keywords": "Interface IOptionalFilter Optional filter interface Hint: Optional filters can rise flag to skip their sources if no value assigned in runtime or their subquery is skipped by other optional filters Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IOptionalFilter : IFilter, ICloneable Properties Primary Primary filter flag Declaration bool Primary { get; } Property Value Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "tutorial/concurrency.html": {
    "href": "tutorial/concurrency.html",
    "title": "Concurrency resolving | XData website",
    "keywords": "Concurrency resolving Concurrency can be resolved by pessimistic or optimistic locking on transaction management level. XData is supported an automatic (or manual) transaction management with both locking types support (when locking is supported on RDBMS level). Pessimistic locking is RDBMS ability to define lock over one record for one thread of application until transaction is commited. In case of concurrent rase first thread acquired and lock data and other threads will get an exception. XData pessimistic locking is acquired by repository Lock method call, or an extension method Lock of IDataObject interface. In case of reject of locking the exception is catched, but method returns false. To acquire the pessimistic lock the transaction is required. When no transaction is defined then runtime XDataRuntimeException is raised. Optimistic locking require a special field inside datatable table - the concurrency token. Concurrency token is always updated on insert or update of the table using some algorithm. When data changes submitted (update or delete) the value is checked for not changed until request data. If value is changes the XDataConcurrencyException is rised. To mark property as concurrency token then define mapping use property flag - ConcurrencyToken and set one of default value type to choose one of concurrency value generation algorithm. Concurrency token value checking is provided automatically. There is possible to set IgnoreConcurrency flag to ignore concurrency when submitting changes using repository Submit method, or an extension method Submit of IDataObject interface. When concurrency is ignored no checks are provided and concurrency is resolved with \"last change is applied\" rule. Tip Concurrency token field can be hidden, but recured to be selected from data source table (see Hidden property ). Important Concurrency token property mapping required to define default value behaviour with AlwaysSetDefault flag assigned to true. Ways to define concurrency token property mapping is various to static and dynamic notation and described in corresponding topics."
  },
  "tips/udt.html": {
    "href": "tips/udt.html",
    "title": "Using UDT | XData website",
    "keywords": "Using UDT SQL User Defined Type (UDT) - Complex data type definition. Some databases support it, some does not. XData supported UDT when it supported by database engine and ADO .Net provider too. And range of operations over UDT is depends on abilities of database engine and provider. UDT can be mapped as SQL procedure (or function) In or Out parameter statically or dynamically ."
  },
  "tips/trigger_logic.html": {
    "href": "tips/trigger_logic.html",
    "title": "Trigger business logic | XData website",
    "keywords": "Trigger business logic Custom logic called over data object explicitly. But XData can call trigger logic over business valuable data object (not a single table!) on middleware level (no matter extracted this logic to dedicated application server or not). This logic will be called automatically when corresponded changes are applied: InitRepository - middleware trigger executed when Repository has been initialized (trigger delegate type - InitRepository<T> ) InvalidateRepository - middleware trigger executed when Repository data need to be reseted (trigger delegate type - InvalidateRepository<T> ) InvalidateObject - middleware trigger executed when Repository object need to be reloaded (trigger delegate type - InvalidateObject<T> ) InitObject - middleware trigger executed when Repository object has been initialized (trigger delegate type - InitObject<T> ) BeforeInsert - middleware trigger executed before object inserted into Repository (trigger delegate type - Trigger<T> ) BeforeUpdate - middleware trigger executed before Repository object has been updated (trigger delegate type - Trigger<T> ) BeforeDelete - middleware trigger executed before object has been deleted from Repository (trigger delegate type - Trigger<T> ) AfterInsert - middleware trigger executed after object inserted into Repository (trigger delegate type - Trigger<T> ). Skip flag is not applicable! AfterUpdate - middleware trigger executed after Repository object has been updated (trigger delegate type - Trigger<T> ). Skip flag is not applicable! AfterDelete - middleware trigger executed after object has been deleted from Repository (trigger delegate type - Trigger<T> ). Skip flag is not applicable! BeforeClear - middleware trigger executed before Repository has been cleared (trigger delegate type - RepositoryTrigger<T> ) AfterClear - middleware trigger executed after Repository has been cleared (trigger delegate type - RepositoryTrigger<T> ). Skip flag is not applicable! Trigger delegate type - it's a method signature for middleware trigger handler. public class InvoiceLogic : XDataLogic<Invoice> { [Action(DataActionType.AfterInsert), Action(DataActionType.AfterUpdate)] public Trigger<Invoice> UpdateHistory => ((ref Invoice invoice, ref DataTriggerFlag flag) => { if (!invoice.CheckState(DataObjectState.New) && !invoice.IsChanged(x => x.DocState)) return true; var rep = invoice.GetRepository(); using (var hist = GetRepository<DocHistory>(rep.Layer, context: rep.Context)) { hist.Reset() .SetFilterValue(DocHistory.FilterByDocId, invoice.GetProperty<long>(\"DocId\")) .SetFilterValue(DocHistory.FilterByDocStateId, invoice.DocState.Key); var newHist = hist.New(); newHist.HistoryDate = DateTime.UtcNow; return hist.Submit(ref newHist); } }); [Action(DataActionType.BeforeDelete)] public Trigger<Invoice> ClearHistory => ((ref Invoice invoice, ref DataTriggerFlag flag) => { var i = invoice; using (var hist = GetRepository<DocHistory>(i.GetLayer(), context: i.GetContext())) { return hist.Reset() .Clear(x => x.GetProperty<long>(\"DocId\") == i.GetProperty<long>(\"DocId\")); } }); [Action(DataActionType.BeforeClear)] public RepositoryTrigger<Invoice> ClearHistoryBatch => ((IRepository<Invoice> invoiceRepository, ref DataTriggerFlag flag) => { using (var hist = GetRepository<DocHistory>(invoiceRepository.Layer, context: invoiceRepository.Context)) { return hist.Reset().Clear(x => invoiceRepository .Any(z => x.GetProperty<long>(\"DocId\") == z.GetProperty<long>(\"DocId\"))); } }); } Trigger and RepositoryTrigger delegates has a reference parameter of type DataTriggerFlag to specify behaviour of data processing after trigger executed. There are three possible behaviours defined: None - Submit using default algorithm, representation layer is already refreshed Skip - Data submitting have completed in trigger logic or not applicable. No standard updates will called. It's a kind of \"instead of\" trigger logic flag. Refresh - Default value. Representation layer manual data refreshing is needed. Trigger logic defined as attributed by Action attribute read only property of XDataLogic<T> class descendant. One property can be attributed as a handler for multiple triggers. Property type must to be Trigger<T> except repository based triggers ( BeforeClear , AfterCLear , InitRepository or InvalidateRepository ) - RepositoryTrigger<T> ."
  },
  "tips/events.html": {
    "href": "tips/events.html",
    "title": "Using events | XData website",
    "keywords": "Using events Custom logic call and trigger logic is executed on the midleware layer, deployed on the application server or not. But some reaction on data change events may be required on client side. XData has followed events to subscribe changes of data: InitRepository<T> OnInit - event acquired when repository has been initialized InitObject<T> OnInitObject - event acquired when object has been initialized by database or default values InvalidateRepository<T> OnInvalidate - repository data has been requeried from database InvalidateObject<T> OnInvalidateObject - object has been changed and requeied from database CurrentObjectChanging<T> OnCurrentObjectChanging - current object is changing CurrentObjectChanged<T> OnCurrentObjectChanged - current object has been changed"
  },
  "tips/dictionary.html": {
    "href": "tips/dictionary.html",
    "title": "Using dictionaries | XData website",
    "keywords": "Using dictionaries Dictionaries can be used to reduse data requery count when rarely changed data of dictionary will linked multiple times through Link<T,TSource> data type properties over small amount of time (one business process). Dictionaries is cached as single mapped objects (not a data cahe as described in Caching repository data topic)."
  },
  "tips/callback.html": {
    "href": "tips/callback.html",
    "title": "Using business logic callbacks | XData website",
    "keywords": "Using business logic callbacks XData alowes to use business logic callbacks to interact backend modules with frontend using synchronious Callback and asynchronious PostData models. Synchronious calls can return result value. Callbacks can be used with three-tier-architecture as well as with client-server model. Callbacks has provided business logic clear, complete view and alowes debug same code in two-tier environment as code will be executed in three-tier. public class InvoiceLogic : XDataLogic<Invoice> { public CustomLogic<Invoice> TestCustomLogic => (objects => { Log.Write(MessageType.Information, () => $\"TestCustomLogic called with {objects.Length} objects\"); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => @$\"Call for \\\"{i.DocNumb}\\\" returned \\\"{r}\\\" with data \\\"{(p == null ? null : Encoding.UTF8.GetString(p))}\\\"\"); } return true; }); }"
  },
  "api/XData.Interfaces.ContextConfig.html": {
    "href": "api/XData.Interfaces.ContextConfig.html",
    "title": "Class ContextConfig | XData website",
    "keywords": "Class ContextConfig Context config section Inheritance Object ContextConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Interfaces Assembly : XData.dll Syntax public sealed class ContextConfig Remarks WARNING! All attributes are required! Examples <context name=\"TEST\" adapter=\"MSSQL\"/> Properties AdapterName Context adapter name Declaration public string AdapterName { get; set; } Property Value Type Description String Remarks Mast be the same as Name ConcurrencyErrorId Concurrency error id Declaration public string ConcurrencyErrorId { get; set; } Property Value Type Description String ConnectionString Connection string Declaration public string ConnectionString { get; set; } Property Value Type Description String Remarks Received from ConnectionStrings configuration section by name same as Name DialectName Dialect adapter name Declaration public string DialectName { get; set; } Property Value Type Description String Remarks Mast be the same as Name IsDefault Default context flag Declaration public bool IsDefault { get; set; } Property Value Type Description Boolean Name Context name Declaration public string Name { get; set; } Property Value Type Description String SequenceNameRule Sequence name rule class name Declaration public string SequenceNameRule { get; set; } Property Value Type Description String Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name AdapterName ConnectionString IsDefault SequenceNameRule"
  },
  "api/XData.Interfaces.AdapterConfig.html": {
    "href": "api/XData.Interfaces.AdapterConfig.html",
    "title": "Class AdapterConfig | XData website",
    "keywords": "Class AdapterConfig Adapter configuration section Inheritance Object AdapterConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Interfaces Assembly : XData.dll Syntax public sealed class AdapterConfig Remarks WARNING! All attributes are required! Examples <adapter name=\"MSSQL\" file=\"C:\\XData\\XMsSqlAdapter.dll\"/> Properties AssemblyName Adapter assembly name Declaration public string AssemblyName { get; set; } Property Value Type Description String Config Adapter configuration Declaration public IConfiguration Config { get; set; } Property Value Type Description IConfiguration Name Adapter name Declaration public string Name { get; set; } Property Value Type Description String Remarks Mast be the same as AdapterName Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name AssemblyName"
  },
  "api/XData.InitRepository-1.html": {
    "href": "api/XData.InitRepository-1.html",
    "title": "Delegate InitRepository<T> | XData website",
    "keywords": "Delegate InitRepository<T> Repository initialization delegate type Namespace : XData Assembly : XData.dll Syntax public delegate void InitRepository<T>(IRepository<T> repository) where T : class, IDataObject; Parameters Type Name Description IRepository <T> repository Repository instance Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also InitRepository OnInit"
  },
  "api/XData.FilterOperation.html": {
    "href": "api/XData.FilterOperation.html",
    "title": "Enum FilterOperation | XData website",
    "keywords": "Enum FilterOperation Filter operation Namespace : XData Assembly : XData.dll Syntax public enum FilterOperation Fields Name Description Contains Contains (contains) fulltext filter operation Equal Equal (=) filter operation Exists Exists (exists (...)) filter operation GreaterThan Greater Then (>) filter operation GreaterThanOrEqual Greater Then or Equal (>=) filter operation In In sequence (in (...)) filter operation LessThan Less Then (<) filter operation LessThanOrEqual Less Then or Equal (<=) filter operation Like Like (like) filter operation NotContains Not Contains (not contains) fulltext filter operation NotEqual Not Equal (!=) filter operation NotExists Not Exists (not exists (...)) filter operation NotIn Not In sequence (not in (...)) filter operation NotLike Not Like (not like) filter operation OuterJoin Outer join (outer join) filter operation See Also Operation Operation Equal NotEqual LessThan GreaterThan LessThanOrEqual GreaterThanOrEqual In NotIn Exists NotExists Like NotLike OuterJoin Contains NotContains Extension Methods SerializationExtensions.ToXml<FilterOperation>() CollectionsExtensions.SetValue<FilterOperation, T>(T) CollectionsExtensions.AsEnum<FilterOperation>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<FilterOperation, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.FilterNullable.html": {
    "href": "api/XData.FilterNullable.html",
    "title": "Enum FilterNullable | XData website",
    "keywords": "Enum FilterNullable Filter null value assignment mode Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum FilterNullable Fields Name Description Nullable Null value omit the filter (filter condition will not equated) NullsAllowed Null value is compared separately NullsCompared Null values is compared only NullsNotAllowed Null value is set filter condition to false See Also Nullable Nullable Nullable NullsAllowed NullsNotAllowed Extension Methods SerializationExtensions.ToXml<FilterNullable>() CollectionsExtensions.SetValue<FilterNullable, T>(T) CollectionsExtensions.AsEnum<FilterNullable>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<FilterNullable, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.FilterConstantType.html": {
    "href": "api/XData.FilterConstantType.html",
    "title": "Enum FilterConstantType | XData website",
    "keywords": "Enum FilterConstantType ConstantFilter value mode Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum FilterConstantType Fields Name Description Const Constant value CurrentDate Current date value CurrentDateTime Current date and time value CurrentDateTimeUtc Current date and time UTC value Variable Repository variable value by name See Also ConstantType Const Variable CurrentDate CurrentDateTime CurrentDateTimeUtc Extension Methods SerializationExtensions.ToXml<FilterConstantType>() CollectionsExtensions.SetValue<FilterConstantType, T>(T) CollectionsExtensions.AsEnum<FilterConstantType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<FilterConstantType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.html": {
    "href": "api/XData.Extensions.html",
    "title": "Namespace XData.Extensions | XData website",
    "keywords": "Namespace XData.Extensions Classes CollectionsExtensions Collections extension functions DataObjectQueryableExtensions XData LINQ query extensions ExpressionExtensions Expression extensions IndexAttribute Attribute to compare objects by property value Indexer<T> Indexed objects comparer Hint: Objects can be indexed by annotation attribute IndexAttribute JoinedEnumerable Joined enumerable extensions class JoinedEnumerable<T> Helper class to use outer joins TypeComparer Type equality comparer TypeExtensions Type extensions"
  },
  "api/XData.Extensions.CollectionsExtensions.html": {
    "href": "api/XData.Extensions.CollectionsExtensions.html",
    "title": "Class CollectionsExtensions | XData website",
    "keywords": "Class CollectionsExtensions Collections extension functions Inheritance Object CollectionsExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.dll Syntax public static class CollectionsExtensions Methods AsEnum<T>(T) Returns single item enumerable Declaration public static IEnumerable<T> AsEnum<T>(this T item) Parameters Type Name Description T item Item Returns Type Description IEnumerable <T> Single item enumerable Type Parameters Name Description T Item type Clear<T>(List<T>, Action<T>) Clear list content with action call on every element Declaration public static void Clear<T>(this List<T> list, Action<T> action) Parameters Type Name Description List <T> list List Action <T> action Action Type Parameters Name Description T List element type GetOrAdd<T>(IList<T>, Func<T, Boolean>, Func<T>) Returns first found element by predicate or add selector result and return it Declaration public static T GetOrAdd<T>(this IList<T> list, Func<T, bool> predicate, Func<T> selector) Parameters Type Name Description IList <T> list List Func <T, Boolean > predicate Find element predicate Func <T> selector Create element logic Returns Type Description T Found or crested element Type Parameters Name Description T Element type Exceptions Type Condition XDataRuntimeException Argument is null HasSameValuesAs(ICollection<TaggedValue>, ICollection<TaggedValue>) Dictionary comparison test Declaration public static bool HasSameValuesAs(this ICollection<TaggedValue> source, ICollection<TaggedValue> other) Parameters Type Name Description ICollection < TaggedValue > source Source dictionary ICollection < TaggedValue > other Matched dictionary Returns Type Description Boolean HasSameValuesAs<TKey, TValue>(ICollection<KeyValuePair<TKey, TValue>>, ICollection<KeyValuePair<TKey, TValue>>) Dictionary comparison test Declaration public static bool HasSameValuesAs<TKey, TValue>(this ICollection<KeyValuePair<TKey, TValue>> source, ICollection<KeyValuePair<TKey, TValue>> other) where TValue : IComparable Parameters Type Name Description ICollection < KeyValuePair <TKey, TValue>> source Source dictionary ICollection < KeyValuePair <TKey, TValue>> other Matched dictionary Returns Type Description Boolean Type Parameters Name Description TKey Type of dictionary key TValue Type of dictionary value HasSameValuesAs<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) Dictionary comparison test Declaration public static bool HasSameValuesAs<TKey, TValue>(this IDictionary<TKey, TValue> source, IDictionary<TKey, TValue> other) where TValue : IEquatable<TValue> Parameters Type Name Description IDictionary <TKey, TValue> source Source dictionary IDictionary <TKey, TValue> other Matched dictionary Returns Type Description Boolean Type Parameters Name Description TKey Type of dictionary key TValue Type of dictionary value IsEmpty(ICollection<IComparable>) IComparable array IsEmpty helper Declaration public static bool IsEmpty(this ICollection<IComparable> fields) Parameters Type Name Description ICollection < IComparable > fields Array of values Returns Type Description Boolean Any of fields is null or DBNull RemoveAll<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, Func<TKey, Boolean>) Remove all elements matched predicate Declaration public static void RemoveAll<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> collection, Func<TKey, bool> predicate) Parameters Type Name Description ConcurrentDictionary <TKey, TValue> collection Concurrent dictionary Func <TKey, Boolean > predicate Filtering predicate Type Parameters Name Description TKey Key type TValue Value type SetValue<TKey, T>(TKey, T) Named value pair builder Declaration public static KeyValuePair<TKey, T> SetValue<TKey, T>(this TKey name, T value) Parameters Type Name Description TKey name Name T value Value Returns Type Description KeyValuePair <TKey, T> Named value pair Type Parameters Name Description TKey Key type T Value type ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ToDictionary helper Declaration public static Dictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> pairs) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> pairs KeyValuePair collection Returns Type Description Dictionary <TKey, TValue> Typed Dictionary Type Parameters Name Description TKey Dictionary key type TValue Dictionary value type ToDictionary<TKey, TValue>(IEnumerable<IGrouping<TKey, TValue>>) ToDictionary groupings helper Declaration public static Dictionary<TKey, List<TValue>> ToDictionary<TKey, TValue>(this IEnumerable<IGrouping<TKey, TValue>> groupings) Parameters Type Name Description IEnumerable < IGrouping <TKey, TValue>> groupings Groupings Returns Type Description Dictionary <TKey, List <TValue>> Typed Dictionary Type Parameters Name Description TKey Dictionary key type TValue Dictionary value type ToSortedList<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ToSortedList helper Declaration public static SortedList<TKey, TValue> ToSortedList<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> pairs) where TKey : IComparable Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> pairs KeyValuePair collection Returns Type Description SortedList <TKey, TValue> Typed SortedList Type Parameters Name Description TKey Dictionary key type TValue Dictionary value type ToSortedList<TKey, TValue>(IEnumerable<IGrouping<TKey, TValue>>) ToSortedList groupings helper Declaration public static SortedList<TKey, List<TValue>> ToSortedList<TKey, TValue>(this IEnumerable<IGrouping<TKey, TValue>> groupings) where TKey : IComparable Parameters Type Name Description IEnumerable < IGrouping <TKey, TValue>> groupings Groupings Returns Type Description SortedList <TKey, List <TValue>> Typed SortedList Type Parameters Name Description TKey SortedList key type TValue SortedList value type ToSortedSet<T>(IEnumerable<T>, IComparer<T>) ToSortedSet helper Declaration public static SortedSet<T> ToSortedSet<T>(this IEnumerable<T> source, IComparer<T> comparer = null) Parameters Type Name Description IEnumerable <T> source Source sequence IComparer <T> comparer Source type comparer Returns Type Description SortedSet <T> Typed SortedSet Type Parameters Name Description T SortedSet type Remarks If comparer is not set GetInstance() used WARNING! To use Indexer<T> one of IComparable<T> properties of source type mast be marked by IndexAttribute TryGetValue<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, TKey) Try get value helper Declaration public static object TryGetValue<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, TKey key) where TKey : IEquatable<TKey> Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source Sequence of key value pairs TKey key Key value Returns Type Description Object Type Parameters Name Description TKey Key type TValue Value type"
  },
  "api/XData.ExecuteAttachedHandler-1.html": {
    "href": "api/XData.ExecuteAttachedHandler-1.html",
    "title": "Delegate ExecuteAttachedHandler<T> | XData website",
    "keywords": "Delegate ExecuteAttachedHandler<T> Execute attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool ExecuteAttachedHandler<in T>(string key, IEnumerable<T> objects) where T : class, IDataObject; Parameters Type Name Description String key Custom logic key IEnumerable <T> objects Object sequence Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.html": {
    "href": "api/XData.Exceptions.html",
    "title": "Namespace XData.Exceptions | XData website",
    "keywords": "Namespace XData.Exceptions Classes AdditionalInfo Exception and log additional info XDataAdapterException Adapter exception XDataConcurrencyException Concurrency exception XDataConfigurationException XData configuration exception XDataException Base XData exception class XDataExceptionAttribute XData exception attribute XDataQueryStructureException Query structure build failed XDataRuntimeException XData runtime exception XDataSecurityException XData security related exception XDataSqlException SQL exception Enums XDataAdapterExceptionType XData adapter exception types XDataConfigurationExceptionType XData configuration exception types XDataQueryStructureExceptionType Query structure exception types XDataRuntimeExceptionType XData runtime exception type"
  },
  "api/XData.Exceptions.XDataSqlException.html": {
    "href": "api/XData.Exceptions.XDataSqlException.html",
    "title": "Class XDataSqlException | XData website",
    "keywords": "Class XDataSqlException SQL exception Inheritance Object Exception ApplicationException XDataException XDataSqlException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Exceptions Assembly : XData.dll Syntax [Serializable] public sealed class XDataSqlException : XDataException, ISerializable Constructors XDataSqlException(Exception, Query) SQL exception Declaration public XDataSqlException(Exception exception, Query query) Parameters Type Name Description Exception exception Inner exception Query query Query XDataSqlException(Exception, AdditionalInfo[]) SQL exception Declaration public XDataSqlException(Exception exception, params AdditionalInfo[] addInfo) Parameters Type Name Description Exception exception Inner exception AdditionalInfo [] addInfo Additional information Properties Query Query Declaration public Query Query { get; } Property Value Type Description Query Implements System.Runtime.Serialization.ISerializable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataException.html": {
    "href": "api/XData.Exceptions.XDataException.html",
    "title": "Class XDataException | XData website",
    "keywords": "Class XDataException Base XData exception class Inheritance Object Exception ApplicationException XDataException XDataAdapterException XDataConcurrencyException XDataConfigurationException XDataQueryStructureException XDataRuntimeException XDataSecurityException XDataSqlException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Exceptions Assembly : XData.dll Syntax public abstract class XDataException : ApplicationException, ISerializable Constructors XDataException(String) Base XData exception class constructor Declaration protected XDataException(string message) Parameters Type Name Description String message XDataException(String, Exception) Base XData exception class constructor Declaration protected XDataException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException Implements System.Runtime.Serialization.ISerializable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataConfigurationExceptionType.html": {
    "href": "api/XData.Exceptions.XDataConfigurationExceptionType.html",
    "title": "Enum XDataConfigurationExceptionType | XData website",
    "keywords": "Enum XDataConfigurationExceptionType XData configuration exception types Namespace : XData.Exceptions Assembly : XData.dll Syntax public enum XDataConfigurationExceptionType Fields Name Description AdapterAssemblyNotFoundError Adapter assembly not found AdapterNotConfiguredError Data adapter not configured ConfigurationFileLoadError Configuration file load error ConfigurationFileSaveError Configuration file save error ConfigurationXmlReadError Configuration xml read error ContextNotConfiguredError Data context not configured DefaultContextNotFoundError Default data context is not found ProxyNotConfiguredError Proxy not configured Extension Methods SerializationExtensions.ToXml<XDataConfigurationExceptionType>() CollectionsExtensions.SetValue<XDataConfigurationExceptionType, T>(T) CollectionsExtensions.AsEnum<XDataConfigurationExceptionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<XDataConfigurationExceptionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.ISequenceNameRule.html": {
    "href": "api/XData.Interfaces.ISequenceNameRule.html",
    "title": "Interface ISequenceNameRule | XData website",
    "keywords": "Interface ISequenceNameRule Sequence name rule interface Namespace : XData.Interfaces Assembly : XData.dll Syntax public interface ISequenceNameRule Methods GetSequenceName(String, String, String) Returns sequence name Declaration string GetSequenceName(string context, string tableName, string columnName) Parameters Type Name Description String context Context name String tableName Table name String columnName Column name Returns Type Description String Sequence name Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.ISecuritySession.html": {
    "href": "api/XData.Interfaces.ISecuritySession.html",
    "title": "Interface ISecuritySession | XData website",
    "keywords": "Interface ISecuritySession Security session interface Namespace : XData.Interfaces Assembly : XData.dll Syntax public interface ISecuritySession Properties IsSupervisor Current user is supervisor flag Declaration bool IsSupervisor { get; } Property Value Type Description Boolean Roles Current user roles list Declaration string[] Roles { get; } Property Value Type Description String [] UserName Current user name Declaration string UserName { get; } Property Value Type Description String Methods FilterGrantedObjects<T>(String, Expression) Converts initial IQueryable expression filtering granted objects only Declaration Expression FilterGrantedObjects<T>(string context, Expression allDataExpr) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Expression allDataExpr Initial IQueryable expression Returns Type Description Expression Modified IQueryable expression Type Parameters Name Description T Data object type GetGrantedActions<T>(String) Returns list of granted actions for current user Declaration string[] GetGrantedActions<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description String [] Actions list Type Parameters Name Description T Data object type GetRestrictedProperties<T>(String) Returns list of restricted properties for current user Declaration string[] GetRestrictedProperties<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description String [] Properties name list Type Parameters Name Description T Data object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.InitObject-1.html": {
    "href": "api/XData.InitObject-1.html",
    "title": "Delegate InitObject<T> | XData website",
    "keywords": "Delegate InitObject<T> Object instance initialization delegate type Namespace : XData Assembly : XData.dll Syntax public delegate void InitObject<T>(ref T obj) where T : class, IDataObject; Parameters Type Name Description T obj Object instance Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also InitObject OnInitObject"
  },
  "api/XData.IDataScope.html": {
    "href": "api/XData.IDataScope.html",
    "title": "Interface IDataScope | XData website",
    "keywords": "Interface IDataScope XData operational scope Inherited Members IDisposable.Dispose() Namespace : XData Assembly : XData.dll Syntax public interface IDataScope : IDisposable Properties DefaultContext Data scope default context Declaration string DefaultContext { get; } Property Value Type Description String Layer Data scope layer identity Declaration Guid Layer { get; } Property Value Type Description Guid Methods BeginTransaction(String, Boolean, IsolationLevel) Begins single context transaction Declaration ITransaction BeginTransaction(string context = null, bool read = false, IsolationLevel isolation = IsolationLevel.ReadCommitted) Parameters Type Name Description String context Context Boolean read Read only transaction IsolationLevel isolation Transaction isolation level Returns Type Description ITransaction Transaction wrapper Exceptions Type Condition XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataSqlException SQL exceptions while beginning transaction. See Also ITransaction IsolationLevel GetDictionaryValue<T>(Expression<Func<T, Boolean>>, String, String, ISecuritySession, Variable[]) Returns dictionary value by find expression and cache result Declaration T GetDictionaryValue<T>(Expression<Func<T, bool>> findExpression, string alias = null, string context = null, ISecuritySession security = null, params Variable[] variables) where T : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, Boolean >> findExpression Expression to find value String alias Repository alias String context Repository context ISecuritySession security Security session Variable [] variables Repository variables Returns Type Description T Dictionary object Type Parameters Name Description T Dictionary type Exceptions Type Condition XDataRuntimeException XDataRuntimeException No original data found for object XDataRuntimeException findExpression parameter is null GetQuery<T>(TextReader, String, ISecuritySession) Get query Declaration IDataQuery<T> GetQuery<T>(TextReader reader, string alias = null, ISecuritySession security = null) where T : class, IDataObject, new() Parameters Type Name Description TextReader reader Serialized data reader String alias Base repository alias ISecuritySession security Security session Returns Type Description IDataQuery <T> Data query Type Parameters Name Description T Data object type Exceptions Type Condition XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataAdapterException Adapter logic error. XDataRuntimeException reader parameter can not be null GetRepository<T>(TextReader) Get repository Declaration IRepository<T> GetRepository<T>(TextReader reader) where T : class, IDataObject, new() Parameters Type Name Description TextReader reader Serialized data reader Returns Type Description IRepository <T> Repository Type Parameters Name Description T Data object type Exceptions Type Condition XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataAdapterException Adapter logic error. XDataRuntimeException reader parameter can not be null GetRepository<T>(String, String, ISecuritySession, Variable[]) Get repository Declaration IRepository<T> GetRepository<T>(string alias = null, string context = null, ISecuritySession security = null, params Variable[] variables) where T : class, IDataObject, new() Parameters Type Name Description String alias Data object alias String context Data context ISecuritySession security Security session Variable [] variables Data object variables Returns Type Description IRepository <T> Repository Type Parameters Name Description T Data object type Exceptions Type Condition XDataQueryStructureException no mapping found. XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors. XDataAdapterException Custom logic error. Reset() Reset data scope caches Declaration void Reset() Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IDataQuery.html": {
    "href": "api/XData.IDataQuery.html",
    "title": "Interface IDataQuery | XData website",
    "keywords": "Interface IDataQuery Read only data source basic interface Inherited Members IQueryable.ElementType IQueryable.Expression IQueryable.Provider IEnumerable.GetEnumerator() IDisposable.Dispose() Namespace : XData Assembly : XData.dll Syntax public interface IDataQuery : IOrderedQueryable, IQueryable, IEnumerable, IDisposable Properties Alias Data repository alias Declaration string Alias { get; } Property Value Type Description String Remarks Default value is data object type name Context Data context Declaration string Context { get; } Property Value Type Description String Layer Data repository layer Declaration Guid Layer { get; } Property Value Type Description Guid Remarks Sharing same layer the data object repositories can interact automatically as parent/child (see ExternalLinkAttribute ) Repositories on different layers but same data object are independent for each other Repositories on same layer based on same data object is the same repository Variables Data query/repository/call result variables Declaration VariableIndexer Variables { get; } Property Value Type Description VariableIndexer Remarks Variable values can be used to set the filter values (query/repository) Variable values can be used in custom logic (repository) Variables is stored in query/repository/call result instance Examples var rep = dataScope.GetRepository<Customer>(variables: new []{\"OurCode\", \"SELF\"}); var newInvoice = dataScope.GetRepository<Invoice>().New(); newInvoice.CustomerFrom += rep.First(x => x.Code.CompareVariable(FilterOperation.Equal, \"SELF\")); See Also Variable GetRepository<T>(String, String, ISecuritySession, Variable[]) XData.DataObjectExtensions.CompareVariable(XData.IDataQueryInternal,System.Object,XData.FilterOperation,System.String) Extension Methods DataObjectExtensions.GetParameter<T>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IDataQuery-1.html": {
    "href": "api/XData.IDataQuery-1.html",
    "title": "Interface IDataQuery<T> | XData website",
    "keywords": "Interface IDataQuery<T> Specialized read only data source interface Inherited Members IDataQuery.Alias IDataQuery.Layer IDataQuery.Context IDataQuery.Variables IDisposable.Dispose() IEnumerable<T>.GetEnumerator() IQueryable.ElementType IQueryable.Expression IQueryable.Provider Namespace : XData Assembly : XData.dll Syntax public interface IDataQuery<out T> : IDataQuery, IDisposable, IOrderedQueryable<T>, IOrderedQueryable, IQueryable<T>, IEnumerable<T>, IQueryable, IEnumerable where T : class Type Parameters Name Description T Data source type Methods GetFilterValue(RuntimeFilter) Get metadata defined RuntimeFilter value Declaration object GetFilterValue(RuntimeFilter filter) Parameters Type Name Description RuntimeFilter filter Filter Returns Type Description Object Filter value Exceptions Type Condition XDataRuntimeException \"filter\" parameter is null. See Also RuntimeFilter Reset() SetFilterValue(RuntimeFilter, Object) Reset() Reset repository structure and filter values Declaration IDataQuery<T> Reset() Returns Type Description IDataQuery <T> Self repository link See Also RuntimeFilter GetFilterValue(RuntimeFilter) SetFilterValue(RuntimeFilter, Object) SetFilterValue(RuntimeFilter, Object) Set metadata defined RuntimeFilter value Declaration IDataQuery<T> SetFilterValue(RuntimeFilter filter, object val) Parameters Type Name Description RuntimeFilter filter Filter Object val Filter value Returns Type Description IDataQuery <T> Self repository link Remarks Hint: Set val = null to clear filter Exceptions Type Condition XDataRuntimeException \"filter\" parameter is null. See Also RuntimeFilter Reset() GetFilterValue(RuntimeFilter) Extension Methods DataObjectExtensions.GetParameter<T>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, String) DataObjectExtensions.GetResultSet<TRes>(IDataQuery, Expression<Func<IEnumerable<TRes>>>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Extensions.TypeExtensions.html": {
    "href": "api/XData.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | XData website",
    "keywords": "Class TypeExtensions Type extensions Inheritance Object TypeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.dll Syntax public static class TypeExtensions Methods ConvertTo<T>(Enum) Convert enumeration value to another enumeration by hash code Declaration public static T ConvertTo<T>(this Enum source) Parameters Type Name Description Enum source Source enumeration value Returns Type Description T Target enumeration value Type Parameters Name Description T Target enumeration type EqualValue(Enum, Enum) Compare Enumeration values by hash codes Declaration public static bool EqualValue(this Enum source, Enum other) Parameters Type Name Description Enum source Source enumeration value Enum other Other enumeration value Returns Type Description Boolean Values are equal GetDefault<TType>() Get type default value Declaration public static object GetDefault<TType>() Returns Type Description Object Default value Type Parameters Name Description TType Type GetEnumKeyValuePairs(Type) Declaration public static IEnumerable<KeyValuePair<long, string>> GetEnumKeyValuePairs(this Type enumType) Parameters Type Name Description Type enumType Returns Type Description IEnumerable < KeyValuePair < Int64 , String >> GetEnumValue(Type, Int64) Returns enum id and value pair for specified id Declaration public static KeyValuePair<long, string>? GetEnumValue(this Type enumType, long id) Parameters Type Name Description Type enumType Enum type Int64 id Enum key Returns Type Description Nullable < KeyValuePair < Int64 , String >> Enum id and value pair GetGenericMethod(Type, String, IEnumerable<Type>) Returns generic method with typed arguments Declaration public static MethodInfo GetGenericMethod(this Type type, string name, IEnumerable<Type> parameterTypes) Parameters Type Name Description Type type Method type String name Method name IEnumerable < Type > parameterTypes Parameter types Returns Type Description MethodInfo Reflection method info Exceptions Type Condition XDataRuntimeException Method name can not be null or empty XDataRuntimeException Method parameter types can not be null GetLocalizedEnumKeyValuePairs(Type) Returns id and name pairs for all enum values Declaration public static IEnumerable<KeyValuePair<long, string>> GetLocalizedEnumKeyValuePairs(this Type enumType) Parameters Type Name Description Type enumType Enum type Returns Type Description IEnumerable < KeyValuePair < Int64 , String >> Sequence of id and name pairs for all enum values GetLocalizedEnumValue(Type, Int64) Returns enum id and localized value pair for specified id Declaration public static KeyValuePair<long, string>? GetLocalizedEnumValue(this Type enumType, long id) Parameters Type Name Description Type enumType Enum type Int64 id Enum key Returns Type Description Nullable < KeyValuePair < Int64 , String >> Enum id and localized value pair GetRealType(Type) Get Generic base type Declaration public static Type GetRealType(this Type type) Parameters Type Name Description Type type Type Returns Type Description Type Base type Implements<T>(Type, T) Test type implements an interface Declaration public static bool Implements<T>(this Type type, T interfaceType) where T : Type Parameters Type Name Description Type type Type T interfaceType Interface Returns Type Description Boolean Type is implements an interface Type Parameters Name Description T Interface type InvokeMethod(Object, Expression<Action>, BindingFlags) Invoke method with replacing base object type wrapper Declaration public static void InvokeMethod(this object obj, Expression<Action> expr, BindingFlags bindingFlags = BindingFlags.Default) Parameters Type Name Description Object obj Object to invoke method with Expression < Action > expr Call expression BindingFlags bindingFlags Binding flags Exceptions Type Condition XDataRuntimeException InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) Invoke generic method wrapper Declaration public static void InvokeMethod(this object obj, Type[] types, Expression<Action> expr, BindingFlags bindingFlags = BindingFlags.Default) Parameters Type Name Description Object obj Object to invoke method (set null to call static method) Type [] types Generic arguments types array Expression < Action > expr Call expression (set generic arguments to any valid types) BindingFlags bindingFlags Binding flags Exceptions Type Condition XDataRuntimeException InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) Invoke method with replacing base object type wrapper Declaration public static TRet InvokeMethod<TRet>(this object obj, Expression<Func<TRet>> expr, BindingFlags bindingFlags = BindingFlags.Default) Parameters Type Name Description Object obj Object to invoke method with Expression < Func <TRet>> expr Call expression BindingFlags bindingFlags Binding flags Returns Type Description TRet Call return value Type Parameters Name Description TRet Return value type Exceptions Type Condition XDataRuntimeException InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) Invoke generic method wrapper Declaration public static TRet InvokeMethod<TRet>(this object obj, Type[] types, Expression<Func<TRet>> expr, BindingFlags bindingFlags = BindingFlags.Default) Parameters Type Name Description Object obj Object to invoke method (set null to call static method) Type [] types Generic arguments types array Expression < Func <TRet>> expr Call expression (set generic arguments to any valid types) BindingFlags bindingFlags Binding flags Returns Type Description TRet Call return value Type Parameters Name Description TRet Return value type Exceptions Type Condition XDataRuntimeException IsBasedOn<TType>(Type) Check generic base type Declaration public static bool IsBasedOn<TType>(this Type type) Parameters Type Name Description Type type Generic type Returns Type Description Boolean Generic type is based on TType Type Parameters Name Description TType Base type to check IsBinary(Type) Check Lob type Declaration public static bool IsBinary(this Type type) Parameters Type Name Description Type type Type to check Returns Type Description Boolean Type is binary IsEnum(Type) Check Enum type Declaration public static bool IsEnum(this Type type) Parameters Type Name Description Type type Type to check Returns Type Description Boolean Type is binary IsNullable(Type) Check nullable type Declaration public static bool IsNullable(this Type type) Parameters Type Name Description Type type Type to check Returns Type Description Boolean Type is nullable IsXml(Type) Check Xml type Declaration public static bool IsXml(this Type type) Parameters Type Name Description Type type Type to check Returns Type Description Boolean Type is binary NullWrap<T>(T) Null value wrapper Declaration public static T NullWrap<T>(T source) where T : class, new() Parameters Type Name Description T source Source Returns Type Description T Source or empty object of source type Type Parameters Name Description T Source type NullWrap<T>(T[]) Null value wrapper Declaration public static T[] NullWrap<T>(T[] source) Parameters Type Name Description T[] source Source array Returns Type Description T[] Source or empty array Type Parameters Name Description T Array element type ParseEnum(Type, String) Returns id for specified enum type and string value Declaration public static long? ParseEnum(this Type enumType, string value) Parameters Type Name Description Type enumType Enum type String value String value of enum Returns Type Description Nullable < Int64 > Enum id ParseEnumRange(Type, ICollection<Object>) Parse enum values range Declaration public static object[] ParseEnumRange(this Type enumType, ICollection<object> values) Parameters Type Name Description Type enumType Enum type ICollection < Object > values Enum values range Returns Type Description Object [] Enum id array See Also ParseEnum(Type, String) ParseType(String) Parse type full name Declaration public static Type ParseType(this string typeFullName) Parameters Type Name Description String typeFullName Returns Type Description Type TryConvert<T, TResult>(T, Func<T, TResult>) Try to convert value Declaration public static TResult TryConvert<T, TResult>(this T source, Func<T, TResult> convert) where T : class Parameters Type Name Description T source Source value Func <T, TResult> convert Conversion logic Returns Type Description TResult Converted value or default of TResult Type Parameters Name Description T Source type TResult Result type TryConvert<T, TResult>(T, Func<T, TResult>, TResult) Try to convert value Declaration public static TResult TryConvert<T, TResult>(this T source, Func<T, TResult> convert, TResult defaultValue) where T : class Parameters Type Name Description T source Source value Func <T, TResult> convert Conversion logic TResult defaultValue Default result value Returns Type Description TResult Converted value or default of TResult Type Parameters Name Description T Source type TResult Result type"
  },
  "api/XData.Extensions.TypeComparer.html": {
    "href": "api/XData.Extensions.TypeComparer.html",
    "title": "Class TypeComparer | XData website",
    "keywords": "Class TypeComparer Type equality comparer Inheritance Object TypeComparer Implements IEqualityComparer < Type > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.dll Syntax public class TypeComparer : IEqualityComparer<Type> Properties Instance Type equality comparer instance Declaration public static TypeComparer Instance { get; } Property Value Type Description TypeComparer Methods Equals(Type, Type) Determines whether the specified types are equal. Declaration public bool Equals(Type x, Type y) Parameters Type Name Description Type x The first type to compare. Type y The second type to compare. Returns Type Description Boolean true if the specified types are equal; otherwise, false. GetHashCode(Type) Returns a hash code for the specified type. Declaration public int GetHashCode(Type obj) Parameters Type Name Description Type obj The type for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified type. Implements System.Collections.Generic.IEqualityComparer<T> Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Combination.html": {
    "href": "api/XData.Combination.html",
    "title": "Enum Combination | XData website",
    "keywords": "Enum Combination Filter combination logical composition Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum Combination Fields Name Description And AND Or OR See Also Combination And Or Extension Methods SerializationExtensions.ToXml<Combination>() CollectionsExtensions.SetValue<Combination, T>(T) CollectionsExtensions.AsEnum<Combination>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<Combination, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Actions.html": {
    "href": "api/XData.Actions.html",
    "title": "Class Actions | XData website",
    "keywords": "Class Actions Standard actions used by security Inheritance Object Actions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public static class Actions Fields All All actions (CRUD and custom actions) Declaration public const string All = \"`ALL`\" Field Value Type Description String Create Create action Declaration public const string Create = \"`CREATE`\" Field Value Type Description String CRUD CRUD actions Declaration public const string CRUD = \"`CRUD`\" Field Value Type Description String Delete Delete action Declaration public const string Delete = \"`DELETE`\" Field Value Type Description String Update Update action Declaration public const string Update = \"`UPDATE`\" Field Value Type Description String"
  },
  "api/XData.html": {
    "href": "api/XData.html",
    "title": "Namespace XData | XData website",
    "keywords": "Namespace XData Classes Actions Standard actions used by security AttachedHandler<T> Data object level attached handler wrapper DataObjectExtensions IDataObject extension functions Log Log helper ParameterIndexer SQL procedure call out parameters indexer RepositoryAttachedHandler<T> Repository level attached handler wrapper RepositoryIndexer Data object links (parents and childs) indexer Resources A strongly-typed resource class, for looking up localized strings, etc. ResultSetIndexer SQL procedure call out result sets indexer RuntimeAssemblyLoader SerializationExtensions Serialization extensions SerializedData Serialized data SerializedValue Serialized data value Variable Data object repository variable VariableIndexer Data object variables indexer Work Work set helper class XDataLogic<T> XDataManager Data manager Defines user session context across (possible) multiple data sources XDataPureLinqMethodAttribute Attribute to mark XData pure LINQ methods with no realization Interfaces IDataEngine XData engine interface IDataLogic<T> Data logic interface IDataObject Data object interface IDataOptions XData options interface IDataQuery Read only data source basic interface IDataQuery<T> Specialized read only data source interface IDataScope XData operational scope IRepository Data repository (data object collection) basic interface IRepository<T> Data repository (data object collection) type specific interface ISqlObject SQL (sub)query part interface IWorkSet Basic work set interface IWorkSet<T> Work set interface Enums AttachedHandlerType Attached event types Combination Filter combination logical composition DataActionType Action type DataCombination Data set combination modes DataExpressionType Expression type DataGrouping Data aggregation function DataObjectState Data object instance state DataPropertyFlag Data object property flags DataSourceType Data source type DataStructureFlag Data object structure flags DataSubmitFlag Data submit options DataTriggerFlag Data trigger result flags DataVersion Version of data DateDiffKind Date difference kind DefaultType Default value type DialectOptions SQL dialect options SequenceRequired WithSupported ReturningInResult StoredProceduresSupported ScalarFunctionsSupported TableFunctionsSupported ObjectParametersSupported TableParametersSupported ScalarFunctionsOutParametersAllowed TableOutParametersAllowed MultipleRecordsetProceduresSupported FilterConstantType ConstantFilter value mode FilterNullable Filter null value assignment mode FilterOperation Filter operation FilterType Filter type MessageType Log message type ProcedureType SQL stored procedure type WithRecursiveType Common-Table-Expression (WITH) Subquery type WorkState Work set state Delegates Calculate<T> XData LINQ-styled SQL expression delegate type ClearAttachedHandler Clear attached handler delegate CurrentObjectChanged<T> Object assigned as current event delegate type CurrentObjectChanging<T> Assigning object as current event delegate type CustomLogic<T> Custom server logic delegate type CustomMapping<T> Custom mapping delegate type ExecuteAttachedHandler<T> Execute attached handler delegate GetLobAttachedHandler Get Lob attached handler delegate GetLobSizeAttachedHandler Get Lob size attached handler delegate GetXmlAttachedHandler Get Xml attached handler delegate InitObject<T> Object instance initialization delegate type InitRepository<T> Repository initialization delegate type InvalidateObject<T> Refresh one object event delegate type InvalidateRepository<T> Refresh repository event delegate type LockAttachedHandler<T> Lock object attached handler delegate Mapping<TFrom, T> Mapping logic delegate type RefreshAttachedHandler<T> Refresh attached handler delegate RepositoryTrigger<T> RepositoryTrigger logic delegate type SetLobAttachedHandler Set Lob attached handler delegate SetXmlAttachedHandler Set Xml attached handler delegate SubmitAttachedHandler<T> Submit attached handler delegate SubmitObjectAttachedHandler<T> Submit object attached handler delegate SubmitQueryAttachedHandler<T> Lock object attached handler delegate Trigger<T> Trigger logic delegate type"
  },
  "api/XData.XDataPureLinqMethodAttribute.html": {
    "href": "api/XData.XDataPureLinqMethodAttribute.html",
    "title": "Class XDataPureLinqMethodAttribute | XData website",
    "keywords": "Class XDataPureLinqMethodAttribute Attribute to mark XData pure LINQ methods with no realization Inheritance Object System.Attribute XDataPureLinqMethodAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class XDataPureLinqMethodAttribute : Attribute Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ExpressionFilterAttribute.html": {
    "href": "api/XData.Mapping.ExpressionFilterAttribute.html",
    "title": "Class ExpressionFilterAttribute | XData website",
    "keywords": "Class ExpressionFilterAttribute Data object plain SQL expression filter attribute Inheritance Object System.Attribute FilterBaseAttribute FilterAttribute ExpressionFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ExpressionFilterAttribute : FilterAttribute Remarks Used to filter data by field comparison to plain SQL expression (for example: some_field = substr(other_field, 1, 2) ) Hint: Filter field can be represented as expression two by ColumnExpressionAttribute or PropertyExpressionAttribute WARNING! Sql expressions can use specific Sql dialect features! Data mapping may be not compatible with other database engines! Constructors ExpressionFilterAttribute(String, String, String) Expression filter attribute Declaration public ExpressionFilterAttribute(string source, string fieldName, string exprText) Parameters Type Name Description String source Primary source alias String fieldName Primary field name String exprText SQL expression text Exceptions Type Condition XDataRuntimeException SQL expression cannot be null or empty string Properties ExprText SQL expression Declaration public string ExprText { get; } Property Value Type Description String Remarks WARNING! SQL expressions can use specific SQL dialect features! Data mapping may be not compatible with other database engines! FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Expression Overrides FilterBaseAttribute.FilterType TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ISubqueryFilterAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.ISubqueryFilterAdapter-1.html",
    "title": "Interface ISubqueryFilterAdapter<TDObj> | XData website",
    "keywords": "Interface ISubqueryFilterAdapter<TDObj> Subquery link filter description adapter Inherited Members ISubqueryFilterAdapter.SubqueryLink(String) ISubqueryFilterAdapter.SubqueryLink(String, String) IFilterAdapter.Combination(String, Combination, String) IFilterAdapter.Combination(String, Combination) Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface ISubqueryFilterAdapter<TDObj> : ISubqueryFilterAdapter, IFilterAdapter where TDObj : class Type Parameters Name Description TDObj Subquery mapped type Methods SubqueryLink(Expression<Func<TDObj, Object>>) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with Returns Type Description IFilterDescription Filter description SubqueryLink(Expression<Func<TDObj, Object>>, String) Subquery link filter description Declaration IFilterDescription SubqueryLink(Expression<Func<TDObj, object>> subqueryProperty, string property) Parameters Type Name Description Expression < Func <TDObj, Object >> subqueryProperty Subquery property name expression to link with String property Base query property name to link with Returns Type Description IFilterDescription Filter description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IStructureFlag.html": {
    "href": "api/XData.Mapping.Dynamic.IStructureFlag.html",
    "title": "Interface IStructureFlag | XData website",
    "keywords": "Interface IStructureFlag Dynamic structure flag interface Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IStructureFlag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IResultSetDescription.html": {
    "href": "api/XData.Mapping.Dynamic.IResultSetDescription.html",
    "title": "Interface IResultSetDescription | XData website",
    "keywords": "Interface IResultSetDescription Dynamic stored procedure result set description Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IResultSetDescription Properties Alias Stored procedure alias Declaration string Alias { get; } Property Value Type Description String Name Result set name Declaration string Name { get; } Property Value Type Description String Order Result set order Declaration int Order { get; } Property Value Type Description Int32 Methods Clone() Clone result set description Declaration IResultSetDescription Clone() Returns Type Description IResultSetDescription Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Return<T>(String, String, Int32, Expression<Func<IQueryStructureAdapter, T>>)"
  },
  "api/XData.Mapping.ColumnExpressionAttribute.html": {
    "href": "api/XData.Mapping.ColumnExpressionAttribute.html",
    "title": "Class ColumnExpressionAttribute | XData website",
    "keywords": "Class ColumnExpressionAttribute Column expression attribute Inheritance Object System.Attribute ColumnExpressionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ColumnExpressionAttribute : Attribute Remarks Used when ColumnAttribute value is expression ( PlainSql or SubQuery ) according ExprType Constructors ColumnExpressionAttribute(String, String, DataExpressionType, DbType) Column expression attribute Declaration public ColumnExpressionAttribute(string propertyName, string exprText, DataExpressionType exprType = DataExpressionType.PlainSql, DbType type = DbType.String) Parameters Type Name Description String propertyName Property name String exprText Expression text DataExpressionType exprType Expression type DbType type Expression DbType Exceptions Type Condition XDataRuntimeException Property name cannot be null or empty string XDataRuntimeException Expression text cannot be null or empty string Properties DbType Expression DbType Declaration public DbType DbType { get; } Property Value Type Description DbType ExprScale Expression scale Declaration public int ExprScale { get; set; } Property Value Type Description Int32 ExprSize Expression size Declaration public int ExprSize { get; set; } Property Value Type Description Int32 ExprText Expression text Declaration public string ExprText { get; } Property Value Type Description String Remarks PlainSql expression text is Sql expression or SqlExpressionAttribute name SubQuery expression text is Alias WARNING! Plain Sql expressions (see ExprType ) can use specific Sql dialect features! Data mapping may be not compatible with other database engines! Use SqlExpressionAttribute instead. ExprType Expression type Declaration public DataExpressionType ExprType { get; } Property Value Type Description DataExpressionType Remarks WARNING! Plain Sql expressions can use specific Sql dialect features! Data mapping may be not compatible with other database engines! See Also DataExpressionType PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description String See Also ColumnAttribute TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ColumnDefaultAttribute.html": {
    "href": "api/XData.Mapping.ColumnDefaultAttribute.html",
    "title": "Class ColumnDefaultAttribute | XData website",
    "keywords": "Class ColumnDefaultAttribute Column default value attribute Inheritance Object System.Attribute ColumnDefaultAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ColumnDefaultAttribute : Attribute Remarks Used to declare default value rule for column Constructors ColumnDefaultAttribute(String, DefaultType, String) Column default value attribute Declaration public ColumnDefaultAttribute(string propertyName, DefaultType source, string val = \"\") Parameters Type Name Description String propertyName Property name DefaultType source Default value source String val Default value Exceptions Type Condition XDataRuntimeException Property name cannot be null or empty string Properties AlwaysUseDefault Always use the default value (also when updating) Declaration public bool AlwaysUseDefault { get; set; } Property Value Type Description Boolean DefaultSource Default value source Declaration public DefaultType DefaultSource { get; } Property Value Type Description DefaultType DefaultValue Default value Declaration public string DefaultValue { get; } Property Value Type Description String PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description String See Also ColumnAttribute TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DefaultType"
  },
  "api/XData.DataSource.Structure.Order.html": {
    "href": "api/XData.DataSource.Structure.Order.html",
    "title": "Class Order | XData website",
    "keywords": "Class Order Order by element Inheritance Object Order Implements IEquatable < Order > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax [Serializable] [DataContract] public sealed class Order : IEquatable<Order> Properties Descending Descending flag Declaration [DataMember] public bool Descending { get; set; } Property Value Type Description Boolean FieldName Field name Declaration [DataMember] public string FieldName { get; set; } Property Value Type Description String PropertyOwnerType Property owner type name Declaration [DataMember] public string PropertyOwnerType { get; set; } Property Value Type Description String SourceAlias Source alias Declaration [DataMember] public string SourceAlias { get; set; } Property Value Type Description String Methods Equals(Order) Order equality check Declaration public bool Equals(Order other) Parameters Type Name Description Order other Order instance to compare Returns Type Description Boolean Instances are contains the same data Implements System.IEquatable<T> Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.ITable.html": {
    "href": "api/XData.DataSource.Structure.ITable.html",
    "title": "Interface ITable | XData website",
    "keywords": "Interface ITable Table Inherited Members IDataSource.SourceType IDataSource.Alias IDataSource.IsBase IDataSource.GetFields() IDataSource.GetFields(Type) IDataSource.GetField(String, String, String) IDataSource.GetField(String, String, String, String) ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface ITable : IDataSource, ICloneable Properties Fields Fields Declaration SortedSet<IField> Fields { get; } Property Value Type Description SortedSet < IField > Hierarchies Hierarchies Declaration List<Hierarchy> Hierarchies { get; } Property Value Type Description List < Hierarchy > Hint Table hint Declaration HintInfo[] Hint { get; } Property Value Type Description HintInfo [] Name Table name Declaration string Name { get; } Property Value Type Description String ParentAlias Parent table alias Declaration string ParentAlias { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IExpressionFilter.html": {
    "href": "api/XData.DataSource.Structure.IExpressionFilter.html",
    "title": "Interface IExpressionFilter | XData website",
    "keywords": "Interface IExpressionFilter Expression filter interface Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IExpressionFilter : IFilter, ICloneable Properties ExprText Expression text Declaration string ExprText { get; } Property Value Type Description String IteratorFilter Iterator filter flag Declaration bool IteratorFilter { get; } Property Value Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IDictionaryFilter.html": {
    "href": "api/XData.DataSource.Structure.IDictionaryFilter.html",
    "title": "Interface IDictionaryFilter | XData website",
    "keywords": "Interface IDictionaryFilter Dictionary filter interface Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IDictionaryFilter : IFilter, ICloneable Properties DictionaryCode Dictionary code field Declaration string DictionaryCode { get; } Property Value Type Description String DictionaryId Dictionary id field Declaration string DictionaryId { get; } Property Value Type Description String DictionaryTableName Dictionary table name Declaration string DictionaryTableName { get; } Property Value Type Description String DictionaryValue Dictionary search value Declaration string DictionaryValue { get; } Property Value Type Description String IsVariableValue Dictionary search value is variable name flag Declaration bool IsVariableValue { get; } Property Value Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataGrouping.html": {
    "href": "api/XData.DataGrouping.html",
    "title": "Enum DataGrouping | XData website",
    "keywords": "Enum DataGrouping Data aggregation function Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum DataGrouping Fields Name Description Avg Avg() Count Count() Max Max() Min Min() None No aggregate function applied Sum Sum() See Also Grouping Grouping Grouping None Count Sum Max Min Avg Extension Methods SerializationExtensions.ToXml<DataGrouping>() CollectionsExtensions.SetValue<DataGrouping, T>(T) CollectionsExtensions.AsEnum<DataGrouping>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataGrouping, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.QueryParam.html": {
    "href": "api/XData.Database.Adapter.QueryParam.html",
    "title": "Class QueryParam | XData website",
    "keywords": "Class QueryParam SQL query parameter Inheritance Object QueryParam Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database.Adapter Assembly : XData.dll Syntax public class QueryParam Constructors QueryParam(String, Object, DbType, Int32) Query parameter constructor Declaration public QueryParam(string name, object value = null, DbType type = DbType.String, int length = 0) Parameters Type Name Description String name Parameter name Object value Parameter value DbType type Parameter data type Int32 length Parameter value max length QueryParam(QueryParam, Object) Query parameter copy constructor Declaration public QueryParam(QueryParam param, object value = null) Parameters Type Name Description QueryParam param Parameter name Object value Parameter value Properties Direction Parameter direction Declaration public ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection IsArray Collection type array flag Set to true to use with VARARRAY collections WARNING! Using UDT can be not supported or limited by adapter! Declaration public bool IsArray { get; set; } Property Value Type Description Boolean IsResultSet Parameter is result set Declaration public bool IsResultSet { get; set; } Property Value Type Description Boolean Length Parameter value max length Declaration public int Length { get; } Property Value Type Description Int32 Name Parameter name Declaration public string Name { get; } Property Value Type Description String NativeSqlType Parameter native SQL type Declaration public string NativeSqlType { get; set; } Property Value Type Description String Type Parameter data type Declaration public DbType Type { get; } Property Value Type Description DbType UdtElementTypeName Single object (or collection element) user defined type (UDT) SQL type name WARNING! Specify full qualified type name! WARNING! Using UDT can be not supported or limited by adapter! Declaration public string UdtElementTypeName { get; set; } Property Value Type Description String UdtMappedType Class type mapped with user defined type (UDT) SQL type name This type properties are mapped to SQL type by name (case insensitive) WARNING! Beware to use property data types not supported by adapter or user defined type (UDT)! WARNING! Using UDT can be not supported or limited by adapter! Declaration public Type UdtMappedType { get; set; } Property Value Type Description Type UdtTypeName Collection user defined type (UDT) SQL type name WARNING! Specify full qualified type name! WARNING! Using UDT can be not supported or limited by adapter! Declaration public string UdtTypeName { get; set; } Property Value Type Description String Value Parameter value Declaration public object Value { get; } Property Value Type Description Object Methods ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString() Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.CurrentObjectChanged-1.html": {
    "href": "api/XData.CurrentObjectChanged-1.html",
    "title": "Delegate CurrentObjectChanged<T> | XData website",
    "keywords": "Delegate CurrentObjectChanged<T> Object assigned as current event delegate type Namespace : XData Assembly : XData.dll Syntax public delegate void CurrentObjectChanged<in T>(T obj) where T : class, IDataObject; Parameters Type Name Description T obj Changing is allowed Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also OnCurrentObjectChanged"
  },
  "api/XData.Database.Adapter.StoredProcedure.html": {
    "href": "api/XData.Database.Adapter.StoredProcedure.html",
    "title": "Class StoredProcedure | XData website",
    "keywords": "Class StoredProcedure SQL stored procedure Inheritance Object StoredProcedure Implements IEnumerable < QueryParam > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database.Adapter Assembly : XData.dll Syntax public sealed class StoredProcedure : IEnumerable<QueryParam>, IEnumerable Constructors StoredProcedure(String, QueryParam[]) Procedure constructor Declaration public StoredProcedure(string name, params QueryParam[] par) Parameters Type Name Description String name Procedure name QueryParam [] par Parameters Properties Hint Procedure hint Declaration public HintInfo Hint { get; set; } Property Value Type Description HintInfo Item[Int32] Query parameters by index Declaration public QueryParam this[int i] { get; } Parameters Type Name Description Int32 i Parameter index Property Value Type Description QueryParam Query parameter Item[String] Procedure parameters by name Declaration public QueryParam this[string name] { get; set; } Parameters Type Name Description String name Parameter name Property Value Type Description QueryParam Procedure parameter Name SQL stored procedure name Declaration public string Name { get; } Property Value Type Description String ResultSets Stored procedure result sets names Declaration public IList<string> ResultSets { get; } Property Value Type Description IList < String > Methods GetEnumerator() Query parameters enumeration Declaration public IEnumerator<QueryParam> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < QueryParam > Query parameters enumeration ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString() Operators Implicit(String to StoredProcedure) Stored procedure name Declaration public static implicit operator StoredProcedure(string s) Parameters Type Name Description String s Procedure name Returns Type Description StoredProcedure Stored procedure Explicit Interface Implementations IEnumerable.GetEnumerator() Query parameters enumeration Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Query parameters enumeration Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Database.Adapter.IDatabaseAdapterMetadata.html": {
    "href": "api/XData.Database.Adapter.IDatabaseAdapterMetadata.html",
    "title": "Interface IDatabaseAdapterMetadata | XData website",
    "keywords": "Interface IDatabaseAdapterMetadata Database adapter description interface Namespace : XData.Database.Adapter Assembly : XData.dll Syntax public interface IDatabaseAdapterMetadata Properties Database Database connection type Declaration string Database { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.CallResult.html": {
    "href": "api/XData.Database.Adapter.CallResult.html",
    "title": "Class CallResult | XData website",
    "keywords": "Class CallResult Stored procedure call result Inheritance Object QueryResultBase CallResult Implements IEnumerable < QueryParam > IEnumerable Inherited Members QueryResultBase.AffectedRows QueryResultBase.Item[Int32] QueryResultBase.Item[String] QueryResultBase.ParamsCount QueryResultBase.Init(Int32, IDataParameterCollection) QueryResultBase.Init(Int32, IEnumerable<IDataParameter>) QueryResultBase.Init(Int32, IEnumerable<QueryParam>) QueryResultBase.GetEnumerator() QueryResultBase.IEnumerable.GetEnumerator() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.dll Syntax public sealed class CallResult : QueryResultBase, IEnumerable<QueryParam>, IEnumerable Constructors CallResult(StoredProcedure, IEnumerable<IDataParameter>, IList<DataTable>) Stored procedure call result constructor Declaration public CallResult(StoredProcedure procedure, IEnumerable<IDataParameter> procedureParams, IList<DataTable> resultSets) Parameters Type Name Description StoredProcedure procedure Stored procedure IEnumerable < IDataParameter > procedureParams Procedure parameters IList < DataTable > resultSets Result sets list CallResult(StoredProcedure, IEnumerable<QueryParam>, IList<DataTable>) Stored procedure call result constructor Declaration public CallResult(StoredProcedure procedure, IEnumerable<QueryParam> procedureParams, IList<DataTable> resultSets) Parameters Type Name Description StoredProcedure procedure Stored procedure IEnumerable < QueryParam > procedureParams Procedure parameters sequence IList < DataTable > resultSets Result sets list CallResult(StoredProcedure, IDataParameterCollection, IList<DataTable>) Stored procedure call result constructor Declaration public CallResult(StoredProcedure procedure, IDataParameterCollection procedureParams, IList<DataTable> resultSets) Parameters Type Name Description StoredProcedure procedure Stored procedure IDataParameterCollection procedureParams Procedure parameters IList < DataTable > resultSets Result sets list Properties ResultSets Stored procedure result sets Declaration public ReadOnlyCollection<DataTable> ResultSets { get; } Property Value Type Description ReadOnlyCollection < DataTable > Remarks Hint: Data table name contains result set name Methods ParamInit(IDataParameter) Update out parameter value Declaration protected override QueryParam ParamInit(IDataParameter parameter) Parameters Type Name Description IDataParameter parameter Parameter Returns Type Description QueryParam Query parameter Overrides QueryResultBase.ParamInit(IDataParameter) Exceptions Type Condition XDataRuntimeException Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.CustomLogic-1.html": {
    "href": "api/XData.CustomLogic-1.html",
    "title": "Delegate CustomLogic<T> | XData website",
    "keywords": "Delegate CustomLogic<T> Custom server logic delegate type Namespace : XData Assembly : XData.dll Syntax public delegate bool CustomLogic<in T>(params T[] objects) where T : class, IDataObject; Parameters Type Name Description T[] objects Object instances to process Returns Type Description Boolean Success flag Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Calculate-1.html": {
    "href": "api/XData.Calculate-1.html",
    "title": "Delegate Calculate<T> | XData website",
    "keywords": "Delegate Calculate<T> XData LINQ-styled SQL expression delegate type Namespace : XData Assembly : XData.dll Syntax public delegate T Calculate<out T>(IQueryStructureAdapter adapter); Parameters Type Name Description IQueryStructureAdapter adapter Query structure adapter Returns Type Description T Type Parameters Name Description T Result type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also SqlExpressionAttribute ExpressionFilterAttribute PropertyExpressionAttribute"
  },
  "api/XData.AttachedHandlerType.html": {
    "href": "api/XData.AttachedHandlerType.html",
    "title": "Enum AttachedHandlerType | XData website",
    "keywords": "Enum AttachedHandlerType Attached event types Namespace : XData Assembly : XData.dll Syntax public enum AttachedHandlerType Fields Name Description OnClear OnClear OnExecute OnExecute OnGetLob OnGetLob OnGetLobSize OnGetLobSize OnGetXml OnGetXml OnLock OnLock OnRefresh OnRefresh OnSetLob OnSetLob OnSetXml OnSetXml OnSubmit OnSubmit OnSubmitObject OnSubmitObject OnSubmitQuery OnSubmitQuery Extension Methods SerializationExtensions.ToXml<AttachedHandlerType>() CollectionsExtensions.SetValue<AttachedHandlerType, T>(T) CollectionsExtensions.AsEnum<AttachedHandlerType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<AttachedHandlerType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Xml.html": {
    "href": "api/XData.Mapping.Xml.html",
    "title": "Class Xml | XData website",
    "keywords": "Class Xml Xml field wrapper Inheritance Object Xml Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax public abstract class Xml Examples // declaration [Property(\"source\", \"SR\", Flags = DataPropertyFlag.OuterFlag)] public Xml Source { get; set; } // using newInvoice.Source += new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", \"CREATED\"))); // is the same as newInvoice.Source.Document = new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", \"CREATED\"))); Properties Assigned Xml is value is changed from null value Declaration public abstract bool Assigned { get; } Property Value Type Description Boolean Cleared Xml is value is cleared Declaration public abstract bool Cleared { get; } Property Value Type Description Boolean Document Xml document Declaration public abstract XDocument Document { get; set; } Property Value Type Description XDocument EmptyKeys Xml table keys are empty Declaration public abstract bool EmptyKeys { get; } Property Value Type Description Boolean Methods Extract(String, KeyValuePair<String, String>[]) Extract value by xpath expression Declaration public abstract string Extract(string path, params KeyValuePair<string, string>[] namespaces) Parameters Type Name Description String path XPath expression KeyValuePair < String , String >[] namespaces Xml namespaces Returns Type Description String Value Operators Addition(Xml, XDocument) Set Xml document Declaration public static Xml operator +(Xml xml, XDocument document) Parameters Type Name Description Xml xml Xml property XDocument document Xml document Returns Type Description Xml Updated xml property Implicit(Xml to XDocument) Implicit Xml document conversion Declaration public static implicit operator XDocument(Xml xml) Parameters Type Name Description Xml xml Xml property Returns Type Description XDocument Xml document Extension Methods DataObjectExtensions.Modify(Xml, Action<XDocument>) SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also XData.Mapping.Xml.Value Addition(Xml, XDocument) Implicit(Xml to XDocument) Modify ( Xml , Action < XDocument >) Assigned Cleared EmptyKeys Extract(String, KeyValuePair<String, String>[])"
  },
  "api/XData.Mapping.SubqueryFilterAttribute.html": {
    "href": "api/XData.Mapping.SubqueryFilterAttribute.html",
    "title": "Class SubqueryFilterAttribute | XData website",
    "keywords": "Class SubqueryFilterAttribute Data object subquery filter attribute Inheritance Object System.Attribute FilterBaseAttribute FilterAttribute OptionalFilterAttribute SubqueryFilterAttribute Inherited Members OptionalFilterAttribute.PrimaryFilter FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class SubqueryFilterAttribute : OptionalFilterAttribute Remarks Filter data by subquery: some_field = (select ...) some_field != (select ...) some_field in (select ...) some_field not in (select ...) exists (select ...) not exists (select ...) Constructors SubqueryFilterAttribute(String, String, String) Subquery filter attribute Declaration public SubqueryFilterAttribute(string subquery, string source, string fieldName) Parameters Type Name Description String subquery Subquery alias String source Primary source alias String fieldName Primary field name Exceptions Type Condition XDataRuntimeException Subquery alias cannot be null or empty string Properties FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Subquery Overrides FilterBaseAttribute.FilterType Subquery Subquery alias Declaration public string Subquery { get; } Property Value Type Description String See Also SubqueryAttribute TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also SubqueryAttribute"
  },
  "api/XData.Mapping.SubqueryAttribute.html": {
    "href": "api/XData.Mapping.SubqueryAttribute.html",
    "title": "Class SubqueryAttribute | XData website",
    "keywords": "Class SubqueryAttribute Data object subquery attribute Inheritance Object System.Attribute DataSourceAttribute SubqueryAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class SubqueryAttribute : DataSourceAttribute Examples Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", Grouping = DataGrouping.Sum) Constructors SubqueryAttribute(String, Type, String) Data object subquery attribute Declaration public SubqueryAttribute(string alias, Type subqueryType, string propertyName) Parameters Type Name Description String alias Subquery alias Type subqueryType Object type represents subquery structure String propertyName Subquery selected property Exceptions Type Condition XDataRuntimeException Subquery alias cannot be null or empty string XDataRuntimeException Object type represents subquery structure cannot be null XDataRuntimeException Subquery selected property cannot be null or empty string Properties Alias Subquery alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias Grouping Subquery grouping mode Declaration public DataGrouping Grouping { get; set; } Property Value Type Description DataGrouping Remarks Subquery selected property (see PropertyName ) aggregate function Grouping in subquery mast to be defined by GroupOrder WARNING! Do not use properties inside grouped subqueries! Use ColumnAttribute instead! PropertyName Subquery selected property Declaration public string PropertyName { get; } Property Value Type Description String Remarks Only one property (or column) can be selected from subquery SubqueryType Object type represents subquery structure Declaration public Type SubqueryType { get; } Property Value Type Description Type Type Data source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType Subquery Overrides DataSourceAttribute.Type TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DataTableAttribute InnerViewAttribute SubqueryLinkAttribute SubqueryFilterAttribute SubQuery ColumnExpressionAttribute PropertyExpressionAttribute ExpressionFilterAttribute"
  },
  "api/XData.Mapping.SqlExpressionAttribute.html": {
    "href": "api/XData.Mapping.SqlExpressionAttribute.html",
    "title": "Class SqlExpressionAttribute | XData website",
    "keywords": "Class SqlExpressionAttribute Sql expression name Inheritance Object System.Attribute SqlExpressionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class SqlExpressionAttribute : Attribute Remarks Mark static field of type Calculate<T> to use in ExpressionFilterAttribute or PropertyExpressionAttribute as expression text. Hint:This is native way to use expressions Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also ExpressionFilterAttribute PropertyExpressionAttribute"
  },
  "api/XData.Mapping.ResultSetAttribute.html": {
    "href": "api/XData.Mapping.ResultSetAttribute.html",
    "title": "Class ResultSetAttribute | XData website",
    "keywords": "Class ResultSetAttribute SQL stored procedure/function result set Inheritance Object System.Attribute ResultSetAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ResultSetAttribute : Attribute Remarks Result sets can be accessed by GetResultSet<T, TRes>(IRepository<T>, Expression<Func<T, IEnumerable<TRes>>>) repository method Constructors ResultSetAttribute(String, String) Result set attribute constructor Declaration public ResultSetAttribute(string alias, string name) Parameters Type Name Description String alias SQL procedure/function alias String name Result set name Properties IsDefault Result set is used to fill procedure output data object Declaration public bool IsDefault { get; set; } Property Value Type Description Boolean Order Result set order Declaration public int Order { get; set; } Property Value Type Description Int32 ResultType Result set mapped type Declaration public Type ResultType { get; set; } Property Value Type Description Type TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ParameterAttribute.html": {
    "href": "api/XData.Mapping.ParameterAttribute.html",
    "title": "Class ParameterAttribute | XData website",
    "keywords": "Class ParameterAttribute SQL stored procedure/function parameter Inheritance Object System.Attribute ParameterAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ParameterAttribute : Attribute Constructors ParameterAttribute(String, Int32, String, Type, DbType) Parameter attribute constructor Declaration public ParameterAttribute(string alias, int order, string binding, Type type, DbType dbType) Parameters Type Name Description String alias SQL stored procedure/function alias Int32 order Parameter order String binding Parameter to repository variable binding Type type Parameter mapped type DbType dbType Parameter database type Properties DefaultType Parameter default value type Declaration public DefaultType DefaultType { get; set; } Property Value Type Description DefaultType DefaultValue Parameter default value Declaration public string DefaultValue { get; set; } Property Value Type Description String Direction Parameter direction Declaration public ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection IsArray User defined type (UDT) collection is VARARRAY Declaration public bool IsArray { get; set; } Property Value Type Description Boolean Name Parameter name Declaration public string Name { get; set; } Property Value Type Description String NativeSqlType Native SQL type name Declaration public string NativeSqlType { get; set; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter! Scale Parameter data scale (if applicable) Declaration public int Scale { get; set; } Property Value Type Description Int32 Size Parameter data size (if applicable) Declaration public int Size { get; set; } Property Value Type Description Int32 TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId UdtElementTypeName User defined type (UDT) element type name Declaration public string UdtElementTypeName { get; set; } Property Value Type Description String UdtTypeName User defined type (UDT) name Declaration public string UdtTypeName { get; set; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.OptionalFilterAttribute.html": {
    "href": "api/XData.Mapping.OptionalFilterAttribute.html",
    "title": "Class OptionalFilterAttribute | XData website",
    "keywords": "Class OptionalFilterAttribute Base optional filter attribute Inheritance Object System.Attribute FilterBaseAttribute FilterAttribute OptionalFilterAttribute LinkAttribute SubqueryFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination FilterBaseAttribute.FilterType Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public abstract class OptionalFilterAttribute : FilterAttribute Remarks Optional filters can be used to conditionally omit parts of query If filter marked by PrimaryFilter = true has no value assigned - it cause omit it primary source from query If link marked by PrimaryFilter = true has one of sources omitted - it cause omit other source from query two If base source BaseSource is omitted - all entire query is omitted Hint: It can be used to build conditional sub queries or inner views For example: -- if filterBySomeField has PrimaryFilter flag = true, query... select ot.one_table_id, ot.name from one_table ot where ot.one_table_id in (select st.one_table_id from second_table st where st.somefield = :filterBySomeField) -- when filterBySomeField has no value assigned will be transformed into... select one_table_id, name from one_table -- bat have a full form when filterBySomeField value is assigned Constructors OptionalFilterAttribute(String, String) Base optional filter attribute Declaration protected OptionalFilterAttribute(string sourceAlias, string fieldName) Parameters Type Name Description String sourceAlias Primary source alias String fieldName Primary field name Properties PrimaryFilter Primary filter flag Declaration public bool PrimaryFilter { get; set; } Property Value Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also LinkAttribute SubqueryLinkAttribute SubqueryFilterAttribute RuntimeFilter"
  },
  "api/XData.Extensions.JoinedEnumerable.html": {
    "href": "api/XData.Extensions.JoinedEnumerable.html",
    "title": "Class JoinedEnumerable | XData website",
    "keywords": "Class JoinedEnumerable Joined enumerable extensions class Inheritance Object JoinedEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.dll Syntax public static class JoinedEnumerable Methods FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Full outer join extension Declaration public static IEnumerable<TResult> FullOuterJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer = null) Parameters Type Name Description IEnumerable <TOuter> outer Outer enumerable IEnumerable <TInner> inner Inner enumerable Func <TOuter, TKey> outerKeySelector Outer key selector Func <TInner, TKey> innerKeySelector Inner key selector Func <TOuter, TInner, TResult> resultSelector Result selector IEqualityComparer <TKey> comparer Key type comparer Returns Type Description IEnumerable <TResult> Joined sequence Type Parameters Name Description TOuter Outer enumerable type TInner Inner enumerable type TKey Join key type TResult Result sequence type See Also Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Inner<TElement>(IEnumerable<TElement>) Mark enumerable as inner Declaration public static JoinedEnumerable<TElement> Inner<TElement>(this IEnumerable<TElement> source) Parameters Type Name Description IEnumerable <TElement> source Source sequence Returns Type Description JoinedEnumerable <TElement> Joined inner enumerable Type Parameters Name Description TElement Element type See Also Outer<TElement>(IEnumerable<TElement>) Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Join extension for Joined enumerable Declaration public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this JoinedEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer = null) Parameters Type Name Description JoinedEnumerable <TOuter> outer Outer enumerable IEnumerable <TInner> inner Inner enumerable Func <TOuter, TKey> outerKeySelector Outer key selector Func <TInner, TKey> innerKeySelector Inner key selector Func <TOuter, TInner, TResult> resultSelector Result selector IEqualityComparer <TKey> comparer Key type comparer Returns Type Description IEnumerable <TResult> Joined sequence Type Parameters Name Description TOuter Outer enumerable type TInner Inner enumerable type TKey Join key type TResult Result sequence type Exceptions Type Condition XDataRuntimeException Argument null See Also Inner<TElement>(IEnumerable<TElement>) Outer<TElement>(IEnumerable<TElement>) LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Left outer join extension Declaration public static IEnumerable<TResult> LeftOuterJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer = null) Parameters Type Name Description IEnumerable <TOuter> outer Outer enumerable IEnumerable <TInner> inner Inner enumerable Func <TOuter, TKey> outerKeySelector Outer key selector Func <TInner, TKey> innerKeySelector Inner key selector Func <TOuter, TInner, TResult> resultSelector Result selector IEqualityComparer <TKey> comparer Key type comparer Returns Type Description IEnumerable <TResult> Joined sequence Type Parameters Name Description TOuter Outer enumerable type TInner Inner enumerable type TKey Join key type TResult Result sequence type See Also Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Outer<TElement>(IEnumerable<TElement>) Mark enumerable as outer Declaration public static JoinedEnumerable<TElement> Outer<TElement>(this IEnumerable<TElement> source) Parameters Type Name Description IEnumerable <TElement> source Source sequence Returns Type Description JoinedEnumerable <TElement> Joined inner enumerable Type Parameters Name Description TElement Element type See Also Inner<TElement>(IEnumerable<TElement>) Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) Right outer join extension Declaration public static IEnumerable<TResult> RightOuterJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer = null) Parameters Type Name Description IEnumerable <TOuter> outer Outer enumerable IEnumerable <TInner> inner Inner enumerable Func <TOuter, TKey> outerKeySelector Outer key selector Func <TInner, TKey> innerKeySelector Inner key selector Func <TOuter, TInner, TResult> resultSelector Result selector IEqualityComparer <TKey> comparer Key type comparer Returns Type Description IEnumerable <TResult> Joined sequence Type Parameters Name Description TOuter Outer enumerable type TInner Inner enumerable type TKey Join key type TResult Result sequence type See Also Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) See Also JoinedEnumerable <T>"
  },
  "api/XData.Extensions.JoinedEnumerable-1.html": {
    "href": "api/XData.Extensions.JoinedEnumerable-1.html",
    "title": "Class JoinedEnumerable<T> | XData website",
    "keywords": "Class JoinedEnumerable<T> Helper class to use outer joins Inheritance Object JoinedEnumerable<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.dll Syntax public class JoinedEnumerable<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Element type Constructors JoinedEnumerable(IEnumerable<T>) Joined enumerable constructor Declaration public JoinedEnumerable(IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Fields IsOuter Outer joined enumerable Declaration public bool IsOuter Field Value Type Description Boolean Explicit Interface Implementations IEnumerable<T>.GetEnumerator() Declaration IEnumerator<T> IEnumerable<T>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.Join<TOuter, TInner, TKey, TResult>(JoinedEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.Exceptions.XDataSecurityException.html": {
    "href": "api/XData.Exceptions.XDataSecurityException.html",
    "title": "Class XDataSecurityException | XData website",
    "keywords": "Class XDataSecurityException XData security related exception Inheritance Object Exception ApplicationException XDataException XDataSecurityException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Exceptions Assembly : XData.dll Syntax [Serializable] public class XDataSecurityException : XDataException, ISerializable Constructors XDataSecurityException(String) XData security exception Declaration public XDataSecurityException(string details) Parameters Type Name Description String details Exception details info XDataSecurityException(String, Exception) XData security exception Declaration public XDataSecurityException(string details, Exception exception) Parameters Type Name Description String details Exception details info Exception exception Inner exception XDataSecurityException(String, Exception, Type) XData security exception Declaration public XDataSecurityException(string details, Exception exception, Type dataObjectType) Parameters Type Name Description String details Exception details info Exception exception Inner exception Type dataObjectType Data object type XDataSecurityException(String, Exception, Type, AdditionalInfo[]) XData security exception Declaration public XDataSecurityException(string details, Exception exception, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description String details Exception details info Exception exception Inner exception Type dataObjectType Data object type AdditionalInfo [] addInfo Additional information XDataSecurityException(String, Type) XData security exception Declaration public XDataSecurityException(string details, Type dataObjectType) Parameters Type Name Description String details Exception details info Type dataObjectType Data object type XDataSecurityException(String, Type, AdditionalInfo[]) XData security exception Declaration public XDataSecurityException(string details, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description String details Exception details info Type dataObjectType Data object type AdditionalInfo [] addInfo Additional info Properties DataObjectType Data object type Declaration public Type DataObjectType { get; } Property Value Type Description Type DetailsInfo Exception details info Declaration public string DetailsInfo { get; } Property Value Type Description String Implements System.Runtime.Serialization.ISerializable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataRuntimeExceptionType.html": {
    "href": "api/XData.Exceptions.XDataRuntimeExceptionType.html",
    "title": "Enum XDataRuntimeExceptionType | XData website",
    "keywords": "Enum XDataRuntimeExceptionType XData runtime exception type Namespace : XData.Exceptions Assembly : XData.dll Syntax public enum XDataRuntimeExceptionType Fields Name Description ArgumentError Argument error AssemblyNotFoundError Assembly not found by path AttachedHandlersNotFoundError Attached handlers collection not found CustomActionAttributeNotFoundError CustomActionAttribute not found CustomLogicError Custom logic error DataConversionError Data conversion error DataMappingAttributeNotFoundError Data mapping attribute not found DataMappingError Data mapping error FunctionLockedError Function is locked GetIndexedAttributeError IndexedAttribute not found GetOriginalDataError Original data not found GetPropertyValueError Property not found GetRepositoryError Object not attached to repository GetSerializedDataFieldError SerializedData field not found GetStateError Object state not found PropertyIsReadOnlyError Property is read only RepositoryIsReadOnlyError Repository marked as read only ServerCallError XData Application Server call error SessionCreationFailedError Application server session creation failed SessionNotFoundError Application server session not found TypeLoadingError Type loading error TypeNotFoundError Type not found in assembly WorkSetError Work set data access error Extension Methods SerializationExtensions.ToXml<XDataRuntimeExceptionType>() CollectionsExtensions.SetValue<XDataRuntimeExceptionType, T>(T) CollectionsExtensions.AsEnum<XDataRuntimeExceptionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<XDataRuntimeExceptionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataRuntimeException.html": {
    "href": "api/XData.Exceptions.XDataRuntimeException.html",
    "title": "Class XDataRuntimeException | XData website",
    "keywords": "Class XDataRuntimeException XData runtime exception Inheritance Object Exception ApplicationException XDataException XDataRuntimeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Exceptions Assembly : XData.dll Syntax [Serializable] public class XDataRuntimeException : XDataException, ISerializable Constructors XDataRuntimeException(XDataRuntimeExceptionType) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type) Parameters Type Name Description XDataRuntimeExceptionType type Exception type XDataRuntimeException(XDataRuntimeExceptionType, Exception) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, Exception exception) Parameters Type Name Description XDataRuntimeExceptionType type Exception type Exception exception Inner exception XDataRuntimeException(XDataRuntimeExceptionType, Exception, Type) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, Exception exception, Type dataObjectType) Parameters Type Name Description XDataRuntimeExceptionType type Exception type Exception exception Inner exception Type dataObjectType Data object type XDataRuntimeException(XDataRuntimeExceptionType, Exception, Type, AdditionalInfo[]) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, Exception exception, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description XDataRuntimeExceptionType type Exception type Exception exception Inner exception Type dataObjectType Data object type AdditionalInfo [] addInfo Additional information XDataRuntimeException(XDataRuntimeExceptionType, String) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, string details) Parameters Type Name Description XDataRuntimeExceptionType type Exception type String details Exception details info XDataRuntimeException(XDataRuntimeExceptionType, String, Type) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, string details, Type dataObjectType) Parameters Type Name Description XDataRuntimeExceptionType type Exception type String details Exception details info Type dataObjectType Data object type XDataRuntimeException(XDataRuntimeExceptionType, String, Type, AdditionalInfo[]) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, string details, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description XDataRuntimeExceptionType type Exception type String details Exception details info Type dataObjectType Data object type AdditionalInfo [] addInfo Additional info XDataRuntimeException(XDataRuntimeExceptionType, Type) XData runtime exception Declaration public XDataRuntimeException(XDataRuntimeExceptionType type, Type dataObjectType) Parameters Type Name Description XDataRuntimeExceptionType type Exception type Type dataObjectType Data object type Properties DataObjectType Data object type Declaration public Type DataObjectType { get; } Property Value Type Description Type DetailsInfo Exception details info Declaration public string DetailsInfo { get; } Property Value Type Description String Type Type of exception Declaration public XDataRuntimeExceptionType Type { get; } Property Value Type Description XDataRuntimeExceptionType Implements System.Runtime.Serialization.ISerializable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataQueryStructureExceptionType.html": {
    "href": "api/XData.Exceptions.XDataQueryStructureExceptionType.html",
    "title": "Enum XDataQueryStructureExceptionType | XData website",
    "keywords": "Enum XDataQueryStructureExceptionType Query structure exception types Namespace : XData.Exceptions Assembly : XData.dll Syntax public enum XDataQueryStructureExceptionType Fields Name Description AddTreeFilterError Tree filter (START WITH) generation failed AddTreeLinkError Tree link (CONNECT BY PRIOR) filter generation failed CallNonProcedureBasedStructureError Call of non procedure based structure DictionaryTableHasComplexPrimaryKeyError Dictionary table has complex primary key DictionaryTableHasNoPrimaryKeyError Dictionary table has no primary key EmptyQueryError Empty query text generated error FieldNotFoundError Field not found FilterCombinationNotFoundError Filter combination not found FindPropertyError Property not found error GetParentStructureError Parent structure type not found error HierarchyOnComplexPrimaryKeyTableError Table with hierarchy has complex primary key HierarchyOnNoPrimaryKeyTableError Table with hierarchy has no primary key IdPropertyNotFoundError Id property not found InnerViewNotFoundError No inner view found for alias LinkedPropertyNotFoundError Linked property not found LinkToProcedureFoundError SQL stored procedure can not be linked LinqExpressionCannotBeParsedError LINQ expression can not be parsed LinqExpressionHasUnknownMethodError LINQ expression contains unknown method error LinqExpressionHasUnsupportedMethodError LINQ expression contains unsupported method LinqExpressionHasUnsupportedMethodParametersError LINQ expression contains unsupported method parameter count error LinqExpressionHasUnsupportedTypeError LINQ expression contains unsupported in this case expression type NoDataSourceMappingFoundError Data source mapping not found NoElementsAtPositionError Sequence contains no elements at position error NoElementsError Sequence contains no elements error NoMappingFoundError No mapping found for data object NoneBasedObjectHasTablesError Can't build data object based on NONE table contains other tables error NoPropertyMappingFoundError Property mapping not found NoSelectedFieldsFoundError Selected fields list is empty error PropertyEnumValueNotFoundError Property enum values not found PropertyNotFoundError Property not found (or not mapped) ResultSetMappingExpressionError SQL stored procedure / function result set expression mapping used ResultSetNotRegisteredError Result set not registered RuntimeFilterUsedInsideDynamicQuery Runtime filter used inside dynamic query SubqueryAliasDuplicatedError Subquery alias duplicated SubqueryNotFoundError No subquery found for alias TableNotFoundError Table source not found WrongDataSourceTypeError Wrong data source type used Extension Methods SerializationExtensions.ToXml<XDataQueryStructureExceptionType>() CollectionsExtensions.SetValue<XDataQueryStructureExceptionType, T>(T) CollectionsExtensions.AsEnum<XDataQueryStructureExceptionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<XDataQueryStructureExceptionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataConfigurationException.html": {
    "href": "api/XData.Exceptions.XDataConfigurationException.html",
    "title": "Class XDataConfigurationException | XData website",
    "keywords": "Class XDataConfigurationException XData configuration exception Inheritance Object Exception ApplicationException XDataException XDataConfigurationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Exceptions Assembly : XData.dll Syntax [Serializable] public class XDataConfigurationException : XDataException, ISerializable Constructors XDataConfigurationException(XDataConfigurationExceptionType) Query structure build failed Declaration public XDataConfigurationException(XDataConfigurationExceptionType type) Parameters Type Name Description XDataConfigurationExceptionType type Query structure exception type XDataConfigurationException(XDataConfigurationExceptionType, String) Query structure build failed Declaration public XDataConfigurationException(XDataConfigurationExceptionType type, string details) Parameters Type Name Description XDataConfigurationExceptionType type Query structure exception type String details Error details XDataConfigurationException(XDataConfigurationExceptionType, String, Exception) Query structure build failed Declaration public XDataConfigurationException(XDataConfigurationExceptionType type, string details, Exception inner) Parameters Type Name Description XDataConfigurationExceptionType type Query structure exception type String details Error details Exception inner Inner exception Properties DetailsInfo Exception details info Declaration public string DetailsInfo { get; } Property Value Type Description String Type Type of exception Declaration public XDataConfigurationExceptionType Type { get; } Property Value Type Description XDataConfigurationExceptionType Implements System.Runtime.Serialization.ISerializable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataConcurrencyException.html": {
    "href": "api/XData.Exceptions.XDataConcurrencyException.html",
    "title": "Class XDataConcurrencyException | XData website",
    "keywords": "Class XDataConcurrencyException Concurrency exception Inheritance Object Exception ApplicationException XDataException XDataConcurrencyException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Exceptions Assembly : XData.dll Syntax [Serializable] public sealed class XDataConcurrencyException : XDataException, ISerializable Constructors XDataConcurrencyException(Exception, Query) Concurrency exception Declaration public XDataConcurrencyException(Exception exception, Query query) Parameters Type Name Description Exception exception Inner exception Query query Query XDataConcurrencyException(Exception, AdditionalInfo[]) Concurrency exception Declaration public XDataConcurrencyException(Exception exception, params AdditionalInfo[] addInfo) Parameters Type Name Description Exception exception Inner exception AdditionalInfo [] addInfo Additional information XDataConcurrencyException(String) Concurrency exception Declaration public XDataConcurrencyException(string exception) Parameters Type Name Description String exception Exception text Properties Query Query Declaration public Query Query { get; } Property Value Type Description Query Implements System.Runtime.Serialization.ISerializable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.XDataManager.html": {
    "href": "api/XData.XDataManager.html",
    "title": "Class XDataManager | XData website",
    "keywords": "Class XDataManager Data manager Defines user session context across (possible) multiple data sources Inheritance Object XDataManager Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public static class XDataManager Fields Resources Declaration public static dynamic Resources Field Value Type Description Object Properties Configuration Declaration public static IConfiguration Configuration { get; } Property Value Type Description IConfiguration Methods AddXData(IServiceCollection, Func<IDataOptions, IDataOptions>) XData initialization Declaration public static IServiceCollection AddXData(this IServiceCollection services, Func<IDataOptions, IDataOptions> options = null) Parameters Type Name Description IServiceCollection services Services collection Func < IDataOptions , IDataOptions > options XData engine options Returns Type Description IServiceCollection XData engine interface GetConcurrencyErrorId(String) Returns concurrency error id for context Declaration public static int GetConcurrencyErrorId(string context) Parameters Type Name Description String context Context name Returns Type Description Int32 Concurrency error id GetContext(String) Returns context by name Declaration public static XDataContext GetContext(string context = null) Parameters Type Name Description String context Context name Returns Type Description XDataContext Context Exceptions Type Condition XDataConfigurationException XData configuration errors. XDataAdapterException XData adapter errors."
  },
  "api/XData.Security.SecuritySession.html": {
    "href": "api/XData.Security.SecuritySession.html",
    "title": "Class SecuritySession | XData website",
    "keywords": "Class SecuritySession Security session base class Inheritance Object SecuritySession Implements ISecuritySession Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Security Assembly : XData.Security.dll Syntax public abstract class SecuritySession : ISecuritySession Constructors SecuritySession(String, String[], Boolean) Security session constructor Declaration public SecuritySession(string userName, string[] roles, bool isSupervisor = false) Parameters Type Name Description String userName User name String [] roles User roles Boolean isSupervisor Supervisor flag Properties IsSupervisor Current user is supervisor flag Declaration public bool IsSupervisor { get; set; } Property Value Type Description Boolean Roles Current user roles list Declaration public string[] Roles { get; protected set; } Property Value Type Description String [] UserName Current user name Declaration public string UserName { get; protected set; } Property Value Type Description String Methods Action<T>(Expression<Func<CustomLogic<T>>>) Custom action name access helper Declaration protected static string Action<T>(Expression<Func<CustomLogic<T>>> expr) where T : class, IDataObject, new() Parameters Type Name Description Expression < Func < CustomLogic <T>>> expr Custom logic expression Returns Type Description String Custom action name Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException FilterGrantedObjects<T>(String, Expression) Converts initial IQueryable expression filtering granted objects only Declaration public Expression FilterGrantedObjects<T>(string context, Expression allDataExpr) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Expression allDataExpr Initial IQueryable expression Returns Type Description Expression Modified IQueryable expression Type Parameters Name Description T Data object type GetGrantedActions<T>(String) Returns list of granted actions for current user Declaration public string[] GetGrantedActions<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description String [] Actions list Type Parameters Name Description T Data object type GetRestrictedProperties<T>(String) Returns list of restricted properties for current user Declaration public string[] GetRestrictedProperties<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description String [] Properties name list Type Parameters Name Description T Data object type InitializeSession() Session initialization Declaration protected abstract void InitializeSession() See Also RegisterGrantedActions(String, Type, IEnumerable<KeyValuePair<String, String[]>>) RegisterRestrictedProperties(String, Type, IEnumerable<KeyValuePair<String, String[]>>) RegisterSecurityFilters(String, Type, IEnumerable<KeyValuePair<String, Expression>>) Property<T>(Expression<Func<T, Object>>) Property name access helper Declaration protected static string Property<T>(Expression<Func<T, object>> expr) where T : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, Object >> expr Property expression Returns Type Description String Property name Type Parameters Name Description T Data object type Exceptions Type Condition XDataRuntimeException RegisterGrantedActions(String, Type, IEnumerable<KeyValuePair<String, String[]>>) Granted actions registration Declaration protected void RegisterGrantedActions(string context, Type type, IEnumerable<KeyValuePair<string, string[]>> actions) Parameters Type Name Description String context Context name Type type Data type to grant actions IEnumerable < KeyValuePair < String , String []>> actions Granted actions RegisterRestrictedProperties(String, Type, IEnumerable<KeyValuePair<String, String[]>>) Restricted properties registration Declaration protected void RegisterRestrictedProperties(string context, Type type, IEnumerable<KeyValuePair<string, string[]>> restricted) Parameters Type Name Description String context Context name Type type Data type to restrict property access IEnumerable < KeyValuePair < String , String []>> restricted Restricted properties RegisterSecurityFilters(String, Type, IEnumerable<KeyValuePair<String, Expression>>) Security filters registration Declaration protected void RegisterSecurityFilters(string context, Type type, IEnumerable<KeyValuePair<string, Expression>> filters) Parameters Type Name Description String context Context name Type type Data type to filter data IEnumerable < KeyValuePair < String , Expression >> filters Security filters Implements ISecuritySession Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.RuntimeAssemblyLoader.html": {
    "href": "api/XData.RuntimeAssemblyLoader.html",
    "title": "Class RuntimeAssemblyLoader | XData website",
    "keywords": "Class RuntimeAssemblyLoader Inheritance Object AssemblyLoadContext RuntimeAssemblyLoader Inherited Members AssemblyLoadContext.GetAssemblyName(String) AssemblyLoadContext.GetLoadContext(Assembly) AssemblyLoadContext.LoadFromAssemblyName(AssemblyName) AssemblyLoadContext.LoadFromAssemblyPath(String) AssemblyLoadContext.LoadFromNativeImagePath(String, String) AssemblyLoadContext.LoadFromStream(Stream) AssemblyLoadContext.LoadFromStream(Stream, Stream) AssemblyLoadContext.LoadUnmanagedDllFromPath(String) AssemblyLoadContext.SetProfileOptimizationRoot(String) AssemblyLoadContext.StartProfileOptimization(String) AssemblyLoadContext.Default AssemblyLoadContext.Resolving AssemblyLoadContext.Unloading Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public class RuntimeAssemblyLoader : AssemblyLoadContext Constructors RuntimeAssemblyLoader(String) Declaration public RuntimeAssemblyLoader(string folderPath) Parameters Type Name Description String folderPath Methods Load(AssemblyName) Declaration protected override Assembly Load(AssemblyName assemblyName) Parameters Type Name Description AssemblyName assemblyName Returns Type Description Assembly Overrides AssemblyLoadContext.Load(AssemblyName) LoadUnmanagedDll(String) Declaration protected override IntPtr LoadUnmanagedDll(string unmanagedDllName) Parameters Type Name Description String unmanagedDllName Returns Type Description IntPtr Overrides AssemblyLoadContext.LoadUnmanagedDll(String) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.ResultSetIndexer.html": {
    "href": "api/XData.ResultSetIndexer.html",
    "title": "Class ResultSetIndexer | XData website",
    "keywords": "Class ResultSetIndexer SQL procedure call out result sets indexer Inheritance Object ResultSetIndexer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public sealed class ResultSetIndexer Properties Count Variables count Declaration public int Count { get; } Property Value Type Description Int32 Item[String] Result set data rows Declaration public DataTable this[string name] { get; } Parameters Type Name Description String name Result set name Property Value Type Description DataTable Methods Contains(String) Variables contains name Declaration public bool Contains(string name) Parameters Type Name Description String name Variable name Returns Type Description Boolean Contains flag GetResultSet<T>(String) Returns typed result collection Declaration public IEnumerable<T> GetResultSet<T>(string name) where T : class Parameters Type Name Description String name Result set name Returns Type Description IEnumerable <T> Types result collection Type Parameters Name Description T Result set element mapped type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Resources.html": {
    "href": "api/XData.Resources.html",
    "title": "Class Resources | XData website",
    "keywords": "Class Resources A strongly-typed resource class, for looking up localized strings, etc. Inheritance Object Resources Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public class Resources Properties AdapterAssemblyNotFoundError Looks up a localized string similar to adapter assembly file not found. Declaration public static string AdapterAssemblyNotFoundError { get; } Property Value Type Description String AdapterClassNotFoundError Looks up a localized string similar to does not contain adapter class. Declaration public static string AdapterClassNotFoundError { get; } Property Value Type Description String AdapterConstructorFailedError Looks up a localized string similar to load exception: adapter constructor failed. Declaration public static string AdapterConstructorFailedError { get; } Property Value Type Description String AdapterException Looks up a localized string similar to XData adapter file \"{1}\" {0}!. Declaration public static string AdapterException { get; } Property Value Type Description String AdapterNotConfiguredError Looks up a localized string similar to no configuration found for adapter. Declaration public static string AdapterNotConfiguredError { get; } Property Value Type Description String AddSavePointDebugInfo Looks up a localized string similar to Add savepoint over context: {0} = {1}. Declaration public static string AddSavePointDebugInfo { get; } Property Value Type Description String AddTreeFilterError Looks up a localized string similar to add tree filter. Declaration public static string AddTreeFilterError { get; } Property Value Type Description String AddTreeLinkError Looks up a localized string similar to add tree link. Declaration public static string AddTreeLinkError { get; } Property Value Type Description String ArgumentCanNotBeNullOrEmpty Looks up a localized string similar to Argument \"{0}\" can not be null or empty!. Declaration public static string ArgumentCanNotBeNullOrEmpty { get; } Property Value Type Description String ArgumentError Looks up a localized string similar to call function (wrong argument). Declaration public static string ArgumentError { get; } Property Value Type Description String ArgumentHasWrongTypeData Looks up a localized string similar to Argument contains data having wrong type!. Declaration public static string ArgumentHasWrongTypeData { get; } Property Value Type Description String AssemblyNotFoundError Looks up a localized string similar to load assembly (file not found). Declaration public static string AssemblyNotFoundError { get; } Property Value Type Description String AttachedHandlersNotFoundError Looks up a localized string similar to get attached handlers collection (object is detached). Declaration public static string AttachedHandlersNotFoundError { get; } Property Value Type Description String BaseTableNotDefined Looks up a localized string similar to get query base table. Declaration public static string BaseTableNotDefined { get; } Property Value Type Description String BeginTransactionDebugInfo Looks up a localized string similar to Begin transaction over context: {0}. Declaration public static string BeginTransactionDebugInfo { get; } Property Value Type Description String BlobAsStoredProcedureReturnValue Looks up a localized string similar to return value parameter of binary object type. Declaration public static string BlobAsStoredProcedureReturnValue { get; } Property Value Type Description String BuildClearQueryError Looks up a localized string similar to build Clear query for. Declaration public static string BuildClearQueryError { get; } Property Value Type Description String CacheLinqDebugInfo Looks up a localized string similar to Cache LINQ Expression over context: {0} for type: {1} {2}. Declaration public static string CacheLinqDebugInfo { get; } Property Value Type Description String CallNonProcedureBasedStructureError Looks up a localized string similar to call non procedure source. Declaration public static string CallNonProcedureBasedStructureError { get; } Property Value Type Description String Clear Looks up a localized string similar to Clear. Declaration public static string Clear { get; } Property Value Type Description String CommitDebugInfo Looks up a localized string similar to Commit transaction over context: {0} on layer: {1}. Declaration public static string CommitDebugInfo { get; } Property Value Type Description String ComplexPrimaryKeyNotSupportedError Looks up a localized string similar to Complex primary key not supported in this case by adapter \"{0}\"!. Declaration public static string ComplexPrimaryKeyNotSupportedError { get; } Property Value Type Description String ConfigurationDetailedException Looks up a localized string similar to XData configuration error: {0} \"{1}\"!. Declaration public static string ConfigurationDetailedException { get; } Property Value Type Description String ConfigurationException Looks up a localized string similar to XData configuration error: {0}!. Declaration public static string ConfigurationException { get; } Property Value Type Description String ConfigurationFileLoadError Looks up a localized string similar to load configuration file. Declaration public static string ConfigurationFileLoadError { get; } Property Value Type Description String ConfigurationFileSaveError Looks up a localized string similar to save configuration file. Declaration public static string ConfigurationFileSaveError { get; } Property Value Type Description String ConfigurationXmlReadError Looks up a localized string similar to read xdata configuration. Declaration public static string ConfigurationXmlReadError { get; } Property Value Type Description String ConnectionClosedDebugInfo Looks up a localized string similar to Connection closed on layer({0}) with connection string: {1}. Declaration public static string ConnectionClosedDebugInfo { get; } Property Value Type Description String ConnectionCreatedDebugInfo Looks up a localized string similar to Connection created on layer({0}) with connection string: {1}. Declaration public static string ConnectionCreatedDebugInfo { get; } Property Value Type Description String ContextNotConfiguredError Looks up a localized string similar to no configuration found for context. Declaration public static string ContextNotConfiguredError { get; } Property Value Type Description String Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo CurrentObjectChanged Looks up a localized string similar to Current object changed. Declaration public static string CurrentObjectChanged { get; } Property Value Type Description String CurrentObjectChanging Looks up a localized string similar to Current object changing. Declaration public static string CurrentObjectChanging { get; } Property Value Type Description String CustomActionAccess Looks up a localized string similar to custom action \"{0}\". Declaration public static string CustomActionAccess { get; } Property Value Type Description String CustomActionAttributeNotFoundError Looks up a localized string similar to get CustomActionAttribute from expression. Declaration public static string CustomActionAttributeNotFoundError { get; } Property Value Type Description String CustomLogic Looks up a localized string similar to Custom logic. Declaration public static string CustomLogic { get; } Property Value Type Description String CustomLogicError Looks up a localized string similar to run custom logic. Declaration public static string CustomLogicError { get; } Property Value Type Description String DataConversionError Looks up a localized string similar to convert data value. Declaration public static string DataConversionError { get; } Property Value Type Description String DataMappingAttributeNotFoundError Looks up a localized string similar to get DataMappingAttribute. Declaration public static string DataMappingAttributeNotFoundError { get; } Property Value Type Description String DataMappingError Looks up a localized string similar to transform data. Declaration public static string DataMappingError { get; } Property Value Type Description String DefaultContextNotFoundError Looks up a localized string similar to default context declaration is missed. Declaration public static string DefaultContextNotFoundError { get; } Property Value Type Description String Delete Looks up a localized string similar to Delete. Declaration public static string Delete { get; } Property Value Type Description String DictionaryTableHasComplexPrimaryKeyError Looks up a localized string similar to get dictionary key (dictionary table has complex primary key) on link property. Declaration public static string DictionaryTableHasComplexPrimaryKeyError { get; } Property Value Type Description String DictionaryTableHasNoPrimaryKeyError Looks up a localized string similar to get dictionary key (dictionary table has no primary key) on link property. Declaration public static string DictionaryTableHasNoPrimaryKeyError { get; } Property Value Type Description String DynamicSqlParameterAsReturnValue Looks up a localized string similar to dynamic SQL parameter used as return value. Declaration public static string DynamicSqlParameterAsReturnValue { get; } Property Value Type Description String EmptyQueryError Looks up a localized string similar to build query (empty query resulted). Declaration public static string EmptyQueryError { get; } Property Value Type Description String EnumValue Looks up a localized string similar to enum value. Declaration public static string EnumValue { get; } Property Value Type Description String EventType Looks up a localized string similar to event type. Declaration public static string EventType { get; } Property Value Type Description String Expression Looks up a localized string similar to expression. Declaration public static string Expression { get; } Property Value Type Description String FieldNotFoundError Looks up a localized string similar to get table field. Declaration public static string FieldNotFoundError { get; } Property Value Type Description String FilterCombinationNotFoundError Looks up a localized string similar to get filter combination (logical group of filters). Declaration public static string FilterCombinationNotFoundError { get; } Property Value Type Description String FindPropertyError Looks up a localized string similar to find property in inner views. Declaration public static string FindPropertyError { get; } Property Value Type Description String FunctionAccessableInXDataLinq Looks up a localized string similar to Method accessable in XData LINQ expressions only!. Declaration public static string FunctionAccessableInXDataLinq { get; } Property Value Type Description String FunctionIsNotSupportedError Looks up a localized string similar to Function \"{0}\" not supported by adapter \"{1}\"!. Declaration public static string FunctionIsNotSupportedError { get; } Property Value Type Description String FunctionLockedError Looks up a localized string similar to call function (function locked). Declaration public static string FunctionLockedError { get; } Property Value Type Description String GetIndexedAttributeError Looks up a localized string similar to get IndexedAttribute marked property. Declaration public static string GetIndexedAttributeError { get; } Property Value Type Description String GetOriginalDataError Looks up a localized string similar to get original data (object is detached). Declaration public static string GetOriginalDataError { get; } Property Value Type Description String GetParentStructureError Looks up a localized string similar to get parent structure of type. Declaration public static string GetParentStructureError { get; } Property Value Type Description String GetPropertyValueError Looks up a localized string similar to get property value. Declaration public static string GetPropertyValueError { get; } Property Value Type Description String GetRepositoryError Looks up a localized string similar to get repository (object is detached). Declaration public static string GetRepositoryError { get; } Property Value Type Description String GetSerializedDataFieldError Looks up a localized string similar to get serialized data field. Declaration public static string GetSerializedDataFieldError { get; } Property Value Type Description String GetSqlSyntaxTemplateError Looks up a localized string similar to SQL syntax template \"{0}\" not supported by adapter \"{1}\"!. Declaration public static string GetSqlSyntaxTemplateError { get; } Property Value Type Description String GetStateError Looks up a localized string similar to get object state (object is detached). Declaration public static string GetStateError { get; } Property Value Type Description String HierarchyOnComplexPrimaryKeyTableError Looks up a localized string similar to build hierarchy because primary key is complex on table. Declaration public static string HierarchyOnComplexPrimaryKeyTableError { get; } Property Value Type Description String HierarchyOnNoPrimaryKeyTableError Looks up a localized string similar to build hierarchy because no primary key on table. Declaration public static string HierarchyOnNoPrimaryKeyTableError { get; } Property Value Type Description String IdPropertyNotFoundError Looks up a localized string similar to get identity (having DataPropertyFlag.Id) property or column. Declaration public static string IdPropertyNotFoundError { get; } Property Value Type Description String InitObject Looks up a localized string similar to Initialize object. Declaration public static string InitObject { get; } Property Value Type Description String InitRepository Looks up a localized string similar to Initialize repository. Declaration public static string InitRepository { get; } Property Value Type Description String InnerException Looks up a localized string similar to inner exception. Declaration public static string InnerException { get; } Property Value Type Description String InnerViewNotFoundError Looks up a localized string similar to get inner view. Declaration public static string InnerViewNotFoundError { get; } Property Value Type Description String Insert Looks up a localized string similar to Insert. Declaration public static string Insert { get; } Property Value Type Description String InvalidateClientRepository Looks up a localized string similar to Invalidate client repository. Declaration public static string InvalidateClientRepository { get; } Property Value Type Description String InvalidateObject Looks up a localized string similar to Invalidate object. Declaration public static string InvalidateObject { get; } Property Value Type Description String InvalidateRepository Looks up a localized string similar to Invalidate repository. Declaration public static string InvalidateRepository { get; } Property Value Type Description String LinkedPropertyNotFoundError Looks up a localized string similar to get linked property. Declaration public static string LinkedPropertyNotFoundError { get; } Property Value Type Description String LinkToProcedureFoundError Looks up a localized string similar to build link with SQL stored procedure source. Declaration public static string LinkToProcedureFoundError { get; } Property Value Type Description String LinqDebugInfo Looks up a localized string similar to LINQ Expression over context: {0} for type: {1} {2}. Declaration public static string LinqDebugInfo { get; } Property Value Type Description String LinqExpressionCannotBeParsedError Looks up a localized string similar to parse expression. Declaration public static string LinqExpressionCannotBeParsedError { get; } Property Value Type Description String LinqExpressionHasUnknownMethodError Looks up a localized string similar to parse expression because unknown method was found. Declaration public static string LinqExpressionHasUnknownMethodError { get; } Property Value Type Description String LinqExpressionHasUnsupportedMethodError Looks up a localized string similar to parse expression because expression method is unsupported in this context. Declaration public static string LinqExpressionHasUnsupportedMethodError { get; } Property Value Type Description String LinqExpressionHasUnsupportedMethodParametersError Looks up a localized string similar to parse expression because expression method call has unsupported number of parameters. Declaration public static string LinqExpressionHasUnsupportedMethodParametersError { get; } Property Value Type Description String LinqExpressionHasUnsupportedTypeError Looks up a localized string similar to parse expression because expression type is unsupported in this context. Declaration public static string LinqExpressionHasUnsupportedTypeError { get; } Property Value Type Description String LogicName Looks up a localized string similar to logic name. Declaration public static string LogicName { get; } Property Value Type Description String LogicType Looks up a localized string similar to logic type. Declaration public static string LogicType { get; } Property Value Type Description String Mapper Looks up a localized string similar to Mapper. Declaration public static string Mapper { get; } Property Value Type Description String NoDataSourceMappingFoundError Looks up a localized string similar to get mapping for data source with alias. Declaration public static string NoDataSourceMappingFoundError { get; } Property Value Type Description String NoElementsAtPositionError Looks up a localized string similar to get element at position. Declaration public static string NoElementsAtPositionError { get; } Property Value Type Description String NoElementsError Looks up a localized string similar to get element from empty repository. Declaration public static string NoElementsError { get; } Property Value Type Description String NoMappingFound Looks up a localized string similar to get mapping. Declaration public static string NoMappingFound { get; } Property Value Type Description String NoneBasedObjectHasTablesError Looks up a localized string similar to build NONE based query having tables. Declaration public static string NoneBasedObjectHasTablesError { get; } Property Value Type Description String NoPropertyMappingFoundError Looks up a localized string similar to get property mapping. Declaration public static string NoPropertyMappingFoundError { get; } Property Value Type Description String NoSelectedFieldsFoundError Looks up a localized string similar to build query (no fields selected). Declaration public static string NoSelectedFieldsFoundError { get; } Property Value Type Description String PropertyEnumValueNotFoundError Looks up a localized string similar to get enum property text values (no DisplayAttribute or DescriptionAttribute attached to enum values found). Declaration public static string PropertyEnumValueNotFoundError { get; } Property Value Type Description String PropertyIsReadOnlyError Looks up a localized string similar to change property value (property is read only). Declaration public static string PropertyIsReadOnlyError { get; } Property Value Type Description String PropertyNotFoundError Looks up a localized string similar to get (mapped) property. Declaration public static string PropertyNotFoundError { get; } Property Value Type Description String ProxyNotConfiguredError Looks up a localized string similar to no proxy configuration found for context. Declaration public static string ProxyNotConfiguredError { get; } Property Value Type Description String Query Looks up a localized string similar to (query: {0}). Declaration public static string Query { get; } Property Value Type Description String QueryDebugInfo Looks up a localized string similar to SQL Query over context: {0} on layer: {1} {2}. Declaration public static string QueryDebugInfo { get; } Property Value Type Description String QueryStructureDetaildException Looks up a localized string similar to Query structure error: Failed to {0} \"{1}\"!. Declaration public static string QueryStructureDetaildException { get; } Property Value Type Description String QueryStructureException Looks up a localized string similar to Query structure error: Failed to {0} for type \"{1}\"!. Declaration public static string QueryStructureException { get; } Property Value Type Description String QueryStructureTypedDetailedException Looks up a localized string similar to Query structure error: Failed to {0} \"{1}\" for type \"{2}\"!. Declaration public static string QueryStructureTypedDetailedException { get; } Property Value Type Description String QueryStructureWithAddInfoException Looks up a localized string similar to Query structure error: Failed to {0} \"{1}\" for type \"{2}\"! Additional information: ({3}).. Declaration public static string QueryStructureWithAddInfoException { get; } Property Value Type Description String RepositoryIsReadOnlyError Looks up a localized string similar to apply changes in read only repository. Declaration public static string RepositoryIsReadOnlyError { get; } Property Value Type Description String ResetDebugInfo Looks up a localized string similar to Reset repository over context: {0} for type: {1}. Declaration public static string ResetDebugInfo { get; } Property Value Type Description String ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager ResultSetMappingExpressionError Looks up a localized string similar to use mapping SQL procedure result to expression. Declaration public static string ResultSetMappingExpressionError { get; } Property Value Type Description String ResultSetNotRegisteredError Looks up a localized string similar to find result set with name. Declaration public static string ResultSetNotRegisteredError { get; } Property Value Type Description String RollbackDebugInfo Looks up a localized string similar to Rollback transaction over context: {0} on layer: {1}. Declaration public static string RollbackDebugInfo { get; } Property Value Type Description String RollbackToSavePointDebugInfo Looks up a localized string similar to Rollback to savepoint over context: {0} = {1} on layer {2}. Declaration public static string RollbackToSavePointDebugInfo { get; } Property Value Type Description String RowIterator Looks up a localized string similar to row iterator. Declaration public static string RowIterator { get; } Property Value Type Description String RuntimeFilterUsedInsideDynamicQuery Looks up a localized string similar to add runtime filter used inside dynamic query. Declaration public static string RuntimeFilterUsedInsideDynamicQuery { get; } Property Value Type Description String ServerCallError Looks up a localized string similar to call XData application server. Declaration public static string ServerCallError { get; } Property Value Type Description String SessionCreationFailedError Looks up a localized string similar to create session for context. Declaration public static string SessionCreationFailedError { get; } Property Value Type Description String SessionNotFoundError Looks up a localized string similar to find session by id. Declaration public static string SessionNotFoundError { get; } Property Value Type Description String SetCurrentDebugInfo Looks up a localized string similar to Set current over context: {0} for type: {1} = {2}. Declaration public static string SetCurrentDebugInfo { get; } Property Value Type Description String SetFilterDebugInfo Looks up a localized string similar to Set filter over context: {0} for type: {1} filter: {2}. Declaration public static string SetFilterDebugInfo { get; } Property Value Type Description String SourceType Looks up a localized string similar to source type. Declaration public static string SourceType { get; } Property Value Type Description String SqlBuilderClassNotFoundError Looks up a localized string similar to does not contain sql builder class. Declaration public static string SqlBuilderClassNotFoundError { get; } Property Value Type Description String SqlBuilderConstructorFailedError Looks up a localized string similar to load exception: sql builder constructor failed. Declaration public static string SqlBuilderConstructorFailedError { get; } Property Value Type Description String SqlBuilderDetailedException Looks up a localized string similar to Query builder error: Failed to {0} \"{1}\"!. Declaration public static string SqlBuilderDetailedException { get; } Property Value Type Description String SqlBuilderException Looks up a localized string similar to Query builder error: Failed to {0}!. Declaration public static string SqlBuilderException { get; } Property Value Type Description String StakTrace Looks up a localized string similar to stack trace. Declaration public static string StakTrace { get; } Property Value Type Description String StandardActionAccess Looks up a localized string similar to standard action \"{0}\". Declaration public static string StandardActionAccess { get; } Property Value Type Description String StoredProcedure Looks up a localized string similar to stored procedure. Declaration public static string StoredProcedure { get; } Property Value Type Description String StoredProcedureDebugInfo Looks up a localized string similar to Call SQL stored procedure over context: {0} {1}. Declaration public static string StoredProcedureDebugInfo { get; } Property Value Type Description String SubqueryAliasDuplicatedError Looks up a localized string similar to add subquery with duplicated alias. Declaration public static string SubqueryAliasDuplicatedError { get; } Property Value Type Description String SubqueryNotFoundError Looks up a localized string similar to get subquery. Declaration public static string SubqueryNotFoundError { get; } Property Value Type Description String SyntaxNotSupportedError Looks up a localized string similar to SQL syntax structure \"{0}\" not supported by adapter \"{1}\"!. Declaration public static string SyntaxNotSupportedError { get; } Property Value Type Description String TableColumns Looks up a localized string similar to table columns. Declaration public static string TableColumns { get; } Property Value Type Description String TableNotFoundError Looks up a localized string similar to get table. Declaration public static string TableNotFoundError { get; } Property Value Type Description String TableValuedFunction Looks up a localized string similar to Table-valued function. Declaration public static string TableValuedFunction { get; } Property Value Type Description String TypeLoadingError Looks up a localized string similar to load type. Declaration public static string TypeLoadingError { get; } Property Value Type Description String TypeNotFoundError Looks up a localized string similar to load type (type not found in assembly). Declaration public static string TypeNotFoundError { get; } Property Value Type Description String TypeNotSupportedError Looks up a localized string similar to Type \"{0}\" not supported by adapter \"{1}\"!. Declaration public static string TypeNotSupportedError { get; } Property Value Type Description String UdtAsStoredProcedureReturnValue Looks up a localized string similar to return value parameter of user defined type. Declaration public static string UdtAsStoredProcedureReturnValue { get; } Property Value Type Description String UdtObject Looks up a localized string similar to single object-valued user defined type. Declaration public static string UdtObject { get; } Property Value Type Description String UdtTable Looks up a localized string similar to table or array-valued user defined type. Declaration public static string UdtTable { get; } Property Value Type Description String UdtTableAsOutputParameter Looks up a localized string similar to table or array-valued user defined type as output parameter. Declaration public static string UdtTableAsOutputParameter { get; } Property Value Type Description String UnknownExceptionType Looks up a localized string similar to Unknown exception type: {0}!. Declaration public static string UnknownExceptionType { get; } Property Value Type Description String Update Looks up a localized string similar to Update. Declaration public static string Update { get; } Property Value Type Description String WithInsideSubqueryNotSupported Looks up a localized string similar to Common-Table-Expression (WITH) queries not supported inside subqueries. Declaration public static string WithInsideSubqueryNotSupported { get; } Property Value Type Description String WorkSetBaseObjectNotFound Looks up a localized string similar to base object not found. Declaration public static string WorkSetBaseObjectNotFound { get; } Property Value Type Description String WorkSetError Looks up a localized string similar to access work set data. Declaration public static string WorkSetError { get; } Property Value Type Description String WorkSetNotFound Looks up a localized string similar to work set key not found. Declaration public static string WorkSetNotFound { get; } Property Value Type Description String WorkSetSingleValueAlreadyExists Looks up a localized string similar to work set single object value already exits. Declaration public static string WorkSetSingleValueAlreadyExists { get; } Property Value Type Description String WrongDataSourceTypeError Looks up a localized string similar to use this data source type in this context. Declaration public static string WrongDataSourceTypeError { get; } Property Value Type Description String XDataRuntimeDetailedException Looks up a localized string similar to XData runtime error: Failed to {0} \"{1}\"!. Declaration public static string XDataRuntimeDetailedException { get; } Property Value Type Description String XDataRuntimeException Looks up a localized string similar to XData runtime error: Failed to {0}!. Declaration public static string XDataRuntimeException { get; } Property Value Type Description String XDataRuntimeTypedDetailedException Looks up a localized string similar to XData runtime error: Failed to {0} \"{1}\" for type \"{2}\"!. Declaration public static string XDataRuntimeTypedDetailedException { get; } Property Value Type Description String XDataRuntimeTypedDetailedWithAddInfoException Looks up a localized string similar to XData runtime error: Failed to {0} \"{1}\" for type \"{2}\"! Additional information: ({3}).. Declaration public static string XDataRuntimeTypedDetailedWithAddInfoException { get; } Property Value Type Description String XDataRuntimeTypedException Looks up a localized string similar to XData runtime error: Failed to {0} for type \"{1}\"!. Declaration public static string XDataRuntimeTypedException { get; } Property Value Type Description String XDataSecurityDetailedException Looks up a localized string similar to XData security error: Unauthorized access to {0} (\"{1}\")!. Declaration public static string XDataSecurityDetailedException { get; } Property Value Type Description String XDataSecurityException Looks up a localized string similar to XData security error: Unauthorized access to {0}!. Declaration public static string XDataSecurityException { get; } Property Value Type Description String XDataSecurityTypedDetailedException Looks up a localized string similar to XData security error: Unauthorized access to {0} (\"{1}\") for type \"{2}\"!. Declaration public static string XDataSecurityTypedDetailedException { get; } Property Value Type Description String XDataSecurityTypedDetailedWithAddInfoException Looks up a localized string similar to XData security error: Unauthorized access to {0} (\"{1}\") for type \"{2}\"! Additional information: ({3}).. Declaration public static string XDataSecurityTypedDetailedWithAddInfoException { get; } Property Value Type Description String XDataSecurityTypedException Looks up a localized string similar to XData security error: Unauthorized access to {0} for type \"{1}\"!. Declaration public static string XDataSecurityTypedException { get; } Property Value Type Description String XDataSecurityTypedWithAddInfoException Looks up a localized string similar to XData security error: Unauthorized access to {0} for type \"{1}\"! Additional information: ({2}).. Declaration public static string XDataSecurityTypedWithAddInfoException { get; } Property Value Type Description String XDataSqlException Looks up a localized string similar to XData SQL exeception: {0}. Declaration public static string XDataSqlException { get; } Property Value Type Description String XDataSqlExceptionWithAddInfo Looks up a localized string similar to XData SQL exeception: {0} Additional information: ({1}).. Declaration public static string XDataSqlExceptionWithAddInfo { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.RepositoryTrigger-1.html": {
    "href": "api/XData.RepositoryTrigger-1.html",
    "title": "Delegate RepositoryTrigger<T> | XData website",
    "keywords": "Delegate RepositoryTrigger<T> RepositoryTrigger logic delegate type Namespace : XData Assembly : XData.dll Syntax public delegate bool RepositoryTrigger<T>(IRepository<T> repository, ref DataTriggerFlag flag) where T : class, IDataObject; Parameters Type Name Description IRepository <T> repository Repository DataTriggerFlag flag Trigger routing flag Returns Type Description Boolean Success flag Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also BeforeClear AfterClear"
  },
  "api/XData.RepositoryIndexer.html": {
    "href": "api/XData.RepositoryIndexer.html",
    "title": "Class RepositoryIndexer | XData website",
    "keywords": "Class RepositoryIndexer Data object links (parents and childs) indexer Inheritance Object RepositoryIndexer Implements IEnumerable < IRepository > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public sealed class RepositoryIndexer : IEnumerable<IRepository>, IEnumerable Properties Count Indexer count Declaration public int Count { get; } Property Value Type Description Int32 Item[String] Repository indexer Declaration public IRepository this[string alias] { get; } Parameters Type Name Description String alias Repository alias Property Value Type Description IRepository Methods Contains(String) Indexer contains repository by alias Declaration public bool Contains(string alias) Parameters Type Name Description String alias Repository alias Returns Type Description Boolean Contains flag GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IRepository> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IRepository > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.ToSortedSet<T>(IEnumerable<T>, IComparer<T>) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) JoinedEnumerable.Inner<TElement>(IEnumerable<TElement>) JoinedEnumerable.Outer<TElement>(IEnumerable<TElement>) JoinedEnumerable.LeftOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.RightOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) JoinedEnumerable.FullOuterJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) QueryDescriptionExtensions.ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder)"
  },
  "api/XData.RepositoryAttachedHandler-1.html": {
    "href": "api/XData.RepositoryAttachedHandler-1.html",
    "title": "Class RepositoryAttachedHandler<T> | XData website",
    "keywords": "Class RepositoryAttachedHandler<T> Repository level attached handler wrapper Inheritance Object AttachedHandler <T> RepositoryAttachedHandler<T> Inherited Members AttachedHandler<T>.Type AttachedHandler<T>.Handler Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public sealed class RepositoryAttachedHandler<T> : AttachedHandler<T> where T : class, IDataObject Type Parameters Name Description T Operators Explicit(RepositoryAttachedHandler<T> to ClearAttachedHandler) Explicitly unwrap clear handler Declaration public static explicit operator ClearAttachedHandler(RepositoryAttachedHandler<T> handler) Parameters Type Name Description RepositoryAttachedHandler <T> handler Wrapped handler Returns Type Description ClearAttachedHandler Unwrapped attached handler Explicit(RepositoryAttachedHandler<T> to ExecuteAttachedHandler<T>) Explicitly unwrap execute handler Declaration public static explicit operator ExecuteAttachedHandler<T>(RepositoryAttachedHandler<T> handler) Parameters Type Name Description RepositoryAttachedHandler <T> handler Wrapped handler Returns Type Description ExecuteAttachedHandler <T> Unwrapped attached handler Explicit(RepositoryAttachedHandler<T> to SubmitAttachedHandler<T>) Explicitly unwrap submit handler Declaration public static explicit operator SubmitAttachedHandler<T>(RepositoryAttachedHandler<T> handler) Parameters Type Name Description RepositoryAttachedHandler <T> handler Wrapped handler Returns Type Description SubmitAttachedHandler <T> Unwrapped attached handler Implicit(ClearAttachedHandler to RepositoryAttachedHandler<T>) Implicitly wrap clear handler Declaration public static implicit operator RepositoryAttachedHandler<T>(ClearAttachedHandler handler) Parameters Type Name Description ClearAttachedHandler handler Clear handler Returns Type Description RepositoryAttachedHandler <T> Repository attached handler Implicit(ExecuteAttachedHandler<T> to RepositoryAttachedHandler<T>) Implicitly wrap execute handler Declaration public static implicit operator RepositoryAttachedHandler<T>(ExecuteAttachedHandler<T> handler) Parameters Type Name Description ExecuteAttachedHandler <T> handler Execute handler Returns Type Description RepositoryAttachedHandler <T> Repository attached handler Implicit(SubmitAttachedHandler<T> to RepositoryAttachedHandler<T>) Implicitly wrap submit handler Declaration public static implicit operator RepositoryAttachedHandler<T>(SubmitAttachedHandler<T> handler) Parameters Type Name Description SubmitAttachedHandler <T> handler Submit handler Returns Type Description RepositoryAttachedHandler <T> Repository attached handler Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.FilterType.html": {
    "href": "api/XData.FilterType.html",
    "title": "Enum FilterType | XData website",
    "keywords": "Enum FilterType Filter type Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum FilterType Fields Name Description Constant Constant value filter Dictionary Dictionary link Expression Expression filter InnerViewLink Inner view link Link Inner link Range Range filter Runtime Runtime value filter Subquery Subquery filter SubqueryLink Subquery link See Also Link SubqueryLink InnerViewLink Dictionary Constant Subquery Expression Range Runtime Extension Methods SerializationExtensions.ToXml<FilterType>() CollectionsExtensions.SetValue<FilterType, T>(T) CollectionsExtensions.AsEnum<FilterType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<FilterType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.Indexer-1.html": {
    "href": "api/XData.Extensions.Indexer-1.html",
    "title": "Class Indexer<T> | XData website",
    "keywords": "Class Indexer<T> Indexed objects comparer Hint: Objects can be indexed by annotation attribute IndexAttribute Inheritance Object Indexer<T> Implements IComparer <T> IEqualityComparer <T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.dll Syntax public class Indexer<T> : IIndexer, IComparer<T>, IEqualityComparer<T> Type Parameters Name Description T Indexed object type Constructors Indexer(String) Indexer parametrized constructor Declaration public Indexer(string propertyName) Parameters Type Name Description String propertyName Comparable property name Methods Compare(T, T) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public int Compare(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description Int32 A signed integer that indicates the relative values of x and y , as shown in the following table.Value Meaning Less than zero x is less than y .Zero x equals y .Greater than zero x is greater than y . Exceptions Type Condition XDataRuntimeException IndexedAttribute not found Equals(T, T) Determines whether the specified objects are equal. Declaration public bool Equals(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description Boolean true if the specified objects are equal; otherwise, false. Exceptions Type Condition XDataRuntimeException IndexedAttribute not found GetHashCode(T) Returns a hash code for the specified object. Declaration public int GetHashCode(T obj) Parameters Type Name Description T obj The Object for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified object. Exceptions Type Condition System.ArgumentNullException The type of obj is a reference type and obj is null. XDataRuntimeException IndexedAttribute not found GetInstance() Singleton comparer instance Declaration public static Indexer<T> GetInstance() Returns Type Description Indexer <T> Comparer instance Implements System.Collections.Generic.IComparer<T> System.Collections.Generic.IEqualityComparer<T> Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.IndexAttribute.html": {
    "href": "api/XData.Extensions.IndexAttribute.html",
    "title": "Class IndexAttribute | XData website",
    "keywords": "Class IndexAttribute Attribute to compare objects by property value Inheritance Object System.Attribute IndexAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class IndexAttribute : Attribute Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Extensions.ExpressionExtensions.html": {
    "href": "api/XData.Extensions.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions | XData website",
    "keywords": "Class ExpressionExtensions Expression extensions Inheritance Object ExpressionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.dll Syntax public static class ExpressionExtensions"
  },
  "api/XData.Extensions.DataObjectQueryableExtensions.html": {
    "href": "api/XData.Extensions.DataObjectQueryableExtensions.html",
    "title": "Class DataObjectQueryableExtensions | XData website",
    "keywords": "Class DataObjectQueryableExtensions XData LINQ query extensions Inheritance Object DataObjectQueryableExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Extensions Assembly : XData.dll Syntax public static class DataObjectQueryableExtensions Methods CompareToCurrentDate(DateTime, FilterOperation) Compare value to current date Declaration public static bool CompareToCurrentDate(this DateTime source, FilterOperation operation) Parameters Type Name Description DateTime source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDateTime(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation) CompareToCurrentDate(Nullable<DateTime>, FilterOperation) Compare value to current date Declaration public static bool CompareToCurrentDate(this DateTime? source, FilterOperation operation) Parameters Type Name Description Nullable < DateTime > source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTime(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation) CompareToCurrentDateTime(DateTime, FilterOperation) Compare value to current date and time Declaration public static bool CompareToCurrentDateTime(this DateTime source, FilterOperation operation) Parameters Type Name Description DateTime source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation) CompareToCurrentDateTime(Nullable<DateTime>, FilterOperation) Compare value to current date and time Declaration public static bool CompareToCurrentDateTime(this DateTime? source, FilterOperation operation) Parameters Type Name Description Nullable < DateTime > source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTime(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation) Compare value to current date and time UTC Declaration public static bool CompareToCurrentDateTimeUtc(this DateTime source, FilterOperation operation) Parameters Type Name Description DateTime source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTime(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(Nullable<DateTime>, FilterOperation) Compare value to current date and time UTC Declaration public static bool CompareToCurrentDateTimeUtc(this DateTime? source, FilterOperation operation) Parameters Type Name Description Nullable < DateTime > source Source property FilterOperation operation Comparison operation Returns Type Description Boolean Comparison result Exceptions Type Condition XDataQueryStructureException LINQ expression has unsupported method parameters See Also CompareToCurrentDate(DateTime, FilterOperation) CompareToCurrentDateTime(DateTime, FilterOperation) CompareToCurrentDateTimeUtc(DateTime, FilterOperation) CompareVariable(Object, FilterOperation, String) Compare value to variable value WARNING! Method accessible only in XData LINQ expressions! Declaration public static bool CompareVariable(this object source, FilterOperation operation, string variableName) Parameters Type Name Description Object source Source property FilterOperation operation Comparison operation String variableName Variable name Returns Type Description Boolean Comparison result Exceptions Type Condition XDataRuntimeException Function is accessible in XData LINQ expressions only Like(String, String) Like Declaration public static bool Like(this string source, string pattern) Parameters Type Name Description String source Source property String pattern Like pattern Returns Type Description Boolean Like result Exceptions Type Condition XDataRuntimeException Like pattern can not be null or empty See Also Like(String, String, Char) Like(String, String, Char) Like Declaration public static bool Like(this string source, string pattern, char escapeChar) Parameters Type Name Description String source Source property String pattern Like pattern Char escapeChar Escape character Returns Type Description Boolean Like result Exceptions Type Condition XDataRuntimeException Like pattern can not be null or empty See Also Like(String, String)"
  },
  "api/XData.Exceptions.XDataQueryStructureException.html": {
    "href": "api/XData.Exceptions.XDataQueryStructureException.html",
    "title": "Class XDataQueryStructureException | XData website",
    "keywords": "Class XDataQueryStructureException Query structure build failed Inheritance Object Exception ApplicationException XDataException XDataQueryStructureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Exceptions Assembly : XData.dll Syntax [Serializable] public class XDataQueryStructureException : XDataException, ISerializable Constructors XDataQueryStructureException(XDataQueryStructureExceptionType, String) Query structure build failed Declaration public XDataQueryStructureException(XDataQueryStructureExceptionType type, string details) Parameters Type Name Description XDataQueryStructureExceptionType type Query structure exception type String details Error details XDataQueryStructureException(XDataQueryStructureExceptionType, String, Type) Query structure build failed Declaration public XDataQueryStructureException(XDataQueryStructureExceptionType type, string details, Type dataObjectType) Parameters Type Name Description XDataQueryStructureExceptionType type Query structure exception type String details Error details Type dataObjectType Data object type XDataQueryStructureException(XDataQueryStructureExceptionType, String, Type, AdditionalInfo[]) Query structure build failed Declaration public XDataQueryStructureException(XDataQueryStructureExceptionType type, string details, Type dataObjectType, params AdditionalInfo[] addInfo) Parameters Type Name Description XDataQueryStructureExceptionType type Query structure exception type String details Error details Type dataObjectType Data object type AdditionalInfo [] addInfo Additional information Exceptions Type Condition NotImplementedException XDataQueryStructureException(XDataQueryStructureExceptionType, Type) Query structure build failed Declaration public XDataQueryStructureException(XDataQueryStructureExceptionType type, Type dataObjectType) Parameters Type Name Description XDataQueryStructureExceptionType type Query structure exception type Type dataObjectType Data object type Properties DataObjectType Data object type Declaration public Type DataObjectType { get; } Property Value Type Description Type DetailsInfo Exception details info Declaration public string DetailsInfo { get; } Property Value Type Description String Type Type of exception Declaration public XDataQueryStructureExceptionType Type { get; } Property Value Type Description XDataQueryStructureExceptionType Implements System.Runtime.Serialization.ISerializable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataExceptionAttribute.html": {
    "href": "api/XData.Exceptions.XDataExceptionAttribute.html",
    "title": "Class XDataExceptionAttribute | XData website",
    "keywords": "Class XDataExceptionAttribute XData exception attribute Inheritance Object System.Attribute XDataExceptionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Exceptions Assembly : XData.dll Syntax public class XDataExceptionAttribute : Attribute Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Exceptions.XDataAdapterExceptionType.html": {
    "href": "api/XData.Exceptions.XDataAdapterExceptionType.html",
    "title": "Enum XDataAdapterExceptionType | XData website",
    "keywords": "Enum XDataAdapterExceptionType XData adapter exception types Namespace : XData.Exceptions Assembly : XData.dll Syntax public enum XDataAdapterExceptionType Fields Name Description AdapterClassNotFoundError Adapter class not found AdapterConstructorFailedError Adapter constructor failed ComplexPrimaryKeyNotSupportedError Complex primary key is not supported in this case FunctionIsNotSupportedError Function is not supported GetSqlSyntaxTemplateError SQL syntax not provided by adapter error SqlBuilderClassNotFoundError Sql builder class not found SqlBuilderConstructorFailedError Sql builder constructor failed SyntaxNotSupportedError SQL syntax construction is not supported TypeNotSupportedError Data type is not supported Extension Methods SerializationExtensions.ToXml<XDataAdapterExceptionType>() CollectionsExtensions.SetValue<XDataAdapterExceptionType, T>(T) CollectionsExtensions.AsEnum<XDataAdapterExceptionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<XDataAdapterExceptionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IExternalLink.html": {
    "href": "api/XData.DataSource.Structure.IExternalLink.html",
    "title": "Interface IExternalLink | XData website",
    "keywords": "Interface IExternalLink External link interface Inherited Members ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IExternalLink : ICloneable Properties ChildLinkType Child link type Declaration Type ChildLinkType { get; } Property Value Type Description Type ChildProperty Child property Declaration string ChildProperty { get; } Property Value Type Description String ChildType Child type Declaration Type ChildType { get; } Property Value Type Description Type Combination Filter combination name Declaration string Combination { get; } Property Value Type Description String DirectLink Direct link flag Declaration bool DirectLink { get; } Property Value Type Description Boolean FilterName Filter name Declaration string FilterName { get; } Property Value Type Description String MasterRefresh Master refresh flag Declaration bool MasterRefresh { get; } Property Value Type Description Boolean Nullable Null value handling Declaration FilterNullable Nullable { get; } Property Value Type Description FilterNullable Operation Filter operation Declaration FilterOperation Operation { get; } Property Value Type Description FilterOperation PrimaryFilter Primary filter flag Declaration bool PrimaryFilter { get; } Property Value Type Description Boolean PropertyName Property name Declaration string PropertyName { get; } Property Value Type Description String TreeFilter Tree filter flag Declaration bool TreeFilter { get; } Property Value Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.Grouping.html": {
    "href": "api/XData.DataSource.Structure.Grouping.html",
    "title": "Class Grouping | XData website",
    "keywords": "Class Grouping Grouping element Inheritance Object Grouping Implements IEquatable < Grouping > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax [Serializable] [DataContract] public sealed class Grouping : IEquatable<Grouping> Properties FieldName Field name Declaration [DataMember] public string FieldName { get; set; } Property Value Type Description String GroupFunction Group function Declaration [DataMember] public DataGrouping GroupFunction { get; set; } Property Value Type Description DataGrouping GroupOrder Group function Declaration [DataMember] public int GroupOrder { get; set; } Property Value Type Description Int32 PropertyOwnerType Property owner type name Declaration [DataMember] public string PropertyOwnerType { get; set; } Property Value Type Description String SourceAlias Source alias Declaration [DataMember] public string SourceAlias { get; set; } Property Value Type Description String Methods Equals(Grouping) Grouping equality check Declaration public bool Equals(Grouping other) Parameters Type Name Description Grouping other Grouping instance to compare Returns Type Description Boolean Instances are contains the same data Implements System.IEquatable<T> Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.FilterState.html": {
    "href": "api/XData.DataSource.Structure.FilterState.html",
    "title": "Class FilterState | XData website",
    "keywords": "Class FilterState Filter state info Inheritance Object FilterState Implements ISubqueryLink IInnerViewLink IInnerLink IDictionaryFilter ISubqueryFilter IExpressionFilter IRangeFilter IConstantFilter IRuntimeFilter INamedFilter IOptionalFilter IFilter ICloneable IEquatable < FilterState > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax [Serializable] [DataContract] public sealed class FilterState : ISubqueryLink, IInnerViewLink, IInnerLink, IDictionaryFilter, ISubqueryFilter, IExpressionFilter, IRangeFilter, IConstantFilter, IRuntimeFilter, INamedFilter, IOptionalFilter, IFilter, ICloneable, IEquatable<FilterState> Properties Combination Parent filter combination name Declaration [DataMember] public string Combination { get; set; } Property Value Type Description String ConstantType Constant type Declaration [DataMember] public FilterConstantType ConstantType { get; set; } Property Value Type Description FilterConstantType ConstantValue Filter constant value Declaration [DataMember] public string ConstantValue { get; set; } Property Value Type Description String DictionaryCode Dictionary filter code column name Declaration [DataMember] public string DictionaryCode { get; set; } Property Value Type Description String DictionaryId Dictionary filter id column name Declaration [DataMember] public string DictionaryId { get; set; } Property Value Type Description String DictionaryTableName Dictionary table name Declaration [DataMember] public string DictionaryTableName { get; set; } Property Value Type Description String DictionaryValue Dictionary value Declaration [DataMember] public string DictionaryValue { get; set; } Property Value Type Description String ExprText Expression filter text Declaration [DataMember] public string ExprText { get; set; } Property Value Type Description String Field Filter field name Declaration [DataMember] public string Field { get; set; } Property Value Type Description String FilterType Filter type Declaration [DataMember] public FilterType FilterType { get; set; } Property Value Type Description FilterType IsVariableValue Dictionary filter value is variable flag Declaration [DataMember] public bool IsVariableValue { get; set; } Property Value Type Description Boolean IteratorFilter Iterator filter flag Declaration [DataMember] public bool IteratorFilter { get; set; } Property Value Type Description Boolean LinkedAlias Linked subquery source alias Declaration [DataMember] public string LinkedAlias { get; set; } Property Value Type Description String LinkedField Linked field name Declaration [DataMember] public string LinkedField { get; set; } Property Value Type Description String LinkedSourceAlias Linked source alias Declaration [DataMember] public string LinkedSourceAlias { get; set; } Property Value Type Description String LinkedType Linked subquery type name Declaration [DataMember] public string LinkedType { get; set; } Property Value Type Description String Name Filter name Declaration [DataMember] public string Name { get; set; } Property Value Type Description String Nullable Filter null value handling type Declaration [DataMember] public FilterNullable Nullable { get; set; } Property Value Type Description FilterNullable Operation Filter operation Declaration [DataMember] public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation Primary Primary filter flag Declaration [DataMember] public bool Primary { get; set; } Property Value Type Description Boolean RangeValues Range filter values Declaration [DataMember] public object[] RangeValues { get; set; } Property Value Type Description Object [] SourceAlias Filter field source alias Declaration [DataMember] public string SourceAlias { get; set; } Property Value Type Description String SubqueryAlias Filter subquery alias Declaration [DataMember] public string SubqueryAlias { get; set; } Property Value Type Description String Methods Clone() Clone filter state Declaration public object Clone() Returns Type Description Object Empty filter state Equals(FilterState) FilterState equality check Declaration public bool Equals(FilterState other) Parameters Type Name Description FilterState other FilterState instance to compare Returns Type Description Boolean Instances are contains the same data GetAliases() Link aliases Declaration public string[] GetAliases() Returns Type Description String [] GetCaption() Filter caption Declaration public string GetCaption() Returns Type Description String GetIsLink() Filter link flag Declaration public bool GetIsLink() Returns Type Description Boolean Implements ISubqueryLink IInnerViewLink IInnerLink IDictionaryFilter ISubqueryFilter IExpressionFilter IRangeFilter IConstantFilter IRuntimeFilter INamedFilter IOptionalFilter IFilter System.ICloneable System.IEquatable<T> Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataObjectState.html": {
    "href": "api/XData.DataObjectState.html",
    "title": "Enum DataObjectState | XData website",
    "keywords": "Enum DataObjectState Data object instance state Namespace : XData Assembly : XData.dll Syntax [Flags] [DataContract] public enum DataObjectState Fields Name Description Changed Original data values are changed Deleted Instance is marked for delete Ghost Instance is deleted New New instance flag Original Original data values has no changes See Also GetState<T> (T) CheckState<T> (T, DataObjectState ) SetDeleted<T>(T, Boolean) Original New Changed Deleted Ghost Extension Methods SerializationExtensions.ToXml<DataObjectState>() CollectionsExtensions.SetValue<DataObjectState, T>(T) CollectionsExtensions.AsEnum<DataObjectState>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataObjectState, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.XDataLogic-1.html": {
    "href": "api/XData.XDataLogic-1.html",
    "title": "Class XDataLogic<T> | XData website",
    "keywords": "Class XDataLogic<T> Inheritance Object XDataLogic<T> Implements IDataLogic <T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public class XDataLogic<T> : IDataLogic<T> where T : class, IDataObject, new() Type Parameters Name Description T Methods BeginTransaction(Guid, String, Boolean, IsolationLevel) Declaration protected ITransaction BeginTransaction(Guid layer, string context = null, bool read = false, IsolationLevel isolation = IsolationLevel.ReadCommitted) Parameters Type Name Description Guid layer String context Boolean read IsolationLevel isolation Returns Type Description ITransaction GetDictionaryValue<TDict>(Expression<Func<TDict, Boolean>>, Guid, String, String, ISecuritySession, Variable[]) Declaration protected TDict GetDictionaryValue<TDict>(Expression<Func<TDict, bool>> findExpression, Guid layer, string alias = null, string context = null, ISecuritySession security = null, params Variable[] variables) where TDict : class, IDataObject, new() Parameters Type Name Description Expression < Func <TDict, Boolean >> findExpression Guid layer String alias String context ISecuritySession security Variable [] variables Returns Type Description TDict Type Parameters Name Description TDict GetRepository<TRep>(Guid, String, String, ISecuritySession, Variable[]) Declaration protected IRepository<TRep> GetRepository<TRep>(Guid layer, string alias = null, string context = null, ISecuritySession security = null, params Variable[] variables) where TRep : class, IDataObject, new() Parameters Type Name Description Guid layer String alias String context ISecuritySession security Variable [] variables Returns Type Description IRepository <TRep> Type Parameters Name Description TRep Implements IDataLogic<T> Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.WorkState.html": {
    "href": "api/XData.WorkState.html",
    "title": "Enum WorkState | XData website",
    "keywords": "Enum WorkState Work set state Namespace : XData Assembly : XData.WorkSet.dll Syntax public enum WorkState Fields Name Description Active Active (not deleted) objects Changed Changed objects Deleted Deleted objects New New objects Original Original objects Extension Methods SerializationExtensions.ToXml<WorkState>() CollectionsExtensions.SetValue<WorkState, T>(T) CollectionsExtensions.AsEnum<WorkState>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<WorkState, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Work.html": {
    "href": "api/XData.Work.html",
    "title": "Class Work | XData website",
    "keywords": "Class Work Work set helper class Inheritance Object Work Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.WorkSet.dll Syntax public static class Work Methods Add<T>(T, Expression<Func<T, IWorkSet>>[]) Create work set based on single object Declaration public static IWorkSet<T> Add<T>(T data, params Expression<Func<T, IWorkSet>>[] workSets) where T : class, IDataObject, new() Parameters Type Name Description T data Data object Expression < Func <T, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description IWorkSet <T> Work set Type Parameters Name Description T Data object type See Also Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Add<T>(ICollection<T>, Expression<Func<T, IWorkSet>>[]) Create work set based on collection Declaration public static IWorkSet<T> Add<T>(ICollection<T> data, params Expression<Func<T, IWorkSet>>[] workSets) where T : class, IDataObject, new() Parameters Type Name Description ICollection <T> data Data object collection Expression < Func <T, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description IWorkSet <T> Work set Type Parameters Name Description T Data object type See Also Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty single depended object initializer Declaration public static Expression<Func<T, IWorkSet>> Empty<T, TRet>(Expression<Func<T, TRet>> source, params Expression<Func<TRet, IWorkSet>>[] workSets) where T : class, IDataObject, new() where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, TRet>> source Expression returning parent object property contains depended data object Expression < Func <TRet, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description Expression < Func <T, IWorkSet >> Work set Type Parameters Name Description T Parent data object type TRet Depended data object type See Also Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty depended collection initializer Declaration public static Expression<Func<T, IWorkSet>> Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>> source, params Expression<Func<TRet, IWorkSet>>[] workSets) where T : class, IDataObject, new() where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, IEnumerable <TRet>>> source Expression returning parent object property contains depended data object Expression < Func <TRet, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description Expression < Func <T, IWorkSet >> Work set Type Parameters Name Description T Parent data object type TRet Depended data object type See Also Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Existed depended collection initializer Declaration public static Expression<Func<T, IWorkSet>> Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>> source, params Expression<Func<TRet, IWorkSet>>[] workSets) where T : class, IDataObject, new() where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, IEnumerable <TRet>>> source Expression returning parent object property contains depended data object Expression < Func <TRet, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description Expression < Func <T, IWorkSet >> Work set Type Parameters Name Description T Parent data object type TRet Depended data object type See Also Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Existed single depended object initializer Declaration public static Expression<Func<T, IWorkSet>> Get<T, TRet>(Expression<Func<T, TRet>> source, params Expression<Func<TRet, IWorkSet>>[] workSets) where T : class, IDataObject, new() where TRet : class, IDataObject, new() Parameters Type Name Description Expression < Func <T, TRet>> source Expression returning parent object property contains depended data object Expression < Func <TRet, IWorkSet >>[] workSets Depended objects/collections initializers Returns Type Description Expression < Func <T, IWorkSet >> Work set Type Parameters Name Description T Parent data object type TRet Depended data object type See Also Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) GetWorkSet<T>(Guid) Returns a cached work set Declaration public static IWorkSet<T> GetWorkSet<T>(Guid layer) where T : class, IDataObject, new() Parameters Type Name Description Guid layer Data scope layer Returns Type Description IWorkSet <T> Work set Type Parameters Name Description T Data object type See Also Add<T>(T, Expression<Func<T, IWorkSet>>[]) Add<T>(ICollection<T>, Expression<Func<T, IWorkSet>>[]) Get<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, TRet>>, Expression<Func<TRet, IWorkSet>>[]) Fill<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[]) Empty<T, TRet>(Expression<Func<T, IEnumerable<TRet>>>, Expression<Func<TRet, IWorkSet>>[])"
  },
  "api/XData.WithRecursiveType.html": {
    "href": "api/XData.WithRecursiveType.html",
    "title": "Enum WithRecursiveType | XData website",
    "keywords": "Enum WithRecursiveType Common-Table-Expression (WITH) Subquery type Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum WithRecursiveType Fields Name Description RecursiveUnion Recursive select with UNION combination RecursiveUnionAll Recursive select with ALL combination Extension Methods SerializationExtensions.ToXml<WithRecursiveType>() CollectionsExtensions.SetValue<WithRecursiveType, T>(T) CollectionsExtensions.AsEnum<WithRecursiveType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<WithRecursiveType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.html": {
    "href": "api/XData.Mapping.Dynamic.html",
    "title": "Namespace XData.Mapping.Dynamic | XData website",
    "keywords": "Namespace XData.Mapping.Dynamic Classes ParameterDescription SQL procedure / function parameter description QueryDescriptionExtensions Query description extensions TaggedExpression<TTag, TResult> Tagged expression XDataMapping Interfaces IExpressionPropertyAdapter SQL expression property mapping adapter IExternalLinkAdapter<T, TChild> External link mapping adapter IExternalLinkDefinition Dynamic structure external link definition interface IExternalLinkDefinitionAdapter<T> External link definition adapter IExternalLinkFlag Dynamic structure external link flag interface IFilterAdapter Filter description adapter IFilterDescription Dynamic query filter description IInnerFilterAdapter Inner filter description adapter ILinkPropertyMappingAdapter<T> Link property mapping adapter IParameterDescription Dynamic stored procedure parameter description IProcedureParameterAdapter Procedure parameter mapping adapter IProcedureParameterFlag Procedure parameter mapping flag IPropertyMappingAdapter Basic dynamic structure adapter IQueryDescription Dynamic query description basic interface IQueryDescription<T> Dynamic query description with result type specified interface IQueryStructure Dynamic query structure interface IQueryStructureAdapter Query structure mapping adapter interface IQueryWithAdapter<TRoot> Common-Table-Expression (WITH) mapping attributes IQueryWithFlag Common-Table-Expression (WITH) flag IRepositoryDescription<T> Dynamic repository structure description interface IRepositoryExpressionMappingAdapter Repository SQL expression property mapping adapter IRepositoryPropertyMappingAdapter Repository property mapping adapter IRepositoryStructure<T> Repository structure descriptor IRepositoryStructureAdapter Repository structure adapter IRepositoryStructureAdapter<T> Repository structure mapping adapter interface IResultSetDescription Dynamic stored procedure result set description IStructureFlag Dynamic structure flag interface ISubqueryFilterAdapter Subquery link filter description adapter ISubqueryFilterAdapter<TDObj> Subquery link filter description adapter ISubqueryFilterAdapter<T, TDObj> Subquery link filter description adapter ITaggedExpression Object tagged expression interface"
  },
  "api/XData.Mapping.Dynamic.XDataMapping.html": {
    "href": "api/XData.Mapping.Dynamic.XDataMapping.html",
    "title": "Class XDataMapping | XData website",
    "keywords": "Class XDataMapping Inheritance Object XDataMapping Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public static class XDataMapping Methods CustomMapping<T>() Returns dynamic repository structure Declaration public static IRepositoryStructure<T> CustomMapping<T>() where T : class, IDataObject, new() Returns Type Description IRepositoryStructure <T> Dynamic query structure Type Parameters Name Description T Exceptions Type Condition XDataRuntimeException See Also DataStructureFlag Variable IQueryStructure GetStructure(String, String, DataStructureFlag, Variable[]) Returns dynamic query structure Declaration public static IQueryStructure GetStructure(string baseTableAlias = \"\", string context = null, DataStructureFlag flags = DataStructureFlag.ReadOnly, params Variable[] variables) Parameters Type Name Description String baseTableAlias Base table alias String context Context name DataStructureFlag flags Data object flags Variable [] variables Variables Returns Type Description IQueryStructure Dynamic query structure See Also DataStructureFlag Variable IQueryStructure GetStructure<T>(String) Returns dynamic query structure based on static mapping Declaration public static IQueryStructure GetStructure<T>(string context = null) where T : class, IDataObject, new() Parameters Type Name Description String context Context name Returns Type Description IQueryStructure Dynamic query structure Type Parameters Name Description T See Also DataStructureFlag Variable IQueryStructure"
  },
  "api/XData.Mapping.Dynamic.TaggedExpression-2.html": {
    "href": "api/XData.Mapping.Dynamic.TaggedExpression-2.html",
    "title": "Class TaggedExpression<TTag, TResult> | XData website",
    "keywords": "Class TaggedExpression<TTag, TResult> Tagged expression Inheritance Object TaggedExpression<TTag, TResult> Implements ITaggedExpression Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public class TaggedExpression<TTag, TResult> : ITaggedExpression Type Parameters Name Description TTag Tag type TResult Expression Properties Key Tag key Declaration public object Key { get; } Property Value Type Description Object KeyType Tag key type Declaration public Type KeyType { get; } Property Value Type Description Type Value Tagged expression Declaration public Expression Value { get; } Property Value Type Description Expression Operators Implicit(KeyValuePair<TTag, Expression<Func<IBlockQueryAdapter, TResult>>> to TaggedExpression<TTag, TResult>) Tagged expression implicit conversion operator Declaration public static implicit operator TaggedExpression<TTag, TResult>(KeyValuePair<TTag, Expression<Func<IBlockQueryAdapter, TResult>>> pair) Parameters Type Name Description KeyValuePair <TTag, Expression < Func < XData.Database.SqlBlock.IBlockQueryAdapter , TResult>>> pair Key value pair Returns Type Description TaggedExpression <TTag, TResult> Tagged expression Implicit(KeyValuePair<TTag, Expression<Func<IQueryStructureAdapter, TResult>>> to TaggedExpression<TTag, TResult>) Tagged expression implicit conversion operator Declaration public static implicit operator TaggedExpression<TTag, TResult>(KeyValuePair<TTag, Expression<Func<IQueryStructureAdapter, TResult>>> pair) Parameters Type Name Description KeyValuePair <TTag, Expression < Func < IQueryStructureAdapter , TResult>>> pair Key value pair Returns Type Description TaggedExpression <TTag, TResult> Tagged expression Implements ITaggedExpression Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.html": {
    "href": "api/XData.Mapping.Dynamic.QueryDescriptionExtensions.html",
    "title": "Class QueryDescriptionExtensions | XData website",
    "keywords": "Class QueryDescriptionExtensions Query description extensions Inheritance Object QueryDescriptionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public static class QueryDescriptionExtensions Methods AsPrimary<T>(T) Set primary filter flag to filter description Declaration public static T AsPrimary<T>(this T desc) where T : IFilterDescription Parameters Type Name Description T desc Filter description Returns Type Description T Filter description Type Parameters Name Description T Filter description type Exceptions Type Condition XDataRuntimeException desc argument can not be null Case<T, TResult>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, TResult>>, TaggedExpression<T, TResult>[]) Case Declaration public static TResult Case<T, TResult>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, TResult>> elseValue, params TaggedExpression<T, TResult>[] switchValues) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter Expression < Func < IQueryStructureAdapter , T>> expression Case expression Expression < Func < IQueryStructureAdapter , TResult>> elseValue Else value TaggedExpression <T, TResult>[] switchValues Case switch values Returns Type Description TResult Case result Type Parameters Name Description T TResult Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only DateDiff<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, DateTime>>, Expression<Func<IQueryStructureAdapter, DateTime>>, DateDiffKind) Dates difference Declaration public static T DateDiff<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, DateTime>> finalDate, Expression<Func<IQueryStructureAdapter, DateTime>> startDate, DateDiffKind kind) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter Expression < Func < IQueryStructureAdapter , DateTime >> finalDate Final date Expression < Func < IQueryStructureAdapter , DateTime >> startDate Start date DateDiffKind kind Dates differences kind Returns Type Description T Dates difference Type Parameters Name Description T Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only Exists(IQueryStructureAdapter, String) Exists Declaration public static bool Exists(this IQueryStructureAdapter adapter, string subQueryAlias) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter String subQueryAlias Subquery alias Returns Type Description Boolean Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only HasFlag<T>(IQueryStructureAdapter, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>, Expression<Func<IQueryStructureAdapter, T>>) Bit mask has flag Declaration public static T HasFlag<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, T>> flagValue, Expression<Func<IQueryStructureAdapter, T>> trueValue, Expression<Func<IQueryStructureAdapter, T>> falseValue) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter Expression < Func < IQueryStructureAdapter , T>> expression Expression to test Expression < Func < IQueryStructureAdapter , T>> flagValue Flag value Expression < Func < IQueryStructureAdapter , T>> trueValue Result if flag exists Expression < Func < IQueryStructureAdapter , T>> falseValue Result if flag not exists Returns Type Description T Bit mask has flag than trueValue else falseValue Type Parameters Name Description T Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only SetCombination<T>(T, String) Set combination name to filter description Declaration public static T SetCombination<T>(this T desc, string combinationName) where T : IFilterDescription Parameters Type Name Description T desc Filter description String combinationName Filter combination name Returns Type Description T Filter description Type Parameters Name Description T Filter description type Exceptions Type Condition XDataRuntimeException desc argument can not be null SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) Set expression to tag Declaration public static TaggedExpression<TTag, TResult> SetExpression<TTag, TResult>(this TTag key, Expression<Func<IQueryStructureAdapter, TResult>> expression) Parameters Type Name Description TTag key Tag value Expression < Func < IQueryStructureAdapter , TResult>> expression Expression Returns Type Description TaggedExpression <TTag, TResult> Tagged expression Type Parameters Name Description TTag Tag type TResult Expression result SetOperation<T>(T, FilterOperation) Set filter or link operation Declaration public static T SetOperation<T>(this T desc, FilterOperation operation) where T : IFilterDescription Parameters Type Name Description T desc Filter description FilterOperation operation Filter operation Returns Type Description T Filter description Type Parameters Name Description T Filter description type Exceptions Type Condition XDataRuntimeException desc argument can not be null or empty See Also FilterOperation SqlExpr<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, TResult>>[]) Plain SQL expression with XData LINQ expression placeholders Declaration public static TResult SqlExpr<TResult>(this IQueryStructureAdapter adapter, string format, params Expression<Func<IQueryStructureAdapter, TResult>>[] expressions) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter String format SQL expression body in Format(String, Object[]) style Expression < Func < IQueryStructureAdapter , TResult>>[] expressions XData LINQ parameter expressions Returns Type Description TResult SQL expression result Type Parameters Name Description TResult Remarks WARNING! Plain SQL expressions can use specific SQL dialect features! Data mapping may be not compatible with other database engines! Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only SqlFn<TResult>(IQueryStructureAdapter, String, Expression<Func<IQueryStructureAdapter, Object>>[]) SQL function call Declaration public static TResult SqlFn<TResult>(this IQueryStructureAdapter adapter, string name, params Expression<Func<IQueryStructureAdapter, object>>[] parameters) Parameters Type Name Description IQueryStructureAdapter adapter Source query structure adapter String name SQL function full qualified name Expression < Func < IQueryStructureAdapter , Object >>[] parameters Function parameters descriptions Returns Type Description TResult Function call result Type Parameters Name Description TResult Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only SqlParam<TResult>(IQueryStructureAdapter, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) SQL parameter definition Declaration public static TResult SqlParam<TResult>(this IQueryStructureAdapter adapter, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) Parameters Type Name Description IQueryStructureAdapter adapter Query structure adapter String binding Parameter data binding name DbType type Parameter database type Expression < Func < IProcedureParameterAdapter , IProcedureParameterFlag >>[] attributes Parameter mapping attributes Returns Type Description TResult Parameter Type Parameters Name Description TResult Parameter mapped type Exceptions Type Condition XDataRuntimeException Function accessible in XData LINQ expressions only ToDataSet<T>(IEnumerable<T>, String, ISqlBuilder) Composes data source text from sequence Declaration public static string ToDataSet<T>(this IEnumerable<T> source, string prefix, ISqlBuilder builder) Parameters Type Name Description IEnumerable <T> source Source sequence String prefix Source column prefix ISqlBuilder builder SQL dialect adapter Returns Type Description String Data source text Type Parameters Name Description T Source object type Remarks Used to compose synthetic data source from object sequence var ds = Enumerable.Range(1,3).ToDataSet(\"val\", XDataManager.GetContext().DialectAdapter); // for MSSQL dialect ds will contains \"(select 1 as val union select 2 as val union select 3 as val)\" // for Oracle dialect ds will contains \"(select 1 as val from dual union select 2 as val from dual union select 3 as val from dual)\" // Enumeration types can be used as var ds = Enum.GetValues(typeof(SomeEnumType)).Cast<int>().ToDataSet(\"val\", XDataManager.GetContext().DialectAdapter); // Object types properties are represented as fields var test = new []{new {Id=1, Name=\"Test\"}, new {Id=2, Name=\"Another\"}}; var ds = test.ToDataSet(\"X\", XDataManager.GetContext().DialectAdapter); // for MSSQL dialect ds will contains \"(select 1 as X_Id, 'Test' as X_Name union select 2 as X_Id, 'Another' as X_Name)\""
  },
  "api/XData.Mapping.ColumnAttribute.html": {
    "href": "api/XData.Mapping.ColumnAttribute.html",
    "title": "Class ColumnAttribute | XData website",
    "keywords": "Class ColumnAttribute Column mapping attribute Inheritance Object System.Attribute ColumnAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class ColumnAttribute : Attribute Remarks Used to map data without declaring real property This useful for declare Id , introduce \"virtual\" property for PropertyName , ChildProperty or can be used for grouping (see GroupOrder ) Constructors ColumnAttribute(String, Type, String, String) Column attribute Declaration public ColumnAttribute(string propertyName, Type propertyType, string source = \"\", string fieldName = \"\") Parameters Type Name Description String propertyName Property name Type propertyType Property type String source Source alias String fieldName Field name Exceptions Type Condition XDataRuntimeException Property name cannot be null or empty string XDataRuntimeException Field name cannot be null or empty string XDataRuntimeException Property type cannot be null Properties FieldName Field name Declaration public string FieldName { get; } Property Value Type Description String Flags Property flags Declaration public DataPropertyFlag Flags { get; set; } Property Value Type Description DataPropertyFlag See Also DataPropertyFlag Grouping Grouping mode Declaration public DataGrouping Grouping { get; set; } Property Value Type Description DataGrouping See Also DataGrouping GroupOrder Grouping order Declaration public int GroupOrder { get; set; } Property Value Type Description Int32 Hidden Hidden column flag Declaration public bool Hidden { get; set; } Property Value Type Description Boolean Remarks Used to exclude column from query selected columns Hidden column can be used as: PropertyName , ChildProperty or for grouping (see GroupOrder ) NativeSqlType Native SQL type name Declaration public string NativeSqlType { get; set; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter! PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description String PropertyType Property type Declaration public Type PropertyType { get; } Property Value Type Description Type Reference Referenced property name Declaration public string Reference { get; set; } Property Value Type Description String ReferenceSource Referenced property source alias Declaration public string ReferenceSource { get; set; } Property Value Type Description String Source Data source alias Declaration public string Source { get; } Property Value Type Description String TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.IWorkSet.html": {
    "href": "api/XData.IWorkSet.html",
    "title": "Interface IWorkSet | XData website",
    "keywords": "Interface IWorkSet Basic work set interface Inherited Members IDisposable.Dispose() Namespace : XData Assembly : XData.WorkSet.dll Syntax public interface IWorkSet : IDisposable Properties Name Work set name Declaration string Name { get; } Property Value Type Description String Methods Clear() Clear work set objects Declaration void Clear() Submit(IDataScope) Submit work set objects Declaration bool Submit(IDataScope dataScope) Parameters Type Name Description IDataScope dataScope Currrent data scope Returns Type Description Boolean Success flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also IWorkSet <T>"
  },
  "api/XData.DataSourceType.html": {
    "href": "api/XData.DataSourceType.html",
    "title": "Enum DataSourceType | XData website",
    "keywords": "Enum DataSourceType Data source type Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum DataSourceType Fields Name Description InnerView Inner view Procedure SQL Stored procedure or Function Subquery Subquery Table Table WithSubquery Common-Table-Expression (WITH) Subquery See Also Table Subquery InnerView Procedure Extension Methods SerializationExtensions.ToXml<DataSourceType>() CollectionsExtensions.SetValue<DataSourceType, T>(T) CollectionsExtensions.AsEnum<DataSourceType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataSourceType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.html": {
    "href": "api/XData.DataSource.Structure.html",
    "title": "Namespace XData.DataSource.Structure | XData website",
    "keywords": "Namespace XData.DataSource.Structure Classes DataQueryState Data query state DataStructureState Data structure state Field Field object FilterCombinationState Filter combination state FilterName FilterName helper class to initialize named RuntimeFilter FilterState Filter state info Grouping Grouping element Hierarchy Hierarchy Order Order by element RepositoryState Repository state RuntimeFilter Runtime value filter Structs SelectedField Selected field description TaggedValue Nameed value Interfaces IConstantFilter Constant value filter interface IDataSource Data object source IDataStructure Data object structure IDictionaryFilter Dictionary filter interface IExpressionFilter Expression filter interface IExternalLink External link interface IField Field interface IFilter Filter interface IFilterCombination Filter combination interface IInnerLink Link interface IInnerViewLink Inner view link interface INamedFilter Named filter interface IOptionalFilter Optional filter interface Hint: Optional filters can rise flag to skip their sources if no value assigned in runtime or their subquery is skipped by other optional filters IProcedure Procedure based structure IRangeFilter Range filter interface IRuntimeFilter Runtime filter interface ISqlPart Subquery base interface ISubqueryFilter Subquery filter interface ISubqueryLink Subquery link interface ITable Table"
  },
  "api/XData.DataSource.Structure.FilterName.html": {
    "href": "api/XData.DataSource.Structure.FilterName.html",
    "title": "Class FilterName | XData website",
    "keywords": "Class FilterName FilterName helper class to initialize named RuntimeFilter Inheritance Object FilterName Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public class FilterName Constructors FilterName(String) FilterName constructor Declaration public FilterName(string name) Parameters Type Name Description String name Properties Name Filter name Declaration public string Name { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "tutorial/mapping/dynamic/procedure/result.html": {
    "href": "tutorial/mapping/dynamic/procedure/result.html",
    "title": "SQL procedure resultset | XData website",
    "keywords": "SQL procedure resultset To describe resultset of SQL procedure used Return method call of IRepositoryStructure<T> interface."
  },
  "tutorial/mapping/dynamic/procedure/procedure.html": {
    "href": "tutorial/mapping/dynamic/procedure/procedure.html",
    "title": "SQL procedures & functions | XData website",
    "keywords": "SQL procedures & functions Common information about mapping to SQL procedures and functions described in common mapping rules description and here we just reprensent dynamic mapping rules for various procedure types. SQL procedure as query To define procedure as data source of mapping used Procedure method call of IRepositoryStructure<T> interface. SQL procedure parameter To define SQL procedure parameter used Parameter method call of IRepositoryStructure<T> interface. SQL procedure resultset To describe resultset of SQL procedure used Return method call of IRepositoryStructure<T> interface. SQL procedure resultset as query sample var res = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Return(\"T\", \"Result\", 1, convertor) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); foreach (var classifier in res) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with multiple resultsets sample var res2 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"param3\", DbType.Int32) .Parameter<string>(\"T\", 4, \"param4\", DbType.String) .Return(\"T\", \"Result1\", 1, convertor) .Return(\"T\", \"Result2\", 2, convertor) .Call<Classifier>(DataScope.Layer, \"Result1\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\"), \"param3\".SetValue(\"2\"), \"param4\".SetValue(\"Some\")); foreach (var classifier in res2) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); foreach (var classifier in res2.GetResultSet<Classifier>(\"Result2\")) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with out parameter sample var res3 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<string>(\"T\", 3, \"param3\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.Output)) .Call(DataScope.Layer, \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); Console.WriteLine(res3.GetParameter<string>(\"param3\")); SQL procedure with out parameter and resultset sample var res4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); Console.WriteLine(res4.GetParameter<int>(\"result\")); foreach (var classifier in res4) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with return value sample var res5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); Console.WriteLine(res5.GetParameter<int>(\"result\")); SQL procedure with return value and resultset sample var res6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(param)); foreach (var classifier in res6) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with simple array parameter sample var arr = new[] { 1, 2, 3 }.ToXml(); var f6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction6\", ProcedureType.Function) .Parameter<int[]>(\"T\", 1, \"p_arr\", DbType.Int32, z => z.Array()) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"p_arr\".SetValue(arr)); Console.WriteLine(f6.GetParameter<int>(\"result\")); SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var f5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction5\", ProcedureType.Function) .Parameter<Classifier>(\"T\", 1, \"p_obj\", DbType.Object, z => z.UdtDataType(\"classifier_rec\")) .Parameter<string>(\"T\", 3, \"result\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.ReturnValue), z => z.NativeSqlType(\"VARCHAR\")) .Call(DataScope.Layer, \"p_obj\".SetValue( new Classifier { Id = 1, Name = \"Test\" }.ToXml())); Console.WriteLine(f5.GetParameter<string>(\"result\")); SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var param = new[] { new Classifier { Id = 1, Name = \"Test\" }, new Classifier { Id = 2, Name = \"Some\" } }.ToXml(); var f4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction4\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"param1\".SetValue(param)); Console.WriteLine(f4.GetParameter<int>(\"result\")); SQL table valued function as query sample var f3 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(\"dbo.Classifier\")) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetValue(param)); foreach (var classifier in f3) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL scalar function as property data source sample var f1 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction\", ProcedureType.Function) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); foreach (var classifier in f1) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/parameter.html": {
    "href": "tutorial/mapping/dynamic/procedure/parameter.html",
    "title": "SQL procedure parameter | XData website",
    "keywords": "SQL procedure parameter To define SQL procedure parameter used Parameter method call of IRepositoryStructure<T> interface."
  },
  "tutorial/mapping/dynamic/filter/subquery_links.html": {
    "href": "tutorial/mapping/dynamic/filter/subquery_links.html",
    "title": "Subquery links | XData website",
    "keywords": "Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used one of SubqueryLink method overload of ISubqueryFilterAdapter , ISubqueryFilterAdapter<TDObj> or ISubqueryFilterAdapter<T,TDObj> depending by outer method signature and subquery declaration specific. ... .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ... Tip Subquery links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call."
  },
  "tutorial/mapping/dynamic/tree.html": {
    "href": "tutorial/mapping/dynamic/tree.html",
    "title": "Tree | XData website",
    "keywords": "Tree To dynamically map tree organized data structure used special method With of RepositoryStructure<T> interface to describe tree root query and tree childs. Both of them use subquery mappings (see example below) to set subquery structure for tree query construction. Important Data source flags of tree organized data sources must contain DataStructureFlag.ReadOnly and DataStructureFlag.Tree! private static Expression<CustomMapping<CatalogueTree>> _unused = ( () => XDataMapping.CustomMapping<CatalogueTree>() .With(\"CAT\", XDataMapping.GetStructure(\"R\", null, DataStructureFlag.ReadOnly) .DataTable(\"T_CATALOGUE\", \"R\", x => x.Combination(\"root\", Combination.Or), x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed).SetCombination(\"root\"), x => x.ConstFilter(\"FilterByRoot\", \"parent_id\", FilterConstantType.Const, null, FilterNullable.NullsCompared) .SetCombination(\"root\")) .Select(x => new { CatalogueId = x.Field<long>(\"R\", string.Empty, z => z.Key()), Code = x.Field<string>(\"R\", string.Empty), Name = x.Field<string>(\"R\", string.Empty), ParentId = x.Field<long?>(\"R\", string.Empty), }), x => x.Properties(z => z.CatalogueId, z => z.Code, z => z.Name, z => z.ParentId), x => x.WithRecursive(\"S\", XDataMapping .GetStructure(\"S\", null, DataStructureFlag.ReadOnly) .DataTable(\"T_CATALOGUE\", \"S\") .Select(y => new { CatalogueId = y.Field<long>(\"S\", string.Empty, z => z.Key()), Code = y.Field<string>(\"S\", string.Empty), Name = y.Field<string>(\"S\", string.Empty), ParentId = y.Field<long?>(\"S\", string.Empty) }), z => z.SubqueryLink(y => y.ParentId, y => y.CatalogueId))) .ReadOnlyProperty(x => x.CatalogueId, x => x.Field<long>(\"CAT\", string.Empty, z => z.Key())) .ReadOnlyProperty(x => x.Code, x => x.Field<string>(\"CAT\", string.Empty)) .ReadOnlyProperty(x => x.Name, x => x.Field<string>(\"CAT\", string.Empty)) .ReadOnlyProperty(x => x.ParentId, x => x.Field<long?>(\"CAT\", string.Empty)) .Map(x => new CatalogueTree()) .SetFlags(DataStructureFlag.ReadOnly | DataStructureFlag.Tree) );"
  },
  "tutorial/mapping/dynamic/subquery.html": {
    "href": "tutorial/mapping/dynamic/subquery.html",
    "title": "Subqueries | XData website",
    "keywords": "Subqueries Subqueries can be used for a: filtration using [not] exists() , [not] in (select) ( see below ) inner view subquery expression as single property source ( see below ) Subquery deep level not reglamented. In dynamic mapping of data object subqueries can be defined using one of Subquery or InnerView methods overload of IRepositoryStructure<T> interface to define subqueries or inner views respectively. While using generic overloads of Subquery or InnerView , parameter IQueryDescription<TDobj> sub can be used with in place dynamic query notation. Non generic overloads of Subquery or InnerView must provide ISqlType or IDataObject marked class type as parameter Type dobjType to reuse of existing mapping. This class can be mapped using static or dynamic style, no matter. ... .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", null, DataStructureFlag.Grouping, new Variable[0]) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<long?>(\"H\", string.Empty, z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(\"DocId\").SetOperation(FilterOperation.OuterJoin)) .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ..."
  },
  "tutorial/mapping/dynamic/sample.html": {
    "href": "tutorial/mapping/dynamic/sample.html",
    "title": "Dynamic mapping sample | XData website",
    "keywords": "Dynamic mapping sample Dynamic mapping example for same data object as represented in static mapping description: public partial class Invoice: IDataObject { public static CustomLogic<Invoice> TestCustomLogic; private static Expression<CustomMapping<Invoice>> _mapping = ( () => XDataMapping.CustomMapping<Invoice>() .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_DOC_STATE\", \"DS\", \"D\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_STATE\", \"S\", x => x.Link(\"DS\", \"doc_state_id\")) .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\").SetOperation(FilterOperation.In)) .DataTable(\"T_CATALOGUE\", \"U\", x => x.Link(\"DC\", \"catalogue_id\")) .DataTable(\"T_DOC_NUMBER\", \"N\", \"D\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_CUST\", \"CF\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"FROM\")) .DataTable(\"T_CUSTOMER\", \"F\", x => x.Link(\"CF\", \"customer_id\")) .DataTable(\"T_DOC_CUST\", \"CT\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\")) .DataTable(\"T_CUSTOMER\", \"T\", x => x.Link(\"CT\", \"customer_id\")) .DataTable(\"T_DOC_SCAN\", \"SC\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .DataTable(\"T_DOC_SOURCE\", \"SR\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .DataTable(\"T_DOC_DELIVERY\", \"DD\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", null, DataStructureFlag.Grouping, new Variable[0]) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<long?>(\"H\", string.Empty, z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(\"DocId\").SetOperation(FilterOperation.OuterJoin)) .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) .Column(\"CatalogueId\", x => x.Field<long?>(\"U\", string.Empty)) .ReadOnlyProperty(x => x.DocStateCode, x => x.Field<string>(\"S\", \"code\")) .ReadOnlyProperty(x => x.Generation, x => x.Field<long>(\"D\", string.Empty, z => z.ConcurrencyToken(), z => z.Default(DefaultType.AutoIncrement))) .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, true))) .ReadOnlyProperty(x => x.Author, x => x.Field<string>(\"D\", string.Empty, z => z.Default(DefaultType.UserName, true))) .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\")) .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode)), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty<Catalogue>(y => y.Name)), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty<Customer>(y => y.Name)), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty<Customer>(y => y.Name)), DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink<InvoiceSpec>(\"DocId\")) .SetBaseTable(\"D\").SetLogicAssembly(\"XDataObjectTest\") ); } ... public partial class Invoice: IDataObject { public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } public Link<string, DocState> DocState { get; set; } public Link<string, Catalogue> DocCatalog { get; set; } public string DocNumb { get; set; } public DateTime? DocDate { get; set; } public long Generation { get { return this.GetProperty(x => x.Generation); } } public DateTime Changed { get { return this.GetProperty(x => x.Changed); } } public string Author { get { return this.GetProperty(x => x.Author); } } public decimal? DocAmount { get { return this.GetProperty(x => x.DocAmount); } } public DateTime? DocLastChange { get { return this.GetProperty(x => x.DocLastChange); } } public Lob Scan { get; set; } public Xml Source { get; set; } public Link<string, Customer> CustomerFrom { get; set; } public Link<string, Customer> CustomerTo { get; set; } public DeliveryTypeEnum DeliveryType { get; set; } public DateTime? DeliveryDate { get; set; } public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } } Dynamic mapping provide more representable mechanics to define mapping because of no attribute parameters limitation. Subqueries and inner views can be described in place using dynamic query mechanics. SQL expressions can be described in LINQ style in place. This abilities enreach representability of dynamic mapping. Dynamic mapping alowes split data object to partial class definitions with basic class definition and mapping. Dynamic mapping is described as private static field of type Expression<CustomMapping<T>> where T - data object type. The value of this property is assigned by call of XDataMapping.CustomMapping<T> method returning IRepositoryStructure<T> . Interface IRepositoryStructure<T> has a number of methods to describe all of mapping entities analog to static mapping attributes."
  },
  "tutorial/mapping/dynamic/parameters.html": {
    "href": "tutorial/mapping/dynamic/parameters.html",
    "title": "Mapping parameters | XData website",
    "keywords": "Mapping parameters To set parameters of dynamically mapped classes used IRepositoryDescription<T> interface methods: SetBaseTable - to set base table , (optional, by default used virtual table with the empty alias) SetContext - database context (optional, by default context will by assigned in runtime) SetFlags - data source flags (optional, by default None ) SetLogicAssembly - to set data processing logic class assembly FullName for this repository (see Using three tier architecture и IDataLogic<T> ) To get reference to IRepositoryDescription<T> interface is required to define maping of repository read/write properties using IRepositoryStructure<T> interface method Map Example: ... .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode)), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty(y => y.Name)), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty(y => y.Name)), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty(y => y.Name)), DeliveryType = x.Field(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink(\"DocId\")) .SetBaseTable(\"D\").SetLogicAssembly(\"XDataObjectTest\") ... More detailed repository properties map description see below . All tables of data object mapping decribed by IRepositoryStructure<T>. DataTable method. Tables included into updatable tables hierarchy excluding base table must be defined using special overload alowes to set parent table alias. ... .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_DOC_STATE\", \"DS\", \"D\", x => x.Link(\"D\", \"doc_id\")) ... Same way is possible to define mapping to view , but all properties must to mapped as read only properties or hidden fields . Important Filters and links between tables is defined using filters parameter of IRepositoryStructure<T>. DataTable method or it's overload . Detailed filter definition described below ."
  },
  "tutorial/mapping/mapping.html": {
    "href": "tutorial/mapping/mapping.html",
    "title": "Mapping common rules | XData website",
    "keywords": "XData tutorial Mapping common rules All data objects must to be signed with marker interface (empty interface) IDataObject . All objects describes subqueries must to be signed with marker interface ISqlObject . Tip Ability of defining maping to marker interface is key feature of XData alowed get flexible and natural objects deriving hierarchy with full featured and handy methods to work with it (using extension methods). Mapping rules can be declared statically with attributes of class and its properties (see static mapping ), and dynamically using LINQ style expression (see dynamic mapping ). Common types properties Common types properties (string, bool, int...) including nullable (int?, bool?...), and enum properties is declared as common class properties. Data access to this properties is usual. Only mapping description is depends on static or dynamic method of declaration. Bynary properties To work with large binary object (BLOB) using lazy coupling XData represent property type Lob . This type has followed... properties: byte[] Value - binary object value (readonly) bool Assigned - check object has value (including empty value) or NULL methods: GetSize () - returns size of binary object (extension) Modify(Action<byte[]> action) - helper method to simplify changing of binary object value operation: += - \"syntax sugar\", _data.SomeBlob += _someVariable identic with _data.SomeBlob.Value = _someVariable. Examples: newInvoice.Scan += _image; ... if(newInvoice.Scan.Assigned) _size = newInvoice.Scan.GetSize(); ... invoice.Scan.Modify(x => x = new byte[0]); Xml properties To work with Xml using lazy coupling XData represent property type Xml . This type has followed... properties: XDocument Document - get or set Xml value (readonly) bool Assigned - check Xml field for NULL value methods: Extract (string path, params KeyValuePair<string, string>[] namespaces) - returning result of XPath expression path using namespaces (pair: namespace - URL) (extension) Modify (Action action) - helper method to change Xml value operations: += - \"syntax sugar\", _data.SomeXml += _someVariable identical with _data.SomeXml.Document = _someVariable. Example: newInvoice.Source += new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", newInvoice.DocStateCode))); ... dataScope.GetRepository<Invoice>(Owner, context: Context) .First(x => x.Source.Extract(\"(/invoice/@state)[1]\") == \"ACTIVE\").DocNumb ... invoice.Source.Modify(x => x = new XDocument()); Link properties To work with external links to data objects outside current object without operating surogate keys, XData represent special property type - Link<TVal,TSrc> , where TVal - type of property for preview, TSrc - type of external object. For type Link is defined... properties: TVal Value - this property to get preview of linked object TSrc Source - this property can be used to set linked object (readonly) bool Assigned - check link value for NULL value operations: += - \"syntax sugar\", _data.SomeLink += _someDictionaryObject identic with _data.SomeLink.Source = _someDictionaryObject. newInvoice.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == \"CREATED\"); To make link properties work correct, at mapping level need to be defined pairs of properties source and current objects, that values will be copied from source object to current when link is applied. Link description is deferent for static and dynamic methods of mapping. Readonly properties Read only properties XData require to perform as in example below: public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } Data access is provided through extension method GetProperty , but property is read only. Child repositories referencies Slave related repositories XData require to perform as: public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } No additional mapping description are needed. Only external reference is required. Tip To use XData Unit of Work realization ( WorkSet ), child repositories referencies are required. Hidden properties Some columns in database is needed to full description of mapping, but not required to business logic. This columns is declared as part of mapping named Column is selected from database, but not mapped on data object properties. For example - XData can operate primary (PK) and foreign (FK) keys of business objects and work with master-slave references between them, but mapping to property of external references is not required to operate with key. Second case - optimistic concurrency resolving (see concurrency resolving ) required concurrency token field, but this field is not required to busines logic. Third example - when data is grouped, needed to declare some field to link with external reference , but in this case possibly we can`t include this field in SELECT expression because of GROUP BY syntax. This case is resolved by Hidden property of column declaration. When Hidden is true - column will be not included into SELECT expression of resulted SQL query. Hidden properties description is various to static and dynamic mapping declaration methods. Master slave relations External referencies is the base element of master-slave references definition in XData. It describes link rules between related slave entities from master entities. XData support multi master and multi slave relation (many-to-many). And it's possible to define multiple relations between every two data objects. External referencies is the declarations of possible master-detail relations between data objects . Each of external reference is describe master property (or column ) to slave filter relation, used to filter slave collections data when master current object is set. Tip External referencies applied to manualy attached slave data sources only. External references definition is differs for static and dynamic methods of mapping. Reference rules is defined at mapping level, and when slave object will be attached using GetChild method, that rules will be applyed. To break master-slave reference call DetachChild method. When data scope or one of referenced repositories will be disposed - reference is breaked automatically. Slave object reference filter value is set when SetCurrent extension method is called for master object. if (newInvoice.Submit()) { newInvoice.SetCurrent(); return true; } Master-slave linked repositories can be used for cascade delete operation over multiple related data objects: newInvoice.SetDeleted(true); newInvoice.Submit(DataSubmitFlag.Cascade); or cascade delete applyed for filtered subset of repository objects and their slave objects: invoices.Clear(x => x.DocStateCode == \"REJECTED\", DataSubmitFlag.Cascade); Tree XData can use CTE (common table expression) as part of repository data source definition. Supported as plain (WITH), as recursive (WITH RECURSIVE) expressions. CTE is defined in mapping diferently for static and dynamic mapping paradigm, but it can be used with similar way: defined one or more tables with unique aliases and name equals CTE name. Recursive CTE can be used as independent data source too. In this case CTE name must to be declared as base table of repository. SQL functions & procedures Stored procedures and functions can be used as data source of mapping (if used DBMS and ADO .Net provider is support this). Important At this moment we has various limitations of using SQL procedures as on DBMS SQL dialect level, as on ADO .Net provider realization level. Please, choose DBMS and ADO .Net provider with keep in mind limitations they have. XData support many procedure mapping styles and call conventions, but can not garant all of them is supported by DBMS and ADO .Net provider You choose. XData has support followed SQL procedure mapping styles and call conventions and it combinations: Using procedure resultset as data source Using procedure with multiple resultsets Using out parameters Using return value of stored procedure Using symple type array as parameter Using cursor as parameter Using UTD (user defined type) as parameter Using table valued function as data source Using scalar function as single property source Warning Class mapped to UDT must support native XML serialization! All this mapping features described as for static as for dynamic mapping paradigm."
  },
  "tutorial/mapping/link.html": {
    "href": "tutorial/mapping/link.html",
    "title": "Link properties | XData website",
    "keywords": "Link properties To work with external links to data objects outside current object without operating surogate keys, XData represent special property type - Link<TVal,TSrc> , where TVal - type of property for preview, TSrc - type of external object. For type Link is defined... properties: TVal Value - this property to get preview of linked object TSrc Source - this property can be used to set linked object (readonly) bool Assigned - check link value for NULL value operations: += - \"syntax sugar\", _data.SomeLink += _someDictionaryObject identic with _data.SomeLink.Source = _someDictionaryObject. newInvoice.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == \"CREATED\"); To make link properties work correct, at mapping level need to be defined pairs of properties source and current objects, that values will be copied from source object to current when link is applied. Link description is deferent for static and dynamic methods of mapping."
  },
  "tutorial/mapping/common_type.html": {
    "href": "tutorial/mapping/common_type.html",
    "title": "Common types properties | XData website",
    "keywords": "Common types properties Common types properties (string, bool, int...) including nullable (int?, bool?...), and enum properties is declared as common class properties. Data access to this properties is usual. Only mapping description is depends on static or dynamic method of declaration."
  },
  "tutorial/mapping/column.html": {
    "href": "tutorial/mapping/column.html",
    "title": "Hidden properties | XData website",
    "keywords": "Hidden properties Some columns in database is needed to full description of mapping, but not required to business logic. This columns is declared as part of mapping named Column is selected from database, but not mapped on data object properties. For example - XData can operate primary (PK) and foreign (FK) keys of business objects and work with master-slave references between them, but mapping to property of external references is not required to operate with key. Second case - optimistic concurrency resolving (see concurrency resolving ) required concurrency token field, but this field is not required to busines logic. Third example - when data is grouped, needed to declare some field to link with external reference , but in this case possibly we can`t include this field in SELECT expression because of GROUP BY syntax. This case is resolved by Hidden property of column declaration. When Hidden is true - column will be not included into SELECT expression of resulted SQL query. Hidden properties description is various to static and dynamic mapping declaration methods."
  },
  "tutorial/runtime_filter.html": {
    "href": "tutorial/runtime_filter.html",
    "title": "Runtime filters | XData website",
    "keywords": "Runtime filters Runtime filters used for filtering data by field (or SQL expression) where filter value will be accessable during runtime only. Similar results can be reached using LINQ, but may be field to filter on is not selected. Or the result we need is not a readonly dynamic dataset (see LINQ support and Dynamic queries ), but feature rich repository , only filtered. Runtime filters in XData are defined as static fields of data object typed as RuntimeFilter . Name of runtime filter is mast to be unique over data object mapping structure (with subqueries). When value of runtime filter is set and filter with same name is not found in mapping, it will be dynamicaly added to mapping structure. To set value of runtime filter, use SetFilterValue method of repository . To clear one runtime filter value, set null value. To reset all runtime filters, use Reset method of repository. Tip When rintime filter value is set to null check filter null processing behaviour assigned to this filter! var rep = invoice.GetRepository(); var hist = dataScope.GetRepository<DocHistory>(rep.Layer, context: rep.Context) .Reset() .SetFilterValue(DocHistory.FilterByDocId, invoice.GetProperty<long>(\"DocId\")) .SetFilterValue(DocHistory.FilterByDocStateId, invoice.DocState.Key); var newHist = hist.New(); newHist.HistoryDate = DateTime.UtcNow; return hist.Submit(ref newHist);"
  },
  "tutorial/query.html": {
    "href": "tutorial/query.html",
    "title": "Readonly dynamic query building | XData website",
    "keywords": "Readonly dynamic query building XData have a feature alowes programmer to build readonly data query in dynamic LINQ like style: var query = XDataMapping.GetStructure(\"D\", dataScope.DefaultContext) .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_NUMBER\", \"N\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_SCAN\", \"SC\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_DELIVERY\", \"DD\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_SOURCE\", \"SR\", x => x.Link(\"D\", \"doc_id\")) .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", flags: DataStructureFlag.Grouping) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<int?>(\"H\", string.Empty, z => z.Key(), z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(z => z.DocId) .SetOperation(FilterOperation.OuterJoin)) .Column(\"DocId\", x => x.Field<int?>(\"D\", \"doc_id\", z => z.Key())) .Select(x => new { Number = x.Field<string>(\"N\", \"numb\"), Date = x.Field<DateTime>(\"D\", \"doc_date\"), Amount = x.Expr<decimal?>(\"doc_amount\", DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5)), //SUBQUERY LastChange = x.Ref<object>(\"H\", \"HistoryDate\"), //INNER VIEW Scan = x.Field<byte[]>(\"SC\", string.Empty), //BLOB DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), //ENUM Source = x.Field<string>(\"SR\", string.Empty) //XML }).AsQuery(dataScope.Layer); foreach (var x in query) Console.WriteLine( \"Number:{0}, Date:{1}, Amount:{2}, Scan:{3}, LastChange:{4}, DeliveryType:{5}, Source:{6}\", x.Number, x.Date, x.Amount, Encoding.UTF8.GetString(x.Scan), x.LastChange, x.DeliveryType, x.Source); Static class XDataMapping has method GetStructure to obtain IQueryStructure<T> interface having various methods to describe very complicated query structure dynamically. Rules of building queries dynamically is similar as dynamic mapping but query more lightweight, safe and can be extended in runtime. Method GetStructure has overloaded version to get structure of existing repository to extend it with adding data sources as data tables , subqueries and inner views , appling filters including filters by subqueries. Query mapping logic can be declared by Select method returning IQueryDescription<T> interface. No matter statically or dynamically is mapped repository we use as source structure, it can be extended. To access query data get IQueriable implementation IDataQuery<T> from IQueryDescription<T> use AsQuery method. With dynamic query You can query and map data to any object incliding realtime typed object as showed in example. Dynamic mapping has no method to add filters in runtime. To add new filter to QueryStructure used method AddFilters ."
  },
  "tutorial/config.html": {
    "href": "tutorial/config.html",
    "title": "Install & configuration | XData website",
    "keywords": "Installation and configuration Installation To start use XData basic functionality is required to setup NuGet XData package . XData plugins or additional modules can be downloaded and used separately. To work with related objects ( Unit of Work implementation) is required to setup NuGet XData UnitOfWork package . To implement security session and use application data access with XData is required to setup NuGet XData Security package . To use one or more SQL dialect, SQL adapter, specific log writer XData plugins it can be downloaded and unzipped to application binary folder (same as XData.dll located). Read this topic to the end for configuration rules to any plugin. Read provided readme.txt file to get specific knowledge about choosen plugin. To deploy application in three-tier architecture read here Acquiring XData configuration during runtime .Net Standard 2.0: XData can be dynamically configured when defining XData service (see AddXData ) in ServiceCollection using optional parameter options in LINQ style. .AddSingleton(typeof(IConfigurationRoot), x => null) .AddXData(x => x.SetWriteDebugInfo(true) .AddDialect(\"postgresql\", \"XData.PostgreSql.Dialect\") .AddAdapter(\"postgresql\", \"XData.PostgreSql.NpgSql.Adapter\") .AddContext(\"test\", \"postgresql\", \"postgresql\", \"Server=localhost;Database=XDataTest;User Id=postgres;Password=123456\", true)) Configuration file in .Net Standard 2.0 version is readed by Microsoft.Extensions.Configuration service registered during application startup. .Net 4.0: XData can be dynamically configured when acquiring XData engine XDataManager.AddXData using optional parameter options in LINQ style. Warning Signature of XDataManager.AddXData method is slightly different for .Net 4.0 version! See versions comparision for details. var dataEngine = XDataManager.AddXData(x => x.SetWriteDebugInfo(true) .AddDialect(\"postgresql\", \"XData.PostgreSql.Dialect\") .AddAdapter(\"postgresql\", \"XData.PostgreSql.NpgSql.Adapter\") .AddContext(\"test\", \"postgresql\", \"postgresql\", \"Server=localhost;Database=XDataTest;User Id=postgres;Password=123456\", true)); //or using configuration file var dataEngine = XDataManager.AddXData(x => x.UseConfiguration( System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(\"~\"))) Tip When using both versions You can use IDataOptions methods to store partial non secure connection string only and fill credentials during runtime. Security related information can be obtained separatly from some secure source. Configuration XData using config file Tip When using .Net Standard 2.0 version config file can be formatted in any notation but structure of config file need to be correspond XML structure described here Important When using XML formatted config file required to add specific descriptor for XData specific section \"xdata\" <configuration> <configSections> <section name=\"xdata\" type=\"System.Configuration.IgnoreSectionHandler\"/> </configSections> ... Important Check configSections section is first section inside XML configuration file! Connection strings for each of context must to be declared in standard section connectionStrings and name attribute should equal to context name. Connection strings is required on client side only when two-tier (client-server) architecture used. <connectionStrings> <add name=\"TEST\" connectionString=\"Data Source=(local);Initial Catalog=XDataTest;User Id=test;Password=test\"/> </connectionStrings> There are three possible ways to secure connection string in configuration file: Chipher config file section connectionStrings section Using partial connection strings during runtime Deploy application in three tier mode . In this case connection string is not required to be configured on client side. XData specific section xdata has a structure: <xdata default=\"TEST_ORACLE_ODP\" debug=\"true\" log=\"XDataTraceLog.TraceLog, XDataTraceLog\"> <adapter name=\"ORACLE_ODP\" assembly=\"XOracleODPAdapter\"/> <dialect name=\"ORACLE\" assembly=\"XOracleDialect\"/> <context name=\"TEST_ORACLE_ODP\" adapter=\"ORACLE_ODP\" dialect=\"ORACLE\" sequence=\"XDataObjectTest.MySequenceRule, XDataObjectTest\" concurrencyError=\"-20001\"/> </xdata> The xdata section required to contain attribute default with context name used by default. Attribure debug is optional, by default debug mode switched off (debug = false ). Attribute log optional, used for .Net 4.0 version only (.Net Standard 2.0 version used Microsoft.Extensions.Logging service). Log attribute value is assembly qualified type name for ILogWriter realization (see available log plugins or implement any You want log system adapter). Inside xdata section for each of context required elements: dialect (required always, can be shared between multiple contexts) - register an unique alias to specific RDBMS SQL dialect support. Attribute name contains an alias of dialect. Attribute assembly - assembly name of specific dialect plugin. When plugin implementation support additional configuration settings, element dialect may have an specifically organized internal structure described in plugin readme file. adapter (required when two-tier architecture is used only, can be shared between multiple contexts) - register unique alias to adapter for specific ADO.Net provider. Attribute name contains an alias of adapter. Attribute assembly - assembly name of specific adapter plugin. When plugin implementation support additional configuration settings, element adapter may have an specifically organized internal structure described in plugin readme file. context (required always) - contains context settings. Attribute name contains context name. Attribute adapter (required when two-tier architecture is used only) contains adapter alias. Attribute dialect - dialect alias. In case of using sequences required to specify attribute sequence contains assembly qualified type name of ISequenceNameRule implementation. When optimistic concurrention error code need to have a special value for some reason (see specific adapter readme file) set concurrencyError attribute to specific error code value. proxy (required when three-tier architecture is used only) - declare WCF client endpoint name for context named same as proxy attribute name value. WCF client endpoint name is stored in endpoint attribute value. Same WCF endpoint can be used for multiple contexts. Contexts names on client and server must to have same names. Deploing and configuration process for three tier architecture is described here . Deploing application in three three-tier architecture Project organization rules and assembly deployment principles to deploy application using three-tier architecture described here . Note Three-tier architecture can be apllied over .Net 4.0 version only! See next versions to use three-tier feature on .Net Standard 2.0 version. Install and configure server Server is implemented as WCF service XData.Server.dll . Base engine XData.dll library is required to server functionality. As well as log plugins, dialects and adapters to connect database directly. To run Your application business logic on server side server logic and data mapping modules are required on server side two. Limits to choose protocol can be used as transport between client and server: Duplex support Reenterability inside one session support It's recomended to host XData.Server on IIS. By default IIS is not configured to activate service over net.tcp, and if You whant to use this protocol, see here to configure it. Changes on client side When three-tier architecture is used, required to obtain special module XData.Remote . Application folder must contain client logic and data mapping modules, as well as used by Your application log modules, SQL dialect modules BUT now adapters not required to contexts used in three-tier mode. In configuration file, is required to configure WCF client according Your server settings. Section xdata must to be configured as described above with defining of proxy elements for every context that used three-tier architecture. Remote contexts must to have same names on client and server. Sample three-tier configuration can be obtained from XData test project. Tip You able to combine local connections to some databases with one or more three-tier servers. In the same time You can use multiple dedicated servers, each for one or more contexts. Tip You can fast and simple switch from three-tier mode to client server mode and then back to three-tier by commenting/uncommenting proxy descriptions. It's a very usefull feature to debug server logic code ;)"
  },
  "api/XData.DataSource.Structure.FilterCombinationState.html": {
    "href": "api/XData.DataSource.Structure.FilterCombinationState.html",
    "title": "Class FilterCombinationState | XData website",
    "keywords": "Class FilterCombinationState Filter combination state Inheritance Object FilterCombinationState Implements IEquatable < FilterCombinationState > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax [Serializable] [DataContract] public sealed class FilterCombinationState : IEquatable<FilterCombinationState> Properties Combination Combination Declaration [DataMember] public Combination Combination { get; set; } Property Value Type Description Combination FilterCombinations Nested filter combinations Declaration [DataMember] public FilterCombinationState[] FilterCombinations { get; set; } Property Value Type Description FilterCombinationState [] Filters Filter states Declaration [DataMember] public FilterState[] Filters { get; set; } Property Value Type Description FilterState [] Methods Equals(FilterCombinationState) FilterCombinationState equality check Declaration public bool Equals(FilterCombinationState other) Parameters Type Name Description FilterCombinationState other FilterCombinationState instance to compare Returns Type Description Boolean Instances are contains the same data Implements System.IEquatable<T> Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Dialect.XConnectionInfo.html": {
    "href": "api/XData.Database.Dialect.XConnectionInfo.html",
    "title": "Class XConnectionInfo | XData website",
    "keywords": "Class XConnectionInfo Context connection info Inheritance Object XConnectionInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Dialect Assembly : XData.dll Syntax public class XConnectionInfo Properties ConnectionString ConnectionString Declaration public string ConnectionString { get; } Property Value Type Description String DbLogin Database user login Declaration public string DbLogin { get; } Property Value Type Description String IntegratedSecurity Integrated security flag Declaration public bool IntegratedSecurity { get; } Property Value Type Description Boolean Schema Database name or schema name Declaration public string Schema { get; } Property Value Type Description String Server Database server name Declaration public string Server { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Adapter.UdtSqlType.html": {
    "href": "api/XData.Database.Adapter.UdtSqlType.html",
    "title": "Class UdtSqlType | XData website",
    "keywords": "Class UdtSqlType User defined type (UDT) description Inheritance Object UdtSqlType Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Adapter Assembly : XData.dll Syntax public sealed class UdtSqlType Properties ElementSqlTypeName User defined type (UDT) element type name for parameter Declaration public string ElementSqlTypeName { get; set; } Property Value Type Description String IsArray User defined type (UDT) collection is VARARRAY for parameter Declaration public bool IsArray { get; set; } Property Value Type Description Boolean MappedType User defined type (UDT) mapped type Declaration public Type MappedType { get; set; } Property Value Type Description Type SqlTypeName User defined type (UDT) name for parameter Declaration public string SqlTypeName { get; set; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.AttachedHandler-1.html": {
    "href": "api/XData.AttachedHandler-1.html",
    "title": "Class AttachedHandler<T> | XData website",
    "keywords": "Class AttachedHandler<T> Data object level attached handler wrapper Inheritance Object AttachedHandler<T> RepositoryAttachedHandler<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public class AttachedHandler<T> where T : class, IDataObject Type Parameters Name Description T Constructors AttachedHandler(AttachedHandlerType, Object) DataObjectAttachedHandler constructor Declaration protected AttachedHandler(AttachedHandlerType type, object handler) Parameters Type Name Description AttachedHandlerType type Object handler Properties Handler Attached handler Declaration protected object Handler { get; } Property Value Type Description Object Type Attached handler type Declaration public AttachedHandlerType Type { get; protected set; } Property Value Type Description AttachedHandlerType Operators Explicit(AttachedHandler<T> to GetLobAttachedHandler) Explicitly unwrap get Lob handler Declaration public static explicit operator GetLobAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description GetLobAttachedHandler Unwrapped attached handler Explicit(AttachedHandler<T> to GetLobSizeAttachedHandler) Explicitly unwrap get Lob size handler Declaration public static explicit operator GetLobSizeAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description GetLobSizeAttachedHandler Unwrapped attached handler Explicit(AttachedHandler<T> to GetXmlAttachedHandler) Explicitly unwrap get Xml handler Declaration public static explicit operator GetXmlAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description GetXmlAttachedHandler Unwrapped attached handler Explicit(AttachedHandler<T> to LockAttachedHandler<T>) Explicitly unwrap lock object handler Declaration public static explicit operator LockAttachedHandler<T>(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description LockAttachedHandler <T> Unwrapped attached handler Explicit(AttachedHandler<T> to RefreshAttachedHandler<T>) Explicitly unwrap refresh object handler Declaration public static explicit operator RefreshAttachedHandler<T>(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description RefreshAttachedHandler <T> Unwrapped attached handler Explicit(AttachedHandler<T> to SetLobAttachedHandler) Explicitly unwrap set Lob handler Declaration public static explicit operator SetLobAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description SetLobAttachedHandler Unwrapped attached handler Explicit(AttachedHandler<T> to SetXmlAttachedHandler) Explicitly unwrap set Xml handler Declaration public static explicit operator SetXmlAttachedHandler(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description SetXmlAttachedHandler Unwrapped attached handler Explicit(AttachedHandler<T> to SubmitObjectAttachedHandler<T>) Explicitly unwrap submit object handler Declaration public static explicit operator SubmitObjectAttachedHandler<T>(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description SubmitObjectAttachedHandler <T> Unwrapped attached handler Explicit(AttachedHandler<T> to SubmitQueryAttachedHandler<T>) Explicitly unwrap submit query handler Declaration public static explicit operator SubmitQueryAttachedHandler<T>(AttachedHandler<T> handler) Parameters Type Name Description AttachedHandler <T> handler Wrapped handler Returns Type Description SubmitQueryAttachedHandler <T> Unwrapped attached handler Implicit(GetLobAttachedHandler to AttachedHandler<T>) Implicitly wrap get Lob handler Declaration public static implicit operator AttachedHandler<T>(GetLobAttachedHandler handler) Parameters Type Name Description GetLobAttachedHandler handler Get Lob handler Returns Type Description AttachedHandler <T> Data object attached handler Implicit(GetLobSizeAttachedHandler to AttachedHandler<T>) Implicitly wrap get Lob size handler Declaration public static implicit operator AttachedHandler<T>(GetLobSizeAttachedHandler handler) Parameters Type Name Description GetLobSizeAttachedHandler handler Get Lob handler Returns Type Description AttachedHandler <T> Data object attached handler Implicit(GetXmlAttachedHandler to AttachedHandler<T>) Implicitly wrap get Xml handler Declaration public static implicit operator AttachedHandler<T>(GetXmlAttachedHandler handler) Parameters Type Name Description GetXmlAttachedHandler handler Get Xml handler Returns Type Description AttachedHandler <T> Data object attached handler Implicit(LockAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap lock handler Declaration public static implicit operator AttachedHandler<T>(LockAttachedHandler<T> handler) Parameters Type Name Description LockAttachedHandler <T> handler Lock handler Returns Type Description AttachedHandler <T> Data object attached handler Implicit(RefreshAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap refresh object handler Declaration public static implicit operator AttachedHandler<T>(RefreshAttachedHandler<T> handler) Parameters Type Name Description RefreshAttachedHandler <T> handler Refresh handler Returns Type Description AttachedHandler <T> Data object attached handler Implicit(SetLobAttachedHandler to AttachedHandler<T>) Implicitly wrap set Lob handler Declaration public static implicit operator AttachedHandler<T>(SetLobAttachedHandler handler) Parameters Type Name Description SetLobAttachedHandler handler Set Lob handler Returns Type Description AttachedHandler <T> Data object attached handler Implicit(SetXmlAttachedHandler to AttachedHandler<T>) Implicitly wrap set Xml handler Declaration public static implicit operator AttachedHandler<T>(SetXmlAttachedHandler handler) Parameters Type Name Description SetXmlAttachedHandler handler Set Xml handler Returns Type Description AttachedHandler <T> Data object attached handler Implicit(SubmitObjectAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap submit object handler Declaration public static implicit operator AttachedHandler<T>(SubmitObjectAttachedHandler<T> handler) Parameters Type Name Description SubmitObjectAttachedHandler <T> handler Submit handler Returns Type Description AttachedHandler <T> Data object attached handler Implicit(SubmitQueryAttachedHandler<T> to AttachedHandler<T>) Implicitly wrap submit query handler Declaration public static implicit operator AttachedHandler<T>(SubmitQueryAttachedHandler<T> handler) Parameters Type Name Description SubmitQueryAttachedHandler <T> handler Submit query handler Returns Type Description AttachedHandler <T> Data object attached handler Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.MessageType.html": {
    "href": "api/XData.MessageType.html",
    "title": "Enum MessageType | XData website",
    "keywords": "Enum MessageType Log message type Namespace : XData Assembly : XData.dll Syntax public enum MessageType Fields Name Description Debug Debug log entry Error Error log entry Information Information log entry Warning Warning log entry See Also Error Information Debug Extension Methods SerializationExtensions.ToXml<MessageType>() CollectionsExtensions.SetValue<MessageType, T>(T) CollectionsExtensions.AsEnum<MessageType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<MessageType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.html": {
    "href": "api/XData.Mapping.html",
    "title": "Namespace XData.Mapping | XData website",
    "keywords": "Namespace XData.Mapping Classes ActionAttribute Data action attribute ColumnAttribute Column mapping attribute ColumnDefaultAttribute Column default value attribute ColumnExpressionAttribute Column expression attribute ConstantFilterAttribute Data object constant value filter attribute DataObjectAttribute Data object metadata attribute DataSourceAttribute Base data object source attribute DataTableAttribute Data object table attribute DictionaryFilterAttribute Data object dictionary filter attribute ExpressionFilterAttribute Data object plain SQL expression filter attribute ExternalLinkAttribute Data object external link to other (child) data objects attribute FilterAttribute Base inner filter attribute FilterBaseAttribute Base filter description attribute FilterCombinationAttribute Data object filter combination (filter group) attribute HierarchyAttribute Hierarchy attribute HintAttribute HintInfo Hint description InnerViewAttribute Data object inner view attribute Link<TVal, TSrc> Dictionary link wrapper LinkAttribute Base link attribute LinkPropertyAttribute Data object link property attribute Lob Blob field wrapper OptionalFilterAttribute Base optional filter attribute ParameterAttribute SQL stored procedure/function parameter ProcedureAttribute Data object SQL procedure / function attribute PropertyAttribute Data object property attribute PropertyBaseAttribute Data property base attribute PropertyDefaultAttribute Data object property default value attribute PropertyExpressionAttribute Data object property plain expression attribute PropertyGroupingAttribute Data object property grouping attribute RangeFilterAttribute Data object range filter attribute ReferenceAttribute Data object referenced inner view property attribute ResultSetAttribute SQL stored procedure/function result set SqlExpressionAttribute Sql expression name SubqueryAttribute Data object subquery attribute SubqueryFilterAttribute Data object subquery filter attribute SubqueryLinkAttribute Data object link to subquery attribute WithAttribute Common-Table-Expression (WITH) Subquery data source WithRecursiveAttribute Common-Table-Expression (WITH) recursive subquery data source Xml Xml field wrapper Enums HintType Hint type"
  },
  "api/XData.SubmitQueryAttachedHandler-1.html": {
    "href": "api/XData.SubmitQueryAttachedHandler-1.html",
    "title": "Delegate SubmitQueryAttachedHandler<T> | XData website",
    "keywords": "Delegate SubmitQueryAttachedHandler<T> Lock object attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate QueryResult SubmitQueryAttachedHandler<in T>(T obj, Query query) where T : class, IDataObject; Parameters Type Name Description T obj Object instance Query query Query Returns Type Description QueryResult Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SubmitObjectAttachedHandler-1.html": {
    "href": "api/XData.SubmitObjectAttachedHandler-1.html",
    "title": "Delegate SubmitObjectAttachedHandler<T> | XData website",
    "keywords": "Delegate SubmitObjectAttachedHandler<T> Submit object attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool SubmitObjectAttachedHandler<T>(ref T obj, DataSubmitFlag flag) where T : class, IDataObject; Parameters Type Name Description T obj Object instance DataSubmitFlag flag Submit flag Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SubmitAttachedHandler-1.html": {
    "href": "api/XData.SubmitAttachedHandler-1.html",
    "title": "Delegate SubmitAttachedHandler<T> | XData website",
    "keywords": "Delegate SubmitAttachedHandler<T> Submit attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool SubmitAttachedHandler<in T>(IEnumerable<T> objects, DataSubmitFlag flag = DataSubmitFlag.None) where T : class, IDataObject; Parameters Type Name Description IEnumerable <T> objects Object sequence DataSubmitFlag flag Submit flag Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SetXmlAttachedHandler.html": {
    "href": "api/XData.SetXmlAttachedHandler.html",
    "title": "Delegate SetXmlAttachedHandler | XData website",
    "keywords": "Delegate SetXmlAttachedHandler Set Xml attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate bool SetXmlAttachedHandler(string property, IComparable[] primaryKeyValue, string xml); Parameters Type Name Description String property Lob property name IComparable [] primaryKeyValue Lob table primary key values String xml Xml string Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.SetLobAttachedHandler.html": {
    "href": "api/XData.SetLobAttachedHandler.html",
    "title": "Delegate SetLobAttachedHandler | XData website",
    "keywords": "Delegate SetLobAttachedHandler Set Lob attached handler delegate Namespace : XData Assembly : XData.dll Syntax public delegate void SetLobAttachedHandler(string property, IComparable[] primaryKeyValue, byte[] body); Parameters Type Name Description String property Lob property name IComparable [] primaryKeyValue Lob table primary key values Byte [] body Lob body Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.ProcedureType.html": {
    "href": "api/XData.ProcedureType.html",
    "title": "Enum ProcedureType | XData website",
    "keywords": "Enum ProcedureType SQL stored procedure type Namespace : XData Assembly : XData.dll Syntax public enum ProcedureType Fields Name Description Function Function Procedure Stored procedure See Also Procedure Function Extension Methods SerializationExtensions.ToXml<ProcedureType>() CollectionsExtensions.SetValue<ProcedureType, T>(T) CollectionsExtensions.AsEnum<ProcedureType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<ProcedureType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.ParameterIndexer.html": {
    "href": "api/XData.ParameterIndexer.html",
    "title": "Class ParameterIndexer | XData website",
    "keywords": "Class ParameterIndexer SQL procedure call out parameters indexer Inheritance Object ParameterIndexer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData Assembly : XData.dll Syntax public sealed class ParameterIndexer Constructors ParameterIndexer(IEnumerable<IParameterDescription>) Parameter indexer constructor Declaration public ParameterIndexer(IEnumerable<IParameterDescription> parameters) Parameters Type Name Description IEnumerable < IParameterDescription > parameters Parameter sequence Properties Count Variables count Declaration public int Count { get; } Property Value Type Description Int32 Item[String] Parameter indexer Declaration public IParameterDescription this[string name] { get; } Parameters Type Name Description String name Parameter name Property Value Type Description IParameterDescription Variable Methods Add(IParameterDescription) Add parameter Declaration public void Add(IParameterDescription parameter) Parameters Type Name Description IParameterDescription parameter Variable Add(ParameterIndexer) Add variables to collection Declaration public void Add(ParameterIndexer variables) Parameters Type Name Description ParameterIndexer variables Variable indexer Contains(String) Variables contains name Declaration public bool Contains(string name) Parameters Type Name Description String name Variable name Returns Type Description Boolean Contains flag GetValue(String) Returns parameter value Declaration public object GetValue(string name) Parameters Type Name Description String name Parameter name Returns Type Description Object Parameter value GetValue<T>(String) Returns parameter value Declaration public T GetValue<T>(string name) Parameters Type Name Description String name Parameter name Returns Type Description T Parameter value Type Parameters Name Description T Parameter type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.html": {
    "href": "api/XData.Mapping.Dynamic.IExternalLinkAdapter-2.html",
    "title": "Interface IExternalLinkAdapter<T, TChild> | XData website",
    "keywords": "Interface IExternalLinkAdapter<T, TChild> External link mapping adapter Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IExternalLinkAdapter<T, TChild> where T : class, IDataObject, new() where TChild : class, IDataObject, new() Type Parameters Name Description T Parent date object type TChild Child date object type Methods DirectLink() External link direct link flag Declaration IExternalLinkFlag DirectLink() Returns Type Description IExternalLinkFlag External link flag See Also ShowSubtree Filter(Expression<Func<TChild, RuntimeFilter>>) External link runtime filter Declaration IExternalLinkFlag Filter(Expression<Func<TChild, RuntimeFilter>> filter) Parameters Type Name Description Expression < Func <TChild, RuntimeFilter >> filter Runtime filter Returns Type Description IExternalLinkFlag External link flag FilterCombination(String) External link filter combination flag Declaration IExternalLinkFlag FilterCombination(string combinationName) Parameters Type Name Description String combinationName Filter combination name Returns Type Description IExternalLinkFlag MasterRefresh() External link master refresh flag Declaration IExternalLinkFlag MasterRefresh() Returns Type Description IExternalLinkFlag External link flag Nullable(FilterNullable) External link filter null value assignment mode flag Declaration IExternalLinkFlag Nullable(FilterNullable nullable) Parameters Type Name Description FilterNullable nullable Filter null value assignment mode Returns Type Description IExternalLinkFlag External link flag See Also FilterNullable Operation(FilterOperation) External link filter operation flag Declaration IExternalLinkFlag Operation(FilterOperation operation) Parameters Type Name Description FilterOperation operation Filter operation Returns Type Description IExternalLinkFlag External link flag See Also FilterOperation PrimaryFilter() External link optional filter flag Declaration IExternalLinkFlag PrimaryFilter() Returns Type Description IExternalLinkFlag External link flag See Also IOptionalFilter Property(Expression<Func<TChild, Object>>) External link child property Declaration IExternalLinkFlag Property(Expression<Func<TChild, object>> property) Parameters Type Name Description Expression < Func <TChild, Object >> property Returns Type Description IExternalLinkFlag External link flag Property<TChildLink>(Expression<Func<TChildLink, Object>>) External link child property Declaration IExternalLinkFlag Property<TChildLink>(Expression<Func<TChildLink, object>> property) Parameters Type Name Description Expression < Func <TChildLink, Object >> property Returns Type Description IExternalLinkFlag External link flag Type Parameters Name Description TChildLink TreeFilter() External link filter tree root condition (START WITH) flag Declaration IExternalLinkFlag TreeFilter() Returns Type Description IExternalLinkFlag External link flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IExpressionPropertyAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IExpressionPropertyAdapter.html",
    "title": "Interface IExpressionPropertyAdapter | XData website",
    "keywords": "Interface IExpressionPropertyAdapter SQL expression property mapping adapter Inherited Members IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IExpressionPropertyAdapter : IPropertyMappingAdapter Methods NativeSqlType(String) SQL expression result native SQL type name Declaration IStructureFlag NativeSqlType(string nativeSqlType) Parameters Type Name Description String nativeSqlType Native SQL type name Returns Type Description IStructureFlag SQL expression mapping flag Size(Int32) Size of SQL expression result value Declaration IStructureFlag Size(int size) Parameters Type Name Description Int32 size Size Returns Type Description IStructureFlag SQL expression mapping flag Size(Int32, Int32) Size of SQL expression result value Declaration IStructureFlag Size(int size, int scale) Parameters Type Name Description Int32 size Size Int32 scale Scale Returns Type Description IStructureFlag SQL expression mapping flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.DialectConfig.html": {
    "href": "api/XData.Interfaces.DialectConfig.html",
    "title": "Class DialectConfig | XData website",
    "keywords": "Class DialectConfig SQL dialect configuration section Inheritance Object DialectConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Interfaces Assembly : XData.dll Syntax public sealed class DialectConfig Remarks WARNING! All attributes are required! Examples <dialect name=\"MSSQL\" file=\"C:\\XData\\XMsSqlDialect.dll\"/> Properties AssemblyName Adapter assembly name Declaration public string AssemblyName { get; set; } Property Value Type Description String Config Adapter configuration Declaration public IConfiguration Config { get; set; } Property Value Type Description IConfiguration Name Adapter name Declaration public string Name { get; set; } Property Value Type Description String Remarks Mast be the same as DialectName Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Name AssemblyName"
  },
  "tutorial/mapping/static/procedure/sample_multiple_cursor.html": {
    "href": "tutorial/mapping/static/procedure/sample_multiple_cursor.html",
    "title": "SQL procedure with multiple resultsets sample | XData website",
    "keywords": "SQL procedure with multiple resultsets sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"param3\", typeof(int), DbType.Int32), Parameter(\"T\", 4, \"param4\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\", IsDefault = true), ResultSet(\"T\", \"SecondResult\", ResultType = typeof(TestResult), Order = 2)] public class TestProcedure2 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public IEnumerable<TestResult> SecondResult { get { return this.GetResultSet(x => x.SecondResult); } } }"
  },
  "tutorial/mapping/static/procedure/sample_cursor.html": {
    "href": "tutorial/mapping/static/procedure/sample_cursor.html",
    "title": "SQL procedure resultset as query sample | XData website",
    "keywords": "SQL procedure resultset as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestProcedure : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } }"
  },
  "tutorial/mapping/static/procedure/sample_array.html": {
    "href": "tutorial/mapping/static/procedure/sample_array.html",
    "title": "SQL procedure with simple array parameter sample | XData website",
    "keywords": "SQL procedure with simple array parameter sample [DataObject(\"T\"), Procedure(\"T\", \"TestFunction\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int[]), DbType.Int32, IsArray = true), Parameter(\"T\", 2, \"Result\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue)] public class TestFunction : IDataObject { public int Result { get { return this.GetParameter(x => x.Result); } } }"
  },
  "tutorial/mapping/static/procedure/result.html": {
    "href": "tutorial/mapping/static/procedure/result.html",
    "title": "SQL procedure resultset | XData website",
    "keywords": "SQL procedure resultset To describe resultset of SQL procedure used ResultSetAttribute with parameters: Alias - procedure alias, Name - resultset name used inside application code, Order - optional, order number of resultset (required to procedures returns multiple resultsets), ResultType - optional, mapped type of resultset, default is attributed class itself, IsDefault - optional, resultset is default - mapped to attributed class (used when procedure returns multiple resultsets), default is false ."
  },
  "tutorial/mapping/static/procedure/procedure.html": {
    "href": "tutorial/mapping/static/procedure/procedure.html",
    "title": "SQL procedures & functions | XData website",
    "keywords": "SQL procedures & functions Common information about mapping to SQL procedures and functions has described in common mapping rules description and here we just reprensent static mapping rules for various procedure types. SQL procedure as query To define procedure as data source of mapping used ProcedureAttribute with parameters: Alias - procedure alias, Name - procedure or function name, ProcedureType - ProcedureType : ProcedureType . Procedure or ProcedureType . Function . SQL procedure parameter To define SQL procedure parameter used ParameterAttribute with parameters: Alias - procedure alias, Order - order number of parameter, Binding - name used inside application code (it's handy to use parameter with another name, not the name defined inside DB), Type - data type used inside application code, DbType - data type on ADO .Net provider level, Direction - optional, parameter direction, default is ParameterDirection . Input , Size - optional, parameter size(if applicable), Scale - optional, parameter presision (if applicable), Name - optional, parameter name, default is equal with Binding , DefaultType - default value type , DefaultValue optional, depends on DefaultType , NativeSqlType - optional, SQL type name ( NativeSqlType is used when type default mapping is conflicted with real SQL type), UdtTypeName - optional, user defined type (UDT), UdtElementTypeName - optional, user defined type (UDT) of UdtTypeName element (in case where UdtTypeName - array or table), IsArray - optional, parameter is array of UdtElementTypeName (when UdtElementTypeName is omited, array of DbType ), default is false . SQL procedure resultset To describe resultset of SQL procedure used ResultSetAttribute with parameters: Alias - procedure alias, Name - resultset name used inside application code, Order - optional, order number of resultset (required to procedures returns multiple resultsets), ResultType - optional, mapped type of resultset, default is attributed class itself, IsDefault - optional, resultset is default - mapped to attributed class (used when procedure returns multiple resultsets), default is false . SQL procedure resultset as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestProcedure : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL procedure with multiple resultsets sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"param3\", typeof(int), DbType.Int32), Parameter(\"T\", 4, \"param4\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\", IsDefault = true), ResultSet(\"T\", \"SecondResult\", ResultType = typeof(TestResult), Order = 2)] public class TestProcedure2 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public IEnumerable<TestResult> SecondResult { get { return this.GetResultSet(x => x.SecondResult); } } } SQL procedure with out parameter sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure3 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with out parameter and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\"), ResultSet(\"T\", \"Result\")] public class TestProcedure4 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with return value sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure5 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with return value and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"ResultParameter\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue), ResultSet(\"T\", \"Result\")] public class TestProcedure6 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public int ResultParameter { get { return this.GetParameter(x => x.ResultParameter); } } } SQL procedure with simple array parameter sample [DataObject(\"T\"), Procedure(\"T\", \"TestFunction\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int[]), DbType.Int32, IsArray = true), Parameter(\"T\", 2, \"Result\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue)] public class TestFunction : IDataObject { public int Result { get { return this.GetParameter(x => x.Result); } } } SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"TestFunction5\", ProcedureType.Function), Parameter(\"T\", 1, \"p_obj\", typeof(Classifier), DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), Parameter(\"T\", 2, \"Result\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.ReturnValue)] public class PostgreSqlTestFunction5 : IDataObject { public string Result { get { return this.GetParameter(x => x.Result); } } } SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure7\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(Classifier[]) /* Parameter type must be an array of mapped type */, DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), ResultSet(\"T\", \"Result\")] public class TestProcedure7 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL table valued function as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestFunction3 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL scalar function as property data source sample [DataObject(\"T\"), DataTable(\"T_DOC_TYPE\", \"T\"), Column(\"DocTypeId\", typeof(long), Flags = DataPropertyFlag.Id)] public class TestFunction4 : IDataObject { [Property(\"T\")] public string Code { get; set; } [Property(\"T\")] public string Name { get; set; } [Property, // Property expression attribute \"name\" is the name of private static field // with type Calculate<string> and attributed by SqlExpressionAttribute PropertyExpression(\"test\", DataExpressionType.LinqExpression, ExprSize = 20)] public string Test { get { return this.GetProperty(x => x.Test); } } // Private static field with type Calculate<string> and attributed by // SqlExpressionAttribute [SqlExpression] private static Calculate<string> test z => z.SqlFn<string>(\"dbo.TestFunction2\", y => y.Field<long>(\"T\", \"doc_type_id\"), y => y.Field<string>(\"T\", \"name\")) }"
  },
  "tutorial/mapping/static/procedure/parameter.html": {
    "href": "tutorial/mapping/static/procedure/parameter.html",
    "title": "SQL procedure parameter | XData website",
    "keywords": "SQL procedure parameter To define SQL procedure parameter used ParameterAttribute with parameters: Alias - procedure alias, Order - order number of parameter, Binding - name used inside application code (it's handy to use parameter with another name, not the name defined inside DB), Type - data type used inside application code, DbType - data type on ADO .Net provider level, Direction - optional, parameter direction, default is ParameterDirection . Input , Size - optional, parameter size(if applicable), Scale - optional, parameter presision (if applicable), Name - optional, parameter name, default is equal with Binding , DefaultType - default value type , DefaultValue optional, depends on DefaultType , NativeSqlType - optional, SQL type name ( NativeSqlType is used when type default mapping is conflicted with real SQL type), UdtTypeName - optional, user defined type (UDT), UdtElementTypeName - optional, user defined type (UDT) of UdtTypeName element (in case where UdtTypeName - array or table), IsArray - optional, parameter is array of UdtElementTypeName (when UdtElementTypeName is omited, array of DbType ), default is false ."
  },
  "tutorial/mapping/static/filter/subquery_links.html": {
    "href": "tutorial/mapping/static/filter/subquery_links.html",
    "title": "Subquery links | XData website",
    "keywords": "Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used SubqueryLinkAttribute with parameters: Subquery - subquery alias, SubqueryProperty - linked property from subquery, PropertyName - optional, linked property from base class (when omit, base class property name is equal SubqueryProperty ), also optional properties: Operation , Combination и PrimaryFilter is supported. They was described above in topics Filters and Inner links . [SubqueryLink(\"H\" /* subquery alias */, \"DocId\" /* subquery property to link */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when subquery is skipped, then data source linked to subquery by this filter will be skipped too, and skip data sources analisys will continue inside base class (see Inner links )."
  },
  "tutorial/mapping/dynamic/property/sql_expr.html": {
    "href": "tutorial/mapping/dynamic/property/sql_expr.html",
    "title": "SQL expression property | XData website",
    "keywords": "SQL expression property Readonly property can be mapped to SQL expression. Dynamic mapping of SQL expression is defined by one of IRepositoryStructureAdapter interface Expr method overload: Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) - used to define sql expression DataExpressionType.SubQuery or DataExpressionType.PlainSql When first overload used, SQL expression is defined by expr parameter value as lambda function with IQueryStructureAdapter interface extension methods inside: Case<T, TResult>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, TResult>> elseValue, params TaggedExpression<T, TResult>[] switchValues) - case when ... then ... else ... end SQL construction DateDiff<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, DateTime>> finalDate, Expression<Func<IQueryStructureAdapter, DateTime>> startDate, DateDiffKind kind) - date difference Exists(this IQueryStructureAdapter adapter, string subQueryAlias) - exists(select ...) SQL construction HasFlag<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, T>> flagValue, Expression<Func<IQueryStructureAdapter, T>> trueValue, Expression<Func<IQueryStructureAdapter, T>> falseValue) - bitwise mask checking for value SqlExpr<TResult>(this IQueryStructureAdapter adapter, string format, params Expression<Func<IQueryStructureAdapter, TResult>>[] expressions) - mixing plain SQL expressions with LINQ style defined expression subparts, parameter format is the string.Format mask SqlFn<TResult>(this IQueryStructureAdapter adapter, string name, params Expression<Func<IQueryStructureAdapter, object>>[] parameters) - SQL function call expression SqlParam<TResult>(this IQueryStructureAdapter adapter, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) - SQL function parameter value expression Mapping parameters of SQL expressions is defined by IRepositoryExpressionMappingAdapter interface methods: NativeSqlType(string nativeSqlType) - set native SQL type name of expression result, used when expression result type has specific SQL type Size(int size) - set number or varchar length of SQL expression result type Size(int size, int scale) - set length and scale for floating point SQL data types subquery, ... .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) ... LINQ expression, ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, y => y.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)), DbType.Decimal, z => z.Size(17, 5))) ... plain text SQL expression. ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, DataExpressionType.PlainSql, \"case P.is_vip when 1 then 10 else 0 end\", DbType.Decimal, z => z.Size(17, 5))) ... Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers."
  },
  "tutorial/mapping/static/property/property.html": {
    "href": "tutorial/mapping/static/property/property.html",
    "title": "Properties | XData website",
    "keywords": "Properties Static mapping is performed as each property with specific attributes mark. Main attribute to statically map property is PropertyAttribute with parameters: Source - data source alias (may be omited for virtual table ), FieldName - DB field name mapped to property (may be omited when field and property correspond naming rule, for example DB field named as some_field_name and mapped to SomeFieldName property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Property(\"S\" /* table alias */, \"code\" /* field name */)] SQL expression property Readonly property can be mapped to SQL expression. Static mapping of SQL expression is defined by PropertyExpressionAttribute with parameters: ExprText - depends of ExprType value (see below) it can be: subquery alias / SQL expression / private static field name define SQL expression in LINQ style, ExprType - optional, SQL expression type , default is DataExpressionType . PlainSql , DbType - ADO ,Net provider data type (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). Possible to use SQL expressions of three types: subquery, [PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] LINQ expression, [PropertyExpression(\"AllowedDiscount\", DataExpressionType.LinqExpression, DbType.Decimal, ExprSize = 17, ExprScale = 5)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)); plain text SQL expression. [PropertyExpression(\"case P.is_vip when 1 then 10 else 0 end\", DataExpressionType.PlainSql, DbType.Decimal, ExprSize = 17, ExprScale = 5)] Tip Attribute PropertyExpressionAttribute is not replaced PropertyAttribute but extend it. Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Tip It's recomended to use virtual table as SQL expression source omiting data source alias in PropertyAttribute . Property default value To set default value of property with static mapping, use PropertyDefaultAttribute with parameters: DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , AlwaysUseDefault - optional, default is false , default value will be applyed when record inserted, and when record is updated too. [PropertyDefault(DefaultType.UserName, AlwaysUseDefault = true)] Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. PropertyGroupingAttribute has properties: Grouping - optional, property aggregation type , default is None , GroupOrder - optional, property grouping order when Grouping = DataGrouping . None . [PropertyGrouping(DataGrouping.Sum)] Hidden properties Hidden properties statically defined using couple of specific attributes: ColumnAttribute , ColumnExpressionAttribute and ColumnDefaultAttribute as analog with similar attributes of properties . ColumnAttribute has parameters: PropertyName - name of hidden property, PropertyType - type of hidden property, Source - data source alias, FieldName - optional, DB field name (can be omited when correspond default mapping rule (exampple: some_field_name is mapped to SomeFieldName )), Flags - optional, bitmask of property flags , Grouping - optional, defined aggreagation type , default is None , GroupOrder - optional, group order when Grouping = DataGrouping . None , Hidden - optional, mapped field omited in SELECT expression of result query (when grouping limitations demand this), default is false , NativeSqlType - optional, native SQL type name. NativeSqlType is used when default datatype mapping is conflicted with resultset data type. ColumnExpressionAttribute has parameters: PropertyName - name of hidden property (same as defined by ColumnAttribute ), ExprText - depends on ExprType (see below): subquery alias / SQL expression text / field name with LINQ style expression definition, ExprType - optional, SQL expression type default is DataExpressionType . PlainSql , DbType - data type on ADO .Net provider level (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). ColumnDefaultAttribute has parameters: PropertyName - hidden property name (same as defined by ColumnAttribute ), DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , AlwaysUseDefault - optional, default is false , default value will be applyed when record inserted, and when record is updated too. [Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)] Inner view reference To map property to field from inner view a ReferenceAttribute is used with parameters: Source - inner view alias, PropertyName - optional, DB field name (may be omited when property name is equals with inner view mapped class property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Reference(\"H\" /* inner view alias */, \"HistoryDate\" /* property name inside inner view */)] Links To statically define link property pairs used LinkPropertyAttribute with parameters: DictSource - optional, source object property name, Property - optional, property name. When one or both of parameters is omited, folowed rules are used: When omit both propeties - used property name of link property as target and equal named property from source object When DictSource is omited - used Property as target property name and equal named property from source object When Property is omited - used property name of link property as target and property with name equals DictSource from source object [Property(\"S\", \"name\"), LinkProperty(\"Name\") /* DocState.Name -> this.DocState */, LinkProperty(\"Code\", \"DocStateCode\") /* DocState.Code -> this.DocStateCode */] public Link<string, DocState> DocState { get; set; }"
  },
  "tutorial/mapping/static/property/link.html": {
    "href": "tutorial/mapping/static/property/link.html",
    "title": "Links | XData website",
    "keywords": "Links To statically define link property pairs used LinkPropertyAttribute with parameters: DictSource - optional, source object property name, Property - optional, property name. When one or both of parameters is omited, folowed rules are used: When omit both propeties - used property name of link property as target and equal named property from source object When DictSource is omited - used Property as target property name and equal named property from source object When Property is omited - used property name of link property as target and property with name equals DictSource from source object [Property(\"S\", \"name\"), LinkProperty(\"Name\") /* DocState.Name -> this.DocState */, LinkProperty(\"Code\", \"DocStateCode\") /* DocState.Code -> this.DocStateCode */] public Link<string, DocState> DocState { get; set; }"
  },
  "tutorial/mapping/static/property/grouping.html": {
    "href": "tutorial/mapping/static/property/grouping.html",
    "title": "Property grouping parameters | XData website",
    "keywords": "Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. PropertyGroupingAttribute has properties: Grouping - optional, property aggregation type , default is None , GroupOrder - optional, property grouping order when Grouping = DataGrouping . None . [PropertyGrouping(DataGrouping.Sum)]"
  },
  "tutorial/mapping/static/property/default.html": {
    "href": "tutorial/mapping/static/property/default.html",
    "title": "Property default value | XData website",
    "keywords": "Property default value To set default value of property with static mapping, use PropertyDefaultAttribute with parameters: DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , AlwaysUseDefault - optional, default is false , default value will be applyed when record inserted, and when record is updated too. [PropertyDefault(DefaultType.UserName, AlwaysUseDefault = true)]"
  },
  "tutorial/mapping/static/property/column.html": {
    "href": "tutorial/mapping/static/property/column.html",
    "title": "Hidden properties | XData website",
    "keywords": "Hidden properties Hidden properties statically defined using couple of specific attributes: ColumnAttribute , ColumnExpressionAttribute and ColumnDefaultAttribute as analog with similar attributes of properties . ColumnAttribute has parameters: PropertyName - name of hidden property, PropertyType - type of hidden property, Source - data source alias, FieldName - optional, DB field name (can be omited when correspond default mapping rule (exampple: some_field_name is mapped to SomeFieldName )), Flags - optional, bitmask of property flags , Grouping - optional, defined aggreagation type , default is None , GroupOrder - optional, group order when Grouping = DataGrouping . None , Hidden - optional, mapped field omited in SELECT expression of result query (when grouping limitations demand this), default is false , NativeSqlType - optional, native SQL type name. NativeSqlType is used when default datatype mapping is conflicted with resultset data type. ColumnExpressionAttribute has parameters: PropertyName - name of hidden property (same as defined by ColumnAttribute ), ExprText - depends on ExprType (see below): subquery alias / SQL expression text / field name with LINQ style expression definition, ExprType - optional, SQL expression type default is DataExpressionType . PlainSql , DbType - data type on ADO .Net provider level (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). ColumnDefaultAttribute has parameters: PropertyName - hidden property name (same as defined by ColumnAttribute ), DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , AlwaysUseDefault - optional, default is false , default value will be applyed when record inserted, and when record is updated too. [Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)]"
  },
  "tutorial/mapping/static/procedure/source.html": {
    "href": "tutorial/mapping/static/procedure/source.html",
    "title": "SQL procedure as query | XData website",
    "keywords": "SQL procedure as query To define procedure as data source of mapping used ProcedureAttribute with parameters: Alias - procedure alias, Name - procedure or function name, ProcedureType - ProcedureType : ProcedureType . Procedure or ProcedureType . Function ."
  },
  "tutorial/mapping/static/filter/subquery.html": {
    "href": "tutorial/mapping/static/filter/subquery.html",
    "title": "Subquery filters | XData website",
    "keywords": "Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilterAttribute with specific (over defined above ) parameter: Subquery - subquery alias (see Subqueries ). Inner view can not be used with subquery filters. [SubqueryFilter(\"D\" /* table alias */, \"doc_state_id\" /* field name */, \"A\" /* subquery alias */, Operation: FilterOperation.In /* filter operation */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when one of linked data sources is skiped then other one will skipped too. When base table of subquery is skipped then subquery is skipped completely."
  },
  "tutorial/mapping/static/filter/sql_expr.html": {
    "href": "tutorial/mapping/static/filter/sql_expr.html",
    "title": "SQL expression filters | XData website",
    "keywords": "SQL expression filters To define filter over SQL expression used ExpressionFilterAttribute with specific (over described above ) parameter: ExpressionText - depends on value can be: subquery alias, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */, Operation: FilterOperation.In /* filter operation */)] private static field name contains dynamic definition of SQL expression, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"AllowedDiscount\" /* ExpressionText: SQL expression description field name */, Operation: FilterOperation.NotEqual /* filter operation */)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)); plain SQL expression text. [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"case P.is_vip when 1 then 10 else 0 end\" /* ExpressionText: plain SQL expression */, Operation: FilterOperation.NotEqual /* filter operation */)] Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers."
  },
  "tutorial/mapping/dynamic/procedure/sample_out_cursor.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_out_cursor.html",
    "title": "SQL procedure with out parameter and resultset sample | XData website",
    "keywords": "SQL procedure with out parameter and resultset sample var res4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); Console.WriteLine(res4.GetParameter<int>(\"result\")); foreach (var classifier in res4) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_multiple_cursor.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_multiple_cursor.html",
    "title": "SQL procedure with multiple resultsets sample | XData website",
    "keywords": "SQL procedure with multiple resultsets sample var res2 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"param3\", DbType.Int32) .Parameter<string>(\"T\", 4, \"param4\", DbType.String) .Return(\"T\", \"Result1\", 1, convertor) .Return(\"T\", \"Result2\", 2, convertor) .Call<Classifier>(DataScope.Layer, \"Result1\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\"), \"param3\".SetValue(\"2\"), \"param4\".SetValue(\"Some\")); foreach (var classifier in res2) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); foreach (var classifier in res2.GetResultSet<Classifier>(\"Result2\")) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_cursor.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_cursor.html",
    "title": "SQL procedure resultset as query sample | XData website",
    "keywords": "SQL procedure resultset as query sample var res = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Return(\"T\", \"Result\", 1, convertor) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); foreach (var classifier in res) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_array.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_array.html",
    "title": "SQL procedure with simple array parameter sample | XData website",
    "keywords": "SQL procedure with simple array parameter sample var arr = new[] { 1, 2, 3 }.ToXml(); var f6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction6\", ProcedureType.Function) .Parameter<int[]>(\"T\", 1, \"p_arr\", DbType.Int32, z => z.Array()) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"p_arr\".SetValue(arr)); Console.WriteLine(f6.GetParameter<int>(\"result\"));"
  },
  "tutorial/mapping/dynamic/filter/group.html": {
    "href": "tutorial/mapping/dynamic/filter/group.html",
    "title": "Filter group | XData website",
    "keywords": "Filter group Filter group of filter can be assigned to it declaration by SetCombination extension of IFilterDescription interface. ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ..."
  },
  "tutorial/mapping/dynamic/filter/filter.html": {
    "href": "tutorial/mapping/dynamic/filter/filter.html",
    "title": "Filters | XData website",
    "keywords": "Filters Filters can be defined as: Constant filters SQL expression filters Dictionary filters Range filters Subquery filters Inner links Each of them described by corresponding LINQ expression define their parameters depending on the context of their use and the type of the filter itself (see below). Filter descriptions are provided to filters paramter value of DataTable , Subquery , InnerView and Procedure methods of IRepositoryStructure<T> interface, or WithRecursive method of IQueryWithAdapter<TRoot> . Each of expression has described one filter. Type of filter is declared by one of fabric method of interface inside lambda expression with one of followed filter adapter: IInnerFilterAdapter - filter adapter to define filters and links inside plain query (see DataTable , Procedure ), ISubqueryFilterAdapter , ISubqueryFilterAdapter<TDObj> and ISubqueryFilterAdapter<T,TDObj> - used in various overloads of subquery definition (see Subquery , InnerView and WithRecursive ) to declare links with subqueries. Specific parameters for each type of filter is described in filter fabric methods described below in specific topics. And some optional modificators can be defined using continue LINQ calls with extension methods: SetOperation - to set filter operation AsPrimary - to set optional filter flag SetCombination - to set filter combination Each of filter type is defined by own special method of corresponding filter adapter. Filter operation is defined by enum FilterOperation : Equal - equal NotEqual - not equal LessThan - less then GreaterThan - greater then LessThanOrEqual - less or equal GreaterThanOrEqual - greater or equal In - field value in range or subquery NotIn - field value is not in range or subquery Exists - subquery returns one or more rows NotExists - subquery returns no rows Like - field value correlated with find expression NotLike - field value not correlated with find expression OuterJoin - left outer join link between query sources (tables or inner views) Contains - field value correlated with fulltext search NotContains - field value not correlated with fulltext search Filter group Filter group of filter can be assigned to it declaration by SetCombination extension of IFilterDescription interface. ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ... Constant filters Constant filters alowes to restict selection of data by some constant value. This filter defined by one of ConstFilter method overloads of IInnerFilterAdapter interface. Constant type list restricted by enum FilterConstantType : Const - constant with value setted by ConstantValue . Variable - value of variable with name setted by ConstantValue . CurrentDate - current date. CurrentDateTime - current date and time. CurrentDateTimeUTC - current date and time (UTC). ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ... SQL expression filters To define filter over SQL expression used one of ExprFilter method overloads of IInnerFilterAdapter interface. There are two overloads of ExprFilter method: IFilterDescription ExprFilter(string field, string exprText) - to use with plain SQL expressions or subquery alias IFilterDescription ExprFilter<T>(string field, Expression<Func<IQueryStructureAdapter, T>> expression) - to use with SQL expressions as LINQ style expressions Depending style of SQL expression description that overloads can be used with: subquery alias, , ExprFilter(\"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */) .SetOperation(FilterOperation.In) dynamic definition of SQL expression, , ExprFilter(\"discount\" /* field name */, /* expression: SQL expression LINQ style definition */ x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)), Operation: FilterOperation.NotEqual /* filter operation */)] plain SQL expression text. , ExprFilter(\"discount\" /* field name */, /* ExpressionText: plain SQL expression */ \"case P.is_vip when 1 then 10 else 0 end\") .SetOperation(FilterOperation.NotEqual) Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Range filters To define filter checks field value over array of values used RangeFilter methods of IInnerFilterAdapter interface. ... , RangeFilter(\"discount\", new[] {0,5,10}) .SetOperation(FilterOperation.In) ... Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by one of DictFilter overloads of IInnerFilterAdapter interface. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. ... , x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\") ... Inner links To define links between data sources inside query used Link overloads of IInnerFilterAdapter interface. ... , x => x.Link(\"DS\", \"doc_state_id\") ... Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilter method of IInnerFilterAdapter . ... .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\") .SetOperation(FilterOperation.In)) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) ... Tip Subquery filters can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used one of SubqueryLink method overload of ISubqueryFilterAdapter , ISubqueryFilterAdapter<TDObj> or ISubqueryFilterAdapter<T,TDObj> depending by outer method signature and subquery declaration specific. ... .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ... Tip Subquery links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call."
  },
  "tutorial/mapping/dynamic/filter/dictionary.html": {
    "href": "tutorial/mapping/dynamic/filter/dictionary.html",
    "title": "Dictionary filters | XData website",
    "keywords": "Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by one of DictFilter overloads of IInnerFilterAdapter interface. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. ... , x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\") ..."
  },
  "tutorial/mapping/dynamic/filter/constant.html": {
    "href": "tutorial/mapping/dynamic/filter/constant.html",
    "title": "Constant filters | XData website",
    "keywords": "Constant filters Constant filters alowes to restict selection of data by some constant value. This filter defined by one of ConstFilter method overloads of IInnerFilterAdapter interface. Constant type list restricted by enum FilterConstantType : Const - constant with value setted by ConstantValue . Variable - value of variable with name setted by ConstantValue . CurrentDate - current date. CurrentDateTime - current date and time. CurrentDateTimeUTC - current date and time (UTC). ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ..."
  },
  "tutorial/mapping/reference.html": {
    "href": "tutorial/mapping/reference.html",
    "title": "Child repositories referencies | XData website",
    "keywords": "Child repositories referencies Slave related repositories XData require to perform as: public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } No additional mapping description are needed. Only external reference is required. Tip To use XData Unit of Work realization ( WorkSet ), child repositories referencies are required."
  },
  "tutorial/mapping/readonly.html": {
    "href": "tutorial/mapping/readonly.html",
    "title": "Readonly properties | XData website",
    "keywords": "Readonly properties Read only properties XData require to perform as in example below: public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } Data access is provided through extension method GetProperty , but property is read only."
  },
  "tutorial/mapping/procedures.html": {
    "href": "tutorial/mapping/procedures.html",
    "title": "SQL functions & procedures | XData website",
    "keywords": "SQL functions & procedures Stored procedures and functions can be used as data source of mapping (if used DBMS and ADO .Net provider is support this). Important At this moment we has various limitations of using SQL procedures as on DBMS SQL dialect level, as on ADO .Net provider realization level. Please, choose DBMS and ADO .Net provider with keep in mind limitations they have. XData support many procedure mapping styles and call conventions, but can not garant all of them is supported by DBMS and ADO .Net provider You choose. XData has support followed SQL procedure mapping styles and call conventions and it combinations: Using procedure resultset as data source Using procedure with multiple resultsets Using out parameters Using return value of stored procedure Using symple type array as parameter Using cursor as parameter Using UTD (user defined type) as parameter Using table valued function as data source Using scalar function as single property source Warning Class mapped to UDT must support native XML serialization! All this mapping features described as for static as for dynamic mapping paradigm."
  },
  "tutorial/mapping/master_slave.html": {
    "href": "tutorial/mapping/master_slave.html",
    "title": "Master slave relations | XData website",
    "keywords": "Master slave relations External referencies is the base element of master-slave references definition in XData. It describes link rules between related slave entities from master entities. XData support multi master and multi slave relation (many-to-many). And it's possible to define multiple relations between every two data objects. External referencies is the declarations of possible master-detail relations between data objects . Each of external reference is describe master property (or column ) to slave filter relation, used to filter slave collections data when master current object is set. Tip External referencies applied to manualy attached slave data sources only. External references definition is differs for static and dynamic methods of mapping. Reference rules is defined at mapping level, and when slave object will be attached using GetChild method, that rules will be applyed. To break master-slave reference call DetachChild method. When data scope or one of referenced repositories will be disposed - reference is breaked automatically. Slave object reference filter value is set when SetCurrent extension method is called for master object. if (newInvoice.Submit()) { newInvoice.SetCurrent(); return true; } Master-slave linked repositories can be used for cascade delete operation over multiple related data objects: newInvoice.SetDeleted(true); newInvoice.Submit(DataSubmitFlag.Cascade); or cascade delete applyed for filtered subset of repository objects and their slave objects: invoices.Clear(x => x.DocStateCode == \"REJECTED\", DataSubmitFlag.Cascade);"
  },
  "tutorial/three_tier.html": {
    "href": "tutorial/three_tier.html",
    "title": "Using three tier architecture | XData website",
    "keywords": "Using three tier architecture Important This is feature of .Net 4.0 version only. One of unique features of XData is using same application logic modules as in two-tier-architecture (client-db), as in three-tier-architecture (client-application server-db). And You can switch three-tier application in two-tier mode to simplify debugging changing configuration file only!!! Tip In three-tier mode no database client software needed on client workstation. And no database credential stored in configuration file. To extract part of data aware application logic on application server level You will need: extract mapped classes in separated assembly (or assemblies) called \"data modules\" extract server data logic in separated assembly (or assemblies) called \"server modules\" in server modules create logic classes for some data objects extend abstract class XDataLogic<T> , where T - data object class type that uses server logic including trigger logic and call server logic from client code. public abstract class InvoiceLogic : XDataLogic<Invoice> { [Action(DataActionType.AfterInsert), Action(DataActionType.AfterUpdate)] public readonly static Trigger<Invoice> UpdateHistory = ((ref Invoice invoice, ref DataTriggerFlag flag) => { if (!invoice.CheckState(DataObjectState.New) && !invoice.IsChanged(x => x.DocState)) return true; var rep = invoice.GetRepository(); var hist = GetRepository<DocHistory>(rep.Layer, context: rep.Context) .Reset() .SetFilterValue(DocHistory.FilterByDocId, invoice.GetProperty<long>(\"DocId\")) .SetFilterValue(DocHistory.FilterByDocStateId, invoice.DocState.Key); var newHist = hist.New(); newHist.HistoryDate = DateTime.UtcNow; return hist.Submit(ref newHist); }); [Action(DataActionType.BeforeDelete)] public readonly static Trigger<Invoice> ClearHistory = ((ref Invoice invoice, ref DataTriggerFlag flag) => { var i = invoice; return GetRepository<DocHistory>(i.GetLayer(), context: i.GetContext()) .Reset() .Clear(x => x.GetProperty<long>(\"DocId\") == i.GetProperty<long>(\"DocId\")); }); [Action(DataActionType.BeforeClear)] public readonly static RepositoryTrigger<Invoice> ClearHistoryBatch = ((IRepository<Invoice> invoiceRepository, ref DataTriggerFlag flag) => GetRepository<DocHistory>(invoiceRepository.Layer, context: invoiceRepository.Context) .Reset() .Clear(x => invoiceRepository .Any(z => x.GetProperty<long>(\"DocId\") == z.GetProperty<long>(\"DocId\")))); public static readonly CustomLogic<Invoice> TestCustomLogic = (objects => { Log.Write(MessageType.Information, () => String.Format(\"TestCustomLogic called with {0} objects\", objects.Length)); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => String.Format(\"Call for \\\"{0}\\\" returned \\\"{1}\\\" with data \\\"{2}\\\"\", i.DocNumb, r, p == null ? null : Encoding.UTF8.GetString(p))); } return true; }); } set server module assembly name in data object mapping in data modules [DataObject(\"D\", LogicAssemblyName = \"InvoiceServerLogic\")] //for static mapping //или ... .SetLogicAssembly(\"InvoiceServerLogic\") //for dynamic mapping register custom logic handlers inside mapped types in data modules public static CustomLogic<Invoice> TestCustomLogic; write custom logic calls from client modules var random = new Random(); return dataScope.GetRepository<Invoice>().ToArray().Execute( () => Invoice.TestCustomLogic, \"testPost\".SetValue((Action<byte[]>)(data => Console.WriteLine(\"Post message received (data=\\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)))).AsEnum().ToDictionary(), \"testCall\".SetValue((Func<byte[], byte[]>)(data => { Console.WriteLine(\"Call received \\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)); return random.NextDouble() >= 0.5 ? null : Encoding.UTF8.GetBytes( string.Format(\"reply for \\\"{0}\\\"\", data == null ? null : Encoding.UTF8.GetString(data))); })).AsEnum().ToDictionary()); Tip Custom logic handlers can use synchronic and asynchronic calbacks to client code and perform analysys of synchronic callbacks result. This functionality alowes to realize very complex and interactive disributed business processes."
  },
  "tutorial/security.html": {
    "href": "tutorial/security.html",
    "title": "Security issues | XData website",
    "keywords": "Security issues XData is able the application to take a full control over data access rights and rights to execute any data aware business logic. Inside the XData has designed a complete data security solution for control access to some proprties of data objects , access to data objects corresponds some rules, access to standard (CRUD), or custom data aware business logic. For using this ability is required to implement interface ISecuritySession and use it as parameter of GetRepository method of data scope interface to get security sensible repository . XData is not specify the way to authentication and authorization. Your application can use any existing technologies or products on the market. Here the synthetic but simple and demonstrative example of ISecuritySession implementation: public class MySecuritySession : SecuritySession { private const string Manager = \"Manager\"; private const string Guest = \"Guest\"; private const string Chief = \"Chief\"; private const string Clerk = \"Clerk\"; public static MySecuritySession CreateSecuritySession (string userName, string password) { if (userName == \"Admin\" && password == \"123\") return new MySecuritySession(userName, new string[0], true); if (userName == \"Manager\" && password == \"111\") return new MySecuritySession(userName, new[] { Manager, Clerk }); if (userName == \"Guest\" && password == \"222\") return new MySecuritySession(userName, new[] { Guest }); if (userName == \"Chief\" && password == \"333\") return new MySecuritySession(userName, new[] { Chief, Manager, Clerk }); if (userName == \"Clerk\" && password == \"444\") return new MySecuritySession(userName, new[] { Clerk }); RiseUnauthorizedAccessException(); return null; } /// <exception cref=\"XDataSecurityException\"></exception> [DebuggerStepThrough] [DebuggerNonUserCode] private static void RiseUnauthorizedAccessException() { throw new XDataSecurityException(\"XDataObjectTest system\"); } public MySecuritySession (string userName, string[] roles, bool isSupervisor = false) : base(userName, roles, isSupervisor) { } protected override void InitializeSession() { //Hide some columns from Guests RegisterRestrictedProperties(\"\", typeof(Invoice), new[] { Guest.SetValue(new[] { Property<Invoice>(x => x.DocAmount), Property<Invoice>(x => x.DocLastChange), Property<Invoice>(x => x.Scan), Property<Invoice>(x => x.Source), Property<Invoice>(x => x.CustomerTo), Property<Invoice>(x => x.DeliveryType) }) }); RegisterGrantedActions(\"\", typeof(Invoice), new[] { //Grant all actions to Chief Chief.SetValue(new [] { Actions.All }), //Grant all CRUD but TestCustomLogic is denied for Manager Manager.SetValue(new [] { Actions.CRUD }), //Grant update only for Clerk Clerk.SetValue(new [] { Actions.Update }), //Grant execute TestCustomLogic only for Guest Guest.SetValue(new[] { Action(() => Invoice.TestCustomLogic) }) }); //Hide non ACTIVE invoices from Guests RegisterSecurityFilters(\"\", typeof(Invoice), new[] { Guest.SetValue<string, Expression>( (Expression<Func<Invoice, bool>>)(x => x.DocStateCode == \"ACTIVE\")) }); } } To simplify the ISecuritySession interface implementation use the NuGet package XData Security package . This package provide an abstract class SecuritySession implemented base functionality and usefull helpers. This functionality is shipped separatly becauose of security session using is optional. Important Required to override the constructor SecuritySession(string userName, string[] roles, bool isSupervisor = false) used in three-tier architecture on server side, and override method InitializeSession . Method InitializeSession is used to cache access rues profile. Tip Caching of all users security rules (as exposed in sample above) is not effective. This for simplify demonstration only. Security session is current user security describer. Recommended to cache rules for current user only using initialized before calling of InitializeSession properties: UserName , Roles and IsSupervisor . In sample above take a look on using caching methods: RegisterRestrictedProperties , RegisterGrantedActions and RegisterSecurityFilters , and a helper methos: Property and Action . When describing access rules to actions (standard and custom) use constatnts defined in Actions static class: All - all actions over data object, including standard (CRUD) and custom named actions CRUD - all standard actions: Create , Update , Delete Create - create new data object action Update - update data object properties Delete - delete data object"
  },
  "tutorial/linq.html": {
    "href": "tutorial/linq.html",
    "title": "Linq support | XData website",
    "keywords": "Linq support XData repositories и dynamic queries implements interface IOrderedQueryable<T> and granted full support for IQueriable methods. Important Methods SkipWhile , TakeWhile , Join , Select и SelectMany is supported, but results with fullfecth of source data and executed over IEnumerable sources on Linq2Object level. This limitations is related to unexpected complexity of translation handlers to SQL for first two methods, and dynamic changes of result type in others. To effective access to joined or restricted by fields data sources with single database query use dynamic queries"
  },
  "tutorial/glossary.html": {
    "href": "tutorial/glossary.html",
    "title": "Glossary | XData website",
    "keywords": "Glossary Data object Application domain objects mapped (statically or dynamically) to database representation. Data object instances can be obtained through generic repository typed by data object type. Data objects non readonly proprties can be changed and that changes may be submitted to database. Updatable tables hierarchy Hierarchically related tables can be updated on submit of data object changes. Real update of one or subtree of a tables in that hierarchy depends on changes of properties that mapped to concrete tables. When optional referencies is declared between tables inside updatable tables hierarchy, update of data objects can be automatically translated to insert or delete SQL statement applied to concrete table. Updatable tables hierarchy has only one root node - base table . Base table Root table of updatable tables hierarchy . In case of using readonly repository mapping, base table role can be assigned to any table (or virtual table) that contains data object unique key. Optional referencies The outer join referencies between tables within updatable tables hierarchy . Referenced (slave) table must contain one or more properties marked as mandatory . At least one mandatory property are required and it can not be mapped on primary key (or part of primary key). In most cases that properties is natural key of the table. The values assigned to that properties will be used to make a decision with operation applied to table. Data scope Data scope termin is required to describe an independent evironment of operating the same data inside the application. Each data scope has an GUID identifier - layer. In each data scope application logic can set independent filters values over the same repository . Same repositories can be linked over diferent data scopes using different ways and rules. Repository Repository grant access to acquire data objects and apply their changes to database. Repository is represented by XData internal structures and available using interface IRepository<T> extend IQueryable<T> , where T is data object type. Context String alias associated to one of application database instance and all configuration options to use it inside XData environment. Configuration options can be obtained from configuration file or registred dynamically during runtime (see Installation & configuration ). Repository alias Optional repository alias string. Required to unique identification repository used multiple times within one data scope . Sometimes the same repository (but arranged by different runtime filters and variables ) can be useful as multiple slave data sources in master-slave relations inside single data scope (master-slave relations is limited to use single data scope). Filters Filters statically (by mapping) or dynamicaly applied to repository . To define complex filtration rules filters can be grouped in filter groups characterized by name and logical filter combination operation ( AND or OR ). Filter groups can combine filters and/or depended filter groups. Root filter group of repository with filters combined using AND logical operation, can be omited and will be automatically created in runtime. Default filter group name is empty string. By default all filters are linked to default filter group. To specify other filter group to certain filter set filter property Combination to name of this filter group. The master-slave relations is realized on slave repository filters values set up also. In other cases, repository can be filtered by apply LINQ expressions on it. Runtime filters Filters, that allow set the value during runtime. Runtime filter value set can be automated using describing master-slave relation between repositories , or manualy, using SetFilterValue method of repository. Data source flags DataStructureFlags enumeration contains set of flags that defines structure of data source. Data source can be marked with combination of values: None - default data source structure, plain object structire, can be edited, data grouping not applyed. ReadOnly - data source marked as readonly. In optimization goals is recommended to use this flag for all data sources readonly by application logic. Tree - data source is marked as hierarchically organized. Allow to use multiple ways to filter slave data sources (when master is marked as Tree ) - using plain links to active tree node, or to active tree node and subtree. Grouping - data source is marked as grouped. Required to describe grouped data source. Property flags DataPropertyFlag enumeration contains set flags that defines specific role of property: None - default value, property marked with no specific roles Id - property is part of data object primary key OuterFlag - property is marked as mapped to mandatory field of optional referenced table. The value of this property is used to make a decisign with operation over optional referenced table. ConcurrencyToken - concurrency token used within optimistic locking . SQL expression type DataExpressionType enumeration contans types of SQL expression description: PlainSql - SQL expression is plain SQL code, SubQuery - SQL expression is subquery with specified alias, LinqExpression - SQL expression defined as a static private field typed as Calculate<T> , where T is a SQL expression result type, and the field value is LINQ style expression reflects SQL expression logic. Default value type DefaultType enumeration contains types of values used to set default values of properties: CurrentDate - current date (database time settings used) CurrentDateTime - current date and time (database time settings used) CurrentDateTimeUTC - current date and time UTC (database time settings used) Variable - variable value with name stored in DefaultValue Const - constant value stored in DefaultValue AutoIncrement - value generated by database by autoincrement fields or sequence. In case of using sequence is required to match the rules described here . NewGuid - new GUID value is generated UserName - current user name. Security provider subsystem using is required to fill this type of default value. Aggregation type DataGrouping enumeration contains data aggregation functions used inside grouped data source: None - mapped field or SQL expression is one of data source grouped by. Count, Sum, Min Max, Avg - corresponded function is applied to mapped field or SQL expression. Property data source Table field, view field, SQL procedure (or function) parameter or SQL expression mapped to data object property value. Virtual table Various RDBMS has mechanics to select the data without specifying real source (\"dual\" table in ORACLE, omit \"from\" section in MsSqlServer and so on). Virtual data table is recommended for use as source of calclated fields , SQL expressions , when virtual data processing is required. Virtual table is not described in mapping. To set virtual data source as source of property set data source alias as empty string. Filter group Named group of filters (or submittal filter groups) linked with the same logical operator ( AND or OR ). Root filter group named as empty string and have an AND logical operator. Root filter group can be omited in mapping description. All filters without explicit group specification is assigned to root filter group. Filter group names must to be unique named within dataobject mapping description. Filter null processing behaviour FilterNullable enumeration contains behaviours applied to null value processing while comparing data to filter value: Nullable - (default) filter null value is omits the filter (no filter limitation applied) NullsAllowed - null and not null values of filter and data is compared separatly (filter within SQL query will looks like ((field is null and :param is null) or field = :param) ) NullsNotAllowed - filter null value is translated as non valid and querybwill return no records (filter within SQL query will looks like (:param is not null and field = :param) ) NullsCompared - only null values of filter and data is translated as valid (filter within SQL query will looks like (:param is null and field is null) )"
  },
  "tips/tree_childs.html": {
    "href": "tips/tree_childs.html",
    "title": "Tree organized repository child specifics | XData website",
    "keywords": "Tree organized repository child specifics When master repository has hierarchy structure, than slave objects can be filtered by two methods to choose slave repository data: filter data linked with selected tree node only ( direct links ), and linked to subtree from selected node and below by hierarchy. XData has functional to choose one of this methods in runtime. To provide this ability mapping of master objects must describe external links marked as direct links . Than master repository flag ShowSubtree can be used as a switch between this two methods."
  },
  "tips/transactions.html": {
    "href": "tips/transactions.html",
    "title": "Transactions | XData website",
    "keywords": "Transactions XData use automatic transactions handling by default. But allows to manage transacions manually using IDataScope interface method BeginTransaction returned transaction state interface ITransaction . Transaction state is a IDisposable object. Transaction is commited when method Commit is called. When transaction state is disposed without call Commit method, transaction is rolled back. Transaction can be started as readonly or read/write. This depends on parameter read of BeginTransaction method. XData can symulationaly wrap transactions one over another. First non read only transaction is related to real database tranaction, and all wrapped transactions is related to transaction labels. When wrapped transaction is rolled back real transaction is rolled back to label only. Only rolling back the \"main\" transaction calls ROLLBACK statement over database."
  },
  "tips/fixed.html": {
    "href": "tips/fixed.html",
    "title": "Caching repository data | XData website",
    "keywords": "Caching repository data Some data is changed often, some is rarely, but some data will never changed untill application has upgraded. To reduse requery of this static data, XData has mechanism to cache requested data (not a mapped objects) in XData. Repository property FixedQuery can be assigned to true when caching is required. All LINQ queries will be translated to this cache without requery data from database. When this property resets to false, the cache will erased and repository returns to common algorithms of database requests. Similar feature is used to access rarely changed dictionary data over multiple related operative data canges."
  },
  "tips/custom_logic.html": {
    "href": "tips/custom_logic.html",
    "title": "Execute custom business logic | XData website",
    "keywords": "Execute custom business logic XData has many features targeting this technology as not only ORM, but a full featured Data Access Layer. This is one of this features. Custom logic defined as public property of XDataLogic<T> class descendant with type of CustomLogic<T> . public class InvoiceLogic : XDataLogic<Invoice> { public CustomLogic<Invoice> TestCustomLogic => (objects => { Log.Write(MessageType.Information, () => $\"TestCustomLogic called with {objects.Length} objects\"); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => @$\"Call for \\\"{i.DocNumb}\\\" returned \\\"{r}\\\" with data \\\"{(p == null ? null : Encoding.UTF8.GetString(p))}\\\"\"); } return true; }); } ... //Call example logic var random = new Random(); return dataScope.GetRepository<Invoice>().ToArray().Execute(() => \"TestCustomLogic\", \"testPost\".SetValue((Action<byte[]>)(data => Console.WriteLine(\"Post message received (data=\\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)))) .AsEnum().ToDictionary(), \"testCall\".SetValue((Func<byte[], byte[]>)(data => { Console.WriteLine(\"Call received \\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)); return random.NextDouble() >= 0.5 ? null : Encoding.UTF8.GetBytes( $\"reply for \\\"{(data == null ? null : Encoding.UTF8.GetString(data))}\\\"\"); })).AsEnum().ToDictionary()); Programmer can develope data centric logic over some of mapped objects with ability to execute this logic in the middleware layer of three-tier architecture on a dedicated server (or cluster). And this code can be simple and representable debuged in two-tier environment. Architecture can be switched by configuration! No code modification, no side effects... This feature is linked with Trigger logic and reached by Callbacks . When code is organized using data mapping modules, data logic modules and client (or Web site) it can help programmer to keep module relations clean and get ready to changes, with no matter of middleware layer existance. And this rules are not dictated, You can use it or not. You can write this logic anywhere You architect to do. Nothing will be breakes, exept of ability to use XData three-tier architecture. But if You realy don't need it, what is wrong?"
  },
  "tips/copy_data.html": {
    "href": "tips/copy_data.html",
    "title": "Copy data | XData website",
    "keywords": "Copy data Data can be copied from one repository to another using IRepository<T>.Add<TFrom> method as illustrated in followed example: // Query source data (statically, or dynamically) into sourceQuery variable var rep = dataScope.GetRepository<Target>(); using(var tr = dataScope.BeginTransaction()) { rep.Add<Source>(sourceQuery, x => new Target{ TargetSome = x.Some, TargetAnother = x.Another }); tr.Commit(); }"
  },
  "tutorial/mapping/static/procedure/sample_udt_array.html": {
    "href": "tutorial/mapping/static/procedure/sample_udt_array.html",
    "title": "SQL procedure with UDT array parameter sample | XData website",
    "keywords": "SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure7\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(Classifier[]) /* Parameter type must be an array of mapped type */, DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), ResultSet(\"T\", \"Result\")] public class TestProcedure7 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } }"
  },
  "tutorial/mapping/static/procedure/sample_udt.html": {
    "href": "tutorial/mapping/static/procedure/sample_udt.html",
    "title": "SQL procedure with UDT parameter sample | XData website",
    "keywords": "SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"TestFunction5\", ProcedureType.Function), Parameter(\"T\", 1, \"p_obj\", typeof(Classifier), DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), Parameter(\"T\", 2, \"Result\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.ReturnValue)] public class PostgreSqlTestFunction5 : IDataObject { public string Result { get { return this.GetParameter(x => x.Result); } } }"
  },
  "tutorial/mapping/static/procedure/sample_table_func.html": {
    "href": "tutorial/mapping/static/procedure/sample_table_func.html",
    "title": "SQL table valued function as query sample | XData website",
    "keywords": "SQL table valued function as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestFunction3 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } }"
  },
  "tutorial/mapping/static/procedure/sample_scalar_func.html": {
    "href": "tutorial/mapping/static/procedure/sample_scalar_func.html",
    "title": "SQL scalar function as property data source sample | XData website",
    "keywords": "SQL scalar function as property data source sample [DataObject(\"T\"), DataTable(\"T_DOC_TYPE\", \"T\"), Column(\"DocTypeId\", typeof(long), Flags = DataPropertyFlag.Id)] public class TestFunction4 : IDataObject { [Property(\"T\")] public string Code { get; set; } [Property(\"T\")] public string Name { get; set; } [Property, // Property expression attribute \"name\" is the name of private static field // with type Calculate<string> and attributed by SqlExpressionAttribute PropertyExpression(\"test\", DataExpressionType.LinqExpression, ExprSize = 20)] public string Test { get { return this.GetProperty(x => x.Test); } } // Private static field with type Calculate<string> and attributed by // SqlExpressionAttribute [SqlExpression] private static Calculate<string> test z => z.SqlFn<string>(\"dbo.TestFunction2\", y => y.Field<long>(\"T\", \"doc_type_id\"), y => y.Field<string>(\"T\", \"name\")) }"
  },
  "tutorial/mapping/static/procedure/sample_retval_cursor.html": {
    "href": "tutorial/mapping/static/procedure/sample_retval_cursor.html",
    "title": "SQL procedure with return value and resultset sample | XData website",
    "keywords": "SQL procedure with return value and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"ResultParameter\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue), ResultSet(\"T\", \"Result\")] public class TestProcedure6 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public int ResultParameter { get { return this.GetParameter(x => x.ResultParameter); } } }"
  },
  "tutorial/mapping/static/procedure/sample_retval.html": {
    "href": "tutorial/mapping/static/procedure/sample_retval.html",
    "title": "SQL procedure with return value sample | XData website",
    "keywords": "SQL procedure with return value sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure5 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } }"
  },
  "tutorial/mapping/static/procedure/sample_out_param.html": {
    "href": "tutorial/mapping/static/procedure/sample_out_param.html",
    "title": "SQL procedure with out parameter sample | XData website",
    "keywords": "SQL procedure with out parameter sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure3 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } }"
  },
  "tutorial/mapping/static/procedure/sample_out_cursor.html": {
    "href": "tutorial/mapping/static/procedure/sample_out_cursor.html",
    "title": "SQL procedure with out parameter and resultset sample | XData website",
    "keywords": "SQL procedure with out parameter and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\"), ResultSet(\"T\", \"Result\")] public class TestProcedure4 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } }"
  },
  "tutorial/mapping/dynamic/procedure/sample_udt.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_udt.html",
    "title": "SQL procedure with UDT parameter sample | XData website",
    "keywords": "SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var f5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction5\", ProcedureType.Function) .Parameter<Classifier>(\"T\", 1, \"p_obj\", DbType.Object, z => z.UdtDataType(\"classifier_rec\")) .Parameter<string>(\"T\", 3, \"result\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.ReturnValue), z => z.NativeSqlType(\"VARCHAR\")) .Call(DataScope.Layer, \"p_obj\".SetValue( new Classifier { Id = 1, Name = \"Test\" }.ToXml())); Console.WriteLine(f5.GetParameter<string>(\"result\"));"
  },
  "tutorial/mapping/dynamic/procedure/sample_table_func.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_table_func.html",
    "title": "SQL table valued function as query sample | XData website",
    "keywords": "SQL table valued function as query sample var f3 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(\"dbo.Classifier\")) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetValue(param)); foreach (var classifier in f3) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tips/calculated.html": {
    "href": "tips/calculated.html",
    "title": "Business logic calculated fields | XData website",
    "keywords": "Business logic calculated fields XData alowed to calculate fields not only using SQL expressions . You can subscribe OnInvalidateObject event and calculate some fields on client side. More detailed events dicassed below ."
  },
  "tips/attached.html": {
    "href": "tips/attached.html",
    "title": "Virtual data and attached handlers | XData website",
    "keywords": "Virtual data and attached handlers You can use XData as database mock engine. XData has feature to replace database interactions with attached handlers call. Virtual objects is attached to repository using Attach method of IRepository<T> interface. To dettach virtual objects used Dettach method. Multiple virtual entities can be attached to repository as new objects using AttachNewObjects method. Tip This method ( AttachNewObjects ) can be used to add multiple dettached objects to real repository. Every virtual entity can override handlers attached to repository with their own realization using parameters of AttachNewObjects method or SetAttachedHandlers method call. To set repository level handlers use special overload of SetAttachedHandlers . To clear attached objects You can use ClearAttachedObjects method. To help wrap handlers to abstract AttachedHandler<T> class and unwrap it back to specialized handlers XData has a wrapper class RepositoryAttachedHandler . Attached hendlers can have followed types (see AttachedHandlerType ): OnClear - ( ClearAttachedHandler ) handler called instead of Clear OnExecute - ( ExecuteAttachedHandler<T> ) handler called instead of Execute OnGetLob - ( GetLobAttachedHandler ) handler called instead of requesting LOB data OnGetLobSize - ( GetLobSizeAttachedHandler ) handler called instead of requesting LOB size OnGetXml - ( GetXmlAttachedHandler ) handler called instead of requesting XML data OnLock - ( LockAttachedHandler<T> ) handler called instead of Lock OnRefresh - ( RefreshAttachedHandler<T> ) handler called instead of refreshing data OnSetLob - ( SetLobAttachedHandler ) handler called instead of saving LOB data OnSetXml - ( SetXmlAttachedHandler ) handler called instead of saving XML data OnSubmit - ( SubmitAttachedHandler<T> ) handler called instead of Submit multiple objects OnSubmitObject - ( SubmitObjectAttachedHandler<T> ) handler called instead of submitting single object OnSubmitQuery - ( SubmitQueryAttachedHandler<T> ) handler called instead of submitting query generation"
  },
  "index.html": {
    "href": "index.html",
    "title": "XData | XData website",
    "keywords": "XData XData is .Net domain object oriented data access layer component. It is not \"yet another ORM\", but а comlete feature rich data access layer for Your solutions. Basic idea to create this component was a suppling high quality tool to professional developers, having deep competences in data storage modeling and access. version 1.1.0 Nuget packages XData Data Access Layer package XData UnitOfWork package - required to use XData UnitOfWork implementation XData Security package - ISecuritySession interface implementation helper required to use XData security functionality XData Three-tier client proxy package - client proxy to use in three-tier envirounment (Net 4.0 only, required full Net 4.0 Framework version) XData Cache package - time limited object caching (Net 4.0 only, required full Net 4.0 Framework version) XData MsSqlSever adapter package - Ms SQL Server database dialect and adapter XData Oracle adapter package - Oracle database dialect and adapter based on Oracle ODP provider XData PostgreSql adapter package - Postgre SQL database dialect and adapter based on NpgSql provider XData SQLite adapter package - SQLite database dialect and adapter (Net 4.0 version use System.Data.SQLite provider, Net Standard 2.0 version use Microsoft.Data.Sqlite provider) XData MySql adapter package - MySQL database dialect and adapter based on MySql.Data provider Plugins Net 4.0 XData net 4.0 System.Diagnistics.Trace log writer XData net 4.0 log4net log writer XData net 4.0 Three-tier server Net Standard 2.0 XData Net Standard 2.0 has no plugins. Online documentation Online documentation PDF documentation PDF documentation Contacts Denis Dawydenko AKA Mick Fierte – d.dawydenko@gmail.com"
  },
  "RELEASENOTE.html": {
    "href": "RELEASENOTE.html",
    "title": "Version Notes (Current Version: v1.1.0) | XData website",
    "keywords": "Version Notes (Current Version: v1.1.0) 1.1.0 .Net Standard 2.0 version released MySql is now supported Lot of bugs are fixed Documetation is realized now 1.0.0 Initially published"
  },
  "tutorial/mapping/static/property/sql_expr.html": {
    "href": "tutorial/mapping/static/property/sql_expr.html",
    "title": "SQL expression property | XData website",
    "keywords": "SQL expression property Readonly property can be mapped to SQL expression. Static mapping of SQL expression is defined by PropertyExpressionAttribute with parameters: ExprText - depends of ExprType value (see below) it can be: subquery alias / SQL expression / private static field name define SQL expression in LINQ style, ExprType - optional, SQL expression type , default is DataExpressionType . PlainSql , DbType - ADO ,Net provider data type (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). Possible to use SQL expressions of three types: subquery, [PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] LINQ expression, [PropertyExpression(\"AllowedDiscount\", DataExpressionType.LinqExpression, DbType.Decimal, ExprSize = 17, ExprScale = 5)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)); plain text SQL expression. [PropertyExpression(\"case P.is_vip when 1 then 10 else 0 end\", DataExpressionType.PlainSql, DbType.Decimal, ExprSize = 17, ExprScale = 5)] Tip Attribute PropertyExpressionAttribute is not replaced PropertyAttribute but extend it. Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Tip It's recomended to use virtual table as SQL expression source omiting data source alias in PropertyAttribute ."
  },
  "tutorial/mapping/static/property/reference.html": {
    "href": "tutorial/mapping/static/property/reference.html",
    "title": "Inner view reference | XData website",
    "keywords": "Inner view reference To map property to field from inner view a ReferenceAttribute is used with parameters: Source - inner view alias, PropertyName - optional, DB field name (may be omited when property name is equals with inner view mapped class property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Reference(\"H\" /* inner view alias */, \"HistoryDate\" /* property name inside inner view */)]"
  },
  "tutorial/mapping/static/static.html": {
    "href": "tutorial/mapping/static/static.html",
    "title": "Static mapping | XData website",
    "keywords": "XData tutorial Mapping common rules Static mapping Tip Before read this topic be sure to already readed Glosary and Common mapping rules containg base infomation to better understanding this. Static mapping is defined using attributes of mapped class and it properties. Static mapping sample Here is example of data object static mapping. Of course, real mapping is much simpler then this, but as example of XData capabilities it's realy representative... [DataObject(\"D\", LogicAssemblyName = \"XDataObjectTest\"), DataTable(\"T_DOC\", \"D\"), DictionaryFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\", \"D\"), DataTable(\"T_DOC_DOC_STATE\", \"DS\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DS\"), DataTable(\"T_DOC_STATE\", \"S\"), Link(\"DS\", \"doc_state_id\", \"S\"), DataTable(\"T_DOC_NUMBER\", \"N\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"N\"), DataTable(\"T_DOC_CUST\", \"CF\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"CF\"), DataTable(\"T_CUSTOMER\", \"F\"), Link(\"CF\", \"customer_id\", \"F\"), DictionaryFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"FROM\", \"CF\"), DataTable(\"T_DOC_CUST\", \"CT\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"CT\"), DataTable(\"T_CUSTOMER\", \"T\"), Link(\"CT\", \"customer_id\", \"T\"), DictionaryFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\", \"CT\"), DataTable(\"T_DOC_SCAN\", \"SC\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"SC\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_SOURCE\", \"SR\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"SR\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_DELIVERY\", \"DD\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DD\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_CATALOGUE\", \"DC\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DC\"), DataTable(\"T_CATALOGUE\", \"U\"), Link(\"U\", \"catalogue_id\", \"DC\"), Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", Grouping = DataGrouping.Sum), SubqueryLink(\"A\", \"DocId\"), InnerView(\"H\", typeof(DocLastChange)), SubqueryLink(\"H\", \"DocId\", Operation = FilterOperation.OuterJoin), ExternalLink(typeof(InvoiceSpec), \"DocId\"), InnerView(\"ST\", typeof(DocBySpecType)), SubqueryLink(\"ST\", \"DocId\"), Subquery(\"UT\", typeof(CatalogueTree), \"CatalogueId\"), SubqueryFilter(\"UT\", \"DC\", \"catalogue_id\", Operation = FilterOperation.In), Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)] public class Invoice: IDataObject { [Property(\"S\", \"code\")] public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } [Property(\"S\", \"name\"), LinkProperty(\"Name\"), LinkProperty(\"Code\", \"DocStateCode\")] public Link<string, DocState> DocState { get; set; } [Property(\"U\", \"name\"), LinkProperty(\"Name\")] public Link<string, Catalogue> DocCatalog { get; set; } [Property(\"N\", \"numb\")] public string DocNumb { get; set; } [Property(\"D\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DocDate { get; set; } [Property(\"D\", Flags = DataPropertyFlag.ConcurrencyToken), PropertyDefault(DefaultType.AutoIncrement)] public long Generation { get { return this.GetProperty(x => x.Generation); } } [Property(\"D\"), PropertyDefault(DefaultType.CurrentDateTime, AlwaysUseDefault = true)] public DateTime Changed { get { return this.GetProperty(x => x.Changed); } } [Property(\"D\"), PropertyDefault(DefaultType.UserName, AlwaysUseDefault = true)] public string Author { get { return this.GetProperty(x => x.Author); } } [Property, PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] public decimal? DocAmount { get { return this.GetProperty(x => x.DocAmount); } } [Reference(\"H\", \"HistoryDate\")] public DateTime? DocLastChange { get { return this.GetProperty(x => x.DocLastChange); } } [Property(\"SC\", Flags = DataPropertyFlag.OuterFlag)] public Lob Scan { get; set; } [Property(\"SR\", Flags = DataPropertyFlag.OuterFlag)] public Xml Source { get; set; } [Property(\"F\", \"name\"), LinkProperty(\"Name\")] public Link<string, Customer> CustomerFrom { get; set; } [Property(\"T\", \"name\"), LinkProperty(\"Name\")] public Link<string, Customer> CustomerTo { get; set; } [Property(\"DD\")] public DeliveryTypeEnum DeliveryType { get; set; } [Property(\"DD\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DeliveryDate { get; set; } public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } } Mapping parameters All statically mapped classes must be marked with DataObjectAttribute . Parameters of DataObjectAttribute : BaseTable - alias of base table (optional, default is virtual table with empty alias), Context - database context (optional, context will be specified at runtime), and Flags - data source flags (optional, default is None ). Example: [DataObject(\"D\" /* base table alias */, Context: \"Main\", Flags: DataObjectFlags.ReadOnly)] All tables in repository query must to be specified using DataTableAttribute . Parameters of DataTableAttribute : Name - name of table and Alias - table alias in query. Tables in updatable tables hierarchy , but not base table must to specify Parent parameter of this attribute - alias of parent table in updatable tables hierarchy. [DataTable(\"P\" /* table alias */, \"patient\" /* table name */, \"D\" /* parent table alias */)] Same way we can define mapping to view, but all fields of view must to be explicitly defined as readonly properties or columns . Subqueries XData alowes use subqueries as part of mapping. This feature can be used for get property values from subquery, for subquery filters , and inner view definitions. Subquery recursive deep is not limited. Class used subquery in mapping definition must to marked with attribute SubqueryAttribute or InnerViewAttribute (when it used as inner view definition). Both of them has a parameter Alias - subquery alias in resulting query. InnerViewAttribute additionally has parameter InnerViewType - type mapped to subquery. SubqueryAttribute additionally has parameters: SubqueryType - type mapped to subquery, PropertyName - subquery returned property and Grouping - aggregation type of resulting property. [Subquery(\"A\" /* subquery alias */, typeof(DocSpecAmounts) /* subquery mapped type */, \"Amount\" /* subquery result property name */, Grouping = DataGrouping.Sum /* result property aggregation type */)] ... [InnerView(\"H\" /* inner view alias */, typeof(DocLastChange) /* inner view mapped type */)] Filters Filters can be defined as: Constant filters SQL expression filters Dictionary filters Range filters Subquery filters Inner links Each of filter type is defined by own special attribute of data object class. Each of attributes has parameters: Source - data source alias of filtered field, FieldName - filtered field name, Operation - filter operation (optional, default is FilterOperation . Equal ), Combination - filter group name (optional, default is root filter group). Above this every filter attribute has their own specific parameters described below. Filter operation is defined by enum FilterOperation : Equal - equal NotEqual - not equal LessThan - less then GreaterThan - greater then LessThanOrEqual - less or equal GreaterThanOrEqual - greater or equal In - field value in range or subquery NotIn - field value is not in range or subquery Exists - subquery returns one or more rows NotExists - subquery returns no rows Like - field value correlated with find expression NotLike - field value not correlated with find expression OuterJoin - left outer join link between query sources (tables or inner views) Contains - field value correlated with fulltext search NotContains - field value not correlated with fulltext search Filter group Filter group can be defined by FilterCombinationAttribute with parameters: Name - filter group unique name, Combination - logical operation between filters and subgroups inside group (optional, default is FilterCombination . And ), Parent - parent filter group name (optional, can be omited for filter groups with parent - root filter group). Logic operation inside filter group is defined by enum Combination : And - and Or - or [FilterCombination(\"OrGroup\" /* group filter name */, Combination: Combination.OR /* logical operation */)] Constant filters Constant filters can restrict query by constant value. This filter is defined by ConstantFilterAttribute , with specific (over described above ) parameters: Name - filter name (will be transformed to query parameter name), ConstantType - constant type (see below) and ConstantValue - constant value depends on ConstantType . Constant types is defined by enum FilterConstantType : Const - value of ConstantValue . Variable - value of variable with name equals ConstantValue . CurrentDate - current date. CurrentDateTime - current date/time. CurrentDateTimeUTC - current date/time (UTC). [ConstantFilter(\"FilterByZero\" /* filter name */, \"P\" /* table alias */, \"discount\" /* DB field name */, \"0\" /* constant value */, Operation: FilterOperation.Equal /* filter operation */, ConstantType: FilterConstantType.Const /* constant type */)] SQL expression filters To define filter over SQL expression used ExpressionFilterAttribute with specific (over described above ) parameter: ExpressionText - depends on value can be: subquery alias, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */, Operation: FilterOperation.In /* filter operation */)] private static field name contains dynamic definition of SQL expression, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"AllowedDiscount\" /* ExpressionText: SQL expression description field name */, Operation: FilterOperation.NotEqual /* filter operation */)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)); plain SQL expression text. [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"case P.is_vip when 1 then 10 else 0 end\" /* ExpressionText: plain SQL expression */, Operation: FilterOperation.NotEqual /* filter operation */)] Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Range filters To define filter checks field value over array of values used RangeFilterAttribute with specific (over described above ) parameter: Range - array of values to filter on. [RangeFilter(\"P\" /* table ealias */, \"discount\" /* field name */, new[] {0,5,10} /* range of values */, Operation: FilterOperation.In /* filter operation */)] Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by DictionaryFilterAttribute with specific (over described above ) parameters: DictionaryTable - dictionary table name, DictionaryId - dictionary id field name, DictionaryCode - dictionary mnemonic code field name, DictionaryValue - mnemonic code value to filter query on, ValueIsVariable - flag DictionaryValue contains not a value but name of variable with value. Tip In case filter field name is equals dictionary id field name, parameter FieldName can be omited. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. [DictionaryFilter(\"t_doc_state\" /* dictionary table name */, \"doc_state_id\" /* dictionary id field name */, \"code\" /* dictionary mnemonic code field name */, \"CREATED\" /* mnemonic code value */, \"D\" /* filtered table alias */)] Inner links To define links between data sources inside query used LinkAttribute with specific parameters: LinkedSourceAlias - linked table alias, LinkedFieldName - linked table field name (optional, can be omited when equals with FieldName ). Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to set parameter PrimaryFilter to true . [Link(\"D\" /* table alias */, \"doc_id\" /* field name */, \"DD\" /* linked table alias */)] Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilterAttribute with specific (over defined above ) parameter: Subquery - subquery alias (see Subqueries ). Inner view can not be used with subquery filters. [SubqueryFilter(\"D\" /* table alias */, \"doc_state_id\" /* field name */, \"A\" /* subquery alias */, Operation: FilterOperation.In /* filter operation */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when one of linked data sources is skiped then other one will skipped too. When base table of subquery is skipped then subquery is skipped completely. Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used SubqueryLinkAttribute with parameters: Subquery - subquery alias, SubqueryProperty - linked property from subquery, PropertyName - optional, linked property from base class (when omit, base class property name is equal SubqueryProperty ), also optional properties: Operation , Combination и PrimaryFilter is supported. They was described above in topics Filters and Inner links . [SubqueryLink(\"H\" /* subquery alias */, \"DocId\" /* subquery property to link */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when subquery is skipped, then data source linked to subquery by this filter will be skipped too, and skip data sources analisys will continue inside base class (see Inner links ). Properties Static mapping is performed as each property with specific attributes mark. Main attribute to statically map property is PropertyAttribute with parameters: Source - data source alias (may be omited for virtual table ), FieldName - DB field name mapped to property (may be omited when field and property correspond naming rule, for example DB field named as some_field_name and mapped to SomeFieldName property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Property(\"S\" /* table alias */, \"code\" /* field name */)] SQL expression property Readonly property can be mapped to SQL expression. Static mapping of SQL expression is defined by PropertyExpressionAttribute with parameters: ExprText - depends of ExprType value (see below) it can be: subquery alias / SQL expression / private static field name define SQL expression in LINQ style, ExprType - optional, SQL expression type , default is DataExpressionType . PlainSql , DbType - ADO ,Net provider data type (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). Possible to use SQL expressions of three types: subquery, [PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] LINQ expression, [PropertyExpression(\"AllowedDiscount\", DataExpressionType.LinqExpression, DbType.Decimal, ExprSize = 17, ExprScale = 5)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)); plain text SQL expression. [PropertyExpression(\"case P.is_vip when 1 then 10 else 0 end\", DataExpressionType.PlainSql, DbType.Decimal, ExprSize = 17, ExprScale = 5)] Tip Attribute PropertyExpressionAttribute is not replaced PropertyAttribute but extend it. Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Tip It's recomended to use virtual table as SQL expression source omiting data source alias in PropertyAttribute . Property default value To set default value of property with static mapping, use PropertyDefaultAttribute with parameters: DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , AlwaysUseDefault - optional, default is false , default value will be applyed when record inserted, and when record is updated too. [PropertyDefault(DefaultType.UserName, AlwaysUseDefault = true)] Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. PropertyGroupingAttribute has properties: Grouping - optional, property aggregation type , default is None , GroupOrder - optional, property grouping order when Grouping = DataGrouping . None . [PropertyGrouping(DataGrouping.Sum)] Hidden properties Hidden properties statically defined using couple of specific attributes: ColumnAttribute , ColumnExpressionAttribute and ColumnDefaultAttribute as analog with similar attributes of properties . ColumnAttribute has parameters: PropertyName - name of hidden property, PropertyType - type of hidden property, Source - data source alias, FieldName - optional, DB field name (can be omited when correspond default mapping rule (exampple: some_field_name is mapped to SomeFieldName )), Flags - optional, bitmask of property flags , Grouping - optional, defined aggreagation type , default is None , GroupOrder - optional, group order when Grouping = DataGrouping . None , Hidden - optional, mapped field omited in SELECT expression of result query (when grouping limitations demand this), default is false , NativeSqlType - optional, native SQL type name. NativeSqlType is used when default datatype mapping is conflicted with resultset data type. ColumnExpressionAttribute has parameters: PropertyName - name of hidden property (same as defined by ColumnAttribute ), ExprText - depends on ExprType (see below): subquery alias / SQL expression text / field name with LINQ style expression definition, ExprType - optional, SQL expression type default is DataExpressionType . PlainSql , DbType - data type on ADO .Net provider level (optional, default is DbType . String ), ExprSize - optional, expression field size (if applicable), ExprScale - optional, expression field precision (if applicable). ColumnDefaultAttribute has parameters: PropertyName - hidden property name (same as defined by ColumnAttribute ), DefaultSource - default value type , DefaultValue optional, depends on DefaultSource , AlwaysUseDefault - optional, default is false , default value will be applyed when record inserted, and when record is updated too. [Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)] Inner view reference To map property to field from inner view a ReferenceAttribute is used with parameters: Source - inner view alias, PropertyName - optional, DB field name (may be omited when property name is equals with inner view mapped class property), Flags - optional, mask of property flags , NativeSqlType - optional, SQL type name in DB. Parameter NativeSqlType is used when type default mapping is conflicted with real SQL type name. [Reference(\"H\" /* inner view alias */, \"HistoryDate\" /* property name inside inner view */)] Links To statically define link property pairs used LinkPropertyAttribute with parameters: DictSource - optional, source object property name, Property - optional, property name. When one or both of parameters is omited, folowed rules are used: When omit both propeties - used property name of link property as target and equal named property from source object When DictSource is omited - used Property as target property name and equal named property from source object When Property is omited - used property name of link property as target and property with name equals DictSource from source object [Property(\"S\", \"name\"), LinkProperty(\"Name\") /* DocState.Name -> this.DocState */, LinkProperty(\"Code\", \"DocStateCode\") /* DocState.Code -> this.DocStateCode */] public Link<string, DocState> DocState { get; set; } Tree To statically map tree organized data structure used special data source attributes With to describe tree root query and WithRecursive to describe tree childs. Both of them use subquery mappings (see example below) to set subquery structure for tree query construction. Important Data source flags of tree organized data sources must contain DataStructureFlag.ReadOnly and DataStructureFlag.Tree! With attribute has properties: Alias - alias of tree data source, SubqueryType - type of root subquery mapping, Type - data source combination within tree query, Properties - tree properties order. WithRecursive attribute has properties: Alias - alias of recursive data source, SubqueryType - type of root subquery mapping, InitialAlias - alias of tree data source. [DataObject(\"CAT\", Flags = DataStructureFlag.ReadOnly | DataStructureFlag.Tree), With(\"CAT\", typeof(CatalogueTreeRoot), WithRecursiveType.RecursiveUnion, \"CatalogueId\", \"Name\", \"Code\", \"ParentId\"), WithRecursive(\"S\", typeof(CatalogueTreeFolders), \"CAT\"), SubqueryLink(\"S\", \"ParentId\", \"CatalogueId\")] public class CatalogueTree : IDataObject { public static readonly RuntimeFilter FilterByRoot = new RuntimeFilter(null, \"FilterByRoot\"); public static readonly RuntimeFilter FilterByCathalogue = new RuntimeFilter(null, \"FilterByCathalogue\"); [Property(\"T\", Flags = DataPropertyFlag.Id)] public long CatalogueId { get { return this.GetProperty(x => x.CatalogueId); } } [Property(\"T\")] public string Code { get { return this.GetProperty(x => x.Code); } } [Property(\"T\")] public string Name { get { return this.GetProperty(x => x.Name); } } [Property(\"T\")] public long? ParentId { get { return this.GetProperty(x => x.ParentId); } } } [DataObject(\"R\"), DataTable(\"T_CATALOGUE\", \"R\"), Column(\"CatalogueId\", typeof(long), \"R\"), Column(\"Code\", typeof(string), \"R\"), Column(\"Name\", typeof(string), \"R\"), Column(\"ParentId\", typeof(long?), \"R\"), FilterCombination(\"root\", Combination = Combination.Or), ConstantFilter(\"FilterByCathalogue\", \"R\", \"catalogue_id\", null, Combination = \"root\", Nullable = FilterNullable.NullsNotAllowed), ConstantFilter(\"FilterByRoot\", \"R\", \"parent_id\", null, Combination = \"root\", Nullable = FilterNullable.NullsCompared)] public class CatalogueTreeRoot : ISqlObject {} [DataObject(\"S\"), DataTable(\"T_CATALOGUE\", \"S\"), Column(\"CatalogueId\", typeof(long), \"S\"), Column(\"Code\", typeof(string), \"S\"), Column(\"Name\", typeof(string), \"S\"), Column(\"ParentId\", typeof(long?), \"S\")] public class CatalogueTreeFolders : ISqlObject {} External link External link can be statically defined using ExternalLinkAttribute with parameters: ChildType - slave repository mapped type, ChildProperty - link property in slave repository, Property - optional, link property in master repository, default used same name as ChildProperty , FilterName - optional, slave repository filter name, default used \"FilterBy\" + ChildProperty , MasterRefresh - optional, refresh master repository current row data on submit slave changes flag (usefull when master has calculated properties over slave repository data), default is false , DirectLink - optional, see tree master-slave specifics for details, default is false Operation - optional, link filter operation (see Filters ), default FilterOperation . Equal , Nullable - optional, filter null processing behaviour , default is FilterNullable . Nullable , Combination - optional, filter group name in slave repository. External links can be used in optional filters description (see Optional filters and optional subqueries ). To specify external link is optional filter part You can set primary filter flag PrimaryFilter . [ExternalLink(typeof(InvoiceSpec), \"DocId\")] SQL procedures & functions Common information about mapping to SQL procedures and functions has described in common mapping rules description and here we just reprensent static mapping rules for various procedure types. SQL procedure as query To define procedure as data source of mapping used ProcedureAttribute with parameters: Alias - procedure alias, Name - procedure or function name, ProcedureType - ProcedureType : ProcedureType . Procedure or ProcedureType . Function . SQL procedure parameter To define SQL procedure parameter used ParameterAttribute with parameters: Alias - procedure alias, Order - order number of parameter, Binding - name used inside application code (it's handy to use parameter with another name, not the name defined inside DB), Type - data type used inside application code, DbType - data type on ADO .Net provider level, Direction - optional, parameter direction, default is ParameterDirection . Input , Size - optional, parameter size(if applicable), Scale - optional, parameter presision (if applicable), Name - optional, parameter name, default is equal with Binding , DefaultType - default value type , DefaultValue optional, depends on DefaultType , NativeSqlType - optional, SQL type name ( NativeSqlType is used when type default mapping is conflicted with real SQL type), UdtTypeName - optional, user defined type (UDT), UdtElementTypeName - optional, user defined type (UDT) of UdtTypeName element (in case where UdtTypeName - array or table), IsArray - optional, parameter is array of UdtElementTypeName (when UdtElementTypeName is omited, array of DbType ), default is false . SQL procedure resultset To describe resultset of SQL procedure used ResultSetAttribute with parameters: Alias - procedure alias, Name - resultset name used inside application code, Order - optional, order number of resultset (required to procedures returns multiple resultsets), ResultType - optional, mapped type of resultset, default is attributed class itself, IsDefault - optional, resultset is default - mapped to attributed class (used when procedure returns multiple resultsets), default is false . SQL procedure resultset as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestProcedure : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL procedure with multiple resultsets sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"param3\", typeof(int), DbType.Int32), Parameter(\"T\", 4, \"param4\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\", IsDefault = true), ResultSet(\"T\", \"SecondResult\", ResultType = typeof(TestResult), Order = 2)] public class TestProcedure2 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public IEnumerable<TestResult> SecondResult { get { return this.GetResultSet(x => x.SecondResult); } } } SQL procedure with out parameter sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure3 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with out parameter and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\"), ResultSet(\"T\", \"Result\")] public class TestProcedure4 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with return value sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"OutParameter\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.Output, Name = \"param3\")] public class TestProcedure5 : IDataObject { public string OutParameter { get { return this.GetParameter(x => x.OutParameter); } } } SQL procedure with return value and resultset sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), Parameter(\"T\", 3, \"ResultParameter\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue), ResultSet(\"T\", \"Result\")] public class TestProcedure6 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } public int ResultParameter { get { return this.GetParameter(x => x.ResultParameter); } } } SQL procedure with simple array parameter sample [DataObject(\"T\"), Procedure(\"T\", \"TestFunction\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int[]), DbType.Int32, IsArray = true), Parameter(\"T\", 2, \"Result\", typeof(int), DbType.Int32, Direction = ParameterDirection.ReturnValue)] public class TestFunction : IDataObject { public int Result { get { return this.GetParameter(x => x.Result); } } } SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"TestFunction5\", ProcedureType.Function), Parameter(\"T\", 1, \"p_obj\", typeof(Classifier), DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), Parameter(\"T\", 2, \"Result\", typeof(string), DbType.String, Size = 20, Direction = ParameterDirection.ReturnValue)] public class PostgreSqlTestFunction5 : IDataObject { public string Result { get { return this.GetParameter(x => x.Result); } } } SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestProcedure7\", ProcedureType.Procedure), Parameter(\"T\", 1, \"param1\", typeof(Classifier[]) /* Parameter type must be an array of mapped type */, DbType.Object, UdtTypeName = \"dbo.Classifier\" /* Full qualified name of UDT */ ), ResultSet(\"T\", \"Result\")] public class TestProcedure7 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL table valued function as query sample [DataObject(\"T\"), Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function), Parameter(\"T\", 1, \"param1\", typeof(int), DbType.Int32), Parameter(\"T\", 2, \"param2\", typeof(string), DbType.String), ResultSet(\"T\", \"Result\")] public class TestFunction3 : IDataObject { [Property(\"T\", \"Id\", Flags = DataPropertyFlag.Id)] public int Id { get { return this.GetProperty(x => x.Id); } } [Property(\"T\", \"Name\")] public string Name { get { return this.GetProperty(x => x.Name); } } } SQL scalar function as property data source sample [DataObject(\"T\"), DataTable(\"T_DOC_TYPE\", \"T\"), Column(\"DocTypeId\", typeof(long), Flags = DataPropertyFlag.Id)] public class TestFunction4 : IDataObject { [Property(\"T\")] public string Code { get; set; } [Property(\"T\")] public string Name { get; set; } [Property, // Property expression attribute \"name\" is the name of private static field // with type Calculate<string> and attributed by SqlExpressionAttribute PropertyExpression(\"test\", DataExpressionType.LinqExpression, ExprSize = 20)] public string Test { get { return this.GetProperty(x => x.Test); } } // Private static field with type Calculate<string> and attributed by // SqlExpressionAttribute [SqlExpression] private static Calculate<string> test z => z.SqlFn<string>(\"dbo.TestFunction2\", y => y.Field<long>(\"T\", \"doc_type_id\"), y => y.Field<string>(\"T\", \"name\")) }"
  },
  "tutorial/mapping/static/sample.html": {
    "href": "tutorial/mapping/static/sample.html",
    "title": "Static mapping sample | XData website",
    "keywords": "Static mapping sample Here is example of data object static mapping. Of course, real mapping is much simpler then this, but as example of XData capabilities it's realy representative... [DataObject(\"D\", LogicAssemblyName = \"XDataObjectTest\"), DataTable(\"T_DOC\", \"D\"), DictionaryFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\", \"D\"), DataTable(\"T_DOC_DOC_STATE\", \"DS\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DS\"), DataTable(\"T_DOC_STATE\", \"S\"), Link(\"DS\", \"doc_state_id\", \"S\"), DataTable(\"T_DOC_NUMBER\", \"N\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"N\"), DataTable(\"T_DOC_CUST\", \"CF\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"CF\"), DataTable(\"T_CUSTOMER\", \"F\"), Link(\"CF\", \"customer_id\", \"F\"), DictionaryFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"FROM\", \"CF\"), DataTable(\"T_DOC_CUST\", \"CT\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"CT\"), DataTable(\"T_CUSTOMER\", \"T\"), Link(\"CT\", \"customer_id\", \"T\"), DictionaryFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\", \"CT\"), DataTable(\"T_DOC_SCAN\", \"SC\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"SC\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_SOURCE\", \"SR\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"SR\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_DELIVERY\", \"DD\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DD\", Operation = FilterOperation.OuterJoin), DataTable(\"T_DOC_CATALOGUE\", \"DC\", Parent = \"D\"), Link(\"D\", \"doc_id\", \"DC\"), DataTable(\"T_CATALOGUE\", \"U\"), Link(\"U\", \"catalogue_id\", \"DC\"), Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", Grouping = DataGrouping.Sum), SubqueryLink(\"A\", \"DocId\"), InnerView(\"H\", typeof(DocLastChange)), SubqueryLink(\"H\", \"DocId\", Operation = FilterOperation.OuterJoin), ExternalLink(typeof(InvoiceSpec), \"DocId\"), InnerView(\"ST\", typeof(DocBySpecType)), SubqueryLink(\"ST\", \"DocId\"), Subquery(\"UT\", typeof(CatalogueTree), \"CatalogueId\"), SubqueryFilter(\"UT\", \"DC\", \"catalogue_id\", Operation = FilterOperation.In), Column(\"DocId\", typeof(long?), \"D\", Flags = DataPropertyFlag.Id), ColumnDefault(\"DocId\", DefaultType.AutoIncrement)] public class Invoice: IDataObject { [Property(\"S\", \"code\")] public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } [Property(\"S\", \"name\"), LinkProperty(\"Name\"), LinkProperty(\"Code\", \"DocStateCode\")] public Link<string, DocState> DocState { get; set; } [Property(\"U\", \"name\"), LinkProperty(\"Name\")] public Link<string, Catalogue> DocCatalog { get; set; } [Property(\"N\", \"numb\")] public string DocNumb { get; set; } [Property(\"D\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DocDate { get; set; } [Property(\"D\", Flags = DataPropertyFlag.ConcurrencyToken), PropertyDefault(DefaultType.AutoIncrement)] public long Generation { get { return this.GetProperty(x => x.Generation); } } [Property(\"D\"), PropertyDefault(DefaultType.CurrentDateTime, AlwaysUseDefault = true)] public DateTime Changed { get { return this.GetProperty(x => x.Changed); } } [Property(\"D\"), PropertyDefault(DefaultType.UserName, AlwaysUseDefault = true)] public string Author { get { return this.GetProperty(x => x.Author); } } [Property, PropertyExpression(\"A\", DataExpressionType.SubQuery, DbType.Decimal, ExprSize = 17, ExprScale = 5)] public decimal? DocAmount { get { return this.GetProperty(x => x.DocAmount); } } [Reference(\"H\", \"HistoryDate\")] public DateTime? DocLastChange { get { return this.GetProperty(x => x.DocLastChange); } } [Property(\"SC\", Flags = DataPropertyFlag.OuterFlag)] public Lob Scan { get; set; } [Property(\"SR\", Flags = DataPropertyFlag.OuterFlag)] public Xml Source { get; set; } [Property(\"F\", \"name\"), LinkProperty(\"Name\")] public Link<string, Customer> CustomerFrom { get; set; } [Property(\"T\", \"name\"), LinkProperty(\"Name\")] public Link<string, Customer> CustomerTo { get; set; } [Property(\"DD\")] public DeliveryTypeEnum DeliveryType { get; set; } [Property(\"DD\"), PropertyDefault(DefaultType.CurrentDate)] public DateTime? DeliveryDate { get; set; } public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } }"
  },
  "tutorial/mapping/static/parameters.html": {
    "href": "tutorial/mapping/static/parameters.html",
    "title": "Mapping parameters | XData website",
    "keywords": "Mapping parameters All statically mapped classes must be marked with DataObjectAttribute . Parameters of DataObjectAttribute : BaseTable - alias of base table (optional, default is virtual table with empty alias), Context - database context (optional, context will be specified at runtime), and Flags - data source flags (optional, default is None ). Example: [DataObject(\"D\" /* base table alias */, Context: \"Main\", Flags: DataObjectFlags.ReadOnly)] All tables in repository query must to be specified using DataTableAttribute . Parameters of DataTableAttribute : Name - name of table and Alias - table alias in query. Tables in updatable tables hierarchy , but not base table must to specify Parent parameter of this attribute - alias of parent table in updatable tables hierarchy. [DataTable(\"P\" /* table alias */, \"patient\" /* table name */, \"D\" /* parent table alias */)] Same way we can define mapping to view, but all fields of view must to be explicitly defined as readonly properties or columns ."
  },
  "tutorial/mapping/static/external_link.html": {
    "href": "tutorial/mapping/static/external_link.html",
    "title": "External link | XData website",
    "keywords": "External link External link can be statically defined using ExternalLinkAttribute with parameters: ChildType - slave repository mapped type, ChildProperty - link property in slave repository, Property - optional, link property in master repository, default used same name as ChildProperty , FilterName - optional, slave repository filter name, default used \"FilterBy\" + ChildProperty , MasterRefresh - optional, refresh master repository current row data on submit slave changes flag (usefull when master has calculated properties over slave repository data), default is false , DirectLink - optional, see tree master-slave specifics for details, default is false Operation - optional, link filter operation (see Filters ), default FilterOperation . Equal , Nullable - optional, filter null processing behaviour , default is FilterNullable . Nullable , Combination - optional, filter group name in slave repository. External links can be used in optional filters description (see Optional filters and optional subqueries ). To specify external link is optional filter part You can set primary filter flag PrimaryFilter . [ExternalLink(typeof(InvoiceSpec), \"DocId\")]"
  },
  "tutorial/mapping/dynamic/procedure/sample_scalar_func.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_scalar_func.html",
    "title": "SQL scalar function as property data source sample | XData website",
    "keywords": "SQL scalar function as property data source sample var f1 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction\", ProcedureType.Function) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); foreach (var classifier in f1) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_retval_cursor.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_retval_cursor.html",
    "title": "SQL procedure with return value and resultset sample | XData website",
    "keywords": "SQL procedure with return value and resultset sample var res6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(param)); foreach (var classifier in res6) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/dynamic/procedure/sample_retval.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_retval.html",
    "title": "SQL procedure with return value sample | XData website",
    "keywords": "SQL procedure with return value sample var res5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); Console.WriteLine(res5.GetParameter<int>(\"result\"));"
  },
  "tutorial/mapping/dynamic/procedure/sample_out_param.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_out_param.html",
    "title": "SQL procedure with out parameter sample | XData website",
    "keywords": "SQL procedure with out parameter sample var res3 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<string>(\"T\", 3, \"param3\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.Output)) .Call(DataScope.Layer, \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); Console.WriteLine(res3.GetParameter<string>(\"param3\"));"
  },
  "tutorial/mapping/dynamic/filter/subquery.html": {
    "href": "tutorial/mapping/dynamic/filter/subquery.html",
    "title": "Subquery filters | XData website",
    "keywords": "Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilter method of IInnerFilterAdapter . ... .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\") .SetOperation(FilterOperation.In)) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) ... Tip Subquery filters can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call."
  },
  "tutorial/mapping/dynamic/filter/sql_expr.html": {
    "href": "tutorial/mapping/dynamic/filter/sql_expr.html",
    "title": "SQL expression filters | XData website",
    "keywords": "SQL expression filters To define filter over SQL expression used one of ExprFilter method overloads of IInnerFilterAdapter interface. There are two overloads of ExprFilter method: IFilterDescription ExprFilter(string field, string exprText) - to use with plain SQL expressions or subquery alias IFilterDescription ExprFilter<T>(string field, Expression<Func<IQueryStructureAdapter, T>> expression) - to use with SQL expressions as LINQ style expressions Depending style of SQL expression description that overloads can be used with: subquery alias, , ExprFilter(\"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */) .SetOperation(FilterOperation.In) dynamic definition of SQL expression, , ExprFilter(\"discount\" /* field name */, /* expression: SQL expression LINQ style definition */ x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)), Operation: FilterOperation.NotEqual /* filter operation */)] plain SQL expression text. , ExprFilter(\"discount\" /* field name */, /* ExpressionText: plain SQL expression */ \"case P.is_vip when 1 then 10 else 0 end\") .SetOperation(FilterOperation.NotEqual) Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers."
  },
  "tutorial/mapping/dynamic/filter/range.html": {
    "href": "tutorial/mapping/dynamic/filter/range.html",
    "title": "Range filters | XData website",
    "keywords": "Range filters To define filter checks field value over array of values used RangeFilter methods of IInnerFilterAdapter interface. ... , RangeFilter(\"discount\", new[] {0,5,10}) .SetOperation(FilterOperation.In) ..."
  },
  "tutorial/mapping/dynamic/filter/inner_links.html": {
    "href": "tutorial/mapping/dynamic/filter/inner_links.html",
    "title": "Inner links | XData website",
    "keywords": "Inner links To define links between data sources inside query used Link overloads of IInnerFilterAdapter interface. ... , x => x.Link(\"DS\", \"doc_state_id\") ... Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call."
  },
  "tutorial/mapping/dynamic/external_link.html": {
    "href": "tutorial/mapping/dynamic/external_link.html",
    "title": "External link | XData website",
    "keywords": "External link External link can be dynamically defined using expression of type Expression as part of call Map method of IRepositoryStructure interface. Expression<IExternalLinkDefinition> can be obtained using multiple overloads of ExternalLink method of ExternalLinkDefinitionAdapter<T> : IExternalLinkDefinition ExternalLink<TChild>(params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkDefinition ExternalLink<TChild>(Expression<Func<IRepositoryStructureAdapter<TChild>, object>> property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkDefinition ExternalLink<TChild>(string property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkAdapter<T, TChild> used to specify properties of external link: Filter - used to specify external link runtime filter, FilterCombination - used to set filter group of filter, DirectLink - used to set direct link flag, see tree master-slave specifics for details, MasterRefresh - used to set refresh master repository current row data on submit slave changes flag (usefull when master has calculated properties over slave repository data), Nullable - filter null processing behaviour , Operation - link filter operation (see Filters ), PrimaryFilter - used to specify external link is optional filter, Property - link property in master repository (used when property is hidden peroperty ), Property<TChildLink> - link property in master repository (used when property is actual property), TreeFilter - used to set external link filter's tree filter flag // when external link used hidden property ..., x => x.ExternalLink<InvoiceSpec>(\"DocId\")) // when external link used readonly or regular property ..., x => x.ExternalLink<InvoiceSpec>(z => z.DocId))"
  },
  "tutorial/mapping/dynamic/dynamic.html": {
    "href": "tutorial/mapping/dynamic/dynamic.html",
    "title": "Dynamic mapping | XData website",
    "keywords": "XData tutorial Mapping common rules Dynamic mapping Tip Before read this topic be sure to already readed Glosary and Common mapping rules containg base infomation to better understanding this. Dynamic mapping is defined using specific LINQ style expression as private static field of mapped class and it properties. Dynamic mapping sample Dynamic mapping example for same data object as represented in static mapping description: public partial class Invoice: IDataObject { public static CustomLogic<Invoice> TestCustomLogic; private static Expression<CustomMapping<Invoice>> _mapping = ( () => XDataMapping.CustomMapping<Invoice>() .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_DOC_STATE\", \"DS\", \"D\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_STATE\", \"S\", x => x.Link(\"DS\", \"doc_state_id\")) .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\").SetOperation(FilterOperation.In)) .DataTable(\"T_CATALOGUE\", \"U\", x => x.Link(\"DC\", \"catalogue_id\")) .DataTable(\"T_DOC_NUMBER\", \"N\", \"D\", x => x.Link(\"D\", \"doc_id\")) .DataTable(\"T_DOC_CUST\", \"CF\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"FROM\")) .DataTable(\"T_CUSTOMER\", \"F\", x => x.Link(\"CF\", \"customer_id\")) .DataTable(\"T_DOC_CUST\", \"CT\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\")) .DataTable(\"T_CUSTOMER\", \"T\", x => x.Link(\"CT\", \"customer_id\")) .DataTable(\"T_DOC_SCAN\", \"SC\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .DataTable(\"T_DOC_SOURCE\", \"SR\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .DataTable(\"T_DOC_DELIVERY\", \"DD\", \"D\", x => x.Link(\"D\", \"doc_id\").SetOperation(FilterOperation.OuterJoin)) .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", null, DataStructureFlag.Grouping, new Variable[0]) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<long?>(\"H\", string.Empty, z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(\"DocId\").SetOperation(FilterOperation.OuterJoin)) .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) .Column(\"CatalogueId\", x => x.Field<long?>(\"U\", string.Empty)) .ReadOnlyProperty(x => x.DocStateCode, x => x.Field<string>(\"S\", \"code\")) .ReadOnlyProperty(x => x.Generation, x => x.Field<long>(\"D\", string.Empty, z => z.ConcurrencyToken(), z => z.Default(DefaultType.AutoIncrement))) .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, true))) .ReadOnlyProperty(x => x.Author, x => x.Field<string>(\"D\", string.Empty, z => z.Default(DefaultType.UserName, true))) .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\")) .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode)), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty<Catalogue>(y => y.Name)), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty<Customer>(y => y.Name)), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty<Customer>(y => y.Name)), DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink<InvoiceSpec>(\"DocId\")) .SetBaseTable(\"D\").SetLogicAssembly(\"XDataObjectTest\") ); } ... public partial class Invoice: IDataObject { public string DocStateCode { get { return this.GetProperty(x => x.DocStateCode); } } public Link<string, DocState> DocState { get; set; } public Link<string, Catalogue> DocCatalog { get; set; } public string DocNumb { get; set; } public DateTime? DocDate { get; set; } public long Generation { get { return this.GetProperty(x => x.Generation); } } public DateTime Changed { get { return this.GetProperty(x => x.Changed); } } public string Author { get { return this.GetProperty(x => x.Author); } } public decimal? DocAmount { get { return this.GetProperty(x => x.DocAmount); } } public DateTime? DocLastChange { get { return this.GetProperty(x => x.DocLastChange); } } public Lob Scan { get; set; } public Xml Source { get; set; } public Link<string, Customer> CustomerFrom { get; set; } public Link<string, Customer> CustomerTo { get; set; } public DeliveryTypeEnum DeliveryType { get; set; } public DateTime? DeliveryDate { get; set; } public IRepository<InvoiceSpec> Spec { get { return this.GetRepository().GetChild<InvoiceSpec>(); } } } Dynamic mapping provide more representable mechanics to define mapping because of no attribute parameters limitation. Subqueries and inner views can be described in place using dynamic query mechanics. SQL expressions can be described in LINQ style in place. This abilities enreach representability of dynamic mapping. Dynamic mapping alowes split data object to partial class definitions with basic class definition and mapping. Dynamic mapping is described as private static field of type Expression<CustomMapping<T>> where T - data object type. The value of this property is assigned by call of XDataMapping.CustomMapping<T> method returning IRepositoryStructure<T> . Interface IRepositoryStructure<T> has a number of methods to describe all of mapping entities analog to static mapping attributes. Mapping parameters To set parameters of dynamically mapped classes used IRepositoryDescription<T> interface methods: SetBaseTable - to set base table , (optional, by default used virtual table with the empty alias) SetContext - database context (optional, by default context will by assigned in runtime) SetFlags - data source flags (optional, by default None ) SetLogicAssembly - to set data processing logic class assembly FullName for this repository (see Using three tier architecture и IDataLogic<T> ) To get reference to IRepositoryDescription<T> interface is required to define maping of repository read/write properties using IRepositoryStructure<T> interface method Map Example: ... .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode)), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty(y => y.Name)), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty(y => y.Name)), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty(y => y.Name)), DeliveryType = x.Field(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink(\"DocId\")) .SetBaseTable(\"D\").SetLogicAssembly(\"XDataObjectTest\") ... More detailed repository properties map description see below . All tables of data object mapping decribed by IRepositoryStructure<T>. DataTable method. Tables included into updatable tables hierarchy excluding base table must be defined using special overload alowes to set parent table alias. ... .DataTable(\"T_DOC\", \"D\", x => x.DictFilter(\"T_DOC_TYPE\", \"doc_type_id\", \"code\", \"INVOICE\")) .DataTable(\"T_DOC_DOC_STATE\", \"DS\", \"D\", x => x.Link(\"D\", \"doc_id\")) ... Same way is possible to define mapping to view , but all properties must to mapped as read only properties or hidden fields . Important Filters and links between tables is defined using filters parameter of IRepositoryStructure<T>. DataTable method or it's overload . Detailed filter definition described below . Subqueries Subqueries can be used for a: filtration using [not] exists() , [not] in (select) ( see below ) inner view subquery expression as single property source ( see below ) Subquery deep level not reglamented. In dynamic mapping of data object subqueries can be defined using one of Subquery or InnerView methods overload of IRepositoryStructure<T> interface to define subqueries or inner views respectively. While using generic overloads of Subquery or InnerView , parameter IQueryDescription<TDobj> sub can be used with in place dynamic query notation. Non generic overloads of Subquery or InnerView must provide ISqlType or IDataObject marked class type as parameter Type dobjType to reuse of existing mapping. This class can be mapped using static or dynamic style, no matter. ... .Subquery(\"A\", typeof(DocSpecAmounts), \"Amount\", DataGrouping.Sum, x => x.SubqueryLink(\"DocId\")) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) .InnerView(\"H\", XDataMapping.GetStructure(\"H\", null, DataStructureFlag.Grouping, new Variable[0]) .DataTable(\"T_DOC_HISTORY\", \"H\") .Select(x => new { DocId = x.Field<long?>(\"H\", string.Empty, z => z.Group(DataGrouping.None)), HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) }), x => x.SubqueryLink(\"DocId\").SetOperation(FilterOperation.OuterJoin)) .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ... Filters Filters can be defined as: Constant filters SQL expression filters Dictionary filters Range filters Subquery filters Inner links Each of them described by corresponding LINQ expression define their parameters depending on the context of their use and the type of the filter itself (see below). Filter descriptions are provided to filters paramter value of DataTable , Subquery , InnerView and Procedure methods of IRepositoryStructure<T> interface, or WithRecursive method of IQueryWithAdapter<TRoot> . Each of expression has described one filter. Type of filter is declared by one of fabric method of interface inside lambda expression with one of followed filter adapter: IInnerFilterAdapter - filter adapter to define filters and links inside plain query (see DataTable , Procedure ), ISubqueryFilterAdapter , ISubqueryFilterAdapter<TDObj> and ISubqueryFilterAdapter<T,TDObj> - used in various overloads of subquery definition (see Subquery , InnerView and WithRecursive ) to declare links with subqueries. Specific parameters for each type of filter is described in filter fabric methods described below in specific topics. And some optional modificators can be defined using continue LINQ calls with extension methods: SetOperation - to set filter operation AsPrimary - to set optional filter flag SetCombination - to set filter combination Each of filter type is defined by own special method of corresponding filter adapter. Filter operation is defined by enum FilterOperation : Equal - equal NotEqual - not equal LessThan - less then GreaterThan - greater then LessThanOrEqual - less or equal GreaterThanOrEqual - greater or equal In - field value in range or subquery NotIn - field value is not in range or subquery Exists - subquery returns one or more rows NotExists - subquery returns no rows Like - field value correlated with find expression NotLike - field value not correlated with find expression OuterJoin - left outer join link between query sources (tables or inner views) Contains - field value correlated with fulltext search NotContains - field value not correlated with fulltext search Filter group Filter group of filter can be assigned to it declaration by SetCombination extension of IFilterDescription interface. ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ... Constant filters Constant filters alowes to restict selection of data by some constant value. This filter defined by one of ConstFilter method overloads of IInnerFilterAdapter interface. Constant type list restricted by enum FilterConstantType : Const - constant with value setted by ConstantValue . Variable - value of variable with name setted by ConstantValue . CurrentDate - current date. CurrentDateTime - current date and time. CurrentDateTimeUTC - current date and time (UTC). ... , x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed) .SetCombination(\"root\") ... SQL expression filters To define filter over SQL expression used one of ExprFilter method overloads of IInnerFilterAdapter interface. There are two overloads of ExprFilter method: IFilterDescription ExprFilter(string field, string exprText) - to use with plain SQL expressions or subquery alias IFilterDescription ExprFilter<T>(string field, Expression<Func<IQueryStructureAdapter, T>> expression) - to use with SQL expressions as LINQ style expressions Depending style of SQL expression description that overloads can be used with: subquery alias, , ExprFilter(\"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */) .SetOperation(FilterOperation.In) dynamic definition of SQL expression, , ExprFilter(\"discount\" /* field name */, /* expression: SQL expression LINQ style definition */ x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)), Operation: FilterOperation.NotEqual /* filter operation */)] plain SQL expression text. , ExprFilter(\"discount\" /* field name */, /* ExpressionText: plain SQL expression */ \"case P.is_vip when 1 then 10 else 0 end\") .SetOperation(FilterOperation.NotEqual) Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Range filters To define filter checks field value over array of values used RangeFilter methods of IInnerFilterAdapter interface. ... , RangeFilter(\"discount\", new[] {0,5,10}) .SetOperation(FilterOperation.In) ... Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by one of DictFilter overloads of IInnerFilterAdapter interface. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. ... , x => x.DictFilter(\"T_DOC_CUST_TYPE\", \"doc_cust_type_id\", \"code\", \"TO\") ... Inner links To define links between data sources inside query used Link overloads of IInnerFilterAdapter interface. ... , x => x.Link(\"DS\", \"doc_state_id\") ... Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilter method of IInnerFilterAdapter . ... .DataTable(\"T_DOC_CATALOGUE\", \"DC\", \"D\", x => x.Link(\"D\", \"doc_id\"), x => x.SubqueryFilter(\"catalogue_id\", \"UT\") .SetOperation(FilterOperation.In)) .Subquery<CatalogueTree>(\"UT\", x => x.CatalogueId, DataGrouping.None) ... Tip Subquery filters can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used one of SubqueryLink method overload of ISubqueryFilterAdapter , ISubqueryFilterAdapter<TDObj> or ISubqueryFilterAdapter<T,TDObj> depending by outer method signature and subquery declaration specific. ... .InnerView<DocBySpecType>(\"ST\", x => x.SubqueryLink(\"DocId\")) ... Tip Subquery links can be used to define optional filters . To specify role in optional filter chain need to call extension method AsPrimary as continuation of Link method call. Properties Properties dynamic mapping is performed as method call of IRepositoryStructure<T> interface: Column method call for each of hidden properties mapping ReadOnlyProperty method call for each of readonly properties mapping Map method call for declare all of read/write properties mapping ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, true))) ... Parameter mapper of Map method alowes to define mapping rule for multiple read/write properties using lambda expression with IQueryStructureAdapter interface as parameter. ... .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode)), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty<Catalogue>(y => y.Name)), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty<Customer>(y => y.Name)), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty<Customer>(y => y.Name)), DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink<InvoiceSpec>(\"DocId\")) ... Interfaces IRepositoryStructureAdapter and IQueryStructureAdapter as successor has some overloads of methods to define mapping: Field<TVal> - for mapping property to data source field Expr<TVal> - for mapping property to SQL expression (see detailed description below ) Ref<TVal> - for mapping property to inner view property (see detailed description below ) IRepositoryStructureAdapter<T> also has a special methods to map Lob , Xml and Link<TVal,TSource> Lob - for mapping Lob property Xml - for mapping Xml property Link<TVal,TSource> - for mapping link property (see detailed description below ) These methods of single property mapping has parameter attributes to define additional mapping properties using interface IPropertyMappingAdapter : Key - primary unique key property flag, possible to mark multiple properties or hidden properties as key properties Hidden - flag, the field should not be included in the SELECT expression, but can be used in filters and/or links between data sources (tables, subqueries...) Group - property grouping parameters (see detailed description below ) And using interface IRepositoryPropertyMappingAdapter : ConcurrencyToken - concurrency token flag for property Default - default value assign rules for property OuterFlag - outer join mandatory flag, values of properties marked this flag is analyzed during making decision of operations over tables in optional references Important Required to set at least one property of mapped class as primary unique key. Subqueries and inner views can has no key properties. Interface IQueryStructureAdapter<T> is used in dynamic queries only. Interfaces IRepositoryStructureAdapter and IRepositoryStructureAdapter<T> is used in dynamic repository mapping only. Interface IPropertyMappingAdapter is used as in dynamic queries as in dynamic repository mapping. Interface IRepositoryPropertyMappingAdapter is inherited from [IPropertyMappingAdapter] and used in dynamic repository mapping only. SQL expression property Readonly property can be mapped to SQL expression. Dynamic mapping of SQL expression is defined by one of IRepositoryStructureAdapter interface Expr method overload: Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) - used to define sql expression DataExpressionType.SubQuery or DataExpressionType.PlainSql When first overload used, SQL expression is defined by expr parameter value as lambda function with IQueryStructureAdapter interface extension methods inside: Case<T, TResult>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, TResult>> elseValue, params TaggedExpression<T, TResult>[] switchValues) - case when ... then ... else ... end SQL construction DateDiff<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, DateTime>> finalDate, Expression<Func<IQueryStructureAdapter, DateTime>> startDate, DateDiffKind kind) - date difference Exists(this IQueryStructureAdapter adapter, string subQueryAlias) - exists(select ...) SQL construction HasFlag<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, T>> flagValue, Expression<Func<IQueryStructureAdapter, T>> trueValue, Expression<Func<IQueryStructureAdapter, T>> falseValue) - bitwise mask checking for value SqlExpr<TResult>(this IQueryStructureAdapter adapter, string format, params Expression<Func<IQueryStructureAdapter, TResult>>[] expressions) - mixing plain SQL expressions with LINQ style defined expression subparts, parameter format is the string.Format mask SqlFn<TResult>(this IQueryStructureAdapter adapter, string name, params Expression<Func<IQueryStructureAdapter, object>>[] parameters) - SQL function call expression SqlParam<TResult>(this IQueryStructureAdapter adapter, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) - SQL function parameter value expression Mapping parameters of SQL expressions is defined by IRepositoryExpressionMappingAdapter interface methods: NativeSqlType(string nativeSqlType) - set native SQL type name of expression result, used when expression result type has specific SQL type Size(int size) - set number or varchar length of SQL expression result type Size(int size, int scale) - set length and scale for floating point SQL data types subquery, ... .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) ... LINQ expression, ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, y => y.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)), DbType.Decimal, z => z.Size(17, 5))) ... plain text SQL expression. ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, DataExpressionType.PlainSql, \"case P.is_vip when 1 then 10 else 0 end\", DbType.Decimal, z => z.Size(17, 5))) ... Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Property default value To set default value of property with dynamic mapping, use one of IRepositoryPropertyMappingAdapter interface Default method overload: Default(DefaultType source) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert only Default(DefaultType source, bool alwaysUseDefault) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert or update Default(DefaultType source, string value) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert only Default(DefaultType source, string value, bool alwaysUseDefault) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert or update ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, true))) ... Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. Use one of IPropertyMappingAdapter interface Group method overload: Group(int groupOrder) - when property mapped to field query grouped by with N-th order Group(DataGrouping grouping) - when property mapped to aggregation function over field ... HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) ... Hidden properties Hidden properties dynamically defined using Column method call of IRepositoryStructure<T> interface. Hidden property can be mapped to: data source field - Field<TVal> SQL expression (see detailed description above ) - Expr<TVal> inner view property (see detailed description below ) - Ref<TVal> ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ... Inner view reference To map property to field from inner view used one of IRepositoryStructureAdapter interface Ref method overload: Ref<TValue>(string sourceAlias, string property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) - used when referenced property is a hidden property Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\")) Links To dynamically define link property used one of IRepositoryStructureAdapter<T> interface Link method overload: Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) - used when source property is correlated with property name with default name mapping rule ( hungarian_notation in DB and CamelCaseNotation property name in code) Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, string fieldName, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) Parameter attributes of method Link value used to define link properties pairs with one of ILinkPropertyMappingAdapter<T> interface LinkProperties method overload call: LinkProperty() - used property of source object to assiciate with link property defined by Link method LinkProperty<TSource>(Expression<Func<TSource, object>> source) - used source as source property and equal named property from target object LinkProperty<TSource>(Expression<Func<TSource, object>> source, Expression<Func<T, object>> property) - specifing both properties ... DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode)), ... Tree To dynamically map tree organized data structure used special method With of RepositoryStructure<T> interface to describe tree root query and tree childs. Both of them use subquery mappings (see example below) to set subquery structure for tree query construction. Important Data source flags of tree organized data sources must contain DataStructureFlag.ReadOnly and DataStructureFlag.Tree! private static Expression<CustomMapping<CatalogueTree>> _unused = ( () => XDataMapping.CustomMapping<CatalogueTree>() .With(\"CAT\", XDataMapping.GetStructure(\"R\", null, DataStructureFlag.ReadOnly) .DataTable(\"T_CATALOGUE\", \"R\", x => x.Combination(\"root\", Combination.Or), x => x.ConstFilter(\"FilterByCathalogue\", \"catalogue_id\", FilterConstantType.Const, null, FilterNullable.NullsNotAllowed).SetCombination(\"root\"), x => x.ConstFilter(\"FilterByRoot\", \"parent_id\", FilterConstantType.Const, null, FilterNullable.NullsCompared) .SetCombination(\"root\")) .Select(x => new { CatalogueId = x.Field<long>(\"R\", string.Empty, z => z.Key()), Code = x.Field<string>(\"R\", string.Empty), Name = x.Field<string>(\"R\", string.Empty), ParentId = x.Field<long?>(\"R\", string.Empty), }), x => x.Properties(z => z.CatalogueId, z => z.Code, z => z.Name, z => z.ParentId), x => x.WithRecursive(\"S\", XDataMapping .GetStructure(\"S\", null, DataStructureFlag.ReadOnly) .DataTable(\"T_CATALOGUE\", \"S\") .Select(y => new { CatalogueId = y.Field<long>(\"S\", string.Empty, z => z.Key()), Code = y.Field<string>(\"S\", string.Empty), Name = y.Field<string>(\"S\", string.Empty), ParentId = y.Field<long?>(\"S\", string.Empty) }), z => z.SubqueryLink(y => y.ParentId, y => y.CatalogueId))) .ReadOnlyProperty(x => x.CatalogueId, x => x.Field<long>(\"CAT\", string.Empty, z => z.Key())) .ReadOnlyProperty(x => x.Code, x => x.Field<string>(\"CAT\", string.Empty)) .ReadOnlyProperty(x => x.Name, x => x.Field<string>(\"CAT\", string.Empty)) .ReadOnlyProperty(x => x.ParentId, x => x.Field<long?>(\"CAT\", string.Empty)) .Map(x => new CatalogueTree()) .SetFlags(DataStructureFlag.ReadOnly | DataStructureFlag.Tree) ); External link External link can be dynamically defined using expression of type Expression as part of call Map method of IRepositoryStructure interface. Expression<IExternalLinkDefinition> can be obtained using multiple overloads of ExternalLink method of ExternalLinkDefinitionAdapter<T> : IExternalLinkDefinition ExternalLink<TChild>(params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkDefinition ExternalLink<TChild>(Expression<Func<IRepositoryStructureAdapter<TChild>, object>> property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkDefinition ExternalLink<TChild>(string property, params Expression<Func<IExternalLinkAdapter<T, TChild>, IExternalLinkFlag>>[] linkFlags) IExternalLinkAdapter<T, TChild> used to specify properties of external link: Filter - used to specify external link runtime filter, FilterCombination - used to set filter group of filter, DirectLink - used to set direct link flag, see tree master-slave specifics for details, MasterRefresh - used to set refresh master repository current row data on submit slave changes flag (usefull when master has calculated properties over slave repository data), Nullable - filter null processing behaviour , Operation - link filter operation (see Filters ), PrimaryFilter - used to specify external link is optional filter, Property - link property in master repository (used when property is hidden peroperty ), Property<TChildLink> - link property in master repository (used when property is actual property), TreeFilter - used to set external link filter's tree filter flag // when external link used hidden property ..., x => x.ExternalLink<InvoiceSpec>(\"DocId\")) // when external link used readonly or regular property ..., x => x.ExternalLink<InvoiceSpec>(z => z.DocId)) SQL procedures & functions Common information about mapping to SQL procedures and functions described in common mapping rules description and here we just reprensent dynamic mapping rules for various procedure types. SQL procedure as query To define procedure as data source of mapping used Procedure method call of IRepositoryStructure<T> interface. SQL procedure parameter To define SQL procedure parameter used Parameter method call of IRepositoryStructure<T> interface. SQL procedure resultset To describe resultset of SQL procedure used Return method call of IRepositoryStructure<T> interface. SQL procedure resultset as query sample var res = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Return(\"T\", \"Result\", 1, convertor) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); foreach (var classifier in res) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with multiple resultsets sample var res2 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure2\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"param3\", DbType.Int32) .Parameter<string>(\"T\", 4, \"param4\", DbType.String) .Return(\"T\", \"Result1\", 1, convertor) .Return(\"T\", \"Result2\", 2, convertor) .Call<Classifier>(DataScope.Layer, \"Result1\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\"), \"param3\".SetValue(\"2\"), \"param4\".SetValue(\"Some\")); foreach (var classifier in res2) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); foreach (var classifier in res2.GetResultSet<Classifier>(\"Result2\")) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with out parameter sample var res3 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure3\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<string>(\"T\", 3, \"param3\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.Output)) .Call(DataScope.Layer, \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); Console.WriteLine(res3.GetParameter<string>(\"param3\")); SQL procedure with out parameter and resultset sample var res4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure4\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); Console.WriteLine(res4.GetParameter<int>(\"result\")); foreach (var classifier in res4) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with return value sample var res5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure5\", ProcedureType.Procedure) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Parameter<int>(\"T\", 3, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); Console.WriteLine(res5.GetParameter<int>(\"result\")); SQL procedure with return value and resultset sample var res6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestProcedure6\", ProcedureType.Procedure) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Return(\"T\", \"Result\", 1, x => new Classifier { Id = x.Field<int>(z => z.Key()), Name = x.Field<string>() }) .Call<Classifier>(DataScope.Layer, \"Result\", \"param1\".SetValue(param)); foreach (var classifier in res6) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL procedure with simple array parameter sample var arr = new[] { 1, 2, 3 }.ToXml(); var f6 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction6\", ProcedureType.Function) .Parameter<int[]>(\"T\", 1, \"p_arr\", DbType.Int32, z => z.Array()) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"p_arr\".SetValue(arr)); Console.WriteLine(f6.GetParameter<int>(\"result\")); SQL procedure with UDT parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var f5 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"TestFunction5\", ProcedureType.Function) .Parameter<Classifier>(\"T\", 1, \"p_obj\", DbType.Object, z => z.UdtDataType(\"classifier_rec\")) .Parameter<string>(\"T\", 3, \"result\", DbType.String, z => z.Size(20), z => z.Direction(ParameterDirection.ReturnValue), z => z.NativeSqlType(\"VARCHAR\")) .Call(DataScope.Layer, \"p_obj\".SetValue( new Classifier { Id = 1, Name = \"Test\" }.ToXml())); Console.WriteLine(f5.GetParameter<string>(\"result\")); SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var param = new[] { new Classifier { Id = 1, Name = \"Test\" }, new Classifier { Id = 2, Name = \"Some\" } }.ToXml(); var f4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction4\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"param1\".SetValue(param)); Console.WriteLine(f4.GetParameter<int>(\"result\")); SQL table valued function as query sample var f3 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction3\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(\"dbo.Classifier\")) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetValue(param)); foreach (var classifier in f3) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name); SQL scalar function as property data source sample var f1 = XDataMapping.GetStructure(context: DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction\", ProcedureType.Function) .Parameter<int>(\"T\", 1, \"param1\", DbType.Int32) .Parameter<string>(\"T\", 2, \"param2\", DbType.String) .Select(x => new Classifier { Id = x.Field<int>(\"T\", \"Id\", z => z.Key()), Name = x.Field<string>(\"T\", \"Name\") }) .AsQuery(DataScope.Layer, \"param1\".SetValue(\"1\"), \"param2\".SetValue(\"Test\")); foreach (var classifier in f1) Console.WriteLine(\"{0} - \\\"{1}\\\"\", classifier.Id, classifier.Name);"
  },
  "tutorial/mapping/xml_type.html": {
    "href": "tutorial/mapping/xml_type.html",
    "title": "Xml properties | XData website",
    "keywords": "Xml properties To work with Xml using lazy coupling XData represent property type Xml . This type has followed... properties: XDocument Document - get or set Xml value (readonly) bool Assigned - check Xml field for NULL value methods: Extract (string path, params KeyValuePair<string, string>[] namespaces) - returning result of XPath expression path using namespaces (pair: namespace - URL) (extension) Modify (Action action) - helper method to change Xml value operations: += - \"syntax sugar\", _data.SomeXml += _someVariable identical with _data.SomeXml.Document = _someVariable. Example: newInvoice.Source += new XDocument(new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", newInvoice.DocStateCode))); ... dataScope.GetRepository<Invoice>(Owner, context: Context) .First(x => x.Source.Extract(\"(/invoice/@state)[1]\") == \"ACTIVE\").DocNumb ... invoice.Source.Modify(x => x = new XDocument());"
  },
  "tutorial/mapping/tree.html": {
    "href": "tutorial/mapping/tree.html",
    "title": "Tree | XData website",
    "keywords": "Tree XData can use CTE (common table expression) as part of repository data source definition. Supported as plain (WITH), as recursive (WITH RECURSIVE) expressions. CTE is defined in mapping diferently for static and dynamic mapping paradigm, but it can be used with similar way: defined one or more tables with unique aliases and name equals CTE name. Recursive CTE can be used as independent data source too. In this case CTE name must to be declared as base table of repository."
  },
  "tutorial/mapping/binary_type.html": {
    "href": "tutorial/mapping/binary_type.html",
    "title": "Bynary properties | XData website",
    "keywords": "Bynary properties To work with large binary object (BLOB) using lazy coupling XData represent property type Lob . This type has followed... properties: byte[] Value - binary object value (readonly) bool Assigned - check object has value (including empty value) or NULL methods: GetSize () - returns size of binary object (extension) Modify(Action<byte[]> action) - helper method to simplify changing of binary object value operation: += - \"syntax sugar\", _data.SomeBlob += _someVariable identic with _data.SomeBlob.Value = _someVariable. Examples: newInvoice.Scan += _image; ... if(newInvoice.Scan.Assigned) _size = newInvoice.Scan.GetSize(); ... invoice.Scan.Modify(x => x = new byte[0]);"
  },
  "tutorial/versions.html": {
    "href": "tutorial/versions.html",
    "title": "Versions of XData | XData website",
    "keywords": "Versions of XData XData delivered as two specific versions: .Net 4.0 package to use with full featured Windows .Net framework version 4.0 or later, and cross platformed .Net Standard 2.0 package. The versions has similar API but some diferent implementations of certain features: 1) Different initialization of XData: Net 4.0: using (var dataEngine = XDataManager.AddXData(x => x.UseConfiguration(ConfigurationManager .OpenExeConfiguration(ConfigurationUserLevel.None)))) { using (var dataScope = dataEngine.NewDataScope()) { foreach(var data in dataScope.GetRepository<SomeObject>()) Console.WriteLine(string.Format(\"{0}, {1}\", data.SomeId, data.Name)); } } NetStandard 2.0: //Set configuration file var builder = new ConfigurationBuilder(); builder.AddXmlFile(\"MyConsoleApp.config\"); var configFile = builder.Build(); //Set services using(var serviceProvider = new ServiceCollection() .AddLogging() // Localization only for ASP.NET Core .AddSingleton(typeof(IStringLocalizerFactory), x => null) .AddSingleton(typeof(IConfigurationRoot), x => configFile) .AddXData() .BuildServiceProvider()) { //Configure logging serviceProvider.GetRequiredService<ILoggerFactory>() .AddConsole(LogLevel.Warning).AddDebug(); var dataEngine = serviceProvider.GetRequiredService<IDataEngine>(); using (var dataScope = dataEngine.NewDataScope()) { foreach(var data in dataScope.GetRepository<SomeObject>()) Console.WriteLine($\"{data.SomeId}, {data.Name}\"); } } 2) Logging in .Net 4.0 version is realized with log plugins implements ILogWriter interface. Logging in .Net Standard 2.0 version is realized using Microsoft.Extensions.Logging service. 3) Configuration of .Net 4.0 version is limited by using app.config/web.config files. Configuration in .Net Standard 2.0 version is realized using Microsoft.Extensions.Configuration service. Configuration structure for both versions described here . 4) Localization of .Net 4.0 version use sattelite localization assemblies. Localization in .Net Standard 2.0 version is realized using Microsoft.Extensions.Localization service. Localization procedures for both versions described here . 5) Some database adapters not implemented for .Net Standard 2.0 version because no applicable implementation of .Net data providers for .Net Standard 2.0 found now. We are hope they will be implemented in short time future, and XData can be use that databases too. 6) Three tier architecture is not implemented for .Net Standard 2.0 version for now. Some limitations of current .Net Core realization makes not possible to implement this feature on same technologies now. And no specific requests to implement it quick as possible. 7) Three tier client plugin required full .Net 4.0 framework only (base functionality is available on .Net 4.0 Client version). Life time limited cache (for IDataScope and WorkSet ) is required full .Net 4.0 framework. Same caching functionality is implemented in .Net Standard 2.0 version."
  },
  "tutorial/using.html": {
    "href": "tutorial/using.html",
    "title": "Basic operations with data | XData website",
    "keywords": "Basic operations with data Data engine, data scope and repository To start using XData You need get IDataEngine interface reference (see examples below). It will be used to create new data scopes using NewDataScope method. XData use data scope isolation when same typed repositories used by multiple logic at the same time. Data scope is represented by IDataScope interface. Data scope identified by Layer (GUID). Important IDataScope is IDisposable . When disposing IDataScope all repositories, opened at this scope are disposed and XData free all memory used by this data scope. To get data object instances of type T it's recuired to get typed repository interface IRepository<T> using method GetRepository<T> of IDataScope . Tip IRepository is also IDisposable . When disposing IRepository it's data cache cleared. You can dispose repositories manualy, but if not, disposing data scope will free that repository resources. Recommended to dispose large data repositories manualy to reduce memory utilized by application. While repository is not disposed inside data scope it can be requested many times without recreating and database access and GetRepository<T> method of same IDataScope returns the same instance of repository. Net 4.0: using (var dataEngine = XDataManager.AddXData(x => x.UseConfiguration(ConfigurationManager .OpenExeConfiguration(ConfigurationUserLevel.None)))) { using (var dataScope = dataEngine.NewDataScope()) { foreach(var data in dataScope.GetRepository<SomeObject>()) Console.WriteLine(string.Format(\"{0}, {1}\", data.SomeId, data.Name)); } } NetStandard 2.0: //Set configuration file var builder = new ConfigurationBuilder(); builder.AddXmlFile(\"MyConsoleApp.config\"); var configFile = builder.Build(); //Set services using(var serviceProvider = new ServiceCollection() .AddLogging() // Localization only for ASP.NET Core .AddSingleton(typeof(IStringLocalizerFactory), x => null) .AddSingleton(typeof(IConfigurationRoot), x => configFile) .AddXData() .BuildServiceProvider()) { //Configure logging serviceProvider.GetRequiredService<ILoggerFactory>() .AddConsole(LogLevel.Warning).AddDebug(); var dataEngine = serviceProvider.GetRequiredService<IDataEngine>(); using (var dataScope = dataEngine.NewDataScope()) { foreach(var data in dataScope.GetRepository<SomeObject>()) Console.WriteLine($\"{data.SomeId}, {data.Name}\"); } } Data object properties access Read/write properties using has no specifics: var invoice = dataScope.GetRepository<Invoice>().First(); invoice.DocNumb = \"12345\"; Except Link , Lob and Xml discussed below . Changing data It's possible to change data object properties with assignment operator (except Link , Lob and Xml discussed below ): var newInvoice = dataScope.GetRepository<Invoice>().New(); newInvoice.DocNumb = String.Format(\"Inv-{0}\", number.ToString(CultureInfo.InvariantCulture).PadLeft(6, '0')); newInvoice.Submit(); To edit data of new object You can also use New method overload with initialization logic wrapper: return dataScope.GetRepository<Invoice>().New( //property DocNumb is a sting assigned as usual z => z.DocNumb = String.Format(\"Inv-{0}\", number.ToString(CultureInfo.InvariantCulture).PadLeft(6, '0')), //property DocCatalog - link to data object typed Catalog //assignment using += operator is the same as DocCatalog.Source = ... z => z.DocCatalog += dataScope.GetDictionaryValue<Catalog>(x => x.Code == catalogCode), //property DeliveryType is enum DeliveryTypeEnum z => z.DeliveryType = DeliveryTypeEnum.PickUp, //property DeliveryDate is DateTime z => z.DeliveryDate = DateTime.Today.AddDays(1), //property Source is Xml, assignment using += operator is the same as //Source.Document = ... z => z.Source += new XDocument( new XElement(\"invoice\", new XAttribute(\"number\", number), new XAttribute(\"state\", z.DocStateCode))), //property Source - is a large binary object (Lob) and assignment using += operator //is the same as Scan.Value = ... z => z.Scan += Encoding.UTF8.GetBytes(z.Source.Document.ToString ).Submit(); Or Modify method extension to change object data: var invoice = dataScope.GetRepository<Invoice>() .SingleOrDefault(x => x.DocNumb.Like($\"%0{number}\") && x.DocStateCode == oldStateCode); if (invoice == null) return true; return invoice.Modify( z => z.DocState += dataScope.GetDictionaryValue<DocState>(x => x.Code == newStateCode), z => z.Source.Modify(doc => doc.Element(\"invoice\").Attribute(\"state\").Value = newStateCode)) .Submit(); Delete XData has ability to mark data object as deleted. Before submit changes this flag can be undone. Marking and rejecting the mark can be done with extension method of interface IDataObject.SetDeleted invoice.SetDeleted(true); //mark data object for delete ... invoice.SetDeleted(false); //undone delete mark Submit changes To submit changes can be used extension method of interface IDataObject Submit newInvoice.Submit(); To submit changes apllied to multiple data objects of the same type can be used IRepository<T>.Submit method accepted ( IEnumerable<T> ) as one of parameters. When object is not changed this method will skip it while updating database."
  },
  "tutorial/unit_of_work.html": {
    "href": "tutorial/unit_of_work.html",
    "title": "Processing of related objects (Unit of Work) | XData website",
    "keywords": "Processing of related objects (Unit of Work) XData has supported processing data object mapped to number of tricky related tables. Transactional support is required to apply changes over various but related data objects. For example we have a business object having one ore more related objects collections. Every one of thouse can have related collections of other objects and so on. And some business logic works with this related conglomerate as single complicated entity required submitted into DB using one transaction. XData is support using transaction , but some non terminal data objects can be inserted inside the same transaction and writing code that can support this case is a non trivial thing. Common but elegant way to make it simple and clear is a realizing \"Unit of Work\" pattern. Most of ORM has own realization of this pattern, but XData using this mechanic on right level of business logic - to operate with related conglomerate of business objects. Using of Unit of Work pattern with XData is pure declarative: no custom business logic classes is needed to use it. Lets describe this by example: Initialization of new UoW container for new root object is described using static Add method of the Work class: var rep = dataScope.GetRepository<Model.Patient>(Instance); var instance = rep.New(); /* Using static class Work we init UoW container with new root object and describe collections of related objects. Because of new root object we use Work.Empty method to initialize that collections. */ using (var work = Work.Add(instance, Work.Empty<Model.Patient, Model.PatientDiagnosis>(x => x.PatientDiagnosisList), Work.Empty<Model.Patient, Model.PatientOper>(x => x.PatientOperList))) { if (new PatientWindow { DataContext = new Patient(work), Owner = window } .ShowDialog() == true) work.Submit(); // submiting UoW container changes } Initialization of UoW container for existing object (update): /* Using static class Work we init UoW container over existed root object and decribe collections of related objects. Because of root object is exists collections will be filled from DB using Work.Fill method. */ using (var work = Work.Add(patient, Work.Fill<Model.Patient, Model.PatientDiagnosis>(x => x.PatientDiagnosisList), Work.Fill<Model.Patient, Model.PatientOper>(x => x.PatientOperList))) { if (new PatientWindow { DataContext = new Patient(work), Owner = window } .ShowDialog() != true) return; work.Submit(); // submiting UoW container changes } Initialization of single related object inside of UoW container (one-to-one relationship) is described by Get method, that analog to Empty and Fill methods we use before. UoW container can be initialized with a not only single root object, but using collection of root objects with overloaded Add method that accept an collection ( ICollection ) of root objects. To select a single object form UoW container use Get method. This method can accept predicate as parameter to specify unique condition of object selection. After acquiring a single object we can change it (or delete it as explained in followed examle): _patient = work.Get(); _patient.SetDeleted(True); To select multiple objects from UoW container can be made using Select method: var newOperations = work.Find(x => x.PatientOperList).Select(x => x.Date > startDate); To acquire slave UoW container we can use Find method. This method can accept predicate to select root object when root container has initialized by collection of objects. New related object can be added to slave UoW container using Add method we discussed above: work.Find(x => x.PatientOperList).Add(() => n.Data); To exchange object in UoW container use Assign method. When object is exchanged all his slave UoW containers will be dismissed and all changes in it will be lost! work.Assign(x => true, repository.New()); Warning Do not use Assign method to change object property values! Updating properties of object inside UoW container can be produed by acquiring object using Get method and changing it properties. Method Assign is used to exchange object incuding his slave containers by another object! Important Uint of Work realization is not internal part of XData. It can be attached to Your project when this functionality is realy needed using separate NuGet package XData UnitOfWork package ."
  },
  "tutorial/logging.html": {
    "href": "tutorial/logging.html",
    "title": "Logging and debug info | XData website",
    "keywords": "Logging and debug info During process of developing and debuging Your application the XData can provide You information to find error or understand context of any data processing activity. XData does not enforce developer with using some logging system. Instead of that XData (version .Net 4.0) provide simple interface ILogWriter to implement. Implementation of this interface (if not implemented yet) alowes to integrate XData log output into any You choose logging subsystem of Your application. As example You can use any log writer plugin from XData sources. Configuration of log writer plugin is described configuration file section xdata using attribute log providing value with assembly qualified type name, where type is implements ILogWriter interface. XData (version .Net Standard 2.0) use Microsoft.Extensions.Logging subsystem. When basic information of XData data processing logging is few (errors, critical information, warnings), it's possible to switch on the debug mode in configuration file section xdata using attribute debug = true . All debug information will be writed to log (SQL queries and calls, transaction using, custom data aware business logic calls and other usefull to debug information). Important Switching on the debug mode can reduse application productivity. It's recomended to switch of debug mode when not required."
  },
  "tutorial/localization.html": {
    "href": "tutorial/localization.html",
    "title": "Localization | XData website",
    "keywords": "Localization By default all errors and information messages from XData modules use neutral (en-US) locale, but it's possible to translate this using satellite assembly (for .Net 4.0 version) or prepare resx files to Microsoft.Extension.Localization (for ASP.Net Core 2.0 projects used XData .Net Standard 2.0 version). To help developers make localization fast and simple as possible, XData sources complects with some \"bat\" files. All settings within files is made for russian locale (ru-RU), but there are no problem to patch files for any locale. Prepare text files to translation Patch file add_locale.bat with setting path to RESGEN utility (\"C:\\Program Files\\Microsoft SDKs\\Windows\\v8.0A\\bin\\NETFX 4.0 Tools\"), path to XData.dll and locale code. Run add_locale.bat and be sure with no errors during making translation file (.restext). Translate localization strings inside .restext file to target locale language. Take care, some string are multiline, and some strings has format templates structure (see string.Format). Satellite assembli compilation (for .Net 4.0 version) Patch file compile.bat with setting path to AL utility (\"C:\\Program Files\\Microsoft SDKs\\Windows\\v8.0A\\bin\\NETFX 4.0 Tools\"), path to XData.dll and locale code. Run compile.bat and be sure and be sure with no errors during making satellite assembly (.dll). Resource file generation (for ASP.Net Core 2.0 projects used XData .Net Standard 2.0 version) Patch file createres.bat with setting path to RESGEN utility (\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\"), path to XData.dll and locale code. Run createres.bat and be sure and be sure with no errors during making resource file (.resx). Install sattelite assembly (for .Net 4.0 version) Copy localization foolder named as target locale code to bin folder of Your application (where XData.dll is located) or (for ASP.Net Core 2.0 projects used XData .Net Standard 2.0 version) copy .resx file for target locale to resources folder of Your ASP.Net Core 2.0 site. Restart Your application or site. Tip Recomended materials: https://msdn.microsoft.com/en-us/library/f45fce5x(v=vs.100).aspx https://msdn.microsoft.com/en-us/library/ccec7sz1(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/sb6a8618(v=vs.100).aspx http://www.codeproject.com/Articles/5447/NET-Localization-using-Resource-file"
  },
  "tutorial/adapter.html": {
    "href": "tutorial/adapter.html",
    "title": "Making new XData adapter | XData website",
    "keywords": "Making new XData adapter Note Oops... not ready yet... but we've working on it"
  },
  "tips/view.html": {
    "href": "tips/view.html",
    "title": "Mapping view | XData website",
    "keywords": "Mapping view To map data objects to SQL views used same technics and commands as data table, but then mapping non readonly repository to table some fields of updatable table can be mapped automatically by XData engine using metadata information from source database. When mapping is described over view, all fields must to be described explicitly. Same rule is worked when source of data is text represented SQL expression or virtual recordset defined as union of records (see ToDataSet as example, similar result can be reached using string SQL expression as table name). All fields must to be described explicitly. Important Repositiory mapping is required to marked as ReadOnly when view is a base table!"
  },
  "tips/tips.html": {
    "href": "tips/tips.html",
    "title": "Tips & Trics | XData website",
    "keywords": "Tips & Trics There are some special themes related with using XData in uncommon scenarios, or more detetailed information about not trivial internal XData mechanics. Using DI container XData can be effecively used with any DI containers You prefer. Net 4.0 version not used DI containers inside, but IDataEngine , IDataScope and IRepository<T> interfaces can be obtained from container. IDataEngine must to be registered as singleton with XDataManager.GetDataEngine method call. IDataScope can be registered as lifetime service over data logic module (for example: Controller module in MVC pattern) using fabric method with obtaining IDataEngine service and creating ( IDataEngine.NewDataScope ) or request from internal XData cache ( IDataEngine.GetDataScope ) IDataScope instance when Layer is provided. IRepository<T> can be registered as transistent service using fabric method with obtaining IDataScope service and call IDataScope.GetRepository<T> method. Using container to obtain IRepository<T> service seems to be a kind of a joke, but sometimes it's usefull. Net Standard 2.0 version used Net Core Dependency Abstraction inside and this asbtraction can be implemented by any You like DI container. In this version IDataEngine is registered by calling AddXData method. Other interfaces can be registered manually (if required) with described above or any You like logic. Mapping view To map data objects to SQL views used same technics and commands as data table, but then mapping non readonly repository to table some fields of updatable table can be mapped automatically by XData engine using metadata information from source database. When mapping is described over view, all fields must to be described explicitly. Same rule is worked when source of data is text represented SQL expression or virtual recordset defined as union of records (see ToDataSet as example, similar result can be reached using string SQL expression as table name). All fields must to be described explicitly. Important Repositiory mapping is required to marked as ReadOnly when view is a base table! Get connection settings in runtime Connection settings can be obtained from initialized context using code below: var ctx = XDataManager.GetContext(s); Console.WriteLine(\"*** Testing context: {0} (DB type: {1})\", ctx.Name, ctx.DatabaseAdapter.ConnectType); Console.WriteLine(\"*** Server: {0}, Schema: {1}\", ctx.ConnectionInfo.Server, ctx.ConnectionInfo.Schema); Optional filters Optional filters is the mechanic to simplify query structure when some filters are not set. For example, we can map data structure to some class and to alow filter objects over some property of dictionary linked to main data structure. When filter applied this link to dictionary table is used, but when not we ineffectively rize query complexity. To avoid unplanned query complexity XData has optional filter feature. Some filters marked as primary - when this filter has value, query has full form. When filter value has cleared or set to null, data source of filtered field (table or view) will be skiped when SQL query composed. When data source has been skipped then links between already skipped and other data sources are analized. And when found link marked as primary linked data source will also skipped. When base table of subquery has been skipped - all subquery will be skipped and subquery links analizis for primary links will be provided over outer query. Until no primary filters found. This alowes to compose complex query relations over multiple tables and subqueries that reflect on real query only when it realy necessary. Tree organized repository child specifics When master repository has hierarchy structure, than slave objects can be filtered by two methods to choose slave repository data: filter data linked with selected tree node only ( direct links ), and linked to subtree from selected node and below by hierarchy. XData has functional to choose one of this methods in runtime. To provide this ability mapping of master objects must describe external links marked as direct links . Than master repository flag ShowSubtree can be used as a switch between this two methods. Using dictionaries Dictionaries can be used to reduse data requery count when rarely changed data of dictionary will linked multiple times through Link<T,TSource> data type properties over small amount of time (one business process). Dictionaries is cached as single mapped objects (not a data cahe as described in Caching repository data topic). Caching repository data Some data is changed often, some is rarely, but some data will never changed untill application has upgraded. To reduse requery of this static data, XData has mechanism to cache requested data (not a mapped objects) in XData. Repository property FixedQuery can be assigned to true when caching is required. All LINQ queries will be translated to this cache without requery data from database. When this property resets to false, the cache will erased and repository returns to common algorithms of database requests. Similar feature is used to access rarely changed dictionary data over multiple related operative data canges. Copy data Data can be copied from one repository to another using IRepository<T>.Add<TFrom> method as illustrated in followed example: // Query source data (statically, or dynamically) into sourceQuery variable var rep = dataScope.GetRepository<Target>(); using(var tr = dataScope.BeginTransaction()) { rep.Add<Source>(sourceQuery, x => new Target{ TargetSome = x.Some, TargetAnother = x.Another }); tr.Commit(); } Trigger business logic Custom logic called over data object explicitly. But XData can call trigger logic over business valuable data object (not a single table!) on middleware level (no matter extracted this logic to dedicated application server or not). This logic will be called automatically when corresponded changes are applied: InitRepository - middleware trigger executed when Repository has been initialized (trigger delegate type - InitRepository<T> ) InvalidateRepository - middleware trigger executed when Repository data need to be reseted (trigger delegate type - InvalidateRepository<T> ) InvalidateObject - middleware trigger executed when Repository object need to be reloaded (trigger delegate type - InvalidateObject<T> ) InitObject - middleware trigger executed when Repository object has been initialized (trigger delegate type - InitObject<T> ) BeforeInsert - middleware trigger executed before object inserted into Repository (trigger delegate type - Trigger<T> ) BeforeUpdate - middleware trigger executed before Repository object has been updated (trigger delegate type - Trigger<T> ) BeforeDelete - middleware trigger executed before object has been deleted from Repository (trigger delegate type - Trigger<T> ) AfterInsert - middleware trigger executed after object inserted into Repository (trigger delegate type - Trigger<T> ). Skip flag is not applicable! AfterUpdate - middleware trigger executed after Repository object has been updated (trigger delegate type - Trigger<T> ). Skip flag is not applicable! AfterDelete - middleware trigger executed after object has been deleted from Repository (trigger delegate type - Trigger<T> ). Skip flag is not applicable! BeforeClear - middleware trigger executed before Repository has been cleared (trigger delegate type - RepositoryTrigger<T> ) AfterClear - middleware trigger executed after Repository has been cleared (trigger delegate type - RepositoryTrigger<T> ). Skip flag is not applicable! Trigger delegate type - it's a method signature for middleware trigger handler. public class InvoiceLogic : XDataLogic<Invoice> { [Action(DataActionType.AfterInsert), Action(DataActionType.AfterUpdate)] public Trigger<Invoice> UpdateHistory => ((ref Invoice invoice, ref DataTriggerFlag flag) => { if (!invoice.CheckState(DataObjectState.New) && !invoice.IsChanged(x => x.DocState)) return true; var rep = invoice.GetRepository(); using (var hist = GetRepository<DocHistory>(rep.Layer, context: rep.Context)) { hist.Reset() .SetFilterValue(DocHistory.FilterByDocId, invoice.GetProperty<long>(\"DocId\")) .SetFilterValue(DocHistory.FilterByDocStateId, invoice.DocState.Key); var newHist = hist.New(); newHist.HistoryDate = DateTime.UtcNow; return hist.Submit(ref newHist); } }); [Action(DataActionType.BeforeDelete)] public Trigger<Invoice> ClearHistory => ((ref Invoice invoice, ref DataTriggerFlag flag) => { var i = invoice; using (var hist = GetRepository<DocHistory>(i.GetLayer(), context: i.GetContext())) { return hist.Reset() .Clear(x => x.GetProperty<long>(\"DocId\") == i.GetProperty<long>(\"DocId\")); } }); [Action(DataActionType.BeforeClear)] public RepositoryTrigger<Invoice> ClearHistoryBatch => ((IRepository<Invoice> invoiceRepository, ref DataTriggerFlag flag) => { using (var hist = GetRepository<DocHistory>(invoiceRepository.Layer, context: invoiceRepository.Context)) { return hist.Reset().Clear(x => invoiceRepository .Any(z => x.GetProperty<long>(\"DocId\") == z.GetProperty<long>(\"DocId\"))); } }); } Trigger and RepositoryTrigger delegates has a reference parameter of type DataTriggerFlag to specify behaviour of data processing after trigger executed. There are three possible behaviours defined: None - Submit using default algorithm, representation layer is already refreshed Skip - Data submitting have completed in trigger logic or not applicable. No standard updates will called. It's a kind of \"instead of\" trigger logic flag. Refresh - Default value. Representation layer manual data refreshing is needed. Trigger logic defined as attributed by Action attribute read only property of XDataLogic<T> class descendant. One property can be attributed as a handler for multiple triggers. Property type must to be Trigger<T> except repository based triggers ( BeforeClear , AfterCLear , InitRepository or InvalidateRepository ) - RepositoryTrigger<T> . Execute custom business logic XData has many features targeting this technology as not only ORM, but a full featured Data Access Layer. This is one of this features. Custom logic defined as public property of XDataLogic<T> class descendant with type of CustomLogic<T> . public class InvoiceLogic : XDataLogic<Invoice> { public CustomLogic<Invoice> TestCustomLogic => (objects => { Log.Write(MessageType.Information, () => $\"TestCustomLogic called with {objects.Length} objects\"); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => @$\"Call for \\\"{i.DocNumb}\\\" returned \\\"{r}\\\" with data \\\"{(p == null ? null : Encoding.UTF8.GetString(p))}\\\"\"); } return true; }); } ... //Call example logic var random = new Random(); return dataScope.GetRepository<Invoice>().ToArray().Execute(() => \"TestCustomLogic\", \"testPost\".SetValue((Action<byte[]>)(data => Console.WriteLine(\"Post message received (data=\\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)))) .AsEnum().ToDictionary(), \"testCall\".SetValue((Func<byte[], byte[]>)(data => { Console.WriteLine(\"Call received \\\"{0}\\\")\", data == null ? null : Encoding.UTF8.GetString(data)); return random.NextDouble() >= 0.5 ? null : Encoding.UTF8.GetBytes( $\"reply for \\\"{(data == null ? null : Encoding.UTF8.GetString(data))}\\\"\"); })).AsEnum().ToDictionary()); Programmer can develope data centric logic over some of mapped objects with ability to execute this logic in the middleware layer of three-tier architecture on a dedicated server (or cluster). And this code can be simple and representable debuged in two-tier environment. Architecture can be switched by configuration! No code modification, no side effects... This feature is linked with Trigger logic and reached by Callbacks . When code is organized using data mapping modules, data logic modules and client (or Web site) it can help programmer to keep module relations clean and get ready to changes, with no matter of middleware layer existance. And this rules are not dictated, You can use it or not. You can write this logic anywhere You architect to do. Nothing will be breakes, exept of ability to use XData three-tier architecture. But if You realy don't need it, what is wrong? Using business logic callbacks XData alowes to use business logic callbacks to interact backend modules with frontend using synchronious Callback and asynchronious PostData models. Synchronious calls can return result value. Callbacks can be used with three-tier-architecture as well as with client-server model. Callbacks has provided business logic clear, complete view and alowes debug same code in two-tier environment as code will be executed in three-tier. public class InvoiceLogic : XDataLogic<Invoice> { public CustomLogic<Invoice> TestCustomLogic => (objects => { Log.Write(MessageType.Information, () => $\"TestCustomLogic called with {objects.Length} objects\"); foreach (var invoice in objects) { var i = invoice; invoice.PostData(\"testPost\", () => Encoding.UTF8.GetBytes(i.DocNumb)); var p = Encoding.UTF8.GetBytes(i.DocNumb); var r = i.Callback(\"testCall\", ref p); Log.Write(MessageType.Information, () => @$\"Call for \\\"{i.DocNumb}\\\" returned \\\"{r}\\\" with data \\\"{(p == null ? null : Encoding.UTF8.GetString(p))}\\\"\"); } return true; }); } Business logic calculated fields XData alowed to calculate fields not only using SQL expressions . You can subscribe OnInvalidateObject event and calculate some fields on client side. More detailed events dicassed below . Using events Custom logic call and trigger logic is executed on the midleware layer, deployed on the application server or not. But some reaction on data change events may be required on client side. XData has followed events to subscribe changes of data: InitRepository<T> OnInit - event acquired when repository has been initialized InitObject<T> OnInitObject - event acquired when object has been initialized by database or default values InvalidateRepository<T> OnInvalidate - repository data has been requeried from database InvalidateObject<T> OnInvalidateObject - object has been changed and requeied from database CurrentObjectChanging<T> OnCurrentObjectChanging - current object is changing CurrentObjectChanged<T> OnCurrentObjectChanged - current object has been changed Virtual data and attached handlers You can use XData as database mock engine. XData has feature to replace database interactions with attached handlers call. Virtual objects is attached to repository using Attach method of IRepository<T> interface. To dettach virtual objects used Dettach method. Multiple virtual entities can be attached to repository as new objects using AttachNewObjects method. Tip This method ( AttachNewObjects ) can be used to add multiple dettached objects to real repository. Every virtual entity can override handlers attached to repository with their own realization using parameters of AttachNewObjects method or SetAttachedHandlers method call. To set repository level handlers use special overload of SetAttachedHandlers . To clear attached objects You can use ClearAttachedObjects method. To help wrap handlers to abstract AttachedHandler<T> class and unwrap it back to specialized handlers XData has a wrapper class RepositoryAttachedHandler . Attached hendlers can have followed types (see AttachedHandlerType ): OnClear - ( ClearAttachedHandler ) handler called instead of Clear OnExecute - ( ExecuteAttachedHandler<T> ) handler called instead of Execute OnGetLob - ( GetLobAttachedHandler ) handler called instead of requesting LOB data OnGetLobSize - ( GetLobSizeAttachedHandler ) handler called instead of requesting LOB size OnGetXml - ( GetXmlAttachedHandler ) handler called instead of requesting XML data OnLock - ( LockAttachedHandler<T> ) handler called instead of Lock OnRefresh - ( RefreshAttachedHandler<T> ) handler called instead of refreshing data OnSetLob - ( SetLobAttachedHandler ) handler called instead of saving LOB data OnSetXml - ( SetXmlAttachedHandler ) handler called instead of saving XML data OnSubmit - ( SubmitAttachedHandler<T> ) handler called instead of Submit multiple objects OnSubmitObject - ( SubmitObjectAttachedHandler<T> ) handler called instead of submitting single object OnSubmitQuery - ( SubmitQueryAttachedHandler<T> ) handler called instead of submitting query generation Transactions XData use automatic transactions handling by default. But allows to manage transacions manually using IDataScope interface method BeginTransaction returned transaction state interface ITransaction . Transaction state is a IDisposable object. Transaction is commited when method Commit is called. When transaction state is disposed without call Commit method, transaction is rolled back. Transaction can be started as readonly or read/write. This depends on parameter read of BeginTransaction method. XData can symulationaly wrap transactions one over another. First non read only transaction is related to real database tranaction, and all wrapped transactions is related to transaction labels. When wrapped transaction is rolled back real transaction is rolled back to label only. Only rolling back the \"main\" transaction calls ROLLBACK statement over database. Call custom SQL code XData can help the programmer to obtain data and process it with many ways. But also we hold in mind XData is just a common tool with limited quantity of features, and some very specific (but handy and powerfull) SQL dialect constructions may be out of XData possibilities. To call dialect specific SQL statements used raw database adapter interface with methods: FillTable , ExecuteScalar and ExecuteNonQuery . To access database adapter interface used context descriptor through XDataManager.GetContext method: const string getCoordComResourceStateChangesForCaseCommand = @\" select x.ResourceCode, x.ReportedDateTime, x.UserName, x.MissionStatusCode, x.ResourceStatusCode from (select h.ResourceCode, h.ReportedDateTime, h.MissionStatusCode, h.ResourceStatusCode, isnull((select top(1) log.Creator from cse_CaseFolderLog_tab log with (nolock) where log.CallCenterId = h.CallCenterId and log.CaseFolderId = h.CaseFolderId and log.CaseId = h.CaseId and log.Created >= h.ReportedDateTime and datediff(s, h.ReportedDateTime, log.Created) <= 10 and (charindex(case h.MissionStatusCode when '---' then 'ready' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0 or charindex(case h.MissionStatusCode when '---' then 'disconnected' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0) and charindex(h.ResourceCode, log.LogText COLLATE Latin1_General_CS_AS) > 0 and charindex('|' + log.Creator + '|', @IntegrationUsers) = 0 order by log.Created ) , (select top(1) log.Creator from cse_CaseFolderLogFinished_tab log with (nolock) where log.CallCenterId = h.CallCenterId and log.CaseFolderId = h.CaseFolderId and log.CaseId = h.CaseId and log.Created >= h.ReportedDateTime and datediff(s,h.ReportedDateTime, log.Created) <= 10 and (charindex(case h.MissionStatusCode when '---' then 'ready' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0 or charindex(case h.MissionStatusCode when '---' then 'disconnected' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0) and charindex(h.ResourceCode, log.LogText COLLATE Latin1_General_CS_AS) > 0 and charindex('|' + log.Creator + '|', @IntegrationUsers) = 0 order by log.Created )) as UserName from res_ResourceHistory_tab h where h.CallCenterId = @CallCenterId and h.CaseFolderId = @CaseFolderId and h.CaseId = @CaseId and not exists(select 1 from sph_ResourceHistory_tab sh where sh.CallCenterId = h.CallCenterId and sh.CaseFolderId = h.CaseFolderId and sh.CaseId = h.CaseId and sh.ResourceCode = h.ResourceCode and (sh.MissionStatusCode = h.MissionStatusCode or (sh.MissionStatusCode = '---' and sh.ResourceStatusCode = @ClosedStatusCode)) and sh.ReportedDateTime = h.ReportedDateTime)) x where x.UserName is not null\"; using (var dataScope = DataEngine.Value.NewDataScope(CoordComDb)) { return XDataManager.GetContext(CoordComDb).DatabaseAdapter.FillTable(dataScope.Layer, new Query(getCoordComResourceStateChangesForCaseCommand, CommandType.Text, new QueryParam(\"@CaseFolderId\", caseIdentity.CaseFolderId, DbType.Int32), new QueryParam(\"@CallCenterId\", caseIdentity.CallCenterId, DbType.Int32), new QueryParam(\"@CaseId\", caseIdentity.CaseId, DbType.Int32), new QueryParam(\"@IntegrationUsers\", $\"|{string.Join(\"|\", integrationUsers)}|\"), new QueryParam(\"@ClosedStatusCode\", closedStatusCode) ), CommandBehavior.SingleResult).Rows.OfType<DataRow>() .Select(x => new Tuple<string, DateTime, string, string>( x.Field<string>(0), x.Field<DateTime>(1), x.Field<string>(2), x.Field<string>(3) == \"---\" ? x.Field<string>(4) : x.Field<string>(3))).ToList(); } Tip Use this mechanism with maximum care! This eliminates cross dialect approach of XData development, but we are in a real world with real programmers tasks... and we are never seen real tasks are correspond the rules of ideal programm system architecture ;) Anyway this bad feature is a backdoor we must provide while XData is not support all features of all specific SQL dialects. Is this realy possible?. We think that not, but we will try to provide most of nessesary features inside XData as soon as possible. We are need Your help to choose the order of features implementation and ideas to do it best! Important DDL instructions is not implemented by design. We believe DDL in big complicated real business application is not a thing we can delegate to \"dumb-metal-doll\". This is why XData has no mechanics to \"CodeFirst\"... If You're task can use CodeFirst approach - use EF. This way is historically reserved by EF, and no reason to fight for it. Calling custom SQL code is a legal way to apply DDL in XData context. Programmer or database administrator write this SQL script. This code is prodused by human, real (not artifical) intellect of professional... XData only has ability to run it over database."
  },
  "tips/optional.html": {
    "href": "tips/optional.html",
    "title": "Optional filters | XData website",
    "keywords": "Optional filters Optional filters is the mechanic to simplify query structure when some filters are not set. For example, we can map data structure to some class and to alow filter objects over some property of dictionary linked to main data structure. When filter applied this link to dictionary table is used, but when not we ineffectively rize query complexity. To avoid unplanned query complexity XData has optional filter feature. Some filters marked as primary - when this filter has value, query has full form. When filter value has cleared or set to null, data source of filtered field (table or view) will be skiped when SQL query composed. When data source has been skipped then links between already skipped and other data sources are analized. And when found link marked as primary linked data source will also skipped. When base table of subquery has been skipped - all subquery will be skipped and subquery links analizis for primary links will be provided over outer query. Until no primary filters found. This alowes to compose complex query relations over multiple tables and subqueries that reflect on real query only when it realy necessary."
  },
  "tips/get_credentials.html": {
    "href": "tips/get_credentials.html",
    "title": "Get connection settings in runtime | XData website",
    "keywords": "Get connection settings in runtime Connection settings can be obtained from initialized context using code below: var ctx = XDataManager.GetContext(s); Console.WriteLine(\"*** Testing context: {0} (DB type: {1})\", ctx.Name, ctx.DatabaseAdapter.ConnectType); Console.WriteLine(\"*** Server: {0}, Schema: {1}\", ctx.ConnectionInfo.Server, ctx.ConnectionInfo.Schema);"
  },
  "tips/custom_sql.html": {
    "href": "tips/custom_sql.html",
    "title": "Call custom SQL code | XData website",
    "keywords": "Call custom SQL code XData can help the programmer to obtain data and process it with many ways. But also we hold in mind XData is just a common tool with limited quantity of features, and some very specific (but handy and powerfull) SQL dialect constructions may be out of XData possibilities. To call dialect specific SQL statements used raw database adapter interface with methods: FillTable , ExecuteScalar and ExecuteNonQuery . To access database adapter interface used context descriptor through XDataManager.GetContext method: const string getCoordComResourceStateChangesForCaseCommand = @\" select x.ResourceCode, x.ReportedDateTime, x.UserName, x.MissionStatusCode, x.ResourceStatusCode from (select h.ResourceCode, h.ReportedDateTime, h.MissionStatusCode, h.ResourceStatusCode, isnull((select top(1) log.Creator from cse_CaseFolderLog_tab log with (nolock) where log.CallCenterId = h.CallCenterId and log.CaseFolderId = h.CaseFolderId and log.CaseId = h.CaseId and log.Created >= h.ReportedDateTime and datediff(s, h.ReportedDateTime, log.Created) <= 10 and (charindex(case h.MissionStatusCode when '---' then 'ready' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0 or charindex(case h.MissionStatusCode when '---' then 'disconnected' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0) and charindex(h.ResourceCode, log.LogText COLLATE Latin1_General_CS_AS) > 0 and charindex('|' + log.Creator + '|', @IntegrationUsers) = 0 order by log.Created ) , (select top(1) log.Creator from cse_CaseFolderLogFinished_tab log with (nolock) where log.CallCenterId = h.CallCenterId and log.CaseFolderId = h.CaseFolderId and log.CaseId = h.CaseId and log.Created >= h.ReportedDateTime and datediff(s,h.ReportedDateTime, log.Created) <= 10 and (charindex(case h.MissionStatusCode when '---' then 'ready' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0 or charindex(case h.MissionStatusCode when '---' then 'disconnected' else h.MissionStatusCode end, log.LogText COLLATE Latin1_General_CS_AS) > 0) and charindex(h.ResourceCode, log.LogText COLLATE Latin1_General_CS_AS) > 0 and charindex('|' + log.Creator + '|', @IntegrationUsers) = 0 order by log.Created )) as UserName from res_ResourceHistory_tab h where h.CallCenterId = @CallCenterId and h.CaseFolderId = @CaseFolderId and h.CaseId = @CaseId and not exists(select 1 from sph_ResourceHistory_tab sh where sh.CallCenterId = h.CallCenterId and sh.CaseFolderId = h.CaseFolderId and sh.CaseId = h.CaseId and sh.ResourceCode = h.ResourceCode and (sh.MissionStatusCode = h.MissionStatusCode or (sh.MissionStatusCode = '---' and sh.ResourceStatusCode = @ClosedStatusCode)) and sh.ReportedDateTime = h.ReportedDateTime)) x where x.UserName is not null\"; using (var dataScope = DataEngine.Value.NewDataScope(CoordComDb)) { return XDataManager.GetContext(CoordComDb).DatabaseAdapter.FillTable(dataScope.Layer, new Query(getCoordComResourceStateChangesForCaseCommand, CommandType.Text, new QueryParam(\"@CaseFolderId\", caseIdentity.CaseFolderId, DbType.Int32), new QueryParam(\"@CallCenterId\", caseIdentity.CallCenterId, DbType.Int32), new QueryParam(\"@CaseId\", caseIdentity.CaseId, DbType.Int32), new QueryParam(\"@IntegrationUsers\", $\"|{string.Join(\"|\", integrationUsers)}|\"), new QueryParam(\"@ClosedStatusCode\", closedStatusCode) ), CommandBehavior.SingleResult).Rows.OfType<DataRow>() .Select(x => new Tuple<string, DateTime, string, string>( x.Field<string>(0), x.Field<DateTime>(1), x.Field<string>(2), x.Field<string>(3) == \"---\" ? x.Field<string>(4) : x.Field<string>(3))).ToList(); } Tip Use this mechanism with maximum care! This eliminates cross dialect approach of XData development, but we are in a real world with real programmers tasks... and we are never seen real tasks are correspond the rules of ideal programm system architecture ;) Anyway this bad feature is a backdoor we must provide while XData is not support all features of all specific SQL dialects. Is this realy possible?. We think that not, but we will try to provide most of nessesary features inside XData as soon as possible. We are need Your help to choose the order of features implementation and ideas to do it best! Important DDL instructions is not implemented by design. We believe DDL in big complicated real business application is not a thing we can delegate to \"dumb-metal-doll\". This is why XData has no mechanics to \"CodeFirst\"... If You're task can use CodeFirst approach - use EF. This way is historically reserved by EF, and no reason to fight for it. Calling custom SQL code is a legal way to apply DDL in XData context. Programmer or database administrator write this SQL script. This code is prodused by human, real (not artifical) intellect of professional... XData only has ability to run it over database."
  },
  "tips/container.html": {
    "href": "tips/container.html",
    "title": "Using DI container | XData website",
    "keywords": "Using DI container XData can be effecively used with any DI containers You prefer. Net 4.0 version not used DI containers inside, but IDataEngine , IDataScope and IRepository<T> interfaces can be obtained from container. IDataEngine must to be registered as singleton with XDataManager.GetDataEngine method call. IDataScope can be registered as lifetime service over data logic module (for example: Controller module in MVC pattern) using fabric method with obtaining IDataEngine service and creating ( IDataEngine.NewDataScope ) or request from internal XData cache ( IDataEngine.GetDataScope ) IDataScope instance when Layer is provided. IRepository<T> can be registered as transistent service using fabric method with obtaining IDataScope service and call IDataScope.GetRepository<T> method. Using container to obtain IRepository<T> service seems to be a kind of a joke, but sometimes it's usefull. Net Standard 2.0 version used Net Core Dependency Abstraction inside and this asbtraction can be implemented by any You like DI container. In this version IDataEngine is registered by calling AddXData method. Other interfaces can be registered manually (if required) with described above or any You like logic."
  },
  "tutorial/mapping/dynamic/property/reference.html": {
    "href": "tutorial/mapping/dynamic/property/reference.html",
    "title": "Inner view reference | XData website",
    "keywords": "Inner view reference To map property to field from inner view used one of IRepositoryStructureAdapter interface Ref method overload: Ref<TValue>(string sourceAlias, string property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) - used when referenced property is a hidden property Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\"))"
  },
  "tutorial/mapping/dynamic/property/property.html": {
    "href": "tutorial/mapping/dynamic/property/property.html",
    "title": "Properties | XData website",
    "keywords": "Properties Properties dynamic mapping is performed as method call of IRepositoryStructure<T> interface: Column method call for each of hidden properties mapping ReadOnlyProperty method call for each of readonly properties mapping Map method call for declare all of read/write properties mapping ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, true))) ... Parameter mapper of Map method alowes to define mapping rule for multiple read/write properties using lambda expression with IQueryStructureAdapter interface as parameter. ... .Map(x => new Invoice { DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode)), DocCatalog = x.Link<string, Catalogue>(\"U\", \"name\", z => z.LinkProperty<Catalogue>(y => y.Name)), DocNumb = x.Field<string>(\"N\", \"numb\"), DocDate = x.Field<DateTime?>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDate)), Scan = x.Lob(\"SC\", z => z.OuterFlag()), Source = x.Xml(\"SR\", z => z.OuterFlag()), CustomerFrom = x.Link<string, Customer>(\"F\", \"name\", z => z.LinkProperty<Customer>(y => y.Name)), CustomerTo = x.Link<string, Customer>(\"T\", \"name\", z => z.LinkProperty<Customer>(y => y.Name)), DeliveryType = x.Field<DeliveryTypeEnum>(\"DD\", string.Empty), DeliveryDate = x.Field<DateTime?>(\"DD\", string.Empty, z => z.Default(DefaultType.CurrentDate)) }, x => x.ExternalLink<InvoiceSpec>(\"DocId\")) ... Interfaces IRepositoryStructureAdapter and IQueryStructureAdapter as successor has some overloads of methods to define mapping: Field<TVal> - for mapping property to data source field Expr<TVal> - for mapping property to SQL expression (see detailed description below ) Ref<TVal> - for mapping property to inner view property (see detailed description below ) IRepositoryStructureAdapter<T> also has a special methods to map Lob , Xml and Link<TVal,TSource> Lob - for mapping Lob property Xml - for mapping Xml property Link<TVal,TSource> - for mapping link property (see detailed description below ) These methods of single property mapping has parameter attributes to define additional mapping properties using interface IPropertyMappingAdapter : Key - primary unique key property flag, possible to mark multiple properties or hidden properties as key properties Hidden - flag, the field should not be included in the SELECT expression, but can be used in filters and/or links between data sources (tables, subqueries...) Group - property grouping parameters (see detailed description below ) And using interface IRepositoryPropertyMappingAdapter : ConcurrencyToken - concurrency token flag for property Default - default value assign rules for property OuterFlag - outer join mandatory flag, values of properties marked this flag is analyzed during making decision of operations over tables in optional references Important Required to set at least one property of mapped class as primary unique key. Subqueries and inner views can has no key properties. Interface IQueryStructureAdapter<T> is used in dynamic queries only. Interfaces IRepositoryStructureAdapter and IRepositoryStructureAdapter<T> is used in dynamic repository mapping only. Interface IPropertyMappingAdapter is used as in dynamic queries as in dynamic repository mapping. Interface IRepositoryPropertyMappingAdapter is inherited from [IPropertyMappingAdapter] and used in dynamic repository mapping only. SQL expression property Readonly property can be mapped to SQL expression. Dynamic mapping of SQL expression is defined by one of IRepositoryStructureAdapter interface Expr method overload: Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) - used to define sql expression DataExpressionType.SubQuery or DataExpressionType.PlainSql When first overload used, SQL expression is defined by expr parameter value as lambda function with IQueryStructureAdapter interface extension methods inside: Case<T, TResult>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, TResult>> elseValue, params TaggedExpression<T, TResult>[] switchValues) - case when ... then ... else ... end SQL construction DateDiff<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, DateTime>> finalDate, Expression<Func<IQueryStructureAdapter, DateTime>> startDate, DateDiffKind kind) - date difference Exists(this IQueryStructureAdapter adapter, string subQueryAlias) - exists(select ...) SQL construction HasFlag<T>(this IQueryStructureAdapter adapter, Expression<Func<IQueryStructureAdapter, T>> expression, Expression<Func<IQueryStructureAdapter, T>> flagValue, Expression<Func<IQueryStructureAdapter, T>> trueValue, Expression<Func<IQueryStructureAdapter, T>> falseValue) - bitwise mask checking for value SqlExpr<TResult>(this IQueryStructureAdapter adapter, string format, params Expression<Func<IQueryStructureAdapter, TResult>>[] expressions) - mixing plain SQL expressions with LINQ style defined expression subparts, parameter format is the string.Format mask SqlFn<TResult>(this IQueryStructureAdapter adapter, string name, params Expression<Func<IQueryStructureAdapter, object>>[] parameters) - SQL function call expression SqlParam<TResult>(this IQueryStructureAdapter adapter, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) - SQL function parameter value expression Mapping parameters of SQL expressions is defined by IRepositoryExpressionMappingAdapter interface methods: NativeSqlType(string nativeSqlType) - set native SQL type name of expression result, used when expression result type has specific SQL type Size(int size) - set number or varchar length of SQL expression result type Size(int size, int scale) - set length and scale for floating point SQL data types subquery, ... .ReadOnlyProperty(x => x.DocAmount, x => x.Expr<decimal?>(null, DataExpressionType.SubQuery, \"A\", DbType.Decimal, z => z.Size(17, 5))) ... LINQ expression, ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, y => y.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)), DbType.Decimal, z => z.Size(17, 5))) ... plain text SQL expression. ... .ReadOnlyProperty(x => x.AllowedDiscount, x => x.Expr<int>(null, DataExpressionType.PlainSql, \"case P.is_vip when 1 then 10 else 0 end\", DbType.Decimal, z => z.Size(17, 5))) ... Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Property default value To set default value of property with dynamic mapping, use one of IRepositoryPropertyMappingAdapter interface Default method overload: Default(DefaultType source) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert only Default(DefaultType source, bool alwaysUseDefault) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert or update Default(DefaultType source, string value) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert only Default(DefaultType source, string value, bool alwaysUseDefault) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert or update ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, true))) ... Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. Use one of IPropertyMappingAdapter interface Group method overload: Group(int groupOrder) - when property mapped to field query grouped by with N-th order Group(DataGrouping grouping) - when property mapped to aggregation function over field ... HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) ... Hidden properties Hidden properties dynamically defined using Column method call of IRepositoryStructure<T> interface. Hidden property can be mapped to: data source field - Field<TVal> SQL expression (see detailed description above ) - Expr<TVal> inner view property (see detailed description below ) - Ref<TVal> ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ... Inner view reference To map property to field from inner view used one of IRepositoryStructureAdapter interface Ref method overload: Ref<TValue>(string sourceAlias, string property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) - used when referenced property is a hidden property Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) .ReadOnlyProperty(x => x.DocLastChange, x => x.Ref<DateTime?>(\"H\", \"HistoryDate\")) Links To dynamically define link property used one of IRepositoryStructureAdapter<T> interface Link method overload: Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) - used when source property is correlated with property name with default name mapping rule ( hungarian_notation in DB and CamelCaseNotation property name in code) Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, string fieldName, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) Parameter attributes of method Link value used to define link properties pairs with one of ILinkPropertyMappingAdapter<T> interface LinkProperties method overload call: LinkProperty() - used property of source object to assiciate with link property defined by Link method LinkProperty<TSource>(Expression<Func<TSource, object>> source) - used source as source property and equal named property from target object LinkProperty<TSource>(Expression<Func<TSource, object>> source, Expression<Func<T, object>> property) - specifing both properties ... DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode)), ..."
  },
  "tutorial/mapping/dynamic/property/link.html": {
    "href": "tutorial/mapping/dynamic/property/link.html",
    "title": "Links | XData website",
    "keywords": "Links To dynamically define link property used one of IRepositoryStructureAdapter<T> interface Link method overload: Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) - used when source property is correlated with property name with default name mapping rule ( hungarian_notation in DB and CamelCaseNotation property name in code) Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, string fieldName, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) Parameter attributes of method Link value used to define link properties pairs with one of ILinkPropertyMappingAdapter<T> interface LinkProperties method overload call: LinkProperty() - used property of source object to assiciate with link property defined by Link method LinkProperty<TSource>(Expression<Func<TSource, object>> source) - used source as source property and equal named property from target object LinkProperty<TSource>(Expression<Func<TSource, object>> source, Expression<Func<T, object>> property) - specifing both properties ... DocState = x.Link<string, DocState>(\"S\", \"name\", z => z.LinkProperty<DocState>(y => y.Name), z => z.LinkProperty<DocState>(y => y.Code, y => y.DocStateCode)), ..."
  },
  "tutorial/mapping/dynamic/property/grouping.html": {
    "href": "tutorial/mapping/dynamic/property/grouping.html",
    "title": "Property grouping parameters | XData website",
    "keywords": "Property grouping parameters Property grouping parameters used when data object mapped to grouped query to specify property role in GROUP BY expression. Use one of IPropertyMappingAdapter interface Group method overload: Group(int groupOrder) - when property mapped to field query grouped by with N-th order Group(DataGrouping grouping) - when property mapped to aggregation function over field ... HistoryDate = x.Field<DateTime?>(\"H\", string.Empty, z => z.Group(DataGrouping.Max)) ..."
  },
  "tutorial/mapping/dynamic/property/default.html": {
    "href": "tutorial/mapping/dynamic/property/default.html",
    "title": "Property default value | XData website",
    "keywords": "Property default value To set default value of property with dynamic mapping, use one of IRepositoryPropertyMappingAdapter interface Default method overload: Default(DefaultType source) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert only Default(DefaultType source, bool alwaysUseDefault) - use with DefaultType.AutoIncrement , DefaultType.CurrentDate , DefaultType.CurrentDateTime , DefaultType.CurrentDateTimeUtc , DefaultType.NewGuid , DefaultType.UserName where default value asssigned data row on insert or update Default(DefaultType source, string value) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert only Default(DefaultType source, string value, bool alwaysUseDefault) - use with DefaultType.Const or DefaultType.Variable where default value asssigned data row on insert or update ... .ReadOnlyProperty(x => x.Changed, x => x.Field<DateTime>(\"D\", string.Empty, z => z.Default(DefaultType.CurrentDateTime, true))) ..."
  },
  "tutorial/mapping/dynamic/property/column.html": {
    "href": "tutorial/mapping/dynamic/property/column.html",
    "title": "Hidden properties | XData website",
    "keywords": "Hidden properties Hidden properties dynamically defined using Column method call of IRepositoryStructure<T> interface. Hidden property can be mapped to: data source field - Field<TVal> SQL expression (see detailed description above ) - Expr<TVal> inner view property (see detailed description below ) - Ref<TVal> ... .Column(\"DocId\", x => x.Field<long?>(\"D\", string.Empty, z => z.Key(), z => z.Default(DefaultType.AutoIncrement))) ..."
  },
  "tutorial/mapping/dynamic/procedure/source.html": {
    "href": "tutorial/mapping/dynamic/procedure/source.html",
    "title": "SQL procedure as query | XData website",
    "keywords": "SQL procedure as query To define procedure as data source of mapping used Procedure method call of IRepositoryStructure<T> interface."
  },
  "tutorial/mapping/dynamic/procedure/sample_udt_array.html": {
    "href": "tutorial/mapping/dynamic/procedure/sample_udt_array.html",
    "title": "SQL procedure with UDT array parameter sample | XData website",
    "keywords": "SQL procedure with UDT array parameter sample /* Type mapped to UDT required to be Xml serializable */ [Serializable] public class Classifier { [XmlAttribute] public int Id { get; set; } [XmlAttribute] public string Name { get; set; } } ... var param = new[] { new Classifier { Id = 1, Name = \"Test\" }, new Classifier { Id = 2, Name = \"Some\" } }.ToXml(); var f4 = XDataMapping.GetStructure(\"T\", DataScope.DefaultContext) .Procedure(\"T\", \"dbo.TestFunction4\", ProcedureType.Function) .Parameter<Classifier[]>(\"T\", 1, \"param1\", DbType.Object, z => z.UdtDataType(null, \"dbo.Classifier\")) .Parameter<int>(\"T\", 2, \"result\", DbType.Int32, z => z.Direction(ParameterDirection.ReturnValue)) .Call(DataScope.Layer, \"param1\".SetValue(param)); Console.WriteLine(f4.GetParameter<int>(\"result\"));"
  },
  "tutorial/mapping/static/filter/range.html": {
    "href": "tutorial/mapping/static/filter/range.html",
    "title": "Range filters | XData website",
    "keywords": "Range filters To define filter checks field value over array of values used RangeFilterAttribute with specific (over described above ) parameter: Range - array of values to filter on. [RangeFilter(\"P\" /* table ealias */, \"discount\" /* field name */, new[] {0,5,10} /* range of values */, Operation: FilterOperation.In /* filter operation */)]"
  },
  "tutorial/mapping/static/filter/inner_links.html": {
    "href": "tutorial/mapping/static/filter/inner_links.html",
    "title": "Inner links | XData website",
    "keywords": "Inner links To define links between data sources inside query used LinkAttribute with specific parameters: LinkedSourceAlias - linked table alias, LinkedFieldName - linked table field name (optional, can be omited when equals with FieldName ). Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to set parameter PrimaryFilter to true . [Link(\"D\" /* table alias */, \"doc_id\" /* field name */, \"DD\" /* linked table alias */)]"
  },
  "tutorial/mapping/static/filter/group.html": {
    "href": "tutorial/mapping/static/filter/group.html",
    "title": "Filter group | XData website",
    "keywords": "Filter group Filter group can be defined by FilterCombinationAttribute with parameters: Name - filter group unique name, Combination - logical operation between filters and subgroups inside group (optional, default is FilterCombination . And ), Parent - parent filter group name (optional, can be omited for filter groups with parent - root filter group). Logic operation inside filter group is defined by enum Combination : And - and Or - or [FilterCombination(\"OrGroup\" /* group filter name */, Combination: Combination.OR /* logical operation */)]"
  },
  "tutorial/mapping/static/filter/filter.html": {
    "href": "tutorial/mapping/static/filter/filter.html",
    "title": "Filters | XData website",
    "keywords": "Filters Filters can be defined as: Constant filters SQL expression filters Dictionary filters Range filters Subquery filters Inner links Each of filter type is defined by own special attribute of data object class. Each of attributes has parameters: Source - data source alias of filtered field, FieldName - filtered field name, Operation - filter operation (optional, default is FilterOperation . Equal ), Combination - filter group name (optional, default is root filter group). Above this every filter attribute has their own specific parameters described below. Filter operation is defined by enum FilterOperation : Equal - equal NotEqual - not equal LessThan - less then GreaterThan - greater then LessThanOrEqual - less or equal GreaterThanOrEqual - greater or equal In - field value in range or subquery NotIn - field value is not in range or subquery Exists - subquery returns one or more rows NotExists - subquery returns no rows Like - field value correlated with find expression NotLike - field value not correlated with find expression OuterJoin - left outer join link between query sources (tables or inner views) Contains - field value correlated with fulltext search NotContains - field value not correlated with fulltext search Filter group Filter group can be defined by FilterCombinationAttribute with parameters: Name - filter group unique name, Combination - logical operation between filters and subgroups inside group (optional, default is FilterCombination . And ), Parent - parent filter group name (optional, can be omited for filter groups with parent - root filter group). Logic operation inside filter group is defined by enum Combination : And - and Or - or [FilterCombination(\"OrGroup\" /* group filter name */, Combination: Combination.OR /* logical operation */)] Constant filters Constant filters can restrict query by constant value. This filter is defined by ConstantFilterAttribute , with specific (over described above ) parameters: Name - filter name (will be transformed to query parameter name), ConstantType - constant type (see below) and ConstantValue - constant value depends on ConstantType . Constant types is defined by enum FilterConstantType : Const - value of ConstantValue . Variable - value of variable with name equals ConstantValue . CurrentDate - current date. CurrentDateTime - current date/time. CurrentDateTimeUTC - current date/time (UTC). [ConstantFilter(\"FilterByZero\" /* filter name */, \"P\" /* table alias */, \"discount\" /* DB field name */, \"0\" /* constant value */, Operation: FilterOperation.Equal /* filter operation */, ConstantType: FilterConstantType.Const /* constant type */)] SQL expression filters To define filter over SQL expression used ExpressionFilterAttribute with specific (over described above ) parameter: ExpressionText - depends on value can be: subquery alias, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"D\" /* ExpressionText: subquery alias */, Operation: FilterOperation.In /* filter operation */)] private static field name contains dynamic definition of SQL expression, [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"AllowedDiscount\" /* ExpressionText: SQL expression description field name */, Operation: FilterOperation.NotEqual /* filter operation */)] ... //Private static field of mapped class marked with SqlExpression attribute [SqlExpression] private static Calculate<int> AllowedDiscount = x => x.Case<Product, int>( z => z.Field<bool>(\"is_vip\"), z => 0, 1.SetValue(10)); plain SQL expression text. [ExpressionFilter(\"P\" /* table alias */, \"discount\" /* field name */, \"case P.is_vip when 1 then 10 else 0 end\" /* ExpressionText: plain SQL expression */, Operation: FilterOperation.NotEqual /* filter operation */)] Important If possible do not use plain SQL expressions. It possibly use specific SQL dialect features not supported by other DBMS or providers. Range filters To define filter checks field value over array of values used RangeFilterAttribute with specific (over described above ) parameter: Range - array of values to filter on. [RangeFilter(\"P\" /* table ealias */, \"discount\" /* field name */, new[] {0,5,10} /* range of values */, Operation: FilterOperation.In /* filter operation */)] Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by DictionaryFilterAttribute with specific (over described above ) parameters: DictionaryTable - dictionary table name, DictionaryId - dictionary id field name, DictionaryCode - dictionary mnemonic code field name, DictionaryValue - mnemonic code value to filter query on, ValueIsVariable - flag DictionaryValue contains not a value but name of variable with value. Tip In case filter field name is equals dictionary id field name, parameter FieldName can be omited. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. [DictionaryFilter(\"t_doc_state\" /* dictionary table name */, \"doc_state_id\" /* dictionary id field name */, \"code\" /* dictionary mnemonic code field name */, \"CREATED\" /* mnemonic code value */, \"D\" /* filtered table alias */)] Inner links To define links between data sources inside query used LinkAttribute with specific parameters: LinkedSourceAlias - linked table alias, LinkedFieldName - linked table field name (optional, can be omited when equals with FieldName ). Tip Inner links can be used to define optional filters . To specify role in optional filter chain need to set parameter PrimaryFilter to true . [Link(\"D\" /* table alias */, \"doc_id\" /* field name */, \"DD\" /* linked table alias */)] Subquery filters To define filters checks field value is correspond subquery results used SubqueryFilterAttribute with specific (over defined above ) parameter: Subquery - subquery alias (see Subqueries ). Inner view can not be used with subquery filters. [SubqueryFilter(\"D\" /* table alias */, \"doc_state_id\" /* field name */, \"A\" /* subquery alias */, Operation: FilterOperation.In /* filter operation */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when one of linked data sources is skiped then other one will skipped too. When base table of subquery is skipped then subquery is skipped completely. Subquery links Links with subqueries is used to link not table fields but properties of base class and subquery mapped class including hidden properties . To link with subquery or inner view used SubqueryLinkAttribute with parameters: Subquery - subquery alias, SubqueryProperty - linked property from subquery, PropertyName - optional, linked property from base class (when omit, base class property name is equal SubqueryProperty ), also optional properties: Operation , Combination и PrimaryFilter is supported. They was described above in topics Filters and Inner links . [SubqueryLink(\"H\" /* subquery alias */, \"DocId\" /* subquery property to link */)] When flag PrimaryFilter is set to true optional part of query is defined by followed rules: when subquery is skipped, then data source linked to subquery by this filter will be skipped too, and skip data sources analisys will continue inside base class (see Inner links )."
  },
  "tutorial/mapping/static/filter/dictionary.html": {
    "href": "tutorial/mapping/static/filter/dictionary.html",
    "title": "Dictionary filters | XData website",
    "keywords": "Dictionary filters Dictionaries surrogate keys may varied over one instance to another, and names can be changed by users. Sometimes business logic need to operate with the concrete value of dictionary. Because of this it's recomended to add into dictionary DB structure a special unique text field - mnemonic code. XData supports using mnemonic code when define filters on dictionary value - dictionary filters. They defined by DictionaryFilterAttribute with specific (over described above ) parameters: DictionaryTable - dictionary table name, DictionaryId - dictionary id field name, DictionaryCode - dictionary mnemonic code field name, DictionaryValue - mnemonic code value to filter query on, ValueIsVariable - flag DictionaryValue contains not a value but name of variable with value. Tip In case filter field name is equals dictionary id field name, parameter FieldName can be omited. Important This filter can be used when dictionary has simple (one field only) identity field and mnemonic code field. But it's a very common case. [DictionaryFilter(\"t_doc_state\" /* dictionary table name */, \"doc_state_id\" /* dictionary id field name */, \"code\" /* dictionary mnemonic code field name */, \"CREATED\" /* mnemonic code value */, \"D\" /* filtered table alias */)]"
  },
  "tutorial/mapping/static/filter/constant.html": {
    "href": "tutorial/mapping/static/filter/constant.html",
    "title": "Constant filters | XData website",
    "keywords": "Constant filters Constant filters can restrict query by constant value. This filter is defined by ConstantFilterAttribute , with specific (over described above ) parameters: Name - filter name (will be transformed to query parameter name), ConstantType - constant type (see below) and ConstantValue - constant value depends on ConstantType . Constant types is defined by enum FilterConstantType : Const - value of ConstantValue . Variable - value of variable with name equals ConstantValue . CurrentDate - current date. CurrentDateTime - current date/time. CurrentDateTimeUTC - current date/time (UTC). [ConstantFilter(\"FilterByZero\" /* filter name */, \"P\" /* table alias */, \"discount\" /* DB field name */, \"0\" /* constant value */, Operation: FilterOperation.Equal /* filter operation */, ConstantType: FilterConstantType.Const /* constant type */)]"
  },
  "tutorial/mapping/static/tree.html": {
    "href": "tutorial/mapping/static/tree.html",
    "title": "Tree | XData website",
    "keywords": "Tree To statically map tree organized data structure used special data source attributes With to describe tree root query and WithRecursive to describe tree childs. Both of them use subquery mappings (see example below) to set subquery structure for tree query construction. Important Data source flags of tree organized data sources must contain DataStructureFlag.ReadOnly and DataStructureFlag.Tree! With attribute has properties: Alias - alias of tree data source, SubqueryType - type of root subquery mapping, Type - data source combination within tree query, Properties - tree properties order. WithRecursive attribute has properties: Alias - alias of recursive data source, SubqueryType - type of root subquery mapping, InitialAlias - alias of tree data source. [DataObject(\"CAT\", Flags = DataStructureFlag.ReadOnly | DataStructureFlag.Tree), With(\"CAT\", typeof(CatalogueTreeRoot), WithRecursiveType.RecursiveUnion, \"CatalogueId\", \"Name\", \"Code\", \"ParentId\"), WithRecursive(\"S\", typeof(CatalogueTreeFolders), \"CAT\"), SubqueryLink(\"S\", \"ParentId\", \"CatalogueId\")] public class CatalogueTree : IDataObject { public static readonly RuntimeFilter FilterByRoot = new RuntimeFilter(null, \"FilterByRoot\"); public static readonly RuntimeFilter FilterByCathalogue = new RuntimeFilter(null, \"FilterByCathalogue\"); [Property(\"T\", Flags = DataPropertyFlag.Id)] public long CatalogueId { get { return this.GetProperty(x => x.CatalogueId); } } [Property(\"T\")] public string Code { get { return this.GetProperty(x => x.Code); } } [Property(\"T\")] public string Name { get { return this.GetProperty(x => x.Name); } } [Property(\"T\")] public long? ParentId { get { return this.GetProperty(x => x.ParentId); } } } [DataObject(\"R\"), DataTable(\"T_CATALOGUE\", \"R\"), Column(\"CatalogueId\", typeof(long), \"R\"), Column(\"Code\", typeof(string), \"R\"), Column(\"Name\", typeof(string), \"R\"), Column(\"ParentId\", typeof(long?), \"R\"), FilterCombination(\"root\", Combination = Combination.Or), ConstantFilter(\"FilterByCathalogue\", \"R\", \"catalogue_id\", null, Combination = \"root\", Nullable = FilterNullable.NullsNotAllowed), ConstantFilter(\"FilterByRoot\", \"R\", \"parent_id\", null, Combination = \"root\", Nullable = FilterNullable.NullsCompared)] public class CatalogueTreeRoot : ISqlObject {} [DataObject(\"S\"), DataTable(\"T_CATALOGUE\", \"S\"), Column(\"CatalogueId\", typeof(long), \"S\"), Column(\"Code\", typeof(string), \"S\"), Column(\"Name\", typeof(string), \"S\"), Column(\"ParentId\", typeof(long?), \"S\")] public class CatalogueTreeFolders : ISqlObject {}"
  },
  "tutorial/mapping/static/subquery.html": {
    "href": "tutorial/mapping/static/subquery.html",
    "title": "Subqueries | XData website",
    "keywords": "Subqueries XData alowes use subqueries as part of mapping. This feature can be used for get property values from subquery, for subquery filters , and inner view definitions. Subquery recursive deep is not limited. Class used subquery in mapping definition must to marked with attribute SubqueryAttribute or InnerViewAttribute (when it used as inner view definition). Both of them has a parameter Alias - subquery alias in resulting query. InnerViewAttribute additionally has parameter InnerViewType - type mapped to subquery. SubqueryAttribute additionally has parameters: SubqueryType - type mapped to subquery, PropertyName - subquery returned property and Grouping - aggregation type of resulting property. [Subquery(\"A\" /* subquery alias */, typeof(DocSpecAmounts) /* subquery mapped type */, \"Amount\" /* subquery result property name */, Grouping = DataGrouping.Sum /* result property aggregation type */)] ... [InnerView(\"H\" /* inner view alias */, typeof(DocLastChange) /* inner view mapped type */)]"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter.html",
    "title": "Interface IRepositoryStructureAdapter | XData website",
    "keywords": "Interface IRepositoryStructureAdapter Repository structure adapter Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IRepositoryStructureAdapter Methods Expr<TValue>(String, Expression<Func<IQueryStructureAdapter, TValue>>, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, Expression<Func<IQueryStructureAdapter, TValue>> expr, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name Expression < Func < IQueryStructureAdapter , TValue>> expr Expression DbType dbType Expression database type Expression < Func < IRepositoryExpressionMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only! See Also DataExpressionType DbType Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) SQL expression mapping Declaration TValue Expr<TValue>(string fieldName, DataExpressionType type, string exprText, DbType dbType, params Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Expression field name DataExpressionType type Expression source type String exprText Expression text DbType dbType Expression database type Expression < Func < IRepositoryExpressionMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Expression value Type Parameters Name Description TValue Expression result type Remarks WARNING! Can be used in dynamic query mapping only! See Also DataExpressionType DbType Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Field<TValue>(Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description Expression < Func < IRepositoryPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Field<TValue>(String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(string fieldName, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String fieldName Field name Expression < Func < IRepositoryPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Field<TValue>(String, String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Field mapping Declaration TValue Field<TValue>(string sourceAlias, string fieldName, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name Expression < Func < IRepositoryPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Field value Type Parameters Name Description TValue Field type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Ref<TValue>(String, String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue>(string sourceAlias, string property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Referenced property subquery alias String property Referenced property name Expression < Func < IRepositoryPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Inner view property reference mapping Declaration TValue Ref<TValue, TDobj>(string sourceAlias, Expression<Func<TDobj, object>> property, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) where TDobj : class Parameters Type Name Description String sourceAlias Referenced property subquery alias Expression < Func <TDobj, Object >> property Referenced property name Expression < Func < IRepositoryPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description TValue Referenced property value Type Parameters Name Description TValue Referenced property type TDobj Referenced inner view type Remarks WARNING! Can be used in dynamic query mapping only! See Also Select<TResult>(Expression<Func<IQueryStructureAdapter, TResult>>) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterFlag.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterFlag.html",
    "title": "Interface IProcedureParameterFlag | XData website",
    "keywords": "Interface IProcedureParameterFlag Procedure parameter mapping flag Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IProcedureParameterFlag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IProcedureParameterAdapter.html",
    "title": "Interface IProcedureParameterAdapter | XData website",
    "keywords": "Interface IProcedureParameterAdapter Procedure parameter mapping adapter Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IProcedureParameterAdapter Methods Array() Parameter is simple type array flag Declaration IProcedureParameterFlag Array() Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag Default(String) Parameter default value Declaration IProcedureParameterFlag Default(string defaultValue) Parameters Type Name Description String defaultValue Parameter default value Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag Default(DefaultType) Parameter default value Declaration IProcedureParameterFlag Default(DefaultType type) Parameters Type Name Description DefaultType type Parameter default value type Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag Default(DefaultType, String) Parameter default value Declaration IProcedureParameterFlag Default(DefaultType type, string defaultValue) Parameters Type Name Description DefaultType type Parameter default value type String defaultValue Parameter default value Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag Direction(ParameterDirection) Parameter direction Declaration IProcedureParameterFlag Direction(ParameterDirection direction) Parameters Type Name Description ParameterDirection direction Parameter direction Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag NativeSqlType(String) Native SQL type name Declaration IProcedureParameterFlag NativeSqlType(string nativeSqlType) Parameters Type Name Description String nativeSqlType Native SQL type name Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag ParameterName(String) Parameter mapping name Declaration IProcedureParameterFlag ParameterName(string parameterName) Parameters Type Name Description String parameterName Parameter mapping name Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag Size(Int32) Size of SQL expression result value Declaration IProcedureParameterFlag Size(int size) Parameters Type Name Description Int32 size Size Returns Type Description IProcedureParameterFlag SQL expression mapping flag Size(Int32, Int32) Size of SQL expression result value Declaration IProcedureParameterFlag Size(int size, int scale) Parameters Type Name Description Int32 size Size Int32 scale Scale Returns Type Description IProcedureParameterFlag SQL expression mapping flag UdtDataType(String) User defined type mapping Declaration IProcedureParameterFlag UdtDataType(string sqlTypeName) Parameters Type Name Description String sqlTypeName UDT SQL type name Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag UdtDataType(String, String) User defined type mapping Declaration IProcedureParameterFlag UdtDataType(string sqlTypeName, string elementSqlTypeName) Parameters Type Name Description String sqlTypeName UDT SQL type name String elementSqlTypeName UDT type element type name Returns Type Description IProcedureParameterFlag Procedure parameter mapping flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IParameterDescription.html": {
    "href": "api/XData.Mapping.Dynamic.IParameterDescription.html",
    "title": "Interface IParameterDescription | XData website",
    "keywords": "Interface IParameterDescription Dynamic stored procedure parameter description Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IParameterDescription Properties Alias Procedure source alias Declaration string Alias { get; } Property Value Type Description String Binding Parameter value binding Declaration string Binding { get; } Property Value Type Description String DbType Parameter database type Declaration DbType DbType { get; } Property Value Type Description DbType DefaultValue Default parameter value Declaration string DefaultValue { get; } Property Value Type Description String DefaultValueType Default parameter value type Declaration DefaultType DefaultValueType { get; } Property Value Type Description DefaultType Direction Parameter direction Declaration ParameterDirection Direction { get; } Property Value Type Description ParameterDirection Name Parameter name Declaration string Name { get; } Property Value Type Description String NativeSqlType Native SQL type name Declaration string NativeSqlType { get; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter! Order Parameter order Declaration int Order { get; } Property Value Type Description Int32 Scale Parameter scale Declaration int Scale { get; } Property Value Type Description Int32 Size Parameter size Declaration int Size { get; } Property Value Type Description Int32 Type Parameter mapped type Declaration Type Type { get; } Property Value Type Description Type TypeIsArray Parameter mapped type is array Declaration bool TypeIsArray { get; } Property Value Type Description Boolean UdtSqlType Parameter SQL user defined type (UDT) description Declaration UdtSqlType UdtSqlType { get; } Property Value Type Description UdtSqlType Value Parameter value Declaration object Value { get; } Property Value Type Description Object Methods Clone() Clone parameter description Declaration IParameterDescription Clone() Returns Type Description IParameterDescription Cloned parameter GetValue<T>() Returns parameter value Declaration T GetValue<T>() Returns Type Description T Parameter value Type Parameters Name Description T Parameter mapped type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.InvalidateRepository-1.html": {
    "href": "api/XData.InvalidateRepository-1.html",
    "title": "Delegate InvalidateRepository<T> | XData website",
    "keywords": "Delegate InvalidateRepository<T> Refresh repository event delegate type Namespace : XData Assembly : XData.dll Syntax public delegate void InvalidateRepository<T>(IRepository<T> repository) where T : class, IDataObject; Parameters Type Name Description IRepository <T> repository Repository instance Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also InvalidateRepository OnInvalidate"
  },
  "api/XData.Interfaces.IProxyManager.html": {
    "href": "api/XData.Interfaces.IProxyManager.html",
    "title": "Interface IProxyManager | XData website",
    "keywords": "Interface IProxyManager Proxy manager Namespace : XData.Interfaces Assembly : XData.dll Syntax public interface IProxyManager Methods GetProxy(String) Returns XAppServer connection proxy object Declaration IProxy GetProxy(string endpointName) Parameters Type Name Description String endpointName Returns Type Description IProxy GetProxyRepository(Guid, RepositoryState) Returns proxy repository using state Declaration IRepository GetProxyRepository(Guid layer, RepositoryState state) Parameters Type Name Description Guid layer Repository layer RepositoryState state Repository state Returns Type Description IRepository Repository GetProxyRepository<T>(Guid, String, String, ISecuritySession, Variable[]) Returns proxy repository Declaration IRepository<T> GetProxyRepository<T>(Guid layer = default(Guid), string alias = null, string context = null, ISecuritySession security = null, params Variable[] variables) where T : class, IDataObject, new() Parameters Type Name Description Guid layer Repository layer String alias Repository alias String context Repository context ISecuritySession security Repository security context Variable [] variables Repository variables Returns Type Description IRepository <T> Repository Type Parameters Name Description T Repository element type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Interfaces.IProxy.html": {
    "href": "api/XData.Interfaces.IProxy.html",
    "title": "Interface IProxy | XData website",
    "keywords": "Interface IProxy Data object proxy interface Namespace : XData.Interfaces Assembly : XData.dll Syntax public interface IProxy Methods Close(Guid) Close proxy Declaration void Close(Guid layer) Parameters Type Name Description Guid layer Layer to close (Specify Guid.Empty to close all layers) Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also Proxy"
  },
  "api/XData.Interfaces.ILogWriter.html": {
    "href": "api/XData.Interfaces.ILogWriter.html",
    "title": "Interface ILogWriter | XData website",
    "keywords": "Interface ILogWriter XData log writer interface Namespace : XData.Interfaces Assembly : XData.dll Syntax public interface ILogWriter Methods Write(Exception) Write exception to log Declaration void Write(Exception error) Parameters Type Name Description Exception error Write(MessageType, String, AdditionalInfo[]) Write message to log Declaration void Write(MessageType msgType, string msgText, params AdditionalInfo[] info) Parameters Type Name Description MessageType msgType Message type String msgText Message text AdditionalInfo [] info Message additional information Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.RepositoryState.html": {
    "href": "api/XData.DataSource.Structure.RepositoryState.html",
    "title": "Class RepositoryState | XData website",
    "keywords": "Class RepositoryState Repository state Inheritance Object DataQueryState RepositoryState Inherited Members DataQueryState.AssemblyName DataQueryState.ElementType DataQueryState.Context DataQueryState.Structure DataQueryState.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax [Serializable] [DataContract] public sealed class RepositoryState : DataQueryState Properties Alias Alias Declaration [DataMember] public string Alias { get; set; } Property Value Type Description String Fixed Fixed query flag Declaration [DataMember] public bool Fixed { get; set; } Property Value Type Description Boolean IsSupervisor Security session supervisor flag Declaration [DataMember] public bool IsSupervisor { get; set; } Property Value Type Description Boolean SecurityRoles Security session roles Declaration [DataMember] public string[] SecurityRoles { get; set; } Property Value Type Description String [] SecuritySessionClass Security session class Declaration [DataMember] public string SecuritySessionClass { get; set; } Property Value Type Description String ShowSubtree Show subtree flag Declaration [DataMember] public bool ShowSubtree { get; set; } Property Value Type Description Boolean UserName Security user name Declaration [DataMember] public string UserName { get; set; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IRangeFilter.html": {
    "href": "api/XData.DataSource.Structure.IRangeFilter.html",
    "title": "Interface IRangeFilter | XData website",
    "keywords": "Interface IRangeFilter Range filter interface Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IRangeFilter : IFilter, ICloneable Properties RangeValues Range values Declaration object[] RangeValues { get; } Property Value Type Description Object [] Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IProcedure.html": {
    "href": "api/XData.DataSource.Structure.IProcedure.html",
    "title": "Interface IProcedure | XData website",
    "keywords": "Interface IProcedure Procedure based structure Inherited Members IDataSource.SourceType IDataSource.Alias IDataSource.IsBase IDataSource.GetFields() IDataSource.GetFields(Type) IDataSource.GetField(String, String, String) IDataSource.GetField(String, String, String, String) ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IProcedure : IDataSource, ICloneable Properties CallBased SQL procedure/function is call based Declaration bool CallBased { get; } Property Value Type Description Boolean DefaultResultSet SQL stored procedure/function default result set name Declaration string DefaultResultSet { get; } Property Value Type Description String Hint SQL stored procedure/function hint Declaration HintInfo Hint { get; } Property Value Type Description HintInfo Name SQL stored procedure/function full qualified name Declaration string Name { get; } Property Value Type Description String Parameters SQL stored procedure/function parameters descriptions Declaration IEnumerable<IParameterDescription> Parameters { get; } Property Value Type Description IEnumerable < IParameterDescription > ProcedureType SQL stored procedure/function type Declaration ProcedureType ProcedureType { get; } Property Value Type Description ProcedureType See Also ProcedureType Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IField.html": {
    "href": "api/XData.DataSource.Structure.IField.html",
    "title": "Interface IField | XData website",
    "keywords": "Interface IField Field interface Inherited Members ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IField : ICloneable Properties AlwaysUseDefault Always use the default value (also when updating) Declaration bool AlwaysUseDefault { get; } Property Value Type Description Boolean DefaultType Default source Declaration DefaultType DefaultType { get; } Property Value Type Description DefaultType DefaultValue Default value Declaration string DefaultValue { get; } Property Value Type Description String EnumValues Enumeration values Declaration KeyValuePair<long, string>[] EnumValues { get; set; } Property Value Type Description KeyValuePair < Int64 , String >[] ExprScale Expression scale Declaration int ExprScale { get; } Property Value Type Description Int32 ExprSize Expression size Declaration int ExprSize { get; } Property Value Type Description Int32 ExprText Expression text Declaration string ExprText { get; } Property Value Type Description String ExprType Expression type Declaration DataExpressionType ExprType { get; } Property Value Type Description DataExpressionType FieldName Field name Declaration string FieldName { get; } Property Value Type Description String Flags Flags Declaration DataPropertyFlag Flags { get; set; } Property Value Type Description DataPropertyFlag IsAutoIncrement Auto increment field flag Declaration bool IsAutoIncrement { get; } Property Value Type Description Boolean IsSelectable Selectable flag Declaration bool IsSelectable { get; set; } Property Value Type Description Boolean IsTablePk Table primary key flag Declaration bool IsTablePk { get; } Property Value Type Description Boolean Name Property name Declaration string Name { get; set; } Property Value Type Description String NativeSqlType Native SQL type name Declaration string NativeSqlType { get; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter! SqlType Sql type Declaration DbType SqlType { get; } Property Value Type Description DbType Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.ReferenceAttribute.html": {
    "href": "api/XData.Mapping.ReferenceAttribute.html",
    "title": "Class ReferenceAttribute | XData website",
    "keywords": "Class ReferenceAttribute Data object referenced inner view property attribute Inheritance Object System.Attribute PropertyBaseAttribute ReferenceAttribute Inherited Members PropertyBaseAttribute.Source PropertyBaseAttribute.Flags PropertyBaseAttribute.NativeSqlType Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class ReferenceAttribute : PropertyBaseAttribute Remarks Used to map property to data of inner view declared PropertyAttribute or ColumnAttribute Constructors ReferenceAttribute(String, String) Data object referenced inner view property attribute Declaration public ReferenceAttribute(string source, string propertyName = \"\") Parameters Type Name Description String source Source alias String propertyName Linked property name Exceptions Type Condition XDataRuntimeException Linked property name cannot be null or empty string Properties IsLink Property reference flag Declaration public override bool IsLink { get; } Property Value Type Description Boolean True Overrides PropertyBaseAttribute.IsLink PropertyName Referenced property (or column) name Declaration public string PropertyName { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.RangeFilterAttribute.html": {
    "href": "api/XData.Mapping.RangeFilterAttribute.html",
    "title": "Class RangeFilterAttribute | XData website",
    "keywords": "Class RangeFilterAttribute Data object range filter attribute Inheritance Object System.Attribute FilterBaseAttribute FilterAttribute RangeFilterAttribute Inherited Members FilterAttribute.Source FilterAttribute.FieldName FilterAttribute.Operation FilterAttribute.Combination Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class RangeFilterAttribute : FilterAttribute Remarks Used to filter data by range of values (for example: some_field in (1, 2, 3) or some_field not in (1, 2, 3) ) Hint: Using dynamic LINQ range filters will increase code flexibility (see example). Examples var states = new List<int>(); // fill states from somewhere dataScope.GetRepository<Invoice>().Where(x => states.Contains(x.State)); Constructors RangeFilterAttribute(String, String, Object[]) Range filter attribute Declaration public RangeFilterAttribute(string source, string fieldName, params object[] range) Parameters Type Name Description String source Primary source alias String fieldName Primary field name Object [] range Range values Exceptions Type Condition XDataRuntimeException Range values cannot be null or empty array Properties FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Range Overrides FilterBaseAttribute.FilterType Range Range values Declaration public object[] Range { get; } Property Value Type Description Object [] TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.PropertyGroupingAttribute.html": {
    "href": "api/XData.Mapping.PropertyGroupingAttribute.html",
    "title": "Class PropertyGroupingAttribute | XData website",
    "keywords": "Class PropertyGroupingAttribute Data object property grouping attribute Inheritance Object System.Attribute PropertyGroupingAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyGroupingAttribute : Attribute Constructors PropertyGroupingAttribute() Data object property grouping attribute Declaration public PropertyGroupingAttribute() Properties Grouping Property data aggregate function Declaration public DataGrouping Grouping { get; set; } Property Value Type Description DataGrouping See Also DataGrouping GroupOrder Property group order Declaration public short GroupOrder { get; set; } Property Value Type Description Int16 Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DataGrouping"
  },
  "api/XData.Mapping.PropertyExpressionAttribute.html": {
    "href": "api/XData.Mapping.PropertyExpressionAttribute.html",
    "title": "Class PropertyExpressionAttribute | XData website",
    "keywords": "Class PropertyExpressionAttribute Data object property plain expression attribute Inheritance Object System.Attribute PropertyExpressionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyExpressionAttribute : Attribute Remarks Used when PropertyAttribute value is expression ( PlainSql or SubQuery ) according ExprType Constructors PropertyExpressionAttribute(String, DataExpressionType, DbType) Data object property plain expression attribute Declaration public PropertyExpressionAttribute(string exprText, DataExpressionType exprType = DataExpressionType.PlainSql, DbType type = DbType.String) Parameters Type Name Description String exprText Expression text DataExpressionType exprType Expression type DbType type Expression DbType Exceptions Type Condition XDataRuntimeException Expression text cannot be null or empty string Properties DbType Expression DbType Declaration public DbType DbType { get; } Property Value Type Description DbType ExprScale Expression scale Declaration public int ExprScale { get; set; } Property Value Type Description Int32 ExprSize Expression size Declaration public int ExprSize { get; set; } Property Value Type Description Int32 ExprText Expression text Declaration public string ExprText { get; } Property Value Type Description String Remarks PlainSql expression text is Sql expression or SqlExpressionAttribute name SubQuery expression text is Alias WARNING! Plain Sql expressions (see ExprType ) can use specific SQL dialect features! Data mapping may be not compatible with other database engines! Use SqlExpressionAttribute instead. ExprType Expression type Declaration public DataExpressionType ExprType { get; } Property Value Type Description DataExpressionType Remarks WARNING! Plain Sql expressions can use specific Sql dialect features! Data mapping may be not compatible with other database engines! Use SqlExpressionAttribute instead. See Also DataExpressionType Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IFilterCombination.html": {
    "href": "api/XData.DataSource.Structure.IFilterCombination.html",
    "title": "Interface IFilterCombination | XData website",
    "keywords": "Interface IFilterCombination Filter combination interface Inherited Members ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IFilterCombination : ICloneable Properties Combination Logical combination Declaration Combination Combination { get; } Property Value Type Description Combination FilterCombinations Child combinations Declaration List<IFilterCombination> FilterCombinations { get; } Property Value Type Description List < IFilterCombination > Filters Filters Declaration List<IFilter> Filters { get; } Property Value Type Description List < IFilter > Name Filter combination name Declaration string Name { get; } Property Value Type Description String Methods GetLinks(String) Returns links Declaration IEnumerable<IInnerLink> GetLinks(string alias) Parameters Type Name Description String alias Source alias Returns Type Description IEnumerable < IInnerLink > Links sequence GetLinks(String[], Boolean) Returns links Declaration IEnumerable<IInnerLink> GetLinks(string[] aliases, bool exact) Parameters Type Name Description String [] aliases Array of source aliases Boolean exact Exact comparison flag Returns Type Description IEnumerable < IInnerLink > Links sequence GetLinks(IDataStructure, String) Returns links Declaration IEnumerable<IInnerLink> GetLinks(IDataStructure structure, string alias) Parameters Type Name Description IDataStructure structure Structure String alias Source alias Returns Type Description IEnumerable < IInnerLink > Links sequence GetPrimaryFilters() Returns primary filters Declaration List<IOptionalFilter> GetPrimaryFilters() Returns Type Description List < IOptionalFilter > Primary filters list GetValueFilters() Return value filters list Declaration IEnumerable<IFilter> GetValueFilters() Returns Type Description IEnumerable < IFilter > Value filters list Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IFilter.html": {
    "href": "api/XData.DataSource.Structure.IFilter.html",
    "title": "Interface IFilter | XData website",
    "keywords": "Interface IFilter Filter interface Inherited Members ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IFilter : ICloneable Properties Field Field name Declaration string Field { get; } Property Value Type Description String FilterType Filter type Declaration FilterType FilterType { get; } Property Value Type Description FilterType Operation Filter operation Declaration FilterOperation Operation { get; } Property Value Type Description FilterOperation SourceAlias Source alias Declaration string SourceAlias { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IConstantFilter.html": {
    "href": "api/XData.DataSource.Structure.IConstantFilter.html",
    "title": "Interface IConstantFilter | XData website",
    "keywords": "Interface IConstantFilter Constant value filter interface Inherited Members INamedFilter.Name IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IConstantFilter : INamedFilter, IFilter, ICloneable Properties ConstantType Constant value type Declaration FilterConstantType ConstantType { get; } Property Value Type Description FilterConstantType ConstantValue Constant value Declaration string ConstantValue { get; } Property Value Type Description String Nullable Constant value null value handling mode Declaration FilterNullable Nullable { get; } Property Value Type Description FilterNullable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.Hierarchy.html": {
    "href": "api/XData.DataSource.Structure.Hierarchy.html",
    "title": "Class Hierarchy | XData website",
    "keywords": "Class Hierarchy Hierarchy Inheritance Object Hierarchy Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public sealed class Hierarchy Constructors Hierarchy(String, String, String, String) Hierarchy constructor Declaration public Hierarchy(string name, string parent, string linkParent, string linkChild) Parameters Type Name Description String name Hierarchy table name String parent Parent link field String linkParent Hierarchy table parent link String linkChild Hierarchy table child link Properties LinkChild Hierarchy table child link Declaration public string LinkChild { get; } Property Value Type Description String LinkParent Hierarchy table parent link Declaration public string LinkParent { get; } Property Value Type Description String Name Hierarchy table name Declaration public string Name { get; } Property Value Type Description String Parent Parent link field Declaration public string Parent { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.DataQueryState.html": {
    "href": "api/XData.DataSource.Structure.DataQueryState.html",
    "title": "Class DataQueryState | XData website",
    "keywords": "Class DataQueryState Data query state Inheritance Object DataQueryState RepositoryState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax [Serializable] [DataContract] public class DataQueryState Properties AssemblyName Element type assembly name Declaration [DataMember] public string AssemblyName { get; set; } Property Value Type Description String Context Context Declaration [DataMember] public string Context { get; set; } Property Value Type Description String ElementType Element type name Declaration [DataMember] public string ElementType { get; set; } Property Value Type Description String Structure DataStructure Declaration [DataMember] public DataStructureState Structure { get; set; } Property Value Type Description DataStructureState Methods ToString() Returns a String that represents the current Object . Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString() Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataPropertyFlag.html": {
    "href": "api/XData.DataPropertyFlag.html",
    "title": "Enum DataPropertyFlag | XData website",
    "keywords": "Enum DataPropertyFlag Data object property flags Namespace : XData Assembly : XData.dll Syntax [Flags] [DataContract] public enum DataPropertyFlag Fields Name Description ConcurrencyToken Data object concurrency token field flag Id Data object unique key part None Common data property OuterFlag Outer joined information filled flag See Also Flags Flags None Id OuterFlag Extension Methods SerializationExtensions.ToXml<DataPropertyFlag>() CollectionsExtensions.SetValue<DataPropertyFlag, T>(T) CollectionsExtensions.AsEnum<DataPropertyFlag>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataPropertyFlag, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.TableInfo.html": {
    "href": "api/XData.Database.TableInfo.html",
    "title": "Class TableInfo | XData website",
    "keywords": "Class TableInfo Table information Inheritance Object TableInfo Implements IEquatable < TableInfo > ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : XData.Database Assembly : XData.dll Syntax [Serializable] public class TableInfo : IEquatable<TableInfo>, ICloneable Properties Fields Table fields Declaration public List<FieldInfo> Fields { get; set; } Property Value Type Description List < FieldInfo > Name Table name Declaration public string Name { get; set; } Property Value Type Description String Methods Clone() Creates a new object that is a copy of the current instance. Declaration public object Clone() Returns Type Description Object A new object that is a copy of this instance. Equals(TableInfo) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(TableInfo other) Parameters Type Name Description TableInfo other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false. RefreshFields(String, IConfiguration) Refresh tale info Declaration public TableInfo RefreshFields(string context, IConfiguration cfg = null) Parameters Type Name Description String context Context name IConfiguration cfg Configuration Returns Type Description TableInfo Refreshed table info ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Implements System.IEquatable<T> System.ICloneable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.ITransaction.html": {
    "href": "api/XData.Database.ITransaction.html",
    "title": "Interface ITransaction | XData website",
    "keywords": "Interface ITransaction Transaction wrapper interface Inherited Members IDisposable.Dispose() Namespace : XData.Database Assembly : XData.dll Syntax public interface ITransaction : IDisposable Methods Commit() Commit transaction Declaration bool Commit() Returns Type Description Boolean Success flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DefaultType.html": {
    "href": "api/XData.DefaultType.html",
    "title": "Enum DefaultType | XData website",
    "keywords": "Enum DefaultType Default value type Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum DefaultType Fields Name Description AutoIncrement Auto increment value as default Const Constant value as default CurrentDate Current date CurrentDateTime Current date and time CurrentDateTimeUtc Current date and time UTC NewGuid New GUID as default None No default value UserName Current user name Variable Variable value as default See Also DefaultSource DefaultSource None CurrentDate CurrentDateTime CurrentDateTimeUtc Variable Const AutoIncrement Extension Methods SerializationExtensions.ToXml<DefaultType>() CollectionsExtensions.SetValue<DefaultType, T>(T) CollectionsExtensions.AsEnum<DefaultType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DefaultType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DateDiffKind.html": {
    "href": "api/XData.DateDiffKind.html",
    "title": "Enum DateDiffKind | XData website",
    "keywords": "Enum DateDiffKind Date difference kind Namespace : XData Assembly : XData.dll Syntax public enum DateDiffKind Fields Name Description Days Date difference in month days DaysTotal Date difference in days Hours Date difference in hours Minutes Date difference in minutes Months Date difference in months Seconds Date difference in seconds Years Date difference in years Extension Methods SerializationExtensions.ToXml<DateDiffKind>() CollectionsExtensions.SetValue<DateDiffKind, T>(T) CollectionsExtensions.AsEnum<DateDiffKind>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DateDiffKind, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.TaggedValue.html": {
    "href": "api/XData.DataSource.Structure.TaggedValue.html",
    "title": "Struct TaggedValue | XData website",
    "keywords": "Struct TaggedValue Nameed value Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax [Serializable] [DataContract] public struct TaggedValue Properties Key Name Declaration [DataMember] public string Key { get; set; } Property Value Type Description String Value Value Declaration [DataMember] public string Value { get; set; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.SelectedField.html": {
    "href": "api/XData.DataSource.Structure.SelectedField.html",
    "title": "Struct SelectedField | XData website",
    "keywords": "Struct SelectedField Selected field description Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public struct SelectedField Constructors SelectedField(IField, String, String, String) Selected field constructor Declaration public SelectedField(IField field, string alias, string fieldName, string property = null) Parameters Type Name Description IField field Field object String alias Source alias String fieldName Field name String property Property name Fields Alias Alias Declaration public readonly string Alias Field Value Type Description String Field Field description Declaration public readonly IField Field Field Value Type Description IField FieldName Full field name Declaration public readonly string FieldName Field Value Type Description String Property Property name Declaration public readonly string Property Field Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.ISubqueryLink.html": {
    "href": "api/XData.DataSource.Structure.ISubqueryLink.html",
    "title": "Interface ISubqueryLink | XData website",
    "keywords": "Interface ISubqueryLink Subquery link interface Inherited Members IInnerLink.LinkedSourceAlias IInnerLink.LinkedField IInnerLink.GetIsLink() IInnerLink.GetAliases() IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface ISubqueryLink : IInnerLink, IOptionalFilter, IFilter, ICloneable Properties LinkedType Linked type full name Declaration string LinkedType { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.ISubqueryFilter.html": {
    "href": "api/XData.DataSource.Structure.ISubqueryFilter.html",
    "title": "Interface ISubqueryFilter | XData website",
    "keywords": "Interface ISubqueryFilter Subquery filter interface Inherited Members IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface ISubqueryFilter : IOptionalFilter, IFilter, ICloneable Properties SubqueryAlias Subquery alias Declaration string SubqueryAlias { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IInnerViewLink.html": {
    "href": "api/XData.DataSource.Structure.IInnerViewLink.html",
    "title": "Interface IInnerViewLink | XData website",
    "keywords": "Interface IInnerViewLink Inner view link interface Inherited Members IInnerLink.LinkedSourceAlias IInnerLink.LinkedField IInnerLink.GetIsLink() IInnerLink.GetAliases() IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IInnerViewLink : IInnerLink, IOptionalFilter, IFilter, ICloneable Properties LinkedAlias Linked source alias Declaration string LinkedAlias { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IInnerLink.html": {
    "href": "api/XData.DataSource.Structure.IInnerLink.html",
    "title": "Interface IInnerLink | XData website",
    "keywords": "Interface IInnerLink Link interface Inherited Members IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IInnerLink : IOptionalFilter, IFilter, ICloneable Properties LinkedField Linked field Declaration string LinkedField { get; } Property Value Type Description String LinkedSourceAlias Linked source alias Declaration string LinkedSourceAlias { get; } Property Value Type Description String Methods GetAliases() Link aliases Declaration string[] GetAliases() Returns Type Description String [] GetIsLink() Link flag Declaration bool GetIsLink() Returns Type Description Boolean Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.INamedFilter.html": {
    "href": "api/XData.DataSource.Structure.INamedFilter.html",
    "title": "Interface INamedFilter | XData website",
    "keywords": "Interface INamedFilter Named filter interface Inherited Members IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface INamedFilter : IFilter, ICloneable Properties Name Filter name Declaration string Name { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataExpressionType.html": {
    "href": "api/XData.DataExpressionType.html",
    "title": "Enum DataExpressionType | XData website",
    "keywords": "Enum DataExpressionType Expression type Namespace : XData Assembly : XData.dll Syntax [DataContract] public enum DataExpressionType Fields Name Description LinqExpression LINQ-style defined expression PlainSql Plain SQL expression SubQuery Subquery expression See Also ExprType ExprType PlainSql SubQuery Extension Methods SerializationExtensions.ToXml<DataExpressionType>() CollectionsExtensions.SetValue<DataExpressionType, T>(T) CollectionsExtensions.AsEnum<DataExpressionType>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataExpressionType, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Dialect.ExpressionContext.html": {
    "href": "api/XData.Database.Dialect.ExpressionContext.html",
    "title": "Class ExpressionContext | XData website",
    "keywords": "Class ExpressionContext SQL expression context Inheritance Object ExpressionContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database.Dialect Assembly : XData.dll Syntax public class ExpressionContext Properties OuterQueries Subquery outer queries Declaration public Dictionary<string, IDataQuery> OuterQueries { get; set; } Property Value Type Description Dictionary < String , IDataQuery > Query Expression context query Declaration public IDataQuery Query { get; } Property Value Type Description IDataQuery Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructureAdapter-1.html",
    "title": "Interface IRepositoryStructureAdapter<T> | XData website",
    "keywords": "Interface IRepositoryStructureAdapter<T> Repository structure mapping adapter interface Inherited Members IRepositoryStructureAdapter.Field<TValue>(String, String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) IRepositoryStructureAdapter.Field<TValue>(String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) IRepositoryStructureAdapter.Field<TValue>(Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) IRepositoryStructureAdapter.Expr<TValue>(String, DataExpressionType, String, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) IRepositoryStructureAdapter.Expr<TValue>(String, Expression<Func<IQueryStructureAdapter, TValue>>, DbType, Expression<Func<IRepositoryExpressionMappingAdapter, IStructureFlag>>[]) IRepositoryStructureAdapter.Ref<TValue>(String, String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) IRepositoryStructureAdapter.Ref<TValue, TDobj>(String, Expression<Func<TDobj, Object>>, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IRepositoryStructureAdapter<T> : IRepositoryStructureAdapter where T : class, IDataObject, new() Type Parameters Name Description T Methods Link<TValue, TSource>(String, Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[]) Link property mapping Declaration Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) where TValue : IComparable<TValue> where TSource : class, IDataObject, new() Parameters Type Name Description String sourceAlias Property source alias Expression < Func < ILinkPropertyMappingAdapter <T>, IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Link <TValue, TSource> Link property Type Parameters Name Description TValue Link value type TSource Link source type Link<TValue, TSource>(String, String, Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[]) Link property mapping Declaration Link<TValue, TSource> Link<TValue, TSource>(string sourceAlias, string fieldName, params Expression<Func<ILinkPropertyMappingAdapter<T>, IStructureFlag>>[] attributes) where TValue : IComparable<TValue> where TSource : class, IDataObject, new() Parameters Type Name Description String sourceAlias Property source alias String fieldName Property field name Expression < Func < ILinkPropertyMappingAdapter <T>, IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Link <TValue, TSource> Link property Type Parameters Name Description TValue Link value type TSource Link source type Lob(String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Lob property mapping Declaration Lob Lob(string sourceAlias, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Property source alias Expression < Func < IRepositoryPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Lob Lob property Lob(String, String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Lob property mapping Declaration Lob Lob(string sourceAlias, string fieldName, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Property source alias String fieldName Property field name Expression < Func < IRepositoryPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Lob Lob property Xml(String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Xml property mapping Declaration Xml Xml(string sourceAlias, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Property source alias Expression < Func < IRepositoryPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Xml Xml property Xml(String, String, Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[]) Xml property mapping Declaration Xml Xml(string sourceAlias, string fieldName, params Expression<Func<IRepositoryPropertyMappingAdapter, IStructureFlag>>[] attributes) Parameters Type Name Description String sourceAlias Property source alias String fieldName Property field name Expression < Func < IRepositoryPropertyMappingAdapter , IStructureFlag >>[] attributes Property mapping attributes Returns Type Description Xml Xml property Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryStructure-1.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryStructure-1.html",
    "title": "Interface IRepositoryStructure<T> | XData website",
    "keywords": "Interface IRepositoryStructure<T> Repository structure descriptor Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IRepositoryStructure<T> where T : class, IDataObject, new() Type Parameters Name Description T Data object type Methods Column<TResult>(String, Expression<Func<IRepositoryStructureAdapter, TResult>>) Dynamic repository hidden property mapping Declaration IRepositoryStructure<T> Column<TResult>(string name, Expression<Func<IRepositoryStructureAdapter, TResult>> mapper) Parameters Type Name Description String name Hidden property name Expression < Func < IRepositoryStructureAdapter , TResult>> mapper Property mapping expression Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TResult Hidden property type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryStructureAdapter DataTable(String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic repository table mapping Declaration IRepositoryStructure<T> DataTable(string name, string alias, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String name Table name String alias Table alias Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IRepositoryStructure <T> Query structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription DataTable(String, String, String, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic repository table mapping Declaration IRepositoryStructure<T> DataTable(string name, string alias, string parent = null, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String name Table name String alias Table alias String parent Parent table alias Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IRepositoryStructure <T> Repository structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription InnerView(String, Type, Expression<Func<ISubqueryFilterAdapter<T>, IFilterDescription>>[]) Dynamic repository inner view mapping Declaration IRepositoryStructure<T> InnerView(string alias, Type dobjType, params Expression<Func<ISubqueryFilterAdapter<T>, IFilterDescription>>[] filters) Parameters Type Name Description String alias Inner view alias Type dobjType Inner view statically mapped type Expression < Func < ISubqueryFilterAdapter <T>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IRepositoryStructure <T> Repository structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription InnerView<TDobj>(String, Expression<Func<ISubqueryFilterAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository inner view mapping Declaration IRepositoryStructure<T> InnerView<TDobj>(string alias, params Expression<Func<ISubqueryFilterAdapter<T, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Inner view alias Expression < Func < ISubqueryFilterAdapter <T, TDobj>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IRepositoryStructure <T> Query structure Type Parameters Name Description TDobj Inner view statically mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription InnerView<TDobj>(String, IQueryDescription<TDobj>, Expression<Func<ISubqueryFilterAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository inner view mapping Declaration IRepositoryStructure<T> InnerView<TDobj>(string alias, IQueryDescription<TDobj> sub, params Expression<Func<ISubqueryFilterAdapter<T, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Inner view alias IQueryDescription <TDobj> sub Inner view query structure Expression < Func < ISubqueryFilterAdapter <T, TDobj>, IFilterDescription >>[] filters Filters and links applied to inner view Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TDobj See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription IFilterDescription Map(Expression<Func<IRepositoryStructureAdapter<T>, T>>, Expression<Func<IExternalLinkDefinitionAdapter<T>, IExternalLinkDefinition>>[]) Dynamic repository properties mapping Declaration IRepositoryDescription<T> Map(Expression<Func<IRepositoryStructureAdapter<T>, T>> mapper, params Expression<Func<IExternalLinkDefinitionAdapter<T>, IExternalLinkDefinition>>[] externalLinks) Parameters Type Name Description Expression < Func < IRepositoryStructureAdapter <T>, T>> mapper Mapping expression Expression < Func < IExternalLinkDefinitionAdapter <T>, IExternalLinkDefinition >>[] externalLinks External link descriptions Returns Type Description IRepositoryDescription <T> Dynamic repository description See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription <T> IQueryStructureAdapter Parameter<TResult>(String, Int32, String, DbType, Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[]) Dynamic repository procedure parameter mapping Declaration IRepositoryStructure<T> Parameter<TResult>(string alias, int order, string binding, DbType type, params Expression<Func<IProcedureParameterAdapter, IProcedureParameterFlag>>[] attributes) Parameters Type Name Description String alias Procedure alias Int32 order Parameter order String binding Parameter value binding DbType type Parameter SQL data type Expression < Func < IProcedureParameterAdapter , IProcedureParameterFlag >>[] attributes Parameter attributes Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TResult Parameter data type Procedure(String, String, ProcedureType, Expression<Func<IInnerFilterAdapter, IFilterDescription>>[]) Dynamic repository procedure mapping Declaration IRepositoryStructure<T> Procedure(string alias, string name, ProcedureType type, params Expression<Func<IInnerFilterAdapter, IFilterDescription>>[] filters) Parameters Type Name Description String alias Procedure alias String name Procedure name ProcedureType type Procedure type Expression < Func < IInnerFilterAdapter , IFilterDescription >>[] filters Filters and links applied to table Returns Type Description IRepositoryStructure <T> Repository structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription ReadOnlyProperty<TResult>(Expression<Func<T, TResult>>, Expression<Func<IRepositoryStructureAdapter, TResult>>) Dynamic repository read only properties mapping Declaration IRepositoryStructure<T> ReadOnlyProperty<TResult>(Expression<Func<T, TResult>> property, Expression<Func<IRepositoryStructureAdapter, TResult>> mapper) Parameters Type Name Description Expression < Func <T, TResult>> property Property name expression Expression < Func < IRepositoryStructureAdapter , TResult>> mapper Property mapping Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TResult Property type Return<TResult>(String, String, Int32, Expression<Func<IQueryStructureAdapter, T>>) Dynamic repository procedure result set mapping Declaration IRepositoryStructure<T> Return<TResult>(string alias, string name, int order, Expression<Func<IQueryStructureAdapter, T>> mapper = null) where TResult : class Parameters Type Name Description String alias Procedure alias String name Result set name Int32 order Result set order Expression < Func < IQueryStructureAdapter , T>> mapper Result set mapper Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TResult Result set data type Subquery(String, Type, String, DataGrouping, Expression<Func<ISubqueryFilterAdapter<T>, IFilterDescription>>[]) Dynamic repository subquery mapping Declaration IRepositoryStructure<T> Subquery(string alias, Type dobjType, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryFilterAdapter<T>, IFilterDescription>>[] filters) Parameters Type Name Description String alias Subquery alias Type dobjType Subquery statically mapped type String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryFilterAdapter <T>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IRepositoryStructure <T> Repository structure See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription Subquery<TDobj>(String, Expression<Func<TDobj, Object>>, DataGrouping, Expression<Func<ISubqueryFilterAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository subquery mapping Declaration IRepositoryStructure<T> Subquery<TDobj>(string alias, Expression<Func<TDobj, object>> property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryFilterAdapter<T, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Subquery alias Expression < Func <TDobj, Object >> property Subquery selected property expression DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryFilterAdapter <T, TDobj>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TDobj Subquery statically mapped type See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IFilterDescription Subquery<TDobj>(String, IQueryDescription<TDobj>, String, DataGrouping, Expression<Func<ISubqueryFilterAdapter<T, TDobj>, IFilterDescription>>[]) Dynamic repository subquery mapping Declaration IRepositoryStructure<T> Subquery<TDobj>(string alias, IQueryDescription<TDobj> sub, string property, DataGrouping grouping = DataGrouping.None, params Expression<Func<ISubqueryFilterAdapter<T, TDobj>, IFilterDescription>>[] filters) where TDobj : class Parameters Type Name Description String alias Subquery alias IQueryDescription <TDobj> sub Subquery query structure String property Subquery selected property DataGrouping grouping Subquery selected property aggregate function Expression < Func < ISubqueryFilterAdapter <T, TDobj>, IFilterDescription >>[] filters Filters and links applied to subquery Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TDobj See Also GetStructure(String, String, DataStructureFlag, Variable[]) IQueryStructure IQueryDescription DataGrouping IFilterDescription With<TRoot>(String, IQueryDescription<TRoot>, Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[]) Dynamic repository Common-Table-Expression (WITH) subquery mapping Declaration IRepositoryStructure<T> With<TRoot>(string alias, IQueryDescription<TRoot> sub, params Expression<Func<IQueryWithAdapter<TRoot>, IQueryWithFlag>>[] attributes) where TRoot : class Parameters Type Name Description String alias Common-Table-Expression (WITH) subquery alias IQueryDescription <TRoot> sub Common-Table-Expression (WITH) initial subquery description Expression < Func < IQueryWithAdapter <TRoot>, IQueryWithFlag >>[] attributes Common-Table-Expression (WITH) attributes Returns Type Description IRepositoryStructure <T> Repository structure Type Parameters Name Description TRoot Common-Table-Expression (WITH) initial subquery mapped type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryPropertyMappingAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryPropertyMappingAdapter.html",
    "title": "Interface IRepositoryPropertyMappingAdapter | XData website",
    "keywords": "Interface IRepositoryPropertyMappingAdapter Repository property mapping adapter Inherited Members IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IRepositoryPropertyMappingAdapter : IPropertyMappingAdapter Methods ConcurrencyToken() Property is concurrency token flag attribute Declaration IStructureFlag ConcurrencyToken() Returns Type Description IStructureFlag Default(DefaultType) Default value mode attribute Declaration IStructureFlag Default(DefaultType source) Parameters Type Name Description DefaultType source Default value algorithm Returns Type Description IStructureFlag Property description attribute Default(DefaultType, Boolean) Default value mode attribute Declaration IStructureFlag Default(DefaultType source, bool alwaysUseDefault) Parameters Type Name Description DefaultType source Default value algorithm Boolean alwaysUseDefault Use default value on update Returns Type Description IStructureFlag Property description attribute Default(DefaultType, String) Default value mode attribute Declaration IStructureFlag Default(DefaultType source, string value) Parameters Type Name Description DefaultType source Default value algorithm String value Default value Returns Type Description IStructureFlag Property description attribute Default(DefaultType, String, Boolean) Default value mode attribute Declaration IStructureFlag Default(DefaultType source, string value, bool alwaysUseDefault) Parameters Type Name Description DefaultType source Default value algorithm String value Default value Boolean alwaysUseDefault Use default value on update Returns Type Description IStructureFlag Property description attribute OuterFlag() Property is outer join flag attribute Declaration IStructureFlag OuterFlag() Returns Type Description IStructureFlag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IRepositoryExpressionMappingAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IRepositoryExpressionMappingAdapter.html",
    "title": "Interface IRepositoryExpressionMappingAdapter | XData website",
    "keywords": "Interface IRepositoryExpressionMappingAdapter Repository SQL expression property mapping adapter Inherited Members IRepositoryPropertyMappingAdapter.Default(DefaultType) IRepositoryPropertyMappingAdapter.Default(DefaultType, Boolean) IRepositoryPropertyMappingAdapter.Default(DefaultType, String) IRepositoryPropertyMappingAdapter.Default(DefaultType, String, Boolean) IRepositoryPropertyMappingAdapter.ConcurrencyToken() IRepositoryPropertyMappingAdapter.OuterFlag() IExpressionPropertyAdapter.Size(Int32) IExpressionPropertyAdapter.Size(Int32, Int32) IExpressionPropertyAdapter.NativeSqlType(String) IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IRepositoryExpressionMappingAdapter : IRepositoryPropertyMappingAdapter, IExpressionPropertyAdapter, IPropertyMappingAdapter Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IInnerFilterAdapter.html": {
    "href": "api/XData.Mapping.Dynamic.IInnerFilterAdapter.html",
    "title": "Interface IInnerFilterAdapter | XData website",
    "keywords": "Interface IInnerFilterAdapter Inner filter description adapter Inherited Members IFilterAdapter.Combination(String, Combination, String) IFilterAdapter.Combination(String, Combination) Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IInnerFilterAdapter : IFilterAdapter Methods ConstFilter(String, String, String) Constant valued filter description Declaration IFilterDescription ConstFilter(string name, string field, string constantValue) Parameters Type Name Description String name Filter name String field Field name to filter on String constantValue Constant value Returns Type Description IFilterDescription Filter description ConstFilter(String, String, FilterConstantType) Constant valued filter description Declaration IFilterDescription ConstFilter(string name, string field, FilterConstantType constantType) Parameters Type Name Description String name Filter name String field Field name to filter on FilterConstantType constantType Constant type Returns Type Description IFilterDescription Filter description ConstFilter(String, String, FilterConstantType, String) Constant valued filter description Declaration IFilterDescription ConstFilter(string name, string field, FilterConstantType constantType, string constantValue) Parameters Type Name Description String name Filter name String field Field name to filter on FilterConstantType constantType Constant type String constantValue Constant value Returns Type Description IFilterDescription Filter description ConstFilter(String, String, FilterConstantType, String, FilterNullable) Constant valued filter description Declaration IFilterDescription ConstFilter(string name, string field, FilterConstantType constantType, string constantValue, FilterNullable nullable) Parameters Type Name Description String name Filter name String field Field name to filter on FilterConstantType constantType Constant type String constantValue Constant value FilterNullable nullable Filter null value handling mode Returns Type Description IFilterDescription Filter description DictFilter(String, String, String, String) Dictionary code filter description Declaration IFilterDescription DictFilter(string dictTable, string dictId, string dictCode, string dictValue) Parameters Type Name Description String dictTable Dictionary table name String dictId Dictionary table identity column String dictCode Dictionary table code column String dictValue Dictionary code value to filter on Returns Type Description IFilterDescription Filter description DictFilter(String, String, String, String, Boolean) Dictionary code filter description Declaration IFilterDescription DictFilter(string dictTable, string dictId, string dictCode, string dictValue, bool valueIsVariable) Parameters Type Name Description String dictTable Dictionary table name String dictId Dictionary table identity column String dictCode Dictionary table code column String dictValue Dictionary code value to filter on Boolean valueIsVariable Dictionary code value is a variable name flag Returns Type Description IFilterDescription Filter description DictFilter(String, String, String, String, String) Dictionary code filter description Declaration IFilterDescription DictFilter(string dictTable, string dictId, string dictCode, string dictValue, string field) Parameters Type Name Description String dictTable Dictionary table name String dictId Dictionary table identity column String dictCode Dictionary table code column String dictValue Dictionary code value to filter on String field Field name to filter on Returns Type Description IFilterDescription Filter description DictFilter(String, String, String, String, String, Boolean) Dictionary code filter description Declaration IFilterDescription DictFilter(string dictTable, string dictId, string dictCode, string dictValue, string field, bool valueIsVariable) Parameters Type Name Description String dictTable Dictionary table name String dictId Dictionary table identity column String dictCode Dictionary table code column String dictValue Dictionary code value to filter on String field Field name to filter on Boolean valueIsVariable Dictionary code value is a variable name flag Returns Type Description IFilterDescription Filter description ExprFilter(String, String) Expression filter description Declaration IFilterDescription ExprFilter(string field, string exprText) Parameters Type Name Description String field Field name to filter on String exprText SQL expression text Returns Type Description IFilterDescription Filter description ExprFilter<T>(String, Expression<Func<IQueryStructureAdapter, T>>) Expression filter description Declaration IFilterDescription ExprFilter<T>(string field, Expression<Func<IQueryStructureAdapter, T>> expression) Parameters Type Name Description String field Field name to filter on Expression < Func < IQueryStructureAdapter , T>> expression SQL expression description Returns Type Description IFilterDescription Filter description Type Parameters Name Description T Link(String, String) Inner link filter description Declaration IFilterDescription Link(string linkedAlias, string linkedField) Parameters Type Name Description String linkedAlias Linked source alias String linkedField Linked source field name to link Returns Type Description IFilterDescription Filter description Link(String, String, String) Inner link filter description Declaration IFilterDescription Link(string linkedAlias, string linkedField, string field) Parameters Type Name Description String linkedAlias Linked source alias String linkedField Linked source field name to link String field Current field name to link Returns Type Description IFilterDescription Filter description RangeFilter(String, Object[]) Range filter description Declaration IFilterDescription RangeFilter(string field, params object[] range) Parameters Type Name Description String field Field name to filter on Object [] range Values range Returns Type Description IFilterDescription Filter description SubqueryFilter(String, String) Subquery filter (exists, not exists, in select, not in select) description Declaration IFilterDescription SubqueryFilter(string field, string subqueryAlias) Parameters Type Name Description String field Field name to filter on String subqueryAlias Subquery alias Returns Type Description IFilterDescription Filter description Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.IFilterDescription.html": {
    "href": "api/XData.Mapping.Dynamic.IFilterDescription.html",
    "title": "Interface IFilterDescription | XData website",
    "keywords": "Interface IFilterDescription Dynamic query filter description Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface IFilterDescription Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetOperation<T>(T, FilterOperation) QueryDescriptionExtensions.AsPrimary<T>(T) QueryDescriptionExtensions.SetCombination<T>(T, String) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IDataStructure.html": {
    "href": "api/XData.DataSource.Structure.IDataStructure.html",
    "title": "Interface IDataStructure | XData website",
    "keywords": "Interface IDataStructure Data object structure Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IDataStructure Properties BaseSource Base source Declaration ITable BaseSource { get; } Property Value Type Description ITable Context Data structure context Declaration string Context { get; } Property Value Type Description String Distinct Structure distinct values flag Declaration bool Distinct { get; } Property Value Type Description Boolean FilterValues Runtime filter values Declaration SortedList<string, object> FilterValues { get; } Property Value Type Description SortedList < String , Object > Flags Data object flags Declaration DataStructureFlag Flags { get; } Property Value Type Description DataStructureFlag GroupBy Group by list Declaration List<Grouping> GroupBy { get; } Property Value Type Description List < Grouping > Hint Query hints Declaration HintInfo[] Hint { get; set; } Property Value Type Description HintInfo [] Inverse Structure filters inverse flag Declaration bool Inverse { get; } Property Value Type Description Boolean IsReadOnly Read only structure flag Declaration bool IsReadOnly { get; } Property Value Type Description Boolean IsSubquery Subquery flag Declaration bool IsSubquery { get; } Property Value Type Description Boolean IsUnion Combined structure flag Declaration bool IsUnion { get; } Property Value Type Description Boolean Limit Limit objects count Declaration int? Limit { get; } Property Value Type Description Nullable < Int32 > ObjectType Structure data object type Declaration Type ObjectType { get; } Property Value Type Description Type OrderBy Order by list Declaration List<Order> OrderBy { get; } Property Value Type Description List < Order > Parameters Stored procedure parameters definitions Declaration List<IParameterDescription> Parameters { get; } Property Value Type Description List < IParameterDescription > ResultSets Stored procedure result sets Declaration IResultSetDescription[] ResultSets { get; } Property Value Type Description IResultSetDescription [] ReverseOrder Structure reversion order flag Declaration bool ReverseOrder { get; } Property Value Type Description Boolean RootFilterCombination Structure root filter combination Declaration IFilterCombination RootFilterCombination { get; } Property Value Type Description IFilterCombination Skip Skip objects count Declaration int? Skip { get; } Property Value Type Description Nullable < Int32 > Sources Sources Declaration SortedSet<IDataSource> Sources { get; } Property Value Type Description SortedSet < IDataSource > StructureType Structure type full name Declaration string StructureType { get; } Property Value Type Description String UnionCombination Data object structure combination Declaration DataCombination UnionCombination { get; } Property Value Type Description DataCombination Methods FillSkippedSources(SortedList<String, Object>, out ICollection<String>) Fill skipped sources list Declaration bool FillSkippedSources(SortedList<string, object> filterValues, out ICollection<string> skipped) Parameters Type Name Description SortedList < String , Object > filterValues Filter values ICollection < String > skipped Returned skipped sources list Returns Type Description Boolean Structure skipped flag GetField(String, String, out String, out String) Returns field Declaration IField GetField(string sourceAlias, string fieldName, out string alias, out string fullName) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name String alias Relative alias String fullName Relative full name of field Returns Type Description IField Field object GetFields() Returns selectable fields Declaration IEnumerable<SelectedField> GetFields() Returns Type Description IEnumerable < SelectedField > Selectable fields sequence GetParent(String) Returns parent structure by object type Declaration IDataStructure GetParent(string parentType) Parameters Type Name Description String parentType Parent object type Returns Type Description IDataStructure Structure GetPrimaryKey() Returns data object unique key fields Declaration IEnumerable<SelectedField> GetPrimaryKey() Returns Type Description IEnumerable < SelectedField > Unique key fields sequence GetVariableValue(String) Returns variable value Declaration string GetVariableValue(string variableName) Parameters Type Name Description String variableName Variable name Returns Type Description String Variable value IsOuterJoined(String, String) Check source is outer joined to parent Declaration bool IsOuterJoined(string alias, string parentAlias) Parameters Type Name Description String alias Checked source alias String parentAlias Parent source alias Returns Type Description Boolean Outer joined flag Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IDataSource.html": {
    "href": "api/XData.DataSource.Structure.IDataSource.html",
    "title": "Interface IDataSource | XData website",
    "keywords": "Interface IDataSource Data object source Inherited Members ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IDataSource : ICloneable Properties Alias Source alias Declaration string Alias { get; } Property Value Type Description String IsBase Base table flag Declaration bool IsBase { get; } Property Value Type Description Boolean SourceType Source type Declaration DataSourceType SourceType { get; } Property Value Type Description DataSourceType Methods GetField(String, String, out String, out String) Returns property field Declaration IField GetField(string sourceAlias, string fieldName, out string alias, out string fullName) Parameters Type Name Description String sourceAlias Source alias String fieldName Field name String alias Relative source alias String fullName Relative field full name Returns Type Description IField Field object GetField(String, out String, out String) Returns property field Declaration IField GetField(string propertyName, out string alias, out string fieldName) Parameters Type Name Description String propertyName Property name String alias Relative source alias String fieldName Relative field full name Returns Type Description IField Field object GetFields() Returns selected fields Declaration IEnumerable<SelectedField> GetFields() Returns Type Description IEnumerable < SelectedField > Selected fields list GetFields(Type) Returns selected fields of subquery with type Declaration IEnumerable<SelectedField> GetFields(Type type) Parameters Type Name Description Type type Returns Type Description IEnumerable < SelectedField > Selected fields list Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.Field.html": {
    "href": "api/XData.DataSource.Structure.Field.html",
    "title": "Class Field | XData website",
    "keywords": "Class Field Field object Inheritance Object Field Implements IField ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax [Serializable] [DataContract] public class Field : IField, ICloneable Properties AlwaysUseDefault Always use the default value (also when updating) Declaration [DataMember] public bool AlwaysUseDefault { get; set; } Property Value Type Description Boolean DefaultType Default source Declaration [DataMember] public DefaultType DefaultType { get; set; } Property Value Type Description DefaultType DefaultValue Default value Declaration [DataMember] public string DefaultValue { get; set; } Property Value Type Description String EnumValues Enumeration values Declaration [DataMember] public KeyValuePair<long, string>[] EnumValues { get; set; } Property Value Type Description KeyValuePair < Int64 , String >[] ExprScale Expression scale Declaration [DataMember] public int ExprScale { get; set; } Property Value Type Description Int32 ExprSize Expression size Declaration [DataMember] public int ExprSize { get; set; } Property Value Type Description Int32 ExprText Expression text Declaration [DataMember] public string ExprText { get; set; } Property Value Type Description String ExprType Expression type Declaration [DataMember] public DataExpressionType ExprType { get; set; } Property Value Type Description DataExpressionType FieldName Field name Declaration [DataMember] public string FieldName { get; set; } Property Value Type Description String Flags Flags Declaration [DataMember] public DataPropertyFlag Flags { get; set; } Property Value Type Description DataPropertyFlag IsArray User defined type (UDT) collection is VARARRAY for field Declaration public bool IsArray { get; set; } Property Value Type Description Boolean IsAutoIncrement Autoincrement field flag Declaration [DataMember] public bool IsAutoIncrement { get; set; } Property Value Type Description Boolean IsSelectable Selectable flag Declaration [DataMember] public bool IsSelectable { get; set; } Property Value Type Description Boolean IsTablePk Table primary key flag Declaration [DataMember] public bool IsTablePk { get; set; } Property Value Type Description Boolean Name Property name Declaration [DataMember] public string Name { get; set; } Property Value Type Description String NativeSqlType Native SQL type name Declaration [DataMember] public string NativeSqlType { get; set; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter! SqlType Sql type Declaration [DataMember] public DbType SqlType { get; set; } Property Value Type Description DbType UdtElementTypeName User defined type (UDT) element type name for field Declaration [DataMember] public string UdtElementTypeName { get; set; } Property Value Type Description String UdtMappedType User defined type (UDT) mapped type for field Declaration [DataMember] public Type UdtMappedType { get; set; } Property Value Type Description Type UdtTypeName User defined type (UDT) name for field Declaration [DataMember] public string UdtTypeName { get; set; } Property Value Type Description String Methods Clone() Creates a new object that is a copy of the current instance. Declaration public object Clone() Returns Type Description Object A new object that is a copy of this instance. Implements IField System.ICloneable Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.DataStructureState.html": {
    "href": "api/XData.DataSource.Structure.DataStructureState.html",
    "title": "Class DataStructureState | XData website",
    "keywords": "Class DataStructureState Data structure state Inheritance Object DataStructureState Implements IEquatable < DataStructureState > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax [Serializable] [DataContract] public sealed class DataStructureState : IEquatable<DataStructureState> Properties Alias Subquery alias Declaration [DataMember] public string Alias { get; set; } Property Value Type Description String Context Structure context Declaration [DataMember] public string Context { get; set; } Property Value Type Description String Distinct Distinct flag Declaration [DataMember] public bool Distinct { get; set; } Property Value Type Description Boolean Filters Filter combinations Declaration [DataMember] public FilterCombinationState Filters { get; set; } Property Value Type Description FilterCombinationState FilterValues Filter values Declaration [DataMember] public TaggedValue[] FilterValues { get; set; } Property Value Type Description TaggedValue [] Grouping Grouping Declaration [DataMember] public Grouping[] Grouping { get; set; } Property Value Type Description Grouping [] IsReadOnly Read only flag Declaration [DataMember] public bool IsReadOnly { get; set; } Property Value Type Description Boolean Limit Limit count Declaration [DataMember] public int Limit { get; set; } Property Value Type Description Int32 Name Table name Declaration [DataMember] public string Name { get; set; } Property Value Type Description String OrderBy Order Declaration [DataMember] public Order[] OrderBy { get; set; } Property Value Type Description Order [] Reverse Reverse order flag Declaration [DataMember] public bool Reverse { get; set; } Property Value Type Description Boolean Skip Skip count Declaration [DataMember] public int Skip { get; set; } Property Value Type Description Int32 Sources Dynamic sources states Declaration [DataMember] public DataStructureState[] Sources { get; set; } Property Value Type Description DataStructureState [] SourceTypeType Source type Declaration [DataMember] public DataSourceType SourceTypeType { get; set; } Property Value Type Description DataSourceType StructureType Structure type name Declaration [DataMember] public string StructureType { get; set; } Property Value Type Description String Union Union combination Declaration [DataMember] public DataCombination Union { get; set; } Property Value Type Description DataCombination Variables Variables Declaration [DataMember] public TaggedValue[] Variables { get; set; } Property Value Type Description TaggedValue [] Methods Equals(DataStructureState) DataStructureState equality check Declaration public bool Equals(DataStructureState other) Parameters Type Name Description DataStructureState other DataStructureState instance to compare Returns Type Description Boolean Instances are contains the same data Implements System.IEquatable<T> Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.html": {
    "href": "api/XData.Database.html",
    "title": "Namespace XData.Database | XData website",
    "keywords": "Namespace XData.Database Classes FieldInfo Field information TableInfo Table information XDataContext Data context Provides database adapter and SQL builder access Interfaces ITransaction Transaction wrapper interface Enums DataQueries Static adapter queries enumeration"
  },
  "api/XData.Database.XDataContext.html": {
    "href": "api/XData.Database.XDataContext.html",
    "title": "Class XDataContext | XData website",
    "keywords": "Class XDataContext Data context Provides database adapter and SQL builder access Inheritance Object XDataContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Database Assembly : XData.dll Syntax public sealed class XDataContext Properties ConcurrencyErrorId Concurrency error id Declaration public string ConcurrencyErrorId { get; } Property Value Type Description String ConnectionInfo Context connection information Declaration public XConnectionInfo ConnectionInfo { get; } Property Value Type Description XConnectionInfo DatabaseAdapter Database adapter Declaration public IDatabaseAdapter DatabaseAdapter { get; } Property Value Type Description IDatabaseAdapter DatabaseDialect SQL builder Declaration public ISqlBuilder DatabaseDialect { get; } Property Value Type Description ISqlBuilder DialectName SQL dialect name Declaration public string DialectName { get; } Property Value Type Description String DialectOptions Dialect options supported by context Declaration public DialectOptions DialectOptions { get; } Property Value Type Description DialectOptions Name Context name Declaration public string Name { get; } Property Value Type Description String Proxy Remote proxy Declaration public IProxy Proxy { get; } Property Value Type Description IProxy Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.Dialect.html": {
    "href": "api/XData.Database.Dialect.html",
    "title": "Namespace XData.Database.Dialect | XData website",
    "keywords": "Namespace XData.Database.Dialect Classes BaseSqlBuilder SQL builder base class ExpressionContext SQL expression context XConnectionInfo Context connection info Enums SqlStringType SQL dialect specific format strings types"
  },
  "api/XData.CurrentObjectChanging-1.html": {
    "href": "api/XData.CurrentObjectChanging-1.html",
    "title": "Delegate CurrentObjectChanging<T> | XData website",
    "keywords": "Delegate CurrentObjectChanging<T> Assigning object as current event delegate type Namespace : XData Assembly : XData.dll Syntax public delegate bool CurrentObjectChanging<in T>(T obj) where T : class, IDataObject; Parameters Type Name Description T obj Changing is allowed Returns Type Description Boolean Type Parameters Name Description T Object type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also OnCurrentObjectChanging"
  },
  "api/XData.Mapping.PropertyDefaultAttribute.html": {
    "href": "api/XData.Mapping.PropertyDefaultAttribute.html",
    "title": "Class PropertyDefaultAttribute | XData website",
    "keywords": "Class PropertyDefaultAttribute Data object property default value attribute Inheritance Object System.Attribute PropertyDefaultAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyDefaultAttribute : Attribute Remarks Used to declare default value rule for property Constructors PropertyDefaultAttribute(DefaultType, String) Data object property default value attribute Declaration public PropertyDefaultAttribute(DefaultType source, string val = \"\") Parameters Type Name Description DefaultType source Default value source String val Default value Properties AlwaysUseDefault Always use the default value (also when updating) Declaration public bool AlwaysUseDefault { get; set; } Property Value Type Description Boolean DefaultSource Default value source Declaration public DefaultType DefaultSource { get; } Property Value Type Description DefaultType See Also DefaultType DefaultValue Default value Declaration public string DefaultValue { get; } Property Value Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also DefaultType"
  },
  "api/XData.Mapping.PropertyBaseAttribute.html": {
    "href": "api/XData.Mapping.PropertyBaseAttribute.html",
    "title": "Class PropertyBaseAttribute | XData website",
    "keywords": "Class PropertyBaseAttribute Data property base attribute Inheritance Object System.Attribute PropertyBaseAttribute PropertyAttribute ReferenceAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax public abstract class PropertyBaseAttribute : Attribute Properties Flags Property flags Declaration public DataPropertyFlag Flags { get; set; } Property Value Type Description DataPropertyFlag See Also DataPropertyFlag IsLink Property link flag Declaration public abstract bool IsLink { get; } Property Value Type Description Boolean NativeSqlType Native SQL type name Declaration public string NativeSqlType { get; set; } Property Value Type Description String Remarks Used to specify native SQL column type when conflicted with default type mapping WARNING! May be not supported by database adapter! Source Source alias Declaration public string Source { get; } Property Value Type Description String See Also Alias Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also PropertyAttribute ReferenceAttribute"
  },
  "api/XData.DataSource.Structure.ISqlPart.html": {
    "href": "api/XData.DataSource.Structure.ISqlPart.html",
    "title": "Interface ISqlPart | XData website",
    "keywords": "Interface ISqlPart Subquery base interface Inherited Members IDataSource.SourceType IDataSource.Alias IDataSource.IsBase IDataSource.GetFields() IDataSource.GetFields(Type) IDataSource.GetField(String, String, String) IDataSource.GetField(String, String, String, String) ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface ISqlPart : IDataSource, ICloneable Properties Dynamic Subquery dynamic flag Declaration bool Dynamic { get; } Property Value Type Description Boolean ObjectType Subquery object type name Declaration string ObjectType { get; } Property Value Type Description String Structure Subquery structure Declaration IDataStructure Structure { get; } Property Value Type Description IDataStructure Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.DataSource.Structure.IRuntimeFilter.html": {
    "href": "api/XData.DataSource.Structure.IRuntimeFilter.html",
    "title": "Interface IRuntimeFilter | XData website",
    "keywords": "Interface IRuntimeFilter Runtime filter interface Inherited Members INamedFilter.Name IOptionalFilter.Primary IFilter.FilterType IFilter.SourceAlias IFilter.Field IFilter.Operation ICloneable.Clone() Namespace : XData.DataSource.Structure Assembly : XData.dll Syntax public interface IRuntimeFilter : INamedFilter, IOptionalFilter, IFilter, ICloneable Properties Nullable Null value handling Declaration FilterNullable Nullable { get; } Property Value Type Description FilterNullable Methods GetCaption() Filter caption Declaration string GetCaption() Returns Type Description String Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Database.DataQueries.html": {
    "href": "api/XData.Database.DataQueries.html",
    "title": "Enum DataQueries | XData website",
    "keywords": "Enum DataQueries Static adapter queries enumeration Namespace : XData.Database Assembly : XData.dll Syntax public enum DataQueries Fields Name Description SelectTableColumns Table columns predefined query SelectTableList Tables predefined query See Also SelectTableColumns SelectTableList Extension Methods SerializationExtensions.ToXml<DataQueries>() CollectionsExtensions.SetValue<DataQueries, T>(T) CollectionsExtensions.AsEnum<DataQueries>() DataObjectQueryableExtensions.CompareVariable(FilterOperation, String) TypeExtensions.InvokeMethod<TRet>(Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Expression<Action>, BindingFlags) TypeExtensions.ConvertTo<T>() TypeExtensions.EqualValue(Enum) QueryDescriptionExtensions.SetExpression<DataQueries, TResult>(Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.Dynamic.ILinkPropertyMappingAdapter-1.html": {
    "href": "api/XData.Mapping.Dynamic.ILinkPropertyMappingAdapter-1.html",
    "title": "Interface ILinkPropertyMappingAdapter<T> | XData website",
    "keywords": "Interface ILinkPropertyMappingAdapter<T> Link property mapping adapter Inherited Members IRepositoryPropertyMappingAdapter.Default(DefaultType) IRepositoryPropertyMappingAdapter.Default(DefaultType, Boolean) IRepositoryPropertyMappingAdapter.Default(DefaultType, String) IRepositoryPropertyMappingAdapter.Default(DefaultType, String, Boolean) IRepositoryPropertyMappingAdapter.ConcurrencyToken() IRepositoryPropertyMappingAdapter.OuterFlag() IPropertyMappingAdapter.Key() IPropertyMappingAdapter.Group(DataGrouping) IPropertyMappingAdapter.Group(Int32) IPropertyMappingAdapter.Hidden() Namespace : XData.Mapping.Dynamic Assembly : XData.dll Syntax public interface ILinkPropertyMappingAdapter<T> : IRepositoryPropertyMappingAdapter, IPropertyMappingAdapter where T : class, IDataObject, new() Type Parameters Name Description T Data object type Methods LinkProperty() Link property data association property Declaration IStructureFlag LinkProperty() Returns Type Description IStructureFlag Property description attribute LinkProperty<TSource>(Expression<Func<TSource, Object>>) Link property data association property Declaration IStructureFlag LinkProperty<TSource>(Expression<Func<TSource, object>> source) where TSource : class, IDataObject, new() Parameters Type Name Description Expression < Func <TSource, Object >> source Source dictionary property Returns Type Description IStructureFlag Property description attribute Type Parameters Name Description TSource Source dictionary type LinkProperty<TSource>(Expression<Func<TSource, Object>>, Expression<Func<T, Object>>) Link property data association property Declaration IStructureFlag LinkProperty<TSource>(Expression<Func<TSource, object>> source, Expression<Func<T, object>> property) where TSource : class, IDataObject, new() Parameters Type Name Description Expression < Func <TSource, Object >> source Source dictionary property Expression < Func <T, Object >> property Property Returns Type Description IStructureFlag Property description attribute Type Parameters Name Description TSource Source dictionary type Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.WithRecursiveAttribute.html": {
    "href": "api/XData.Mapping.WithRecursiveAttribute.html",
    "title": "Class WithRecursiveAttribute | XData website",
    "keywords": "Class WithRecursiveAttribute Common-Table-Expression (WITH) recursive subquery data source Inheritance Object System.Attribute WithRecursiveAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class WithRecursiveAttribute : Attribute Constructors WithRecursiveAttribute(String, Type, String) Common-Table-Expression (WITH) Subquery recursive data source constructor Declaration public WithRecursiveAttribute(string alias, Type subqueryType, string initialAlas) Parameters Type Name Description String alias Subquery alias Type subqueryType Subquery type String initialAlas Common-Table-Expression alias Properties Alias Data source alias Declaration public string Alias { get; } Property Value Type Description String InitialAlias Initial Common-Table-Expression (WITH) Subquery alias Declaration public string InitialAlias { get; } Property Value Type Description String SubqueryType Subquery type Declaration public Type SubqueryType { get; } Property Value Type Description Type TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.WithAttribute.html": {
    "href": "api/XData.Mapping.WithAttribute.html",
    "title": "Class WithAttribute | XData website",
    "keywords": "Class WithAttribute Common-Table-Expression (WITH) Subquery data source Inheritance Object System.Attribute DataSourceAttribute WithAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax public sealed class WithAttribute : DataSourceAttribute Constructors WithAttribute(String, Type, WithRecursiveType, String[]) Common-Table-Expression (WITH) Subquery data source constructor Declaration public WithAttribute(string alias, Type subqueryType, WithRecursiveType withType = WithRecursiveType.RecursiveUnion, params string[] properties) Parameters Type Name Description String alias Common-Table-Expression alias Type subqueryType Subquery type WithRecursiveType withType Recursive connection type (if applicable) String [] properties Common-Table-Expression (WITH) Subquery property order Properties Alias Data source alias Declaration public override string Alias { get; protected set; } Property Value Type Description String Overrides DataSourceAttribute.Alias Properties Common-Table-Expression (WITH) Subquery property order Declaration public string[] Properties { get; } Property Value Type Description String [] SubqueryType Subquery type Declaration public Type SubqueryType { get; } Property Value Type Description Type Type Data source type Declaration public override DataSourceType Type { get; } Property Value Type Description DataSourceType Overrides DataSourceAttribute.Type TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId WithType Common-Table-Expression (WITH) Subquery type Declaration public WithRecursiveType WithType { get; } Property Value Type Description WithRecursiveType Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>)"
  },
  "api/XData.Mapping.SubqueryLinkAttribute.html": {
    "href": "api/XData.Mapping.SubqueryLinkAttribute.html",
    "title": "Class SubqueryLinkAttribute | XData website",
    "keywords": "Class SubqueryLinkAttribute Data object link to subquery attribute Inheritance Object System.Attribute FilterBaseAttribute SubqueryLinkAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : XData.Mapping Assembly : XData.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class SubqueryLinkAttribute : FilterBaseAttribute Constructors SubqueryLinkAttribute(String, String, String) Subquery link attribute Declaration public SubqueryLinkAttribute(string subquery, string subqueryProperty, string property = \"\") Parameters Type Name Description String subquery Child source alias String subqueryProperty Child property to link String property Parent property contains value to link Exceptions Type Condition XDataRuntimeException Child source alias cannot be null or empty string XDataRuntimeException Child property to link cannot be null or empty string Properties Combination Filter combination (filter group) name Declaration public string Combination { get; set; } Property Value Type Description String See Also FilterCombinationAttribute FilterType Filter type Declaration public override FilterType FilterType { get; } Property Value Type Description FilterType Overrides FilterBaseAttribute.FilterType See Also FilterType Operation Filter operation Declaration public FilterOperation Operation { get; set; } Property Value Type Description FilterOperation See Also FilterOperation PrimaryFilter Primary filter flag Declaration public bool PrimaryFilter { get; set; } Property Value Type Description Boolean See Also OptionalFilterAttribute PropertyName Parent property Declaration public string PropertyName { get; } Property Value Type Description String Remarks If not assigned used SubqueryProperty name Subquery Child source alias Declaration public string Subquery { get; } Property Value Type Description String See Also Alias SubqueryProperty Child property to link Declaration public string SubqueryProperty { get; } Property Value Type Description String TypeId When implemented in a derived class, gets a unique identifier for this System.Attribute . Declaration public override object TypeId { get; } Property Value Type Description Object An Object that is a unique identifier for the attribute. Overrides Attribute.TypeId Extension Methods SerializationExtensions.ToXml<T>(T) CollectionsExtensions.SetValue<TKey, T>(TKey, T) CollectionsExtensions.AsEnum<T>(T) DataObjectQueryableExtensions.CompareVariable(Object, FilterOperation, String) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>) TypeExtensions.TryConvert<T, TResult>(T, Func<T, TResult>, TResult) TypeExtensions.InvokeMethod<TRet>(Object, Type[], Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Type[], Expression<Action>, BindingFlags) TypeExtensions.InvokeMethod<TRet>(Object, Expression<Func<TRet>>, BindingFlags) TypeExtensions.InvokeMethod(Object, Expression<Action>, BindingFlags) QueryDescriptionExtensions.SetExpression<TTag, TResult>(TTag, Expression<Func<IQueryStructureAdapter, TResult>>) See Also SubqueryAttribute InnerViewAttribute"
  }
}